<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="prj.mkInnoMonCls">
	<!-- 제조혁신 월마감 목록 조회  -->
	<select id="retrieveMkInnoMonClsSearchList" resultType="hashmap" >
	<![CDATA[
	-- retrieveMkInnoMonClsList 제조혁신 월마감 목록 조회
		select    m.wbs_cd 		as wbsCd
				, m.uperDept_nm as uperDeptNm
				, m.tss_Nm 		as tssNm
				, m.tss_strt_dd as tssStrtDd
				, m.tss_fnh_dd 	as tssFnhDd
				, m.sa_name 	as saName
				, m.to_mon		as toMon
				, case when m.to_mon_cls = 'Y' then '마감완료'
				         else '진행' end  toMonClsNm
				, case when m.before_mon_cls = 'Y' then '완료'
				         else '미완료' end  beforeMonClsNm
				,dbo.fn_getComDtlNm('MK_ST_CD', before_mk_st_cd)  as beforeMkStNm   
				, m.before_mk_st_cd as beforeMkStCd
				, m.uper_dept_cd	as uperDeptCd
				, m.dept_code		as deptCode
				, m.tss_cd			as tssCd	
				, m.dept_nm         as deptNm
		from  (		
				select 	  a.tss_cd
						 ,a.wbs_cd
						 ,dbo.fn_getDeptName(a.dept_code) as uperDept_nm
						 ,dbo.fn_getDeptName(c.dept_cd) as dept_nm
						 ,a.tss_nm
						 ,a.tss_strt_dd
						 ,a.tss_fnh_dd
						 ,(select sa_name from IRIS_SSO_USER where sa_sabun_new = a.SA_SABUN_NEW) as sa_name
						 ,a.sa_sabun_new
						 ,isnull(b.cls_yymm, '') 	as to_mon
						 ,isnull(b.MK_INNO_CLS, '') as to_mon_cls
						 ,isnull(b.MK_ST_CD, '')   as to_mk_st_cd
						 ,isnull(d.cls_yymm, '')  	as before_mon
						 ,isnull(d.MK_INNO_CLS, '') as before_mon_cls
						 ,isnull(d.MK_ST_CD, '')   as before_mk_st_cd
						 ,a.dept_code 				as uper_dept_cd
						 ,c.dept_cd 				as dept_code
				from  IRIS_TSS_MGMT_MST a
						 inner join iris_prj_rsst_mst c
						 on c.prj_cd = a.prj_cd
						 left outer join IRIS_MK_INNO_CLS b
						 on a.tss_cd = b.tss_cd
						 and  b.cls_yymm = convert(varchar(7),  GETDATE() ,23)
						 left outer join IRIS_MK_INNO_CLS d
						 on  a.tss_cd = d.tss_cd
						 and  d.cls_yymm = CONVERT(NVARCHAR(7), DATEADD(MM, -1, GETDATE()), 23)
				where   a.tss_scn_cd ='M'
				and      a.tss_cd in (select tss_cd from IRIS_TSS_MGMT_MST where tss_scn_cd ='M' and pgs_step_cd ='PG')
				)  m
		where 1=1	
	]]>
	    <if test="roleCheck.equals('PER')">
	    and  m.dept_code = #{_teamDept}
	    </if>
	</select>

	<!-- 제조혁신과제 월마감 상세조회  -->
	<select id="retrieveMkInnoMonClsDtl" resultType="hashmap" >
		<![CDATA[
		-- retrieveMkInnoMonClsDtl 제조혁신과제 월마감 상세조회
		select   m.wbs_cd as wbsCd
		         ,m.TSS_NM  as tssNm
				 ,m.sa_name as saName
				 ,m.uperDept_Nm as uperdeptNm
				 ,case when m.before_Cls_cd = 'Y' then '완료'
				         else '미완료' end as  beforeClsNm
				,m.CLS_YYMM as clsYymm
				,m.MK_ST_CD as mkStCd
				,m.FNO_PLN   as fnoPln
				,m.TSS_CLS_SBC as tssClsSbc
				,m.ATTC_FIL_ID as attcFilId
				,m.TSS_CD	 as tssCd
				,m.searchMonth	 
		from (
				select    a.WBS_CD
						 ,a.TSS_NM
						 ,(select sa_name from IRIS_SSO_USER where sa_sabun_new = a.SA_SABUN_NEW) as sa_name
						 ,dbo.fn_getDeptName(a.dept_code) as uperDept_Nm
						 ,isnull(c.MK_INNO_CLS, '') as before_Cls_cd
						 ,isnull(b.CLS_YYMM, #{searchMonth}) as CLS_YYMM
						 ,isnull(b.MK_ST_CD, '') as MK_ST_CD
						 ,isnull(b.FNO_PLN, '') as FNO_PLN
						 ,isnull(b.TSS_CLS_SBC, '') as TSS_CLS_SBC
						 ,isnull(b.ATTC_FIL_ID, '') as ATTC_FIL_ID
						 ,a.TSS_CD
						 ,#{searchMonth} as searchMonth
				from   IRIS_TSS_MGMT_MST a
						  left outer join IRIS_MK_INNO_CLS b
						  on b.tss_cd = a.tss_cd
						  and b.CLS_YYMM = #{searchMonth}
						  left outer join IRIS_MK_INNO_CLS c
						  on b.tss_cd = c.tss_cd
						  and c.CLS_YYMM = CONVERT(NVARCHAR(7), DATEADD(MM, -1, #{searchMonth}+'-01 00:00:00'), 23)
				where a.tss_cd = #{tssCd} 
				) m
		]]>
	</select>


	<!-- 제조혁신과제 월마감 등록  -->
	<update id="updateMkInnoMonClsInfo">
	<![CDATA[
	-- updateMkInnoMonClsInfo 제조혁신과제 월마감 등록
		MERGE IRIS_MK_INNO_CLS m
		using    ( select #{tssCd} as tssCd , #{clsYymm} as clsYymm  ) n
		on      m.tss_cd = n.tssCd
		and     m.CLS_YYMM = n.clsYymm
		WHEN MATCHED THEN
		update set  MK_ST_CD 		= #{mkStCd}
	                ,CLS_YYMM 		= #{clsYymm}
	                ,FNO_PLN		= #{fnoPln}
	                ,TSS_CLS_SBC 	= #{tssClsSbc}
	                ,ATTC_FIL_ID 	= #{attcFilId}
					,LAST_MDFY_DT  	= getdate()
					,LAST_MDFY_ID  	= #{userId}				
		WHEN NOT MATCHED THEN
		INSERT (				
			 tss_cd 
			,MK_INNO_CLS
			,MK_ST_CD 
			,CLS_YYMM 
			,FNO_PLN
			,TSS_CLS_SBC
			,ATTC_FIL_ID
			,FRST_RGST_DT
			,FRST_RGST_ID
			,LAST_MDFY_DT
			,LAST_MDFY_ID
		)values
			(
			 #{tssCd}  
			,'Y'
			,#{mkStCd}
			,#{clsYymm}
			,#{fnoPln}
			,#{tssClsSbc}
			,#{attcFilId}
			, getdate()
			,#{userId}
			, getdate()
			,#{userId}
		);
	]]>
	</update>


</mapper>