<?xml version="1.0" encoding="EUC-KR"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="prj.tss.gen.altr">
    <!--========================== 일반과제_변경_마스터 ==========================-->


    <!--========================== 일반과제_변경_변경개요 ==========================-->
    <!-- 개요 신규 -->
    <insert id="insertGenTssAltrSmry">
    <![CDATA[
    -- insertGenTssAltrSmry 개요 신규
        INSERT
          INTO IRIS_TSS_GEN_SMRY  /*일반과제개요*/
             ( TSS_CD             --과제코드
             , SMRY_N_TXT         --Needs
             , SMRY_A_TXT         --Approach
             , SMRY_B_TXT         --Benefit
             , SMRY_C_TXT         --Competition
             , SMRY_D_TXT         --Deliverables
             , MRKT_SCL_TXT       --시장규모
             , BIZ_PRFT_PRO       --영업이익율
             , CTY_OT_PLN_M       --상품출시변경월
             , SMR_SMRY_TXT
			 , SMR_GOAL_TXT
			 , BIZ_PRFT_PRO_Y
			 , BIZ_PRFT_PRO_Y_1
			 , BIZ_PRFT_PRO_Y_2
			 , BIZ_PRFT_PRO_Y_3
			 , BIZ_PRFT_PRO_Y_4
             , BIZ_PRFT_PLN_Y
			 , BIZ_PRFT_PLN_Y_1
			 , BIZ_PRFT_PLN_Y_2
			 , NPROD_SALS_PLN_Y   --신제품매출변경Y
             , NPROD_SALS_PLN_Y_1 --신제품매출변경Y+1
             , NPROD_SALS_PLN_Y_2 --신제품매출변경Y+2
             , NPROD_SALS_PLN_Y_3 --신제품매출변경Y+3
             , NPROD_SALS_PLN_Y_4 --신제품매출변경Y+4
             , PTC_CPSN_Y         --투입인원수Y
             , PTC_CPSN_Y_1       --투입인원수Y+1
             , PTC_CPSN_Y_2       --투입인원수Y+2
             , PTC_CPSN_Y_3       --투입인원수Y+3
             , PTC_CPSN_Y_4       --투입인원수Y+4
			 , EXP_ARSL_Y   
             , EXP_ARSL_Y_1 
             , EXP_ARSL_Y_2 
             , EXP_ARSL_Y_3 
             , EXP_ARSL_Y_4 
			 , TSS_SMRY_TXT            --과제개요 - 연구과제배경
             , TSS_SMRY_DVLP_TXT       --과제개요 - 주요연구개발내용
             , RSST_DVLP_OUCM_TXT      --연구개발성과 - 지재권
             , RSST_DVLP_OUCM_CTQ_TXT  --연구개발성과 - CTQ
             , RSST_DVLP_OUCM_EFF_TXT  --연구개발성과 - 파급효과
             , NPROD_NM                --신제품명
             , ANCP_OT_PLN_DT          --예상출시일(계획)
             , Qgate3_DT               --Qgate3(품질평가단계) 패스일자
             , FWD_PLN_TXT             --사업화출시계획
             , FNO_PLN_TXT             --향후 계획
             , ALTR_RSON_TXT           --변경사유
             , ADD_RSON_TXT            --추가사유
             , DCAC_RSON_TXT           --중단사유
             , ATTC_FIL_ID             --첨부파일
             , ALTR_ATTC_FIL_ID             --첨부파일
             , CMPL_ATTC_FIL_ID             --첨부파일
             , DCAC_ATTC_FIL_ID             --첨부파일
             , PMIS_TXT
             , FRST_RGST_DT       --최초등록일시
             , FRST_RGST_ID       --최초등록자
             , LAST_MDFY_DT       --최종수정일시
             , LAST_MDFY_ID       --최종수정자
             )
        SELECT #{tssCd}
             , SMRY_N_TXT
             , SMRY_A_TXT
             , SMRY_B_TXT
             , SMRY_C_TXT
             , SMRY_D_TXT
             , MRKT_SCL_TXT
             , BIZ_PRFT_PRO
             , #{ancpOtPlnDt} 
             , SMR_SMRY_TXT
			 , SMR_GOAL_TXT
			 , CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY}	 = '' THEN '0' ELSE #{bizPrftProY}  END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY1} = '' THEN '0' ELSE #{bizPrftProY1} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY2} = '' THEN '0' ELSE #{bizPrftProY2} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY3} = '' THEN '0' ELSE #{bizPrftProY3} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY4} = '' THEN '0' ELSE #{bizPrftProY4} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{bizPrftPlnY} = '' THEN '0' ELSE #{bizPrftPlnY} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{bizPrftPlnY1} = '' THEN '0' ELSE #{bizPrftPlnY1} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{bizPrftPlnY2} = '' THEN '0' ELSE #{bizPrftPlnY2} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY} = '' THEN '0' ELSE #{nprodSalsPlnY} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY1} = '' THEN '0' ELSE #{nprodSalsPlnY1} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY2} = '' THEN '0' ELSE #{nprodSalsPlnY2} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY3} = '' THEN '0' ELSE #{nprodSalsPlnY3} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY4} = '' THEN '0' ELSE #{nprodSalsPlnY4} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnY} = '' THEN '0' ELSE #{ptcCpsnY} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnY1} = '' THEN '0' ELSE #{ptcCpsnY1} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnY2} = '' THEN '0' ELSE #{ptcCpsnY2} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnY3} = '' THEN '0' ELSE #{ptcCpsnY3} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnY4} = '' THEN '0' ELSE #{ptcCpsnY4} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{expArslY} = '' THEN '0' ELSE #{expArslY} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{expArslY1} = '' THEN '0' ELSE #{expArslY1} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{expArslY2} = '' THEN '0' ELSE #{expArslY2} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{expArslY3} = '' THEN '0' ELSE #{expArslY3} END)
			 , CONVERT(numeric(15, 2), CASE WHEN #{expArslY4} = '' THEN '0' ELSE #{expArslY4} END)
             , TSS_SMRY_TXT
             , TSS_SMRY_DVLP_TXT
             , RSST_DVLP_OUCM_TXT
             , RSST_DVLP_OUCM_CTQ_TXT
             , RSST_DVLP_OUCM_EFF_TXT
             , NPROD_NM
             , #{ancpOtPlnDt}
             , Qgate3_DT
             , FWD_PLN_TXT
             , FNO_PLN_TXT
             , ALTR_RSON_TXT
             , ADD_RSON_TXT
             , DCAC_RSON_TXT
             , ATTC_FIL_ID
             , CASE WHEN ISNULL(#{altrAttcFilId}, '') = '' THEN ATTC_FIL_ID ELSE #{altrAttcFilId} END
             , CMPL_ATTC_FIL_ID
             , DCAC_ATTC_FIL_ID
             , PMIS_TXT
             , GETDATE()
             , #{userId}
             , GETDATE()
             , #{userId}
          FROM IRIS_TSS_GEN_SMRY
         WHERE TSS_CD = #{pgTssCd}
    ]]>
    </insert>


    <!-- 개요 수정(변경탭) -->
    <update id="updateGenTssAltrSmry1">
    <![CDATA[
    -- updateGenTssAltrSmry1 개요 수정(변경탭)
        UPDATE IRIS_TSS_GEN_SMRY  /*일반과제개요*/
           SET ALTR_RSON_TXT    = #{altrRsonTxt}
             , ADD_RSON_TXT     = #{addRsonTxt}
             , LAST_MDFY_DT     = GETDATE()
             , LAST_MDFY_ID     = #{userId}
         WHERE TSS_CD = #{tssCd}
    ]]>
    </update>


    <!-- 개요 수정(개요탭) -->
    <update id="updateGenTssAltrSmry2">
    <![CDATA[
    -- updateGenTssAltrSmry2 개요 수정(개요탭)
        UPDATE IRIS_TSS_GEN_SMRY  /*일반과제개요*/
           SET SMRY_N_TXT         = #{smryNTxt}                                                                                   --Needs
             , SMRY_A_TXT         = #{smryATxt}                                                                                   --Approach
             , SMRY_B_TXT         = #{smryBTxt}                                                                                   --Benefit
             , SMRY_C_TXT         = #{smryCTxt}                                                                                   --Competition
             , SMRY_D_TXT         = #{smryDTxt}                                                                                   --Deliverables
             , MRKT_SCL_TXT       = #{mrktSclTxt}                                                                                 --시장규모
             , SMR_SMRY_TXT		  = #{smrSmryTxt}
			 , SMR_GOAL_TXT       = #{smrGoalTxt}
             , PMIS_TXT           = #{pmisTxt}
             , LAST_MDFY_DT       = GETDATE()
             , LAST_MDFY_ID       = #{userId}
         WHERE TSS_CD = #{tssCd}
    ]]>
    </update>


    <!-- 변경개요목록 조회 -->
    <select id="retrieveGenTssAltrSmryList" resultType="hashmap">
    <![CDATA[
    -- retrieveGenTssAltrSmryList 변경개요목록 조회
        SELECT TSS_CD       AS tssCd      --과제코드
             , ALTR_SN      AS altrSn     --변경일련번호
             , PRVS         AS prvs       --항목
             , ALTR_PRE     AS altrPre    --변경전
             , ALTR_AFT     AS altrAft    --변경후
             , #{_userId}   AS userId
          FROM IRIS_TSS_SMRY_ALTR_LIST  /*변경개요 목록*/
         WHERE 1=1
    ]]>
    <choose>
		<when test="tssCd == '' ||  tssCd == null ">
         and   TSS_CD = '1'
       </when>
		<otherwise>  
         and   TSS_CD = #{tssCd}
         </otherwise>
	</choose>	
	
    </select>


    <!-- 변경개요목록 수정 -->
    <update id="updateGenTssAltrSmryList">
    <![CDATA[
    -- updateGenTssAltrSmryList 변경개요목록 수정
         MERGE IRIS_TSS_SMRY_ALTR_LIST A  /*변경개요 목록*/
         USING (SELECT #{tssCd} AS TSS_CD, CONVERT(numeric, CASE WHEN #{altrSn} = '' THEN NULL ELSE #{altrSn} END) AS ALTR_SN) B
            ON A.TSS_CD  = B.TSS_CD
           AND A.ALTR_SN = B.ALTR_SN
          WHEN NOT MATCHED THEN
        INSERT
             ( TSS_CD        --과제코드
             , ALTR_SN       --변경일련번호
             , PRVS          --항목
             , ALTR_PRE      --변경전
             , ALTR_AFT      --변경후
             , FRST_RGST_DT  --최초등록일시
             , FRST_RGST_ID  --최초등록자
             , LAST_MDFY_DT  --최종수정일시
             , LAST_MDFY_ID  --최종수정자
             )
        VALUES
             ( #{tssCd}
             , (SELECT ISNULL(MAX(X.ALTR_SN), 0) + 1 FROM IRIS_TSS_SMRY_ALTR_LIST X WHERE X.TSS_CD = #{tssCd})
             , #{prvs}
             , #{altrPre}
             , #{altrAft}
             , GETDATE()
             , #{userId}
             , GETDATE()
             , #{userId}
             )
          WHEN MATCHED THEN
        UPDATE
           SET PRVS         = #{prvs}
             , ALTR_PRE     = #{altrPre}
             , ALTR_AFT     = #{altrAft}
             , LAST_MDFY_DT = GETDATE()
             , LAST_MDFY_ID = #{userId}
             ;
    ]]>
    </update>


    <!-- 변경개요목록 삭제 -->
    <delete id="deleteGenTssAltrSmryList">
    <![CDATA[
    -- deleteGenTssAltrSmryList 변경개요목록 삭제
        DELETE
          FROM IRIS_TSS_SMRY_ALTR_LIST  /*변경개요 목록*/
         WHERE TSS_CD  = #{tssCd}
           AND ALTR_SN = #{altrSn}
    ]]>
    </delete>



    <!--========================== 일반과제_변경_참여연구원 ==========================-->
    <!-- 참여연구원 신규 -->
    <insert id="insertGenTssAltrPtcRsstMbr">
    <![CDATA[
    -- insertGenTssAltrPtcRsstMbr 참여연구원 신규
        INSERT
          INTO IRIS_TSS_PTC_RSST_MBR  /*과제참여연구원*/
             ( TSS_CD             --과제코드
             , PTC_RSST_MBR_SN    --참여연구원일련번호
             , SA_SABUN_NEW       --연구원사번
             , DEPT_CODE          --소속
             , PTC_STRT_DT        --참여시작일
             , PTC_FNH_DT         --참여종료일
             , PTC_ROLE           --참여역할
             , PTC_ROLE_DTL       --참여역할상세
             , PTC_PRO            --참여율
             , FRST_RGST_DT       --최초등록일시
             , FRST_RGST_ID       --최초등록자
             , LAST_MDFY_DT       --최종수정일시
             , LAST_MDFY_ID       --최종수정자
             )
        SELECT #{tssCd}
             , PTC_RSST_MBR_SN
             , SA_SABUN_NEW
             , DEPT_CODE
             , PTC_STRT_DT
             , PTC_FNH_DT
             , PTC_ROLE
             , PTC_ROLE_DTL
             , PTC_PRO
             , GETDATE()
             , #{userId}
             , GETDATE()
             , #{userId}
          FROM IRIS_TSS_PTC_RSST_MBR
         WHERE TSS_CD = #{pgTssCd}
    ]]>
    </insert>



    <!--========================== 일반과제_변경_WBS ==========================-->
    <!-- WBS 신규 -->
    <insert id="insertGenTssAltrWBS">
    <![CDATA[
    -- insertGenTssAltrWBS WBS 신규
        INSERT
          INTO IRIS_TSS_GEN_WBS  /*일반과제WBS*/
             ( TSS_CD          --과제코드
             , WBS_SN          --WBS일련번호
             , PID_SN          --PID
             , DEPTH           --DEPTH
             , DEPTH_SEQ       --순서
             , TSS_NM          --과제명
             , STRT_DT         --시작일
             , FNH_DT          --종료일
             , WGVL            --가중치
             , SA_SABUN_NEW    --담당자
             , VRF_YN          --검증
             , ARSL_CD         --실적코드
             , YLD_ITM_NM      --산출물명
             , YLD_ITM_TXT     --산출물내용
             , KWD_TXT         --키워드
             , ATTC_FIL_ID     --첨부파일
             , FRST_RGST_DT    --최초등록일시
             , FRST_RGST_ID    --최초등록자
             , LAST_MDFY_DT    --최종수정일시
             , LAST_MDFY_ID    --최종수정자
             )
        SELECT #{tssCd}
             , WBS_SN
             , PID_SN
             , DEPTH
             , DEPTH_SEQ
             , TSS_NM
             , STRT_DT
             , FNH_DT
             , WGVL
             , SA_SABUN_NEW
             , VRF_YN
             , ARSL_CD
             , YLD_ITM_NM
             , YLD_ITM_TXT
             , KWD_TXT
             , ATTC_FIL_ID
             , GETDATE()
             , #{userId}
             , GETDATE()
             , #{userId}
          FROM IRIS_TSS_GEN_WBS
         WHERE TSS_CD = #{pgTssCd}
    ]]>
    </insert>


    <!-- WBS 조회 -->
    <select id="retrieveGenTssAltrWBS" resultType="hashmap">
    <![CDATA[
    -- retrieveGenTssAltrWBS WBS 조회
WITH w_WBS AS (
        SELECT TSS_CD       AS tssCd      --과제코드
             , WBS_SN       AS wbsSn      --WBS일련번호
             , PID_SN       AS pidSn      --PID
             , DEPTH        AS depth      --DEPTH
             , DEPTH_SEQ    AS depthSeq   --순서
             , TSS_NM       AS tssNm      --과제명
             , STRT_DT      AS strtDt     --시작일
             , FNH_DT       AS fnhDt      --종료일
             , STRT_DT      AS oldStrtDt
             , FNH_DT       AS oldFnhDt
             , WGVL         AS wgvl       --가중치
             , sa_sabun_new AS saSabunNew --담당자
             , ISNULL(dbo.fn_getNameOnTssPgsStep(TSS_CD, 'USER', sa_sabun_new) , SA_SABUN_NAME) AS saSabunNewNm --과제리더명
             , VRF_YN       AS vrfYn      --검증
             , ARSL_CD      AS arslCd     --실적코드
             , YLD_ITM_NM   AS yldItmNm   --산출물명
             , YLD_ITM_TXT  AS yldItmTxt  --산출물내용
             , KWD_TXT      AS kwdTxt     --키워드
             , ATTC_FIL_ID  AS attcFilId  --파일ID
             , DATEDIFF(DD, CONVERT(DATE, STRT_DT), CONVERT(DATE, FNH_DT)) + 1 AS period --기간
             , CASE WHEN DEPTH = 0 THEN WBS_SN
                    WHEN DEPTH = 1 THEN PID_SN
                    WHEN DEPTH = 2 THEN (SELECT X.PID_SN FROM IRIS_TSS_GEN_WBS X WHERE X.TSS_CD = #{tssCd} AND X.WBS_SN = A.PID_SN )
                    WHEN DEPTH = 3 THEN (SELECT Y.PID_SN FROM IRIS_TSS_GEN_WBS Y WHERE Y.TSS_CD = #{tssCd}
                                            AND Y.WBS_SN = (SELECT X.PID_SN FROM IRIS_TSS_GEN_WBS X WHERE X.TSS_CD = #{tssCd} AND X.WBS_SN = A.PID_SN))
                    END AS pidSeq
             , #{_userId}   AS userId
          FROM IRIS_TSS_GEN_WBS A  /*일반과제WBS*/
         WHERE A.TSS_CD = #{tssCd}
    --     ORDER BY pidSeq, depthSeq
   )SELECT DENSE_RANK() OVER( ORDER BY  pidSeq )  AS drRow
    , w.*
    FROM w_WBS w  ORDER BY depthSeq
    ]]>
    </select>


    <!-- WBS 삭제 -->
    <delete id="deleteGenTssAltrWBSOfTssCd">
    <![CDATA[
    -- deleteGenTssAltrWBSOfTssCd WBS 삭제
        DELETE
          FROM IRIS_TSS_GEN_WBS  /*일반과제WBS*/
         WHERE TSS_CD = #{tssCd}
    ]]>
    </delete>


    <!--========================== 일반과제_변경_목표및산출물 ==========================-->
    <!-- 목표 신규 -->
    <insert id="insertGenTssAltrGoal">
    <![CDATA[
    -- insertGenTssAltrGoal 목표 신규
        INSERT
          INTO IRIS_TSS_GOAL_ARSL  /*과제목표_실적*/
             ( TSS_CD        --과제코드
             , GOAL_ARSL_SN  --과제목표일련번호
             , PRVS          --항목
             , CUR           --현재
             , GOAL          --목표
             , ARSL          --실적
             , STEP          --단계
             , UTM           --단위
             , EV_WAY        --평가방법
             , ACHV_L        --
             , FRST_RGST_ID  --최초등록자
             , FRST_RGST_DT  --최초등록일시
             , LAST_MDFY_ID  --최종수정자
             , LAST_MDFY_DT  --최종수정일시
             )
        SELECT #{tssCd}
             , GOAL_ARSL_SN
             , PRVS
             , CUR
             , GOAL
             , ARSL
             , STEP
             , UTM
             , EV_WAY
             , ACHV_L
             , #{userId}
             , GETDATE()
             , #{userId}
             , GETDATE()
          FROM IRIS_TSS_GOAL_ARSL
         WHERE TSS_CD = #{pgTssCd}
    ]]>
    </insert>


    <!-- 산출물 신규 -->
    <insert id="insertGenTssAltrYld">
    <!-- insertGenTssAltrYld 산출물 신규 -->
    <![CDATA[
        INSERT
          INTO IRIS_TSS_YLD_ITM  /*과제산출물*/
             ( TSS_CD          --과제코드
             , YLD_ITM_SN      --과제산출물일련번호
             , GOAL_Y          --목표년도
             , YLD_ITM_TYPE    --산출물유형
             , GOAL_CT         --목표개수
             , ARSL_YYMM       --실적년월
             , YLD_ITM_NM      --산출물명
             , YLD_ITM_TXT     --산출물내용
             , ATTC_FIL_ID     --첨부파일
             , FRST_RGST_ID    --최초등록자
             , FRST_RGST_DT    --최초등록일시
             , LAST_MDFY_ID    --최종수정자
             , LAST_MDFY_DT    --최종수정일시
             )
        SELECT #{tssCd}
             , YLD_ITM_SN
             , GOAL_Y
             , YLD_ITM_TYPE
             , GOAL_CT
             , ARSL_YYMM
             , YLD_ITM_NM
             , YLD_ITM_TXT
             , ATTC_FIL_ID
             , #{userId}
             , GETDATE()
             , #{userId}
             , GETDATE()
          FROM IRIS_TSS_YLD_ITM
         WHERE TSS_CD = #{pgTssCd}
    ]]>
    </insert>



    <!--================== 투입예산 ==================-->

   <insert id="insertGenTssTrwlBudgList">
   -- insertGenTssTrwlBudgList 투입예산
   			INSERT INTO IRIS_TSS_GEN_TRWI_BUDG_LIST
		           (TSS_CD
		           ,YY_MM
		           ,EXP_SCN_CD
		           ,PLN_EXP
		           ,ARSL_EXP
		           ,FRST_RGST_ID
		           ,FRST_RGST_DT
		           ,LAST_MDFY_ID
		           ,LAST_MDFY_DT
		           )
		     SELECT #{tssCd}
		           ,YY_MM
		           ,EXP_SCN_CD
		           ,PLN_EXP
		           ,ARSL_EXP
		           ,#{userId}
		           ,GETDATE()
		           ,#{userId}
		           ,GETDATE()
		       FROM IRIS_TSS_GEN_TRWI_BUDG_LIST
		      WHERE TSS_CD = #{pgTssCd}
    </insert>


    <insert id="insertGenTssTrwlBudgMst">
    -- insertGenTssTrwlBudgMst
   		INSERT
		  INTO IRIS_TSS_GEN_TRWI_BUDG_MST
		     ( TSS_CD
		     , PUR_Y
		     , CPSN
		     , IVST
		     , STUF_EXP
		     , QLTY_CKU
		     , MK_MDFY
		     , FP_BRKD
		     , PSNN_RISN_PRO
		     , PCE_RISN_PRO
		     , FRST_RGST_DT
		     , FRST_RGST_ID
		     , LAST_MDFY_DT
		     , LAST_MDFY_ID
		     )
		SELECT #{tssCd}
		     , PUR_Y
		     , CPSN
		     , IVST
		     , STUF_EXP
		     , QLTY_CKU
		     , MK_MDFY
		     , FP_BRKD
		     , PSNN_RISN_PRO
		     , PCE_RISN_PRO
		     , GETDATE()
		     , #{userId}
		     , GETDATE()
		     , #{userId}
		  FROM IRIS_TSS_GEN_TRWI_BUDG_MST
		 WHERE TSS_CD = #{pgTssCd}
    </insert>


    <!-- 투입예산 생성 -->
    <select id="insertGenTssAltrTrwiBudg" resultType="hashmap" statementType="CALLABLE">
    <![CDATA[
    -- insertGenTssAltrTrwiBudg 투입예산 생성
        DECLARE @return_value CHAR
        EXEC dbo.sp_genTssPlnTrwiBudgAltr #{tssCd}, #{userId}, @return_value OUTPUT
        SELECT @return_value AS rtVal
    ]]>
    </select>



    <!--================== 일반과제_변경_품의서 ==================-->
    <!-- 투입예산 조회 -->
    <select id="retrieveGenTssAltrBudgGroupYy" resultType="hashmap">
        <![CDATA[
        -- retrieveGenTssAltrBudgGroupYy 투입예산 조회
        WITH BUDG_LIST AS (
            SELECT ${pivotTitle}
                 , ${pivotSum} AS totSum
                 , COM_DTL_NM  AS expScnNm
                 , COM_DTL_CD  AS expScnCd
              FROM (SELECT SUM(A.PLN_EXP) AS PLN_EXP, C.COM_DTL_NM, C.COM_DTL_CD
                         , SUBSTRING(YY_MM, 1, 4) AS YY_MM
                      FROM IRIS_TSS_GEN_TRWI_BUDG_LIST A  WITH (NOLOCK)
                         , IRIS_ADM_COM_CD B
                         , IRIS_ADM_COM_CD C
                     WHERE A.EXP_SCN_CD = B.COM_DTL_CD
                       AND B.COM_CD_CD = C.COM_CD_CD
                       AND SUBSTRING(B.COM_DTL_CD, 1, 2) = C.COM_DTL_CD
                       AND A.TSS_CD = #{tssCd}
                       AND B.COM_CD_CD = 'EXP_SCN_CD'
                     GROUP BY C.COM_DTL_NM, C.COM_DTL_CD, SUBSTRING(YY_MM, 1, 4)
                   ) AS X
             PIVOT (SUM(X.PLN_EXP) FOR YY_MM IN(${pivotTitle})) Y
        )
        SELECT expScnNm
             , ROUND(totSum, 0) AS totSum
             , ${unionTitle}
             , expScnCd
             , 1 AS uniSort
          FROM BUDG_LIST
         UNION ALL
        SELECT '합계'
             , ROUND(SUM(totSum), 0)
             , ${unionSum}
             , '00'
             , 2
          FROM BUDG_LIST
         ORDER BY uniSort, expScnCd
        ]]>
    </select>


    <update id="updateGenTssMgmtMstToSelect">
    -- updateGenTssMgmtMstToSelect
        UPDATE IRIS_TSS_MGMT_MST
           SET dept_code    = t2.dept_code
             , wbs_cd       = t2.wbs_cd
             , pk_wbs_cd    = t2.pk_wbs_cd
             , PPSL_MBD_CD  = t2.PPSL_MBD_CD
             , BIZ_DPT_CD   = t2.BIZ_DPT_CD
             , TSS_NM       = t2.TSS_NM
             , sa_sabun_new = t2.sa_sabun_new
             , TSS_ATTR_CD  = t2.TSS_ATTR_CD
             , TSS_STRT_DD  = t2.TSS_STRT_DD
             , TSS_FNH_DD   = t2.TSS_FNH_DD
             , PROD_G       = t2.PROD_G
             , RSST_SPHE    = t2.RSST_SPHE
             , TSS_TYPE     = t2.TSS_TYPE
             , PRJ_CD       = t2.PRJ_CD
             , SUPV_OPS_NM  = t2.SUPV_OPS_NM
             , EXRS_INST_NM = t2.EXRS_INST_NM
             , BIZ_NM       = t2.BIZ_NM
             , LAST_MDFY_DT = GETDATE()
             , LAST_MDFY_ID = #{userId}
          FROM IRIS_TSS_MGMT_MST T1
             , (SELECT dept_code, PPSL_MBD_CD, BIZ_DPT_CD, TSS_NM
                     , sa_sabun_new, TSS_ATTR_CD, TSS_STRT_DD
                     , TSS_FNH_DD
                     , wbs_cd, pk_wbs_cd, PROD_G, RSST_SPHE, TSS_TYPE
                     , PRJ_CD, SUPV_OPS_NM, EXRS_INST_NM, BIZ_NM
                  FROM IRIS_TSS_MGMT_MST
                 WHERE tss_cd = #{tssCd}
               ) t2
         WHERE t1.pk_wbs_cd = t2.pk_wbs_cd
           and t1.tss_cd = #{psTssCd}
    </update>


    <update id="updateGenTssSmryToSelect">
    -- updateGenTssSmryToSelect
        UPDATE T1
           SET t1.SMRY_N_TXT          = t2.SMRY_N_TXT
             , t1.SMRY_A_TXT          = t2.SMRY_A_TXT
             , t1.SMRY_B_TXT          = t2.SMRY_B_TXT
             , t1.SMRY_C_TXT          = t2.SMRY_C_TXT
             , t1.SMRY_D_TXT          = t2.SMRY_D_TXT
             , t1.MRKT_SCL_TXT        = t2.MRKT_SCL_TXT
             , t1.BIZ_PRFT_PRO        = t2.BIZ_PRFT_PRO
             , t1.CTY_OT_PLN_M        = t2.ANCP_OT_PLN_DT
			 , t1.ANCP_OT_PLN_DT      = t2.ANCP_OT_PLN_DT
             , t1.SMR_SMRY_TXT        = t2.SMR_SMRY_TXT
             , t1.SMR_GOAL_TXT        = t2.SMR_GOAL_TXT
             , t1.BIZ_PRFT_PLN_Y      = t2.BIZ_PRFT_PLN_Y
             , t1.BIZ_PRFT_PLN_Y_1    = t2.BIZ_PRFT_PLN_Y_1
             , t1.BIZ_PRFT_PLN_Y_2    = t2.BIZ_PRFT_PLN_Y_2
             , t1.BIZ_PRFT_PRO_Y      = t2.BIZ_PRFT_PRO_Y
             , t1.BIZ_PRFT_PRO_Y_1    = t2.BIZ_PRFT_PRO_Y_1
             , t1.BIZ_PRFT_PRO_Y_2    = t2.BIZ_PRFT_PRO_Y_2
             , t1.BIZ_PRFT_PRO_Y_3    = 0.00
             , t1.BIZ_PRFT_PRO_Y_4    = 0.00
             , t1.NPROD_SALS_PLN_Y    = t2.NPROD_SALS_PLN_Y
             , t1.NPROD_SALS_PLN_Y_1  = t2.NPROD_SALS_PLN_Y_1
             , t1.NPROD_SALS_PLN_Y_2  = t2.NPROD_SALS_PLN_Y_2
             , t1.NPROD_SALS_PLN_Y_3  = 0.00
             , t1.NPROD_SALS_PLN_Y_4  = 0.00
             , t1.PTC_CPSN_Y          = t2.PTC_CPSN_Y
             , t1.PTC_CPSN_Y_1        = t2.PTC_CPSN_Y_1
             , t1.PTC_CPSN_Y_2        = t2.PTC_CPSN_Y_2
             , t1.PTC_CPSN_Y_3        = t2.PTC_CPSN_Y_3
             , t1.PTC_CPSN_Y_4        = t2.PTC_CPSN_Y_4
             , t1.EXP_ARSL_Y          = t2.EXP_ARSL_Y
             , t1.EXP_ARSL_Y_1        = t2.EXP_ARSL_Y_1
             , t1.EXP_ARSL_Y_2        = t2.EXP_ARSL_Y_2
             , t1.EXP_ARSL_Y_3        = t2.EXP_ARSL_Y_3
             , t1.EXP_ARSL_Y_4        = t2.EXP_ARSL_Y_4
             , t1.ATTC_FIL_ID         = t2.ATTC_FIL_ID
             , t1.ALTR_ATTC_FIL_ID    = t2.ALTR_ATTC_FIL_ID
             , t1.PMIS_TXT            = t2.PMIS_TXT
             , t1.LAST_MDFY_DT        = GETDATE()
             , t1.LAST_MDFY_ID        = #{userId}
          FROM (SELECT SMRY_N_TXT
                     , SMRY_A_TXT
                     , SMRY_B_TXT
                     , SMRY_C_TXT
                     , SMRY_D_TXT
                     , MRKT_SCL_TXT
                     , BIZ_PRFT_PRO
                     , CTY_OT_PLN_M
                     , ANCP_OT_PLN_DT
                     , SMR_SMRY_TXT
                     , SMR_GOAL_TXT
                     , BIZ_PRFT_PLN_Y
                     , BIZ_PRFT_PLN_Y_1
                     , BIZ_PRFT_PLN_Y_2
                     , BIZ_PRFT_PRO_Y
                     , BIZ_PRFT_PRO_Y_1
                     , BIZ_PRFT_PRO_Y_2
                     , BIZ_PRFT_PRO_Y_3
                     , BIZ_PRFT_PRO_Y_4
                     , NPROD_SALS_PLN_Y
                     , NPROD_SALS_PLN_Y_1
                     , NPROD_SALS_PLN_Y_2
                     , NPROD_SALS_PLN_Y_3
                     , NPROD_SALS_PLN_Y_4
                     , PTC_CPSN_Y
                     , PTC_CPSN_Y_1
                     , PTC_CPSN_Y_2
                     , PTC_CPSN_Y_3
                     , PTC_CPSN_Y_4
                     , EXP_ARSL_Y
                     , EXP_ARSL_Y_1
                     , EXP_ARSL_Y_2
                     , EXP_ARSL_Y_3
                     , EXP_ARSL_Y_4
                     , ATTC_FIL_ID
                     , ALTR_ATTC_FIL_ID
                     , PMIS_TXT
                     , LAST_MDFY_DT
                     , LAST_MDFY_ID
                  FROM IRIS_TSS_GEN_SMRY
                 WHERE tss_cd =  #{psTssCd} )  T1
                     , IRIS_TSS_GEN_SMRY T2
         WHERE t2.TSS_CD = #{tssCd}
    </update>


    <select id="getRetrievePgTss" resultType="hashmap">
    -- getRetrievePgTss
	    SELECT top 1 TSS_CD as tssCd
	      FROM IRIS_TSS_MGMT_MST
	     WHERE PGS_STEP_CD = 'PG'
	       AND PK_WBS_CD = subString(#{tssCd},0,7)
	     ORDER BY tss_nos_st DESC
    </select>
    
    <select  id="retrieveGenTssAltrInfo" resultType="hashMap">
    	--retrieveGenTssAltrInfo
    	select  a.TSS_CD as tssCd
		       , a.SMRY_N_TXT  as smryNTxt
               , a.SMRY_A_TXT as smryATxt
               , a.SMRY_B_TXT as smryBTxt
               , a.SMRY_C_TXT as smryCTxt
               , a.SMRY_D_TXT as smryDTxt
               , a.MRKT_SCL_TXT as mrktSclTxt
               , a.BIZ_PRFT_PRO as bizPrftPro
		       , a.SMR_SMRY_TXT as smrSmryTxt
               , a.SMR_GOAL_TXT as smrGoalTxt
		       , a.ATTC_FIL_ID as attcFilId
		       , c.CTY_OT_PLN_M as ctyOtPlnM
		       , a.pmis_txt            as pmisTxt
		       ,case when b.ANCP_OT_PLN_DT  = '' then a.CTY_OT_PLN_M
			         when b.ANCP_OT_PLN_DT is null then a.CTY_OT_PLN_M
					 else  b.ANCP_OT_PLN_DT end  as ancpOtPlnDt
			  
			   ,isnull(b.BIZ_PRFT_PRO_Y	   , a.BIZ_PRFT_PRO_Y ) as bizPrftProY
				,isnull(b.BIZ_PRFT_PRO_Y_1  , a.BIZ_PRFT_PRO_Y_1  ) as bizPrftProY1
				,isnull(b.BIZ_PRFT_PRO_Y_2  , a.BIZ_PRFT_PRO_Y_2  ) as bizPrftProY2
				,isnull(b.BIZ_PRFT_PRO_Y_3  , a.BIZ_PRFT_PRO_Y_3  ) as bizPrftProY3
				,isnull(b.BIZ_PRFT_PRO_Y_4  , a.BIZ_PRFT_PRO_Y_4  ) as bizPrftProY4
				,isnull(b.BIZ_PRFT_PLN_Y	   , a.BIZ_PRFT_PLN_Y ) as bizPrftPlnY
				,isnull(b.BIZ_PRFT_PLN_Y_1  , a.BIZ_PRFT_PLN_Y_1  ) as bizPrftPlnY1
				,isnull(b.BIZ_PRFT_PLN_Y_2  , a.BIZ_PRFT_PLN_Y_2  ) as bizPrftPlnY2
				,isnull(b.NPROD_SALS_PLN_Y  , a.NPROD_SALS_PLN_Y  ) as nprodSalsPlnY
				,isnull(b.NPROD_SALS_PLN_Y_1, a.NPROD_SALS_PLN_Y_1) as nprodSalsPlnY1
				,isnull(b.NPROD_SALS_PLN_Y_2, a.NPROD_SALS_PLN_Y_2) as nprodSalsPlnY2
				,isnull(b.PTC_CPSN_Y		   , a.PTC_CPSN_Y	  ) as ptcCpsnY
				,isnull(b.PTC_CPSN_Y_1	   , a.PTC_CPSN_Y_1		  ) as ptcCpsnY1
				,isnull(b.PTC_CPSN_Y_2	   , a.PTC_CPSN_Y_2		  ) as ptcCpsnY2
				,isnull(b.PTC_CPSN_Y_3	   , a.PTC_CPSN_Y_3		  ) as ptcCpsnY3
				,isnull(b.PTC_CPSN_Y_4	   , a.PTC_CPSN_Y_4		  ) as ptcCpsnY4
				,isnull(b.EXP_ARSL_Y		   , a.EXP_ARSL_Y	  ) as expArslY
				,isnull(b.EXP_ARSL_Y_1	   , a.EXP_ARSL_Y_1		  ) as expArslY1
				,isnull(b.EXP_ARSL_Y_2	   , a.EXP_ARSL_Y_2		  ) as expArslY2
				,isnull(b.EXP_ARSL_Y_3	   , a.EXP_ARSL_Y_3		  ) as expArslY3
				,isnull(b.EXP_ARSL_Y_4	   , a.EXP_ARSL_Y_4		  ) as expArslY4
				,c.BIZ_PRFT_PRO_Y	       as bizPrftProYBefore	    
				,c.BIZ_PRFT_PRO_Y_1	 	   as bizPrftProY1Before	 
				,c.BIZ_PRFT_PRO_Y_2	 	   as bizPrftProY2Before	 
				,c.BIZ_PRFT_PRO_Y_3	 	   as bizPrftProY3Before	 
				,c.BIZ_PRFT_PRO_Y_4	 	   as bizPrftProY4Before	 
				,c.BIZ_PRFT_PLN_Y	 	   as bizPrftPlnYBefore	 
				,c.BIZ_PRFT_PLN_Y_1	 	   as bizPrftPlnY1Before	 
				,c.BIZ_PRFT_PLN_Y_2	 	   as bizPrftPlnY2Before	 
				,c.NPROD_SALS_PLN_Y	 	   as nprodSalsPlnYBefore	 
				,c.NPROD_SALS_PLN_Y_1	   as nprodSalsPlnY1Before
				,c.NPROD_SALS_PLN_Y_2	   as nprodSalsPlnY2Before
				,c.NPROD_SALS_PLN_Y_3	   as nprodSalsPlnY3Before
				,c.NPROD_SALS_PLN_Y_4	   as nprodSalsPlnY4Before
				,c.PTC_CPSN_Y		 	   as ptcCpsnYBefore		 
				,c.PTC_CPSN_Y_1		 	   as ptcCpsnY1Before		 
				,c.PTC_CPSN_Y_2		 	   as ptcCpsnY2Before		 
				,c.PTC_CPSN_Y_3		 	   as ptcCpsnY3Before		 
				,c.PTC_CPSN_Y_4		 	   as ptcCpsnY4Before		 
				,c.EXP_ARSL_Y		 	   as expArslYBefore		 
				,c.EXP_ARSL_Y_1		 	   as expArslY1Before		 
				,c.EXP_ARSL_Y_2		 	   as expArslY2Before		 
				,c.EXP_ARSL_Y_3		 	   as expArslY3Before		 
				,c.EXP_ARSL_Y_4		 	   as expArslY4Before				
			   ,a.ALTR_RSON_TXT                                    as altrRsonTxt
			   ,a.ADD_RSON_TXT                                     as addRsonTxt
			   ,isnull(b.ATTC_FIL_ID , a.ALTR_ATTC_FIL_ID)          as altrAttcFilId
		from   IRIS_TSS_GEN_SMRY  a
		       left outer join  IRIS_GRS_EV_RSLT_RGST b
			   on b.tss_cd =#{pgTssCd}
			   and b.TSS_CD_SN = ( select max(TSS_CD_SN )
		                       from IRIS_GRS_EV_RSLT_RGST 
							   where  tss_cd =#{pgTssCd}
							   and    GRS_EV_ST = 'M'
							 )  
			   and b.GRS_EV_ST ='M'
			   left outer join IRIS_TSS_GEN_SMRY c
			   on  c.tss_cd = #{pgTssCd}
		where  a.TSS_CD = #{tssCd}
    
    </select>
    
    
</mapper>
