<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="prj.grs">
    <select id="retrieveGrsReqList" resultType="hashmap">
        <![CDATA[
		/*retrieveGrsReqList GRS 평가 목록*/
	    with tmp_grs as (
			select  m.wbsCd
				   ,m.tssScnNm
				   ,m.tssNm
				   ,m.prjNm
				   ,m.leaderNm
				   ,m.dlbrCrgrNm
				   ,m.tssDd
				   ,m.grsEvStNm
				   ,m.grsStNm
				   ,m.tssCd
				   ,m.tssCdSn
				   ,m.grsStCd
				   ,m.deptCd
				   ,m.last_mdfy_dt
				   ,m.tssSt
				   ,m.tssScnCd
				   ,m.frstRgstId
				   ,m.dlbrCrgr
				   ,m.leaderCd
				   ,m.bizDptCd
				   ,m.pgsStepCd
				   ,m.evResult
				   ,m.grsEvSn
				   ,rtrim(m.grsEvSt) as grsEvSt
				   ,m.prjCd
				   ,m.evDt
				   ,m.tssType 
			from   (
			select  dbo.fn_getComDtlNm('TSS_SCN_CD',b.tss_scn_cd) AS tssScnNm
				   ,iif(b.PGS_STEP_CD='PL' AND (select count(*) from IRIS_TSS_MGMT_MST where PK_WBS_CD = b.pk_wbs_cd)=1,'SEED-'+b.wbs_cd  , b.wbs_cd) as wbsCd
				   ,b.TSS_NM as tssNm
				   ,isnull(dbo.fn_getPrjName(b.PRJ_CD), b.PRJ_NM ) as prjNm
				   ,isnull((select  u.sa_name from IRIS_SSO_USER u where u.sa_sabun_new= b.SA_SABUN_NEW), a.SA_SABUN_NAME) as leaderNm
				   ,isnull((select  u.sa_name from IRIS_SSO_USER u where u.sa_sabun_new= a.dlbr_crgr), a.SA_SABUN_NAME) as dlbrCrgrNm
				   ,b.tss_strt_dd+' ~ '+b.tss_fnh_dd as tssDd
				   , dbo.fn_getComDtlNm('GRS_EV_ST',a.grs_ev_st)  AS grsEvStNm
				   , dbo.fn_getComDtlNm('GRS_ST',a.grs_st_cd)  AS grsStNm
				   , case when a.drop_yn = 'Y' then 'DROP'
						  when a.GRS_EV_M_TYPE = 'HD' then '보류'
						  when a.grs_st_cd ='101' and (a.drop_yn is null  or  a.drop_yn = '') then ''
						  else 'PASS' end as evResult
				   ,a.tss_cd as tssCd
				   ,a.tss_cd_sn as tssCdSn
				   ,b.tss_scn_cd  as tssScnCd
				   ,a.grs_st_cd   as grsStCd
				   ,a.last_mdfy_dt 
				   ,b.tss_st as tssSt
				   ,b.dept_code  as deptCd
				   ,a.dlbr_crgr as dlbrCrgr
				   ,a.frst_rgst_id as frstRgstId
				   ,b.SA_SABUN_NEW  as leaderCd
				   ,b.biz_dpt_cd as bizDptCd
				   ,b.pgs_step_cd as pgsStepCd
				   ,a.grs_Ev_Sn as grsEvSn
				   ,a.grs_Ev_ST as grsEvSt
				   ,b.PRJ_CD as prjCd
				   ,a.EV_DT as evDt
				   ,b.TSS_TYPE as tssType
			from    iris_grs_ev_rslt_rgst  a
					inner join IRIS_TSS_MGMT_MST b
					on b.TSS_CD = a.TSS_CD
			union
			select dbo.fn_getComDtlNm('TSS_SCN_CD',b.tss_scn_cd) AS tssScnNm
				   ,iif(b.PGS_STEP_CD='PL' AND (select count(*) from IRIS_GRS_MGMT_MST where PK_WBS_CD = b.pk_wbs_cd)=1,'SEED-'+b.wbs_cd  , b.wbs_cd) as wbsCd
				   ,b.TSS_NM
				   ,isnull(dbo.fn_getPrjName(b.PRJ_CD), b.PRJ_NM ) as prjNm
				   ,isnull((select  u.sa_name from IRIS_SSO_USER u where u.sa_sabun_new= b.SA_SABUN_NEW), a.SA_SABUN_NAME) as leaderNm
				   ,isnull((select  u.sa_name from IRIS_SSO_USER u where u.sa_sabun_new= a.dlbr_crgr), a.SA_SABUN_NAME) as dlbrCrgrNm
				   ,b.tss_strt_dd+' ~ '+b.tss_fnh_dd as tssDd
				   , dbo.fn_getComDtlNm('GRS_EV_ST',a.grs_ev_st)  AS grsEvStNm
				   , dbo.fn_getComDtlNm('GRS_ST',a.grs_st_cd)  AS grsStNm
				   , case when a.drop_yn = 'Y' then 'DROP'
						  when a.grs_st_cd ='101' and (a.drop_yn is null  or  a.drop_yn = '') then ''
						  else 'PASS' end as evResult
				   ,a.tss_cd as tssCd
				   ,a.tss_cd_sn as tssCdSn
				   ,b.tss_scn_cd  as tssScnCd
				   ,a.grs_st_cd   as grsStCd
				   ,a.last_mdfy_dt
				   ,b.tss_st as tssSt
				   ,b.dept_Cd  as deptCd
				   ,a.dlbr_crgr as dlbrCrgr
				   ,a.frst_rgst_id as frstRgstId
				   ,b.SA_SABUN_NEW  as leaderCd
				   ,b.biz_dpt_cd as bizDptCd
				   ,b.pgs_step_cd as pgsStepCd
				   ,a.grs_Ev_Sn  as grsEvSn
				   ,a.grs_Ev_ST as grsEvSt
				   ,b.PRJ_CD as prjCd
				   ,a.EV_DT as evDt
				   ,b.TSS_TYPE as tssType
			from   iris_grs_ev_rslt_rgst a
				   inner join iris_grs_mgmt_mst b
				   on a.tss_cd = b.tss_cd
			) m
		)
	
		select  wbsCd, max(last_mdfy_dt) over(partition by wbsCd order by last_mdfy_dt desc), max(wbsCd) over(partition by wbsCd order by last_mdfy_dt desc)
		        ,m.tssScnNm
			    ,m.tssNm
				,m.prjNm
				,m.leaderNm
				,m.dlbrCrgrNm
				,m.tssDd
				,m.grsEvStNm
				,m.grsStNm
				,m.evResult
				,m.tssCd
				,m.tssCdSn
				,m.grsStCd
				,m.deptCd
				,m.tssSt
				,m.bizDptCd
				,m.pgsStepCd
				,isnull(m.grsEvSn, 0)  as grsEvSn 
				,m.grsEvSt
				,m.prjCd
				,m.evDt
				,m.dlbrCrgr
				,m.tssType 
				,m.tssScnCd
		from   tmp_grs m
		where  1=1
		 ]]>
        --AND a.tss_cd in ( SELECT MAX(TSS_CD) FROM iris_grs_ev_rslt_rgst where subString(TSS_CD,0,7) = a.PK_WBS_CD)
        <if test="tssRoleType == 'null' or tssRoleType.equals('') or tssRoleType.equals('S1')">
            AND 1 = 1
        </if>
        <if test="tssRoleType != 'null' and tssRoleType.equals('S2')">
            AND (1 = 2 OR m.leaderCd = #{_userSabun})
        </if>
        <if test="tssRoleType.equals('S3')">
           AND (m.bizDptCd IN
            <foreach collection="tssRoleCd" item="item" open="(" close=")" separator=",">
                #{item}
            </foreach>
            OR (
            dbo.fn_getGrsDeptCd(m.prjCd) = dbo.fn_getUpperDeptCd(#{_userDept})  
            OR m.dlbrCrgr = #{_userSabun}								        
            OR m.frstRgstId = #{_userId}									    
            ))
		</if>
       <!-- 
        <if test="tssRoleType != 'null' and tssRoleType.equals('S3')">
            AND
            (
            dbo.fn_getGrsDeptCd(m.prjCd) = dbo.fn_getUpperDeptCd(#{_userDept})  
            OR dbo.fn_getGrsDeptCd(m.prjCd) = dbo.fn_getRndDeptCd(#{_userDept}) 
            OR m.dlbrCrgr = #{_userSabun}								        
            OR m.frstRgstId = #{_userId}									    
            )
        </if>
        -->
        <if test="tssScnCd != null and tssScnCd != 'null' and tssScnCd != ''">
            AND m.tssScnCd = #{tssScnCd}
        </if>
        <if test="wbsCd != null and wbsCd != 'null' and wbsCd != ''">
            AND m.wbsCd like '%'+#{wbsCd}+'%'
        </if>
        <if test="tssNm != null and tssNm != 'null' and tssNm != ''">
            AND m.tssNm like '%'+#{tssNm}+'%'
        </if>
        <if test="prjNm != null and prjNm != 'null' and prjNm != ''">
            AND m.prjNm like '%'+#{prjNm}+'%'
        </if>
        <if test="dlbrCrgrNm != null  and dlbrCrgrNm != 'null' and dlbrCrgrNm != ''">
            AND m.dlbrCrgrNm like '%'+#{dlbrCrgrNm}+'%'
        </if>
        <if test="saUserName != null  and saUserName != 'null' and saUserName != ''">
            AND m.leaderNm like '%'+#{saUserName}+'%'
        </if>
        <if test="grsStCd != null and grsStCd != 'null' and grsStCd != ''">
            AND m.grsStCd = #{grsStCd}
        </if>
        
        order by 2 desc
    </select>


    <!-- GRS Todo 조회 -->
    <select id="retrieveGrsTodo" resultType="hashmap">
		<![CDATA[
--retrieveGrsTodo GRS Todo 조회
        SELECT
            TODO_SYS_CD     AS todoSysCd        --시스템 코드
            ,
            TODO_TYPE_CD    AS todoTypeCd       --ToDo 유형 코드
            ,
            TODO_REQ_NO     AS todoReqNo        --연계시스템 내 문서 ID
            ,
            TODO_REQ_NM     AS todoReqNm        --ToDo 문서제목
            ,
            TODO_REQ_EMP_NO AS todoReqEmpNo     --ToDo 등록자 ID
            ,
            TODO_REQ_DT     AS todoReqDt        --등록시각
            ,
            TODO_END_DT     AS todoEndDt        --마감시각
            ,
            TODO_STATUS     AS todoStatus       --처리상황명
            ,
            TODO_EMP_NO     AS todoEmpNo        --처리담당자 ID
            ,
            TODO_SGN_EMP_NO AS todoSgnEmpNo     --수임담당자 ID
            ,
            TODO_RESULT     AS todoResult       --완료여부
            ,
            TSS_CD          AS tssCd            --
            ,
            TSS_CD_SN       AS tssCdSn --
        FROM VW_GRS_TODO
        WHERE TODO_REQ_NO = #{MW_TODO_REQ_NO}
        ]]>
	</select>

    <select id="selectIsBeforGrs" resultType="String">
        SELECT COUNT(*)  FROM IRIS_GRS_MGMT_MST WHERE TSS_CD = #{tssCd}
    </select>

    <!-- GRS결과요청 조회 -->
    <select id="retrieveGrsEvRslt" resultType="hashmap">
		<![CDATA[
--retrieveGrsEvRslt GRS 평가 상세
        SELECT
            A.PRJ_CD                                                                 AS prjCd      --프로젝트코드
           , A.TSS_ATTR_CD as  tssAttrCd -- 제품구분
           ,dbo.fn_getPrjName(A.PRJ_CD)                                               AS prjNm      --프로젝트명
           ,A.BIZ_DPT_CD                                                             AS bizDptCd   --사업부문코드
           ,dbo.fn_getComDtlNm('BIZ_DPT_CD', A.BIZ_DPT_CD)                           AS bizDptNm
           ,A.TSS_ATTR_CD                                                            AS tssAttrCd  --과제속성코드
           ,dbo.fn_getComDtlNm('TSS_ATTR_CD', A.TSS_ATTR_CD)                         AS tssAttrNm
           ,A.TSS_NM                                                                 AS tssNm      --과제명
           ,A.TSS_STRT_DD+' ~ '+A.TSS_FNH_DD                            AS tssDd      --과제기간
           ,rtrim(B.GRS_EV_ST)                                                              AS grsEvSt    --GRS상태
           ,dbo.fn_getComDtlNm('GRS_EV_ST', B.GRS_EV_ST)                             AS grsEvStNm
           ,B.GRS_EV_SN                                                              AS grsEvSn    --GRS평가표
           ,(SELECT sm.EV_SBC_NM
             FROM IRIS_GRS_EV_STD_MGMT sm
             WHERE sm.GRS_EV_SN = B.GRS_EV_SN AND sm.GRS_EV_SEQ = 0)                 AS grsEvSnNm    --GRS평가표
           ,B.DLBR_PARR_DT                                                           AS dlbrParrDt --심의예정일
           ,B.DLBR_CRGR                                                              AS dlbrCrgr   --심의담당자
            --, dbo.fn_getSabunName(B.DLBR_CRGR	) AS dlbrCrgrNm
           ,b.sa_sabun_name                                                          AS dlbrCrgrNm       --심의 담당자
           ,A.TSS_CD                                                                 AS tssCd      --과제코드
           ,B.TSS_CD_SN                                                              AS tssCdSn,
            A.PGS_STEP_CD                                                            AS pgsStepCd  --진행단계코드439600
            ,
            A.TSS_SCN_CD                                                             AS tssScnCd   --과제구분코드
            ,
            B.EV_TITL                                                                AS evTitl            --평가제목
            ,
            B.CFRN_ATDT_CD_TXT                                                       AS cfrnAtdtCdTxt    --회의참석자사번
            ,
            (select stuff((select ',' +
                                  sa_name
                           from IRIS_SSO_USER
                           where sa_sabun_new in (SELECT value
                                                  FROM STRING_SPLIT(convert(nvarchar(4000), B.CFRN_ATDT_CD_TXT), ',')
                                                  WHERE RTRIM(value) <> '')
                           order by sa_name
                           FOR XML PATH ('')), 1, 1, ''))                            AS cfrnAtdtCdTxtNm --회의참석자명
            ,
            B.COMM_TXT                                                               AS commTxt            --Comments
            ,
            B.ATTC_FIL_ID                                                            AS attcFilId        --첨부파일
            ,
            A.TSS_ST                                                                 AS tssSt --과제상태코드
            ,IIF((SELECT COUNT(*)
                 FROM IRIS_GRS_EV_STD_RSLT_RGST
                 WHERE TSS_CD = B.TSS_CD AND TSS_CD_SN = B.TSS_CD_SN) > 0, 'Y', 'N') AS saveYN
            ,iif(A.TSS_ST='101' AND B.DROP_YN IS NULL,'0','1') AS  isConfirm
            ,A.TSS_STRT_DD AS tssStrtDd
            ,A.TSS_FNH_DD AS tssFnhDd
            ,iif(A.TSS_ST='101' AND B.DROP_YN is null,'',iif(B.DROP_YN='Y','DROP','PASS')) as evResult
            ,iif(B.GRS_EV_M_TYPE is null,'',B.GRS_EV_M_TYPE) as grsEvMType
            ,B.EV_DT
            ]]>
        <choose>
            <when test="beforGrs == 1">
                ,A.SMR_SMRY_TXT AS smrSmryTxt
                ,A.SMR_GOAL_TXT AS smrGoalTxt
                ,A.NPROD_SALS_PLN_Y AS nprodSalsPlnY
                ,A.CTY_OT_PLN_M AS ctyOtPlnM
            </when>
        </choose>
            <![CDATA[
        FROM
            ]]>
        <choose>
            <when test="beforGrs == 1">
                IRIS_GRS_MGMT_MST A
            </when>
            <otherwise>
                IRIS_TSS_MGMT_MST A /*과제관리마스터*/
            </otherwise>
        </choose>
        <![CDATA[
            left JOIN IRIS_PRJ_RSST_MST C  /*프로젝트연구마스터*/
                ON A.PRJ_CD = C.PRJ_CD
            LEFT JOIN IRIS_GRS_EV_RSLT_RGST B  /*GRS평가결과등록*/
                ON A.TSS_CD = B.TSS_CD
                   AND B.TSS_CD_SN = #{tssCdSn}
        WHERE A.TSS_CD = #{tssCd}
        ]]>
	</select>


    <select id="retrieveGrsReqDtlLst" resultType="hashmap">
        <![CDATA[
--retrieveGrsReqDtlLst GRS 평가표
        SELECT
            sm.GRS_EV_SN                           AS grsEvSn               -- GRS 일련번호
            ,
            sm.GRS_EV_SEQ                          AS grsEvSeq               -- GRS  순번
            ,
            sm.EV_PRVS_NM_1                        AS evPrvsNm_1           -- 평가항목명1
            ,
            sm.EV_PRVS_NM_2                        AS evPrvsNm_2           -- 평가항목명2
            ,
            sm.EV_CRTN_NM                          AS evCrtnNm             -- 평가기준명
            ,
            sm.EV_SBC_TXT                          AS evSbcTxt             -- 평가내용
            ,
            sm.DTL_SBC_TITL_1                      AS dtlSbcTitl_1         -- 상세내용1
            ,
            sm.DTL_SBC_TITL_2                      AS dtlSbcTitl_2         -- 상세내용2
            ,
            sm.DTL_SBC_TITL_3                      AS dtlSbcTitl_3         -- 상세내용3
            ,
            sm.DTL_SBC_TITL_4                      AS dtlSbcTitl_4         -- 상세내용4
            ,
            sm.DTL_SBC_TITL_5                      AS dtlSbcTitl_5         -- 상세내용5
            ,
            sm.WGVL                                AS wgvl                 -- 가중치
            ,
            sm.GRS_Y                               AS grsY                 -- 년도
            ,
            sm.GRS_TYPE                            AS grsType              -- 유형
            ,
            sm.EV_SBC_NM                           AS evSbcNm              -- 템플릿명
            ,
            sm.USE_YN                              AS useYn                -- 사용여부
            ,
            sm.FRST_RGST_DT                        AS frstRgstDt           -- 최초등록일시
            ,
            sm.FRST_RGST_ID                        AS frstRgstId           -- 최초등록자
            ,
            sm.LAST_MDFY_DT                        AS lastMdfyDt           -- 최종수정일시
            ,
            sm.LAST_MDFY_ID                        AS lastMdfyId           -- 최종수정자
            ,
            (SELECT (srr.EV_SCR)
             FROM iris_grs_ev_std_rslt_rgst srr
             WHERE sm.GRS_EV_SN = srr.GRS_EV_SN
                   AND sm.GRS_EV_SEQ = srr.GRS_EV_SEQ
                   AND srr.TSS_CD = #{tssCd}
                   AND srr.tss_cd_sn = #{tssCdSn}) AS evScr
        FROM IRIS_GRS_EV_STD_MGMT sm
		 ]]>
			WHERE sm.GRS_EV_SN = '${grsEvSn}'
              AND sm.GRS_EV_SEQ != 0

    </select>


    <!-- GRS평가항목 년도 조회 -->
    <select id="retrieveGrsEvStdGrsY" resultType="hashmap">
		<![CDATA[
--retrieveGrsEvStdGrsY GRS평가항목 년도 조회
        SELECT DISTINCT GRS_Y AS grsY -- 년도
        FROM IRIS_GRS_EV_STD_MGMT /*GRS평가표준*/
        WHERE GRS_Y IS NOT NULL
        ]]>
	</select>


    <!-- GRS평가항목 목록 조회 -->
    <select id="retrieveGrsEvStd" resultType="hashmap">
        <![CDATA[
--retrieveGrsEvStd GRS평가항목 목록 조회
        SELECT GRS_EV_SN      AS grsEvSn     --평가표일련번호
             , GRS_EV_SEQ     AS grsEvSeq    --평가SEQ
             , EV_PRVS_NM_1   AS evPrvsNm1   --평가항목명1
             , EV_PRVS_NM_2   AS evPrvsNm2   --평가항목명2
             , EV_CRTN_NM     AS evCrtnNm    --평가기준명
             , EV_SBC_TXT     AS evSbcTxt    --평가내용
             , DTL_SBC_TITL_1 AS dtlSbcTitl1 --상세내용1
             , DTL_SBC_TITL_2 AS dtlSbcTitl2 --상세내용2
             , DTL_SBC_TITL_3 AS dtlSbcTitl3 --상세내용3
             , DTL_SBC_TITL_4 AS dtlSbcTitl4 --상세내용4
             , DTL_SBC_TITL_5 AS dtlSbcTitl5 --상세내용5
             , WGVL           AS wgvl        --가중치
             , GRS_Y          AS grsY        --년도
             , GRS_TYPE       AS grsType     --유형
             , EV_SBC_NM      AS evSbcNm     --템플릿명
             , USE_YN         AS useYn       --사용여부
             , FRST_RGST_DT   AS frstRgstDt  --최초등록일시
             , FRST_RGST_ID   AS frstRgstId  --최초등록자
             , LAST_MDFY_DT   AS lastMdfyDt  --최종수정일시
             , LAST_MDFY_ID   AS lastMdfyId  --최종수정자
          FROM IRIS_GRS_EV_STD_MGMT  /*GRS평가표준*/
         WHERE GRS_EV_SEQ = 0
         AND   USE_YN ='Y'
		 ]]>
        <if test="grsY != null and !grsY.equals('')">
            AND GRS_Y = #{grsY}
        </if>
        <if test="grsType != null and !grsType.equals('')">
            AND GRS_TYPE = #{grsType}
        </if>
        <if test="useYn != null and !useYn.equals('')">
            AND USE_YN = #{useYn}
        </if>
        <if test="evSbcNm != null and !evSbcNm.equals('')">
            AND EV_SBC_NM LIKE '%'+#{evSbcNm}+'%'
        </if>
        order by GRS_Y desc
    </select>


    <!-- GRS평가항목 상세 조회 -->
    <select id="retrieveGrsEvStdDtl" resultType="hashmap">
		<![CDATA[
--retrieveGrsEvStdDtl GRS평가항목 상세 조회
        SELECT
            A.GRS_EV_SN      AS grsEvSn     --평가표일련번호
            ,
            A.GRS_EV_SEQ     AS grsEvSeq    --평가SEQ
            ,
            A.EV_PRVS_NM_1   AS evPrvsNm1   --평가항목명1
            ,
            A.EV_PRVS_NM_2   AS evPrvsNm2   --평가항목명2
            ,
            A.EV_CRTN_NM     AS evCrtnNm    --평가기준명
            ,
            A.EV_SBC_TXT     AS evSbcTxt    --평가내용
            ,
            A.DTL_SBC_TITL_1 AS dtlSbcTitl1 --상세내용1
            ,
            A.DTL_SBC_TITL_2 AS dtlSbcTitl2 --상세내용2
            ,
            A.DTL_SBC_TITL_3 AS dtlSbcTitl3 --상세내용3
            ,
            A.DTL_SBC_TITL_4 AS dtlSbcTitl4 --상세내용4
            ,
            A.DTL_SBC_TITL_5 AS dtlSbcTitl5 --상세내용5
            ,
            A.WGVL           AS wgvl        --가중치
            ,
            B.GRS_Y          AS grsY        --년도
            ,
            B.GRS_TYPE       AS grsType     --유형
            ,
            B.EV_SBC_NM      AS evSbcNm     --템플릿명
            ,
            B.USE_YN         AS useYn --사용여부
        FROM IRIS_GRS_EV_STD_MGMT B  /*GRS평가표준*/
            LEFT JOIN IRIS_GRS_EV_STD_MGMT A  /*GRS평가표준*/
                ON B.GRS_EV_SN = A.GRS_EV_SN
                   AND A.GRS_EV_SEQ != '0'
        WHERE B.GRS_EV_SN = #{grsEvSn}
              AND B.GRS_EV_SEQ = '0'
        ]]>
	</select>


    <!-- GRS평가결과 TODO호출 -->
    <update id="insertGrsEvRsltTodo" parameterType="map">
--insertGrsEvRsltTodo GRS평가결과 TODO호출
        EXEC TODO.dbo.UP_MW_TODO_REQ 'IRI', 'GRS', #{reqNo}, #{reqSabun}
    </update>


    <!-- GRS평가결과 저장 -->
    <insert id="insertGrsEvRslt">
--insertGrsEvRslt GRS평가결과 저장
        <selectKey keyProperty="tssCdSn" resultType="String" order="BEFORE">
            <![CDATA[
            SELECT ISNULL(MAX(X.TSS_CD_SN), 0) + 1
              FROM IRIS_GRS_EV_RSLT_RGST X
             WHERE X.TSS_CD = #{tssCd}
        ]]>
        </selectKey>
        <!-- insertGrsEvRslt -->
        INSERT
        INTO IRIS_GRS_EV_RSLT_RGST /*GRS평가결과등록*/
        ( TSS_CD --과제코드
        , TSS_CD_SN
        , EV_TITL --평가제목
        , DLBR_CRGR --심의담당자
        , DLBR_PARR_DT --심의예정일
        , GRS_EV_ST --GRS상태
        , CFRN_ATDT_CD_TXT --회의참석자코드
        , COMM_TXT --Comments
        , GRS_EV_SN --평가표
        , GRS_ST_CD --grs 상태값
        , ATTC_FIL_ID
        , REQ_SABUN --요청자사번
        , REQ_DATE --요청일
        , FRST_RGST_DT --최초등록일시
        , FRST_RGST_ID --최초등록자
        , LAST_MDFY_DT --최종수정일시
        , LAST_MDFY_ID --최종수정자
        , SA_SABUN_NAME
        , EV_DT
        )
        VALUES
        ( #{tssCd}
        , #{tssCdSn}
        , #{evTitl}
        , #{dlbrCrgr}
        , iif(#{dlbrParrDt} is null,convert(varchar(10), getdate(), 120),#{dlbrParrDt})
        , #{grsEvSt}
        , #{cfrnAtdtCdTxt}
        , #{commTxt}
        , #{grsEvSn}
        , #{grsStCd}
        , #{attcFilId}
        , iif(#{reqSabun} is null,#{_userSabun},#{reqSabun})
        , GETDATE()
        , GETDATE()
        , #{userId}
        , GETDATE()
        , #{userId}
        , (SELECT sa_name FROM IRIS_SSO_USER X WHERE X.SA_SABUN_NEW = #{dlbrCrgr})
        , #{evDt}
        )
    </insert>


    <!-- GRS평가결과 저장 -->
    <update id="updateGrsEvRslt">
        --updateGrsEvRslt GRS평가결과등록
        MERGE IRIS_GRS_EV_RSLT_RGST A
        USING (SELECT #{tssCd} AS TSS_CD, ISNULL(#{tssCdSn}, 0) AS TSS_CD_SN) B
        ON A.TSS_CD = B.TSS_CD
        AND A.TSS_CD_SN = B.TSS_CD_SN
        WHEN NOT MATCHED THEN
        INSERT
        ( TSS_CD --과제코드
        , TSS_CD_SN
        , EV_TITL --평가제목
        , DLBR_CRGR --심의담당자
        , DLBR_PARR_DT --심의예정일
        <if test="grsEvSt != null and !grsEvSt.equals('')">
            , GRS_EV_ST --GRS상태
        </if>
        , CFRN_ATDT_CD_TXT --회의참석자코드
        , COMM_TXT --Comments
        , GRS_EV_SN --평가표
        , ATTC_FIL_ID -- 첨부화일
        , REQ_SABUN --요청자사번
        , REQ_DATE --요청일
        , FRST_RGST_DT --최초등록일시
        , FRST_RGST_ID --최초등록자
        , LAST_MDFY_DT --최종수정일시
        , LAST_MDFY_ID --최종수정자
        , SA_SABUN_NAME --리더이름
        , DROP_YN
        , GRS_EV_M_TYPE
        , EV_DT
        )
        VALUES
        ( #{tssCd}
        , (SELECT ISNULL(MAX(X.TSS_CD_SN), 0) + 1 FROM IRIS_GRS_EV_RSLT_RGST X WHERE X.TSS_CD = #{tssCd})
        , #{evTitl}
        , #{dlbrCrgr}
        , #{dlbrParrDt}
        <if test="grsEvSt != null and !grsEvSt.equals('')">
            , #{grsEvSt}
        </if>
        , #{cfrnAtdtCdTxt}
        , #{commTxt}
        , #{grsEvSn}
        , #{attcFilId}
        , #{reqSabun}
        , GETDATE()
        , GETDATE()
        , #{userId}
        , GETDATE()
        , #{userId}
        ,#{dropYn}
        ,#{grsEvMType}
        , #{evDt}
        , (SELECT sa_name FROM IRIS_SSO_USER X WHERE X.SA_SABUN_NEW = #{dlbrCrgr})
        )
        WHEN MATCHED THEN
        UPDATE
        SET EV_TITL = #{evTitl}
        , DLBR_CRGR = #{dlbrCrgr}
        <if test="dlbrParrDt != null and !dlbrParrDt.equals('')">
        , DLBR_PARR_DT = #{dlbrParrDt}
        </if>
        <if test="grsEvSt != null and !grsEvSt.equals('')">
            , GRS_EV_ST = #{grsEvSt}
        </if>
        , CFRN_ATDT_CD_TXT = #{cfrnAtdtCdTxt}
        , COMM_TXT = #{commTxt}
        , GRS_EV_SN = #{grsEvSn}
        , ATTC_FIL_ID = #{attcFilId}
        , LAST_MDFY_DT = GETDATE()
        , LAST_MDFY_ID = #{userId}
        , SA_SABUN_NAME = (SELECT sa_name FROM IRIS_SSO_USER X WHERE X.SA_SABUN_NEW = #{dlbrCrgr})
        , DROP_YN = #{dropYn}
        , GRS_EV_M_TYPE = #{grsEvMType}
        , EV_DT = #{evDt}
        ;
    </update>


    <!-- GRS평가표준결과 저장 -->
    <update id="updateGrsEvStdRslt">
    <![CDATA[
--updateGrsEvStdRslt GRS평가표준결과 저장
        MERGE IRIS_GRS_EV_STD_RSLT_RGST A  /*GRS평가표준결과등록*/
        USING (SELECT
                   #{tssCd}              AS TSS_CD,
                   #{grsEvSn}            AS GRS_EV_SN,
                   #{grsEvSeq}           AS GRS_EV_SEQ,
                   ISNULL(#{tssCdSn}, 0) AS TSS_CD_SN) B
        ON A.TSS_CD = B.TSS_CD
           AND A.TSS_CD_SN = B.TSS_CD_SN
           AND A.GRS_EV_SN = B.GRS_EV_SN
           AND A.GRS_EV_SEQ = B.GRS_EV_SEQ
        WHEN NOT MATCHED THEN
            INSERT
            (TSS_CD       --과제코드
                , TSS_CD_SN
                , GRS_EV_SN    --평가표일련번호
                , GRS_EV_SEQ   --평가SEQ
                , EV_SCR       --평가점수
                , FRST_RGST_DT --최초등록일시
                , FRST_RGST_ID --최초등록자
                , LAST_MDFY_DT --최종수정일시
                , LAST_MDFY_ID --최종수정자
            )
            VALUES
                (#{tssCd}
                    , #{tssCdSn}
                    , #{grsEvSn}
                    , #{grsEvSeq}
                    , CONVERT(numeric(5, 2), CASE WHEN #{evScr} = ''
                    THEN '0'
                                             ELSE #{evScr} END)
                    , GETDATE()
                    , #{userId}
                    , GETDATE()
                    , #{userId}
                )
        WHEN MATCHED THEN
            UPDATE
            SET EV_SCR         = CONVERT(numeric(5, 2), CASE WHEN #{evScr} = ''
                THEN '0'
                                                        ELSE #{evScr} END)
                , LAST_MDFY_DT = GETDATE()
                , LAST_MDFY_ID = #{userId}
        ;
        ]]>
    </update>

    <!-- GRS 평가 완료 메일 정보  -->
    <select id="retrieveGrsMailInfo" resultType="hashmap">
    	<![CDATA[
--retrieveGrsMailInfo GRS 평가 완료 메일 정보
        select
            (select sa_mail
             from IRIS_SSO_USER
             where sa_sabun_new = a.sa_sabun_new)        as saMail,
            b.GRS_EV_ST                                  as grsCd,
            dbo.fn_getComDtlNm('GRS_EV_ST', b.GRS_EV_ST) as grsNm
        from IRIS_TSS_MGMT_MST a
            inner join IRIS_GRS_EV_RSLT_RGST b
                on b.TSS_CD = a.TSS_CD
        where a.tss_cd = #{tssCd}
              and a.tss_st = '102'
              and b.TSS_CD_SN = (select max(TSS_CD_SN)
                                 from IRIS_GRS_EV_RSLT_RGST
                                 where tss_cd = #{tssCd}
        )
        ]]>
    </select>


    <!-- GRS 평가 목록 조회 -->
    <select id="selectGrsList" resultType="hashmap">
        <![CDATA[
/*selectGrsList GRS 평가 목록 조회*/
		SELECT
			TSS_CD AS tssCd,
			WBS_CD AS wbsCd,
			PK_WBS_CD AS pkWbsCd,
			PGS_STEP_CD AS pgsStepCd,
			(SELECT COM_DTL_NM FROM DBO.IRIS_ADM_COM_CD WHERE COM_CD_CD='PGS_STEP_CD' AND GMM.PGS_STEP_CD=COM_DTL_CD) AS pgsStepNm,
			TSS_ST AS tssSt,
			(SELECT COM_DTL_NM FROM DBO.IRIS_ADM_COM_CD WHERE COM_CD_CD='TSS_ST' AND GMM.TSS_ST=COM_DTL_CD) AS tssStNm,
			TSS_NM AS tssNm,
			PRJ_CD AS prjCd,
			PRJ_NM AS prjNm,
			BIZ_DPT_CD AS bizDptCd,
			PROD_G AS prodG,
			TSS_SMRY_TXT AS tssSmryTxt,
			CUST_SQLT AS custSqlt,
			NPROD_SALS_PLN_Y AS nprodSalsPlnY,
			CTY_OT_PLN_M AS ctyOtPlnM,
			TSS_SCN_CD AS tssScnCd,
			(SELECT COM_DTL_NM FROM DBO.IRIS_ADM_COM_CD WHERE COM_CD_CD='TSS_SCN_CD' AND GMM.TSS_SCN_CD=COM_DTL_CD) AS tssScnNm,
			SA_SABUN_NEW AS saSabunNew,
			SA_SABUN_NM AS saSabunNm,
			TSS_STRT_DD AS tssStrtDd,
			TSS_FNH_DD AS tssFnhDd,
			TSS_FNH_DD + '~' +  TSS_STRT_DD AS tssDd,
			GRS_YN AS grsYn,
			TSS_ATTR_CD AS tssAttrCd,
			TSS_TYPE AS tssType,
			RSST_SPHE AS rsstSphe,
            PPSL_MBD_CD AS ppslMbdCd,
			SMR_SMRY_TXT AS smrSmryTxt,
			SMR_GOAL_TXT AS smrGoalTxt,
			FRST_RGST_DT AS frstRgstDt,
			FRST_RGST_ID AS frstRgstId,
			LAST_MDFY_DT AS lastMdfyDt,
			LAST_MDFY_ID AS lastMdfyId
  		FROM dbo.IRIS_GRS_MGMT_MST GMM
  		WHERE 1=1
    	]]>
            <if test="stssScnCd != null and stssScnCd != 'null' and stssScnCd != ''">
                AND TSS_SCN_CD = #{stssScnCd}
            </if>
            <if test="stssCd != null and stssCd != 'null' and stssCd != ''">
                AND TSS_CD LIKE '%'+#{stssCd}+'%'
            </if>
            <if test="tssCd != null and tssCd != 'null' and tssCd != ''">
                AND TSS_CD = #{tssCd}
            </if>
            <if test="stssNm != null and stssNm != 'null' and stssNm != ''">
                AND TSS_NM LIKE '%'+#{stssNm}+'%'
            </if>
            <if test="sprjNm != null and sprjNm != 'null' and sprjNm != ''">
                AND PRJ_NM LIKE '%'+#{sprjNm}+'%'
            </if>
            <if test="ssaSabunNm != null and ssaSabunNm != 'null' and ssaSabunNm != ''">
                AND SA_SABUN_NM LIKE '%'+#{ssaSabunNm}+'%'
            </if>
        ORDER BY FRST_RGST_DT DESC
    </select>

    <select id="selectGrsInfo" resultType="hashmap">
        /*selectGrsInfo grs심의용 기본정보 조회*/
        SELECT m.TSS_CD AS tssCd,
               m.WBS_CD AS wbsCd,
               m.PK_WBS_CD AS pkWbsCd,
               m.PGS_STEP_CD AS pgsStepCd,
               m.TSS_ST AS tssSt,
               m.TSS_SCN_CD AS tssScnCd,
               m.GRS_YN AS grsYn,
               m.TSS_NM AS tssNm,
               m.PRJ_CD AS prjCd,
               isnull(PRJ_NM, dbo.fn_getPrjName(PRJ_CD)) as prjNm,
               m.BIZ_DPT_CD AS bizDptCd,
               m.PROD_G AS prodG,
               m.SA_SABUN_NEW AS saSabunNew,
               isnull(m.SA_SABUN_NM,
                      (SELECT u.sa_name
                       FROM IRIS_SSO_USER u
                       WHERE u.sa_sabun_new=m.SA_SABUN_NEW
                      )) AS saSabunNm,
               m.TSS_STRT_DD AS tssStrtDd,
               m.TSS_FNH_DD AS tssFnhDd,
               m.CUST_SQLT AS custSqlt,
               m.TSS_ATTR_CD AS tssAttrCd,
               m.TSS_TYPE AS tssType,
               m.RSST_SPHE AS rsstSphe,
               m.PPSL_MBD_CD AS ppslMbdCd,
               m.FC_CD as fcCd,
			    case when CUST_SQLT = '01' then 'B2B제품군'
			        when CUST_SQLT = '02' then '일반제품군'
					else '' end as custSqltNm,
			   dbo.fn_getComDtlNm('PROD_G',m.PROD_G)  AS  prodGNm ,
			   dbo.fn_getComDtlNm('TSS_TYPE',m.TSS_TYPE)  AS  tssTypeNm ,
			   dbo.fn_getComDtlNm('TSS_SCN_CD',m.TSS_SCN_CD)  AS  tssScnNm ,
			   dbo.fn_getComDtlNm('BIZ_DPT_CD',m.BIZ_DPT_CD)  AS  bizDptNm ,
			   dbo.fn_getComDtlNm('CUST_SQLT',m.CUST_SQLT)  AS  custSqltNm ,
			   dbo.fn_getComDtlNm('TSS_ATTR_CD',m.TSS_ATTR_CD)  AS tssAttrNm  ,
			   dbo.fn_getComDtlNm('RSST_SPHE',m.RSST_SPHE)  AS  rsstSpheNm ,
			   dbo.fn_getComDtlNm('PPSL_MBD_CD',m.PPSL_MBD_CD)  AS ppslMbdNm  ,
			   dbo.fn_getComDtlNm('FC_CD',m.FC_CD)  AS  fcNm ,
               '1' as isEditable
        FROM dbo.IRIS_GRS_MGMT_MST m
        WHERE m.TSS_CD = #{tssCd}
        UNION
        SELECT m.TSS_CD AS tssCd,
               m.WBS_CD AS wbsCd,
               m.PK_WBS_CD AS pkWbsCd,
               m.PGS_STEP_CD AS pgsStepCd,
               m.TSS_ST AS tssSt,
               m.TSS_SCN_CD AS tssScnCd,
               m.GRS_YN AS grsYn,
               m.TSS_NM AS tssNm,
               m.PRJ_CD AS prjCd,
               isnull(PRJ_NM, dbo.fn_getPrjName(PRJ_CD)) as prjNm,
               m.BIZ_DPT_CD AS bizDptCd,
               m.PROD_G AS prodG,
               m.SA_SABUN_NEW AS saSabunNew,
               isnull(m.SA_SABUN_NAME,
                      (SELECT u.sa_name
                       FROM IRIS_SSO_USER u
                       WHERE u.sa_sabun_new = m.SA_SABUN_NEW
                      )) AS saSabunNm,
               m.TSS_STRT_DD AS tssStrtDd,
               m.TSS_FNH_DD AS tssFnhDd,
               m.CUST_SQLT AS custSqlt,
               m.TSS_ATTR_CD AS tssAttrCd,
               m.TSS_TYPE AS tssType,
               m.RSST_SPHE AS rsstSphe,
               m.PPSL_MBD_CD AS ppslMbdCd,
               m.FC_CD as fcCd,
			    case when CUST_SQLT = '01' then 'B2B제품군'
			        when CUST_SQLT = '02' then '일반제품군'
					else '' end as custSqltNm,
			   dbo.fn_getComDtlNm('PROD_G',m.PROD_G)  AS  prodGNm ,
			   dbo.fn_getComDtlNm('TSS_TYPE',m.TSS_TYPE)  AS  tssTypeNm ,
			   dbo.fn_getComDtlNm('TSS_SCN_CD',m.TSS_SCN_CD)  AS  tssScnNm ,
			   dbo.fn_getComDtlNm('BIZ_DPT_CD',m.BIZ_DPT_CD)  AS  bizDptNm ,
			   dbo.fn_getComDtlNm('CUST_SQLT',m.CUST_SQLT)  AS  custSqltNm ,
			   dbo.fn_getComDtlNm('TSS_ATTR_CD',m.TSS_ATTR_CD)  AS tssAttrNm  ,
			   dbo.fn_getComDtlNm('RSST_SPHE',m.RSST_SPHE)  AS  rsstSpheNm ,
			   dbo.fn_getComDtlNm('PPSL_MBD_CD',m.PPSL_MBD_CD)  AS ppslMbdNm  ,
			   dbo.fn_getComDtlNm('FC_CD',m.FC_CD)  AS  fcNm ,
               '0' as isEditable
        FROM dbo.IRIS_TSS_MGMT_MST m
        WHERE m.TSS_CD = #{tssCd}
    </select >

    <!-- GRS 기본 정보 등록/수정 -->
    <insert id="updateGrsInfo">
        <![CDATA[
/*updateGrsInfo GRS 기본 정보 등록/수정*/
MERGE INTO dbo.IRIS_GRS_MGMT_MST tbl
    USING (SELECT #{tssCd} AS TSS_CD) src
    ON (tbl.TSS_CD = src.TSS_CD)
    WHEN NOT MATCHED THEN
        ]]>
        <selectKey keyProperty="newTssCd" resultType="String" order="BEFORE">
            <![CDATA[
            SELECT #{pkWbsCd} + REPLICATE('0', 4 - LEN(COUNT(X.TSS_CD)+1)) + CAST(COUNT(X.TSS_CD) + 1 AS NVARCHAR(4))
              FROM dbo.IRIS_GRS_MGMT_MST X
             WHERE X.PK_WBS_CD = #{pkWbsCd}
        ]]>
        </selectKey>
        <![CDATA[
		INSERT
		       (
	           TSS_CD,
	           WBS_CD,
	           PK_WBS_CD,
	           PGS_STEP_CD,
	           TSS_ST,
	           TSS_SCN_CD,
	           GRS_YN,
	           TSS_NM,
	           PRJ_CD,
	           PRJ_NM,
	           DEPT_CD,
	           BIZ_DPT_CD,
	           PROD_G,
	           SA_SABUN_NEW,
	           SA_SABUN_NM,
	           TSS_STRT_DD,
	           TSS_FNH_DD,
	           CUST_SQLT,
	           TSS_SMRY_TXT,
	           TSS_ATTR_CD,
	           TSS_TYPE,
	           SMR_SMRY_TXT,
	           SMR_GOAL_TXT,
	           NPROD_SALS_PLN_Y,
	           CTY_OT_PLN_M,
	           FC_CD,
	           RSST_SPHE,
	           PPSL_MBD_CD,
	           FRST_RGST_DT,
	           FRST_RGST_ID,
	           LAST_MDFY_DT,
	           LAST_MDFY_ID
		       )VALUES(
				#{newTssCd},
				#{wbsCd},
				#{pkWbsCd},
				#{pgsStepCd},
				#{tssSt},
				#{tssScnCd},
				#{grsYn},
				#{tssNm},
				#{prjCd},
				#{prjNm},
				#{deptCode},
				#{bizDptCd},
				#{prodG},
				#{saSabunNew},
				#{saSabunNm},
				#{tssStrtDd},
				#{tssFnhDd},
				#{custSqlt},
				#{tssSmryTxt},
	            #{tssAttrCd},
	            #{tssType},
	            #{smrSmryTxt},
	            #{smrGoalTxt},
	           cast(#{nprodSalsPlnY} as FLOAT),
				#{ctyOtPlnM},
				#{fcCd},
				#{rsstSphe},
				#{ppslMbdCd},
				GETDATE(),
				#{userId},
				GETDATE(),
				#{userId}
		       )
    WHEN MATCHED THEN
        UPDATE SET
				GRS_YN = #{grsYn},
				TSS_NM = #{tssNm},
				PRJ_CD = #{prjCd},
				PRJ_NM = #{prjNm},
				DEPT_CD = #{deptCode},
				BIZ_DPT_CD = #{bizDptCd},
				PROD_G = #{prodG},
				SA_SABUN_NEW = #{saSabunNew},
				SA_SABUN_NM = #{saSabunNm},
				TSS_STRT_DD = #{tssStrtDd},
				TSS_FNH_DD = #{tssFnhDd},
				CUST_SQLT = #{custSqlt},
				TSS_SMRY_TXT = #{tssSmryTxt},
				TSS_ATTR_CD = #{tssAttrCd},
				TSS_TYPE = #{tssType},
				SMR_SMRY_TXT = #{smrSmryTxt},
				SMR_GOAL_TXT = #{smrGoalTxt},
				NPROD_SALS_PLN_Y = cast(#{nprodSalsPlnY} as FLOAT),
				CTY_OT_PLN_M = #{ctyOtPlnM},
				FC_CD = #{fcCd},
	           LAST_MDFY_DT = GETDATE(),
	           LAST_MDFY_ID = #{userId}
    ;
    	]]>
    </insert>


    <!-- GRS 기본 정보 마스터로 이관 -->
    <insert id="moveGrsDefInfo">
        /*moveGrsDefInfo GRS 기본 정보 마스터로 이관*/
        INSERT
        INTO IRIS_TSS_MGMT_MST
        (
            TSS_CD 
            ,WBS_CD 
            ,PK_WBS_CD 
            ,PGS_STEP_CD 
            ,TSS_ST 
            ,TSS_SCN_CD 
            ,DEPT_CODE 
            ,TSS_NM 
            ,PRJ_CD 
            ,PRJ_NM 
            ,BIZ_DPT_CD 
            ,PROD_G 
            ,SA_SABUN_NEW 
            ,SA_SABUN_NAME 
            ,TSS_STRT_DD 
            ,TSS_FNH_DD 
            ,CUST_SQLT 
            ,TSS_NOS_ST
            ,TSS_SMRY_TXT 
            ,TSS_ATTR_CD 
            ,TSS_TYPE 
            ,FRST_RGST_DT 
            ,FRST_RGST_ID 
            ,LAST_MDFY_DT 
            ,LAST_MDFY_ID
            ,GRS_YN
            ,FC_CD 
            ,RSST_SPHE 
            ,PPSL_MBD_CD 
        )
            SELECT #{tssCd} 
                ,g.WBS_CD 
                ,g.PK_WBS_CD 
                ,#{pgsStepCd} 
                ,g.TSS_ST 
                ,g.TSS_SCN_CD 
                ,(SELECT dbo.fn_getUpperDeptCd(DEPT_CD)
                 FROM IRIS_PRJ_RSST_MST p
                 WHERE PRJ_CD=g.PRJ_CD
                ) as DEPT_CODE 
                ,g.TSS_NM 
                ,g.PRJ_CD 
                ,g.PRJ_NM 
                ,g.BIZ_DPT_CD 
                ,g.PROD_G 
                ,g.SA_SABUN_NEW 
                ,g.SA_SABUN_NM 
                ,g.TSS_STRT_DD 
                ,g.TSS_FNH_DD 
                ,g.CUST_SQLT 
                ,#{tssNosSt}
                ,g.TSS_SMRY_TXT 
                ,g.TSS_ATTR_CD 
                ,g.TSS_TYPE 
                ,g.FRST_RGST_DT 
                ,g.FRST_RGST_ID 
                ,g.LAST_MDFY_DT 
                ,g.LAST_MDFY_ID
                ,g.GRS_YN
                ,g.FC_CD
                ,g.RSST_SPHE
                ,g.PPSL_MBD_CD
            FROM IRIS_GRS_MGMT_MST g
            WHERE g.TSS_CD = #{fromTssCd}
    </insert>

    <update id="updateGrsDefInfo02">
        UPDATE IRIS_TSS_MGMT_MST
        SET
            PPSL_MBD_CD = #{ppslMbdCd}
            , RSST_SPHE = #{rsstSphe}
        WHERE TSS_CD = #{tssCd}
    </update>

    <!-- GRS 기본 정보 개요 마스터 생성 -->
    <insert id="moveGrsDefSmry">
        /*moveGrsDefSmry GRS 기본 정보 개요 마스터 생성*/
        <choose>
            <when test='tssScnCd=="G"'>
                /*일반*/
                INSERT
                INTO IRIS_TSS_GEN_SMRY
                (
                 TSS_CD 
                ,CTY_OT_PLN_M
                ,ANCP_OT_PLN_DT
		<choose>
		<when test="grsEvSt == 'G2' ">
			    ,NPROD_NM          
				,NPROD_SALS_CUR_Y  
				,NPROD_SALS_CUR_Y_1
				,NPROD_SALS_CUR_Y_2
				,BIZ_PRFT_Pro_CUR_Y  
			    ,BIZ_PRFT_Pro_CUR_Y_1 
			    ,BIZ_PRFT_Pro_CUR_Y_2 
				,BIZ_PRFT_CUR_Y    
				,BIZ_PRFT_CUR_Y_1  
				,BIZ_PRFT_CUR_Y_2  
				,PTC_CPSN_CUR_Y    
				,PTC_CPSN_CUR_Y_1  
				,PTC_CPSN_CUR_Y_2  
				,PTC_CPSN_CUR_Y_3  
				,PTC_CPSN_CUR_Y_4  
				,EXP_ARSL_CUR_Y    
				,EXP_ARSL_CUR_Y_1  
				,EXP_ARSL_CUR_Y_2  
				,EXP_ARSL_CUR_Y_3  
				,EXP_ARSL_CUR_Y_4  
		</when>
		<otherwise>
				,NPROD_SALS_PLN_Y   
				,NPROD_SALS_PLN_Y_1 
				,NPROD_SALS_PLN_Y_2 
				,BIZ_PRFT_PLN_Y     
				,BIZ_PRFT_PLN_Y_1   
				,BIZ_PRFT_PLN_Y_2   
				,BIZ_PRFT_Pro_Y
			    ,BIZ_PRFT_Pro_Y_1  
				,BIZ_PRFT_Pro_Y_2  
				,PTC_CPSN_Y         
				,PTC_CPSN_Y_1       
				,PTC_CPSN_Y_2       
				,PTC_CPSN_Y_3       
				,PTC_CPSN_Y_4       
				,EXP_ARSL_Y         
				,EXP_ARSL_Y_1       
				,EXP_ARSL_Y_2       
				,EXP_ARSL_Y_3       
				,EXP_ARSL_Y_4       
    		</otherwise>
		</choose>
				,ATTC_FIL_ID
                ,FRST_RGST_DT 
                ,FRST_RGST_ID 
                ,LAST_MDFY_DT 
                ,LAST_MDFY_ID
                )
                VALUES
                (
                 #{tssCd}
                ,#{ctyOtPlnM}
                ,#{ancpOtPlnDt}
               <choose>
                <when test="grsEvSt == 'G2' ">
			    ,#{nprodNm}
				,CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsCurY} = '' THEN '0' ELSE #{nprodSalsCurY} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsCurY1} = '' THEN '0' ELSE #{nprodSalsCurY1} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsCurY2} = '' THEN '0' ELSE #{nprodSalsCurY2} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProCurY} = '' THEN '0' ELSE #{bizPrftProCurY} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProCurY1} = '' THEN '0' ELSE #{bizPrftProCurY1} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProCurY2} = '' THEN '0' ELSE #{bizPrftProCurY2} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{bizPrftCurY} = '' THEN '0' ELSE #{bizPrftCurY} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{bizPrftCurY1} = '' THEN '0' ELSE #{bizPrftCurY1} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{bizPrftCurY2} = '' THEN '0' ELSE #{bizPrftCurY2} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnCurY} = '' THEN '0' ELSE #{ptcCpsnCurY} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnCurY1} = '' THEN '0' ELSE #{ptcCpsnCurY1} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnCurY2} = '' THEN '0' ELSE #{ptcCpsnCurY2} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnCurY3} = '' THEN '0' ELSE #{ptcCpsnCurY3} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnCurY4} = '' THEN '0' ELSE #{ptcCpsnCurY4} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY} = '' THEN '0' ELSE #{expArslCurY} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY1} = '' THEN '0' ELSE #{expArslCurY1} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY2} = '' THEN '0' ELSE #{expArslCurY2} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY3} = '' THEN '0' ELSE #{expArslCurY3} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY4} = '' THEN '0' ELSE #{expArslCurY4} END)
		</when>
		<otherwise>
				,CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY} = '' THEN '0' ELSE #{nprodSalsPlnY} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY1} = '' THEN '0' ELSE #{nprodSalsPlnY1} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY2} = '' THEN '0' ELSE #{nprodSalsPlnY2} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{bizPrftPlnY} = '' THEN '0' ELSE #{bizPrftPlnY} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{bizPrftPlnY1} = '' THEN '0' ELSE #{bizPrftPlnY1} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{bizPrftPlnY2} = '' THEN '0' ELSE #{bizPrftPlnY2} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY} = '' THEN '0' ELSE #{bizPrftProY} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY1} = '' THEN '0' ELSE #{bizPrftProY1} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY2} = '' THEN '0' ELSE #{bizPrftProY2} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnY} = '' THEN '0' ELSE #{ptcCpsnY} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnY1} = '' THEN '0' ELSE #{ptcCpsnY1} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnY2} = '' THEN '0' ELSE #{ptcCpsnY2} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnY3} = '' THEN '0' ELSE #{ptcCpsnY3} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{ptcCpsnY4} = '' THEN '0' ELSE #{ptcCpsnY4} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{expArslY} = '' THEN '0' ELSE #{expArslY} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{expArslY1} = '' THEN '0' ELSE #{expArslY1} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{expArslY2} = '' THEN '0' ELSE #{expArslY2} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{expArslY3} = '' THEN '0' ELSE #{expArslY3} END)
				,CONVERT(numeric(15, 2), CASE WHEN #{expArslY4} = '' THEN '0' ELSE #{expArslY4} END)
	    		</otherwise>
		</choose>
                , #{attcFilId}
                , GETDATE()
                , #{userId}
                , GETDATE()
                , #{userId}
                )
            </when>
            <when test='tssScnCd=="O"'>
                /*대외*/
                INSERT
                INTO IRIS_TSS_OUSD_COO_SMRY
                (
                TSS_CD ,
                FRST_RGST_DT ,
                FRST_RGST_ID ,
                LAST_MDFY_DT ,
                LAST_MDFY_ID
                )
                VALUES
                (
                #{tssCd}
                , GETDATE()
                , #{userId}
                , GETDATE()
                , #{userId}
                )
            </when>
            <when test='tssScnCd=="N"'>
                /*국책*/
                INSERT
                INTO IRIS_TSS_NAT_PLCY_SMRY
                (
                TSS_CD ,
                TTL_CRRO_STRT_DT ,
                TTL_CRRO_FNH_DT ,
                FRST_RGST_DT ,
                FRST_RGST_ID ,
                LAST_MDFY_DT ,
                LAST_MDFY_ID
                )
                VALUES
                (
                #{tssCd}
                , #{tssStrtDd}
                , #{tssFnhDd}
                , GETDATE()
                , #{userId}
                , GETDATE()
                , #{userId}
                )
            </when>
            <when test='tssScnCd=="D"'>
                /*기술*/
                INSERT
                INTO IRIS_TSS_TCTM_SMRY
                (
                TSS_CD ,
                SMR_SMRY_TXT,
                SMR_GOAL_TXT,
                NPROD_SALS_PLN_Y,
                CTY_OT_PLN_M,
                FRST_RGST_DT ,
                FRST_RGST_ID ,
                LAST_MDFY_DT ,
                LAST_MDFY_ID
                )
                VALUES
                (
                #{tssCd}
                ,#{smrSmryTxt}
                ,#{smrGoalTxt}
                ,cast(#{nprodSalsPlnY} as FLOAT)
                ,#{ctyOtPlnM}
                , GETDATE()
                , #{userId}
                , GETDATE()
                , #{userId}
                )
            </when>

        </choose>
    </insert>


    <!-- GRS 기본 정보 삭제 -->
    <delete id="deleteDefInfo">
	    <![CDATA[
/* deleteDefInfo GRS 기본 정보 삭제*/
        DELETE FROM dbo.IRIS_GRS_MGMT_MST
        WHERE TSS_CD = #{tssCd};
        ]]>
    </delete>
    <delete id="deleteGrsInfo">
	    <![CDATA[
/* deleteDefInfo GRS 기본 정보 삭제*/
        DELETE FROM dbo.IRIS_GRS_EV_RSLT_RGST
        WHERE TSS_CD = #{tssCd};
        ]]>
    </delete>


    <!-- 마스터 과제상태 수정 -->
    <update id="updateDefTssSt">
    <![CDATA[
        /*updateDefTssSt  GRS기본정보 마스터 GRS상태 수정*/
        UPDATE IRIS_GRS_MGMT_MST
        SET TSS_ST       = #{tssSt}
            , LAST_MDFY_DT = GETDATE()
            , LAST_MDFY_ID = #{userId}
        WHERE TSS_CD = #{tssCd}
        ]]>
	</update>

    
        <!-- GRS 품의요청 내역 조회 -->
    <select id="retrieveGrsApproval" resultType="hashmap">
		<![CDATA[
--retrieveGrsApproval GRS 품의요청 내역 조회
        SELECT
            A.PRJ_CD         AS prjCd      --프로젝트코드
            ,C.PRJ_NM         AS prjNm      --프로젝트명
            ,A.TSS_CD         AS tssCd      --과제코드
            ,A.TSS_NM         AS tssNm      --과제명
            ,ISNULL(A.SA_SABUN_NAME, (select  u.sa_name from IRIS_SSO_USER u where u.sa_sabun_new=A.SA_SABUN_NEW)) as saSabunName  -- 과제책임자
            ,ISNULL(A.TSS_TYPE,'')       AS tssType    -- 개발유형
            ,dbo.fn_getComDtlNm('TSS_TYPE',A.TSS_TYPE)   AS tssTypeNm     -- 심의단계명
            ,B.EV_TITL        AS evTitl     --일시, 장소
		    ,B.grs_ev_st	     AS grsEvSt	--G1:초기,G2:최종,M:변경      심의단계
		    ,dbo.fn_getComDtlNm('GRS_EV_ST',B.grs_ev_st)   AS grsEvStNm     -- 심의단계명
            ,(select stuff((select ',' +
                                  sa_name
                           from IRIS_SSO_USER
                           where sa_sabun_new in (SELECT value
                                                  FROM STRING_SPLIT(convert(nvarchar(4000), B.CFRN_ATDT_CD_TXT), ',')
                                                  WHERE RTRIM(value) <> '')
                           order by sa_name
                           FOR XML PATH ('')), 1, 1, '')) AS cfrnAtdtCdTxtNm --참석자
            ,B.COMM_TXT       AS commTxt            --주요 Comment
            ,B.ATTC_FIL_ID    AS attcFilId        --첨부파일
            ,(SELECT CONVERT(DECIMAL(3,1),ROUND(sum(srr.EV_SCR / 5 * sm.WGVL),1),2)
             FROM iris_grs_ev_std_rslt_rgst srr,
                  IRIS_GRS_EV_STD_MGMT sm
             WHERE sm.GRS_EV_SN = srr.GRS_EV_SN
                   AND sm.GRS_EV_SEQ = srr.GRS_EV_SEQ
                   AND srr.TSS_CD =  A.TSS_CD 
                   AND srr.tss_cd_sn = (SELECT MAX(TSS_CD_SN)  FROM IRIS_GRS_EV_RSLT_RGST WHERE TSS_CD = A.TSS_CD )
                   ) AS evScr    --등급평균
          ,iif(B.DROP_YN is null or B.DROP_YN='','N',B.DROP_YN) as  dropYn
          ,B.EV_DT
        FROM
            IRIS_TSS_MGMT_MST A
            LEFT JOIN IRIS_PRJ_RSST_MST C  /*프로젝트연구마스터*/
                ON A.PRJ_CD = C.PRJ_CD
            LEFT JOIN IRIS_GRS_EV_RSLT_RGST B  /*GRS평가결과등록1*/
                ON A.TSS_CD = B.TSS_CD
                   AND B.TSS_CD_SN = (SELECT MAX(TSS_CD_SN)  FROM IRIS_GRS_EV_RSLT_RGST WHERE TSS_CD = A.TSS_CD)
       WHERE A.TSS_CD IN
        ]]>
	        <foreach collection="tssCdList" index="index" item="item" separator="," open="(" close=")">
            	'${tssCdList[index]}'
        	</foreach>

	</select>
	
	<update id="updateApprGuid">
        /*updateApprGuid GRS 품의 요청  GUID update(마스타 테이블)*/
		update	IRIS_TSS_MGMT_MST
		set		GUID = #{guid}
		where	TSS_CD IN
	        <foreach collection="tssCdList" index="index" item="item" separator="," open="(" close=")">
            	'${tssCdList[index]}'
        	</foreach>

	</update>

	<select id="getGuid" resultType="String">
                <![CDATA[
            SELECT 'H'
			     + SUBSTRING(CONVERT(VARCHAR, GETDATE(), 112), 3, 6)
			     + REPLICATE('0', 4 - LEN(CONVERT(VARCHAR, ISNULL(MAX(CONVERT(INT, SUBSTRING(X.GUID, 8, 4))), 0) + 1)))
			     + CONVERT(VARCHAR, ISNULL(MAX(CONVERT(INT, SUBSTRING(X.GUID, 8, 4))), 0) + 1)
			  FROM IRIS_COM_ITG_RDCS X
			 WHERE SUBSTRING(X.GUID, 1, 7) = 'H' + SUBSTRING(CONVERT(VARCHAR, GETDATE(), 112), 3, 6)
        ]]>
    </select>
    
       <update id="updateGrsDecode">
    	update IRIS_GRS_EV_RSLT_RGST
		set    EV_TITL = #{evTitl}
		      ,COMM_TXT = #{commTxt}
		where  tss_cd = #{tssCd}
		and    TSS_CD_SN = #{tssCdSn}
    </update>
    
    <select id="retrieveGrsDecodeList"  resultType="hashmap">
    	select  '0' as chk
    	      , tss_cd   as tssCd
		      ,tss_cd_sn as tssCdSn
			  ,isnull(EV_TITL, '') as evTitl 
			  ,isnull(COMM_TXT, '')  as commTxt
		from   IRIS_GRS_EV_RSLT_RGST
		 <![CDATA[
        where  ( COMM_TXT <> '' or  COMM_TXT is not null)
        ]]>
        order by frst_rgst_dt desc
    </select>
    
    <select id="retrieveTssInfo" resultType="hashmap">
    	select   m.TSS_SCN_CD    as  tssScnCd   
				,m.grs_yn        as  grsYn      
				,m.prj_nm        as  prjNm      
				,m.TSS_NM        as  tssNm      
				,m.sa_sabun_nm   as  saSabunNm  
				,m.BIZ_DPT_CD    as  bizDptCd   
				,m.PROD_G        as  prodG      
				,m.CUST_SQLT     as  custSqlt   
				,m.TSS_CD        as  tssCd      
				,m.WBS_CD        as  wbsCd      
				,m.TSS_STRT_DD   as  tssStrtDd  
				,m.TSS_FNH_DD    as  tssFnhDd   
				,m.TSS_TYPE      as  tssType    
				,m.FC_CD         as  fcCd       
				,m.TSS_ATTR_CD   as  tssAttrCd  
				,m.sa_Sabun_new  as  saSabunNew 
				,m.PRJ_CD        as  prjCd    
				,m.tss_st        as  tssSt  
				,m.pgs_step_cd   as  pgs_step_cd
				,m.pk_wbs_cd     as  pk_wbs_cd
				,m.dept_code     as  dept_cd
		from (
			select  TSS_SCN_CD
					,case when (select count(x.tss_cd) from IRIS_GRS_EV_RSLT_RGST x where  x.tss_cd = tss_cd ) > 0 then 'Y'
							else 'N' end as grs_yn
					,dbo.fn_getPrjName(prj_cd) as prj_nm
					,dbo.fn_getSabunName(sa_sabun_new) as sa_sabun_nm
					,BIZ_DPT_CD
					,PROD_G
					,TSS_CD
					,WBS_CD
					,TSS_NM
					,CUST_SQLT
					,TSS_ATTR_CD
					,TSS_STRT_DD
					,TSS_FNH_DD   
					,TSS_TYPE
					,FC_CD
					,sa_Sabun_new
					,PRJ_CD
					,tss_st
					,pgs_step_cd
					,pk_wbs_cd
					,dept_code  
			from   IRIS_TSS_MGMT_MST
			where  tss_cd = #{tssCd}
			union 
			select   TSS_SCN_CD
					,grs_yn
					,dbo.fn_getPrjName(prj_cd) as prj_nm
					,dbo.fn_getSabunName(SA_SABUN_NEW) as sa_sabun_nm
					,BIZ_DPT_CD
					,PROD_G
					,TSS_CD
					,WBS_CD
					,TSS_NM
					,CUST_SQLT
					,TSS_ATTR_CD
					,TSS_STRT_DD
					,TSS_FNH_DD   
					,TSS_TYPE
					,FC_CD
					,SA_SABUN_NEW
					,PRJ_CD
					,tss_st
					,pgs_step_cd
					,pk_wbs_cd
					,dept_cd as dept_code
			from   IRIS_GRS_MGMT_MST
			where  tss_cd = #{tssCd}
			) m
    </select>
    
    <select id="retrievveGrsInfo" resultType="hashmap">
    	<![CDATA[
    	--retrievveGrsInfo
    	select   m.prjNm                as prjNm               
				,m.bizDptNm             as bizDptNm            
				,m.tssAttrNm            as tssAttrNm           
				,m.TSS_NM               as tssNm              
				,rtrim(m.GRS_EV_ST)     as grsEvSt           
				,m.tssDd                as tssDd               
				,m.dlbrCrgrNm           as dlbrCrgrNm          
				,m.EV_TITL              as evTitl             
				,m.cfrnAtdtCdTxtNm      as cfrnAtdtCdTxtNm     
				,m.COMM_TXT             as commTxt            
				,m.grs_ev_sn            as grsEvSn           
				,m.grs_st_cd            as grsStCd           
				,m.CTY_OT_PLN_M         as ctyOtPlnM                
				,m.ANCP_OT_PLN_DT       as ancpOtPlnDt      
				,m.BIZ_PRFT_Pro_Y       as bizPrftProY      
				,m.BIZ_PRFT_Pro_Y_1     as bizPrftProY1    
				,m.BIZ_PRFT_Pro_Y_2     as bizPrftProY2    
				,m.BIZ_PRFT_Pro_CUR_Y   as bizPrftProCurY  
				,m.BIZ_PRFT_Pro_CUR_Y_1 as bizPrftProCurY1
				,m.BIZ_PRFT_Pro_CUR_Y_2 as bizPrftProCurY2
				,m.BIZ_PRFT_PLN_Y       as bizPrftPlnY      
				,m.BIZ_PRFT_PLN_Y_1     as bizPrftPlnY1    
				,m.BIZ_PRFT_PLN_Y_2     as bizPrftPlnY2    
				,m.BIZ_PRFT_CUR_Y       as bizPrftCurY      
				,m.BIZ_PRFT_CUR_Y_1     as bizPrftCurY1    
				,m.BIZ_PRFT_CUR_Y_2     as bizPrftCurY2    
				,m.NPROD_SALS_PLN_Y     as nprodSalsPlnY    
				,m.NPROD_SALS_PLN_Y_1   as nprodSalsPlnY1  
				,m.NPROD_SALS_PLN_Y_2   as nprodSalsPlnY2  
				,m.NPROD_SALS_CUR_Y     as nprodSalsCurY    
				,m.NPROD_SALS_CUR_Y_1   as nprodSalsCurY1  
				,m.NPROD_SALS_CUR_Y_2   as nprodSalsCurY2  
				,m.PTC_CPSN_Y           as ptcCpsnY          
				,m.PTC_CPSN_Y_1         as ptcCpsnY1        
				,m.PTC_CPSN_Y_2         as ptcCpsnY2        
				,m.PTC_CPSN_Y_3         as ptcCpsnY3        
				,m.PTC_CPSN_Y_4         as ptcCpsnY4        
				,m.PTC_CPSN_CUR_Y       as ptcCpsnCurY      
				,m.PTC_CPSN_CUR_Y_1     as ptcCpsnCurY1    
				,m.PTC_CPSN_CUR_Y_2     as ptcCpsnCurY2    
				,m.PTC_CPSN_CUR_Y_3     as ptcCpsnCurY3    
				,m.PTC_CPSN_CUR_Y_4     as ptcCpsnCurY4    
				,m.EXP_ARSL_Y           as expArslY          
				,m.EXP_ARSL_Y_1         as expArslY1        
				,m.EXP_ARSL_Y_2         as expArslY2        
				,m.EXP_ARSL_Y_3         as expArslY3        
				,m.EXP_ARSL_Y_4         as expArslY4        
				,m.EXP_ARSL_CUR_Y       as expArslCurY      
				,m.EXP_ARSL_CUR_Y_1     as expArslCurY1    
				,m.EXP_ARSL_CUR_Y_2     as expArslCurY2    
				,m.EXP_ARSL_CUR_Y_3     as expArslCurY3    
				,m.EXP_ARSL_CUR_Y_4     as expArslCurY4    
				,m.TSS_CD               as tssCd              
				,m.PRJ_CD               as prjCd              
				,m.BIZ_DPT_CD           as bizDptCd          
				,m.TSS_ATTR_CD          as tssAttrCd         
				,m.TSS_STRT_DD          as tssStrtDd         
				,m.TSS_FNH_DD           as tssFnhDd          
				,m.CFRN_ATDT_CD_TXT     as cfrnAtdtCdTxt    
				,m.ATTC_FIL_ID          as attcFilId         
				,m.WBS_CD	            as wbsCd	            
				,m.TSS_SCN_CD           as tssScnCd          
				,m.TSS_CD_SN	        as tssCdSn	          
				,m.PGS_STEP_CD          as pgsStepCd         
				,m.DROP_YN              as dropYn             
				,m.GRS_EV_M_TYPE        as grsEvMType       
				,m.grsEvMTypeNm         as grsEvMTypeNm        
				,m.deptCode             as deptCode            
				,m.saSabunNew           as saSabunNew                       
				,m.evDt                 as evDt    
				,m.evResult                
				,m.nprodNm
				,m.tssType
				,dbo.fn_getComDtlNm('GRS_EV_ST',rtrim(m.GRS_EV_ST))  AS grsEvStNm
				,dbo.fn_getComDtlNm('TSS_TYPE',rtrim(m.tssType))  AS tssTypeNm
				,m.custSqlt
		from    (
				select   dbo.fn_getPrjName(b.PRJ_CD)						as prjNm
						,dbo.fn_getComDtlNm('BIZ_DPT_CD', b.BIZ_DPT_CD)		AS bizDptNm
						,dbo.fn_getComDtlNm('TSS_ATTR_CD', b.TSS_ATTR_CD)	AS tssAttrNm
						,b.TSS_NM						                    
						,rtrim(a.GRS_EV_ST) as  GRS_EV_ST											
						,b.TSS_STRT_DD+' ~ '+isnull((select  tss_fnh_dd from iris_tmp_tss where tss_cd =#{tssCd}), b.TSS_FNH_DD ) AS tssDd      --과제기간
						,dbo.fn_getSabunName(a.DLBR_CRGR	)				AS dlbrCrgrNm
						,a.EV_TITL
						,(select stuff((select ',' +
													sa_name
											from IRIS_SSO_USER
											where sa_sabun_new in (SELECT value
																	FROM STRING_SPLIT(a.CFRN_ATDT_CD_TXT, ',')
																	WHERE RTRIM(value) <> '')
											order by sa_name
											FOR XML PATH ('')), 1, 1, ''))   AS cfrnAtdtCdTxtNm
						,a.COMM_TXT
						,a.grs_ev_sn
						,a.grs_st_cd
						, case when a.drop_yn = 'Y' then 'DROP'
						  when a.GRS_EV_M_TYPE = 'HD' then '보류'
						  when a.grs_st_cd ='101' and (a.drop_yn is null  or  a.drop_yn = '') then ''
						  else 'PASS' end as evResult
						  
						,a.nprod_Nm  as nprodNm  
					    ,isnull(a.CTY_OT_PLN_M           , c.CTY_OT_PLN_M         )  as CTY_OT_PLN_M                                    
						,isnull(a.ANCP_OT_PLN_DT         , c.ANCP_OT_PLN_DT       )  as ANCP_OT_PLN_DT                       
						,isnull(a.BIZ_PRFT_Pro_Y         , c.BIZ_PRFT_Pro_Y       )  as BIZ_PRFT_Pro_Y                       
						,isnull(a.BIZ_PRFT_Pro_Y_1       , c.BIZ_PRFT_Pro_Y_1     )  as BIZ_PRFT_Pro_Y_1                     
						,isnull(a.BIZ_PRFT_Pro_Y_2       , c.BIZ_PRFT_Pro_Y_2     )  as BIZ_PRFT_Pro_Y_2                     
						,isnull(a.BIZ_PRFT_Pro_CUR_Y     , c.BIZ_PRFT_Pro_CUR_Y   )  as BIZ_PRFT_Pro_CUR_Y                   
						,isnull(a.BIZ_PRFT_Pro_CUR_Y_1   , c.BIZ_PRFT_Pro_CUR_Y_1 )  as BIZ_PRFT_Pro_CUR_Y_1                 
						,isnull(a.BIZ_PRFT_Pro_CUR_Y_2   , c.BIZ_PRFT_Pro_CUR_Y_2 )  as BIZ_PRFT_Pro_CUR_Y_2                 
						,isnull(a.BIZ_PRFT_PLN_Y         , c.BIZ_PRFT_PLN_Y       )  as BIZ_PRFT_PLN_Y                       
						,isnull(a.BIZ_PRFT_PLN_Y_1       , c.BIZ_PRFT_PLN_Y_1     )  as BIZ_PRFT_PLN_Y_1                     
						,isnull(a.BIZ_PRFT_PLN_Y_2       , c.BIZ_PRFT_PLN_Y_2     )  as BIZ_PRFT_PLN_Y_2                     
						,isnull(a.BIZ_PRFT_CUR_Y         , c.BIZ_PRFT_CUR_Y       )  as BIZ_PRFT_CUR_Y                       
						,isnull(a.BIZ_PRFT_CUR_Y_1       , c.BIZ_PRFT_CUR_Y_1     )  as BIZ_PRFT_CUR_Y_1                     
						,isnull(a.BIZ_PRFT_CUR_Y_2       , c.BIZ_PRFT_CUR_Y_2     )  as BIZ_PRFT_CUR_Y_2                     
						,isnull(a.NPROD_SALS_PLN_Y       , c.NPROD_SALS_PLN_Y     )  as NPROD_SALS_PLN_Y                     
						,isnull(a.NPROD_SALS_PLN_Y_1     , c.NPROD_SALS_PLN_Y_1   )  as NPROD_SALS_PLN_Y_1                   
						,isnull(a.NPROD_SALS_PLN_Y_2     , c.NPROD_SALS_PLN_Y_2   )  as NPROD_SALS_PLN_Y_2                   
						,isnull(a.NPROD_SALS_CUR_Y       , c.NPROD_SALS_CUR_Y     )  as NPROD_SALS_CUR_Y                     
						,isnull(a.NPROD_SALS_CUR_Y_1     , c.NPROD_SALS_CUR_Y_1   )  as NPROD_SALS_CUR_Y_1                   
						,isnull(a.NPROD_SALS_CUR_Y_2     , c.NPROD_SALS_CUR_Y_2   )  as NPROD_SALS_CUR_Y_2                   
						,isnull(a.PTC_CPSN_Y             , c.PTC_CPSN_Y           )  as PTC_CPSN_Y                           
						,isnull(a.PTC_CPSN_Y_1           , c.PTC_CPSN_Y_1         )  as PTC_CPSN_Y_1                         
						,isnull(a.PTC_CPSN_Y_2           , c.PTC_CPSN_Y_2         )  as PTC_CPSN_Y_2                         
						,isnull(a.PTC_CPSN_Y_3           , c.PTC_CPSN_Y_3         )  as PTC_CPSN_Y_3                         
						,isnull(a.PTC_CPSN_Y_4           , c.PTC_CPSN_Y_4         )  as PTC_CPSN_Y_4                         
						,isnull(a.PTC_CPSN_CUR_Y         , c.PTC_CPSN_CUR_Y       )  as PTC_CPSN_CUR_Y                       
						,isnull(a.PTC_CPSN_CUR_Y_1       , c.PTC_CPSN_CUR_Y_1     )  as PTC_CPSN_CUR_Y_1                     
						,isnull(a.PTC_CPSN_CUR_Y_2       , c.PTC_CPSN_CUR_Y_2     )  as PTC_CPSN_CUR_Y_2                     
						,isnull(a.PTC_CPSN_CUR_Y_3       , c.PTC_CPSN_CUR_Y_3     )  as PTC_CPSN_CUR_Y_3                     
						,isnull(a.PTC_CPSN_CUR_Y_4       , c.PTC_CPSN_CUR_Y_4     )  as PTC_CPSN_CUR_Y_4                     
						,isnull(a.EXP_ARSL_Y             , c.EXP_ARSL_Y           )  as EXP_ARSL_Y                           
						,isnull(a.EXP_ARSL_Y_1           , c.EXP_ARSL_Y_1         )  as EXP_ARSL_Y_1                         
						,isnull(a.EXP_ARSL_Y_2           , c.EXP_ARSL_Y_2         )  as EXP_ARSL_Y_2                         
						,isnull(a.EXP_ARSL_Y_3           , c.EXP_ARSL_Y_3         )  as EXP_ARSL_Y_3                         
						,isnull(a.EXP_ARSL_Y_4           , c.EXP_ARSL_Y_4         )  as EXP_ARSL_Y_4                         
						,isnull(a.EXP_ARSL_CUR_Y         , c.EXP_ARSL_CUR_Y       )  as EXP_ARSL_CUR_Y                       
						,isnull(a.EXP_ARSL_CUR_Y_1       , c.EXP_ARSL_CUR_Y_1     )  as EXP_ARSL_CUR_Y_1                     
						,isnull(a.EXP_ARSL_CUR_Y_2       , c.EXP_ARSL_CUR_Y_2     )  as EXP_ARSL_CUR_Y_2                     
						,isnull(a.EXP_ARSL_CUR_Y_3       , c.EXP_ARSL_CUR_Y_3     )  as EXP_ARSL_CUR_Y_3                     
						,isnull(a.EXP_ARSL_CUR_Y_4       , c.EXP_ARSL_CUR_Y_4     )  as EXP_ARSL_CUR_Y_4                     
						,b.PRJ_CD
						,b.BIZ_DPT_CD
						,b.TSS_ATTR_CD
						,b.TSS_STRT_DD
						,isnull((select  tss_fnh_dd from iris_tmp_tss where tss_cd =#{tssCd}), b.TSS_FNH_DD ) as TSS_FNH_DD 
						,a.CFRN_ATDT_CD_TXT
						,a.ATTC_FIL_ID
						,b.TSS_CD	    
						,b.WBS_CD	  
						,b.TSS_SCN_CD  
						,a.TSS_CD_SN	  
						,b.PGS_STEP_CD
						,a.DROP_YN
						,a.GRS_EV_M_TYPE
						,case when GRS_EV_M_TYPE = 'IN' then '진척도 점검'
								when GRS_EV_M_TYPE = 'AL' then '변경'
								when GRS_EV_M_TYPE = 'HD' then '보류'
								else '' end grsEvMTypeNm
						,(select dept_cd from iris_prj_rsst_mst where prj_cd = b.prj_cd ) as deptCode    
						,b.sa_sabun_new as saSabunNew     
						,a.EV_DT as evDt
						,b.tss_Type as tssType
						,b.cust_sqlt as custSqlt
				from    iris_grs_ev_rslt_rgst a
				]]>
				<choose>
					<when test="grsEvSt == 'G1' and grsStCd == '101' ">
						inner join IRIS_GRS_MGMT_MST b
					</when>
					<otherwise>	
						inner join IRIS_TSS_MGMT_MST b
					</otherwise>
				</choose>	
						on a.TSS_CD = b.TSS_CD
						left outer join iris_tss_gen_smry c
						on a.tss_cd = c.tss_cd
				where  a.tss_cd = #{tssCd}
				and    a.TSS_CD_SN = #{tssCdSn}
				
			) m
    </select>
    
    <update id="saveTmpGrsInfo">
    	update IRIS_GRS_EV_RSLT_RGST
		set  EV_TITL             = #{evTitl}
			,CFRN_ATDT_CD_TXT    = #{cfrnAtdtCdTxt}
			,COMM_TXT            = #{commTxt}
			,GRS_EV_SN           = #{grsEvSn}
			,ATTC_FIL_ID         = #{attcFilId}
			,EV_DT               = #{evDt}
<choose>
		<when test="grsEvSt == 'G1' ">
			,CTY_OT_PLN_M        = #{ctyOtPlnM}
		</when>
		<otherwise>
			,ANCP_OT_PLN_DT      = #{ancpOtPlnDt}
	   </otherwise>
</choose>			
	<choose>
		<when test="grsEvSt == 'G2' ">
		    ,NPROD_NM            = #{nprodNm}
			,NPROD_SALS_CUR_Y    = CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsCurY} = '' THEN '0' ELSE #{nprodSalsCurY} END)
			,NPROD_SALS_CUR_Y_1  = CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsCurY1} = '' THEN '0' ELSE #{nprodSalsCurY1} END)
			,NPROD_SALS_CUR_Y_2  = CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsCurY2} = '' THEN '0' ELSE #{nprodSalsCurY2} END)
			,BIZ_PRFT_CUR_Y      = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftCurY} = '' THEN '0' ELSE #{bizPrftCurY} END)
			,BIZ_PRFT_CUR_Y_1    = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftCurY1} = '' THEN '0' ELSE #{bizPrftCurY1} END)
			,BIZ_PRFT_CUR_Y_2    = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftCurY2} = '' THEN '0' ELSE #{bizPrftCurY2} END)
			,BIZ_PRFT_Pro_CUR_Y   = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProCurY} = '' THEN '0' ELSE #{bizPrftProCurY} END)
			,BIZ_PRFT_Pro_CUR_Y_1 = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProCurY1} = '' THEN '0' ELSE #{bizPrftProCurY1} END)
			,BIZ_PRFT_Pro_CUR_Y_2 = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProCurY2} = '' THEN '0' ELSE #{bizPrftProCurY2} END)
			,PTC_CPSN_CUR_Y      = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnCurY} = '' THEN '0' ELSE #{ptcCpsnCurY} END)
			,PTC_CPSN_CUR_Y_1    = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnCurY1} = '' THEN '0' ELSE #{ptcCpsnCurY1} END)
			,PTC_CPSN_CUR_Y_2    = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnCurY2} = '' THEN '0' ELSE #{ptcCpsnCurY2} END)
			,PTC_CPSN_CUR_Y_3    = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnCurY3} = '' THEN '0' ELSE #{ptcCpsnCurY3} END)
			,PTC_CPSN_CUR_Y_4    = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnCurY4} = '' THEN '0' ELSE #{ptcCpsnCurY4} END)
			,EXP_ARSL_CUR_Y      = CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY} = '' THEN '0' ELSE #{expArslCurY} END)
			,EXP_ARSL_CUR_Y_1    = CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY1} = '' THEN '0' ELSE #{expArslCurY1} END)
			,EXP_ARSL_CUR_Y_2    = CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY2} = '' THEN '0' ELSE #{expArslCurY2} END)
			,EXP_ARSL_CUR_Y_3    = CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY3} = '' THEN '0' ELSE #{expArslCurY3} END)
			,EXP_ARSL_CUR_Y_4    = CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY4} = '' THEN '0' ELSE #{expArslCurY4} END)
		</when>
		<otherwise>
			,NPROD_SALS_PLN_Y    = CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY} = '' THEN '0' ELSE #{nprodSalsPlnY} END)
			,NPROD_SALS_PLN_Y_1  = CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY1} = '' THEN '0' ELSE #{nprodSalsPlnY1} END)
			,NPROD_SALS_PLN_Y_2  = CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY2} = '' THEN '0' ELSE #{nprodSalsPlnY2} END)
			,BIZ_PRFT_PLN_Y      = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftPlnY} = '' THEN '0' ELSE #{bizPrftPlnY} END)
			,BIZ_PRFT_PLN_Y_1    = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftPlnY1} = '' THEN '0' ELSE #{bizPrftPlnY1} END)
			,BIZ_PRFT_PLN_Y_2    = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftPlnY2} = '' THEN '0' ELSE #{bizPrftPlnY2} END)
			,BIZ_PRFT_Pro_Y      = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY} = '' THEN '0' ELSE #{bizPrftProY} END)
			,BIZ_PRFT_Pro_Y_1    = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY1} = '' THEN '0' ELSE #{bizPrftProY1} END)
			,BIZ_PRFT_Pro_Y_2    = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY2} = '' THEN '0' ELSE #{bizPrftProY2} END)
			,PTC_CPSN_Y          = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnY} = '' THEN '0' ELSE #{ptcCpsnY} END)
			,PTC_CPSN_Y_1        = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnY1} = '' THEN '0' ELSE #{ptcCpsnY1} END)
			,PTC_CPSN_Y_2        = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnY2} = '' THEN '0' ELSE #{ptcCpsnY2} END)
			,PTC_CPSN_Y_3        = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnY3} = '' THEN '0' ELSE #{ptcCpsnY3} END)
			,PTC_CPSN_Y_4        = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnY4} = '' THEN '0' ELSE #{ptcCpsnY4} END)
			,EXP_ARSL_Y          = CONVERT(numeric(15, 2), CASE WHEN #{expArslY} = '' THEN '0' ELSE #{expArslY} END)
			,EXP_ARSL_Y_1        = CONVERT(numeric(15, 2), CASE WHEN #{expArslY1} = '' THEN '0' ELSE #{expArslY1} END)
			,EXP_ARSL_Y_2        = CONVERT(numeric(15, 2), CASE WHEN #{expArslY2} = '' THEN '0' ELSE #{expArslY2} END)
			,EXP_ARSL_Y_3        = CONVERT(numeric(15, 2), CASE WHEN #{expArslY3} = '' THEN '0' ELSE #{expArslY3} END)
			,EXP_ARSL_Y_4        = CONVERT(numeric(15, 2), CASE WHEN #{expArslY4} = '' THEN '0' ELSE #{expArslY4} END)
    		</otherwise>
		</choose>
		    ,GRS_EV_M_TYPE       = #{grsEvMType}
			,LAST_MDFY_ID        = #{userId}
			,LAST_MDFY_DT        = getdate()   
		where   tss_cd    = #{tssCd}
		and     TSS_CD_SN = #{tssCdSn}  
    </update>
    
    <update id="saveGrsInfo">
    update IRIS_GRS_EV_RSLT_RGST
		set  EV_TITL             = #{evTitl}
			,CFRN_ATDT_CD_TXT    = #{cfrnAtdtCdTxt}
			,COMM_TXT            = #{commTxt}
			,GRS_EV_SN           = #{grsEvSn}
			,GRS_EV_ST           = #{grsEvSt}
			,ATTC_FIL_ID         = #{attcFilId}
			,EV_DT               = #{evDt}
	<choose>
		<when test="grsEvSt == 'G1' ">
			,CTY_OT_PLN_M        = #{ctyOtPlnM}
		</when>
		<otherwise>
			,ANCP_OT_PLN_DT      = #{ancpOtPlnDt}
	   </otherwise>
	</choose>	
	<choose>
		<when test="grsEvSt == 'G2' ">
		    ,NPROD_NM            = #{nprodNm}
			,NPROD_SALS_CUR_Y    = CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsCurY} = '' THEN '0' ELSE #{nprodSalsCurY} END)
			,NPROD_SALS_CUR_Y_1  = CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsCurY1} = '' THEN '0' ELSE #{nprodSalsCurY1} END)
			,NPROD_SALS_CUR_Y_2  = CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsCurY2} = '' THEN '0' ELSE #{nprodSalsCurY2} END)
			,BIZ_PRFT_CUR_Y      = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftCurY} = '' THEN '0' ELSE #{bizPrftCurY} END)
			,BIZ_PRFT_CUR_Y_1    = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftCurY1} = '' THEN '0' ELSE #{bizPrftCurY1} END)
			,BIZ_PRFT_CUR_Y_2    = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftCurY2} = '' THEN '0' ELSE #{bizPrftCurY2} END)
			,BIZ_PRFT_Pro_CUR_Y   = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProCurY} = '' THEN '0' ELSE #{bizPrftProCurY} END)
			,BIZ_PRFT_Pro_CUR_Y_1 = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProCurY1} = '' THEN '0' ELSE #{bizPrftProCurY1} END)
			,BIZ_PRFT_Pro_CUR_Y_2 = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProCurY2} = '' THEN '0' ELSE #{bizPrftProCurY2} END)
			,PTC_CPSN_CUR_Y      = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnCurY} = '' THEN '0' ELSE #{ptcCpsnCurY} END)
			,PTC_CPSN_CUR_Y_1    = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnCurY1} = '' THEN '0' ELSE #{ptcCpsnCurY1} END)
			,PTC_CPSN_CUR_Y_2    = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnCurY2} = '' THEN '0' ELSE #{ptcCpsnCurY2} END)
			,PTC_CPSN_CUR_Y_3    = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnCurY3} = '' THEN '0' ELSE #{ptcCpsnCurY3} END)
			,PTC_CPSN_CUR_Y_4    = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnCurY4} = '' THEN '0' ELSE #{ptcCpsnCurY4} END)
			,EXP_ARSL_CUR_Y      = CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY} = '' THEN '0' ELSE #{expArslCurY} END)
			,EXP_ARSL_CUR_Y_1    = CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY1} = '' THEN '0' ELSE #{expArslCurY1} END)
			,EXP_ARSL_CUR_Y_2    = CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY2} = '' THEN '0' ELSE #{expArslCurY2} END)
			,EXP_ARSL_CUR_Y_3    = CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY3} = '' THEN '0' ELSE #{expArslCurY3} END)
			,EXP_ARSL_CUR_Y_4    = CONVERT(numeric(15, 2), CASE WHEN #{expArslCurY4} = '' THEN '0' ELSE #{expArslCurY4} END)
		</when>
		<otherwise>
			,NPROD_SALS_PLN_Y    = CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY} = '' THEN '0' ELSE #{nprodSalsPlnY} END)
			,NPROD_SALS_PLN_Y_1  = CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY1} = '' THEN '0' ELSE #{nprodSalsPlnY1} END)
			,NPROD_SALS_PLN_Y_2  = CONVERT(numeric(15, 2), CASE WHEN #{nprodSalsPlnY2} = '' THEN '0' ELSE #{nprodSalsPlnY2} END)
			,BIZ_PRFT_PLN_Y      = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftPlnY} = '' THEN '0' ELSE #{bizPrftPlnY} END)
			,BIZ_PRFT_PLN_Y_1    = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftPlnY1} = '' THEN '0' ELSE #{bizPrftPlnY1} END)
			,BIZ_PRFT_PLN_Y_2    = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftPlnY2} = '' THEN '0' ELSE #{bizPrftPlnY2} END)
			,BIZ_PRFT_Pro_Y      = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY} = '' THEN '0' ELSE #{bizPrftProY} END)
			,BIZ_PRFT_Pro_Y_1    = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY1} = '' THEN '0' ELSE #{bizPrftProY1} END)
			,BIZ_PRFT_Pro_Y_2    = CONVERT(numeric(15, 2), CASE WHEN #{bizPrftProY2} = '' THEN '0' ELSE #{bizPrftProY2} END)
			,PTC_CPSN_Y          = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnY} = '' THEN '0' ELSE #{ptcCpsnY} END)
			,PTC_CPSN_Y_1        = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnY1} = '' THEN '0' ELSE #{ptcCpsnY1} END)
			,PTC_CPSN_Y_2        = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnY2} = '' THEN '0' ELSE #{ptcCpsnY2} END)
			,PTC_CPSN_Y_3        = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnY3} = '' THEN '0' ELSE #{ptcCpsnY3} END)
			,PTC_CPSN_Y_4        = CONVERT(numeric(15, 0), CASE WHEN #{ptcCpsnY4} = '' THEN '0' ELSE #{ptcCpsnY4} END)
			,EXP_ARSL_Y          = CONVERT(numeric(15, 2), CASE WHEN #{expArslY} = '' THEN '0' ELSE #{expArslY} END)
			,EXP_ARSL_Y_1        = CONVERT(numeric(15, 2), CASE WHEN #{expArslY1} = '' THEN '0' ELSE #{expArslY1} END)
			,EXP_ARSL_Y_2        = CONVERT(numeric(15, 2), CASE WHEN #{expArslY2} = '' THEN '0' ELSE #{expArslY2} END)
			,EXP_ARSL_Y_3        = CONVERT(numeric(15, 2), CASE WHEN #{expArslY3} = '' THEN '0' ELSE #{expArslY3} END)
			,EXP_ARSL_Y_4        = CONVERT(numeric(15, 2), CASE WHEN #{expArslY4} = '' THEN '0' ELSE #{expArslY4} END)
    		</otherwise>
		</choose>
		    ,GRS_EV_M_TYPE       = #{grsEvMType}
			,DROP_YN             = #{dropYn} 
	        ,GRS_ST_CD           = '102'
			,LAST_MDFY_ID        = #{userId}
			,LAST_MDFY_DT        = getdate()   
		where   tss_cd = #{tssCd}
		and     TSS_CD_SN = #{tssCdSn}  
    </update>
    
    <update id="updateGrsGuid">
    --updateGrsGuid GRS 전자결재 id 업데이트
    	update IRIS_GRS_EV_RSLT_RGST
    	set    guid = #{guid}
    	where  tss_cd = #{tssCd}
    	and    tss_cd_sn = #{tssCdSn}
    	and    grs_ev_st = #{grsEvSt}
    </update>
    
    
    <select id="retrieveGrsUserChk" resultType="String">
    	select case when count(*) > 0 then 'Y'
    	       else 'N' end as  grsUserChk
		from   IRIS_ADM_COM_CD
		where  COM_CD_CD = 'GRS_USER'
		and    COM_DTL_CD = #{_userSabun}  
    </select>
    
    
    <!-- 과제정보 변경 업데이트 -->
    <insert id="updateTssInfo">
        <![CDATA[
		/*updateTssInfo 과제정보 변경 업데이트*/
		MERGE INTO dbo.iris_tmp_tss tbl
		    USING (SELECT #{tssCd} AS TSS_CD) src
		    ON (tbl.TSS_CD = src.TSS_CD)
		    WHEN NOT MATCHED THEN
       
		INSERT
		       (
	           TSS_CD,
	           TSS_FNH_DD,
	           FRST_RGST_DT,
	           FRST_RGST_ID,
	           LAST_MDFY_DT,
	           LAST_MDFY_ID
		       )VALUES(
				#{tssCd},
				#{tssFnhDd},
				GETDATE(),
				#{userId},
				GETDATE(),
				#{userId}
		       )
    WHEN MATCHED THEN
        UPDATE SET
				TSS_FNH_DD = #{tssFnhDd},
				LAST_MDFY_DT = GETDATE(),
	            LAST_MDFY_ID = #{userId}
    ;
    	]]>
    </insert>
</mapper>
