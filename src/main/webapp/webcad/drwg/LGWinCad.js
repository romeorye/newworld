var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
$(function () {
    var canvas = document.getElementById('ViewArea');
    var workArea = document.getElementById('WorkArea');
    U1.WinCad.Services.LgWinService.Current.Init(canvas, workArea);
    window.addEventListener("resize", function (ev_) {
        canvas.width = workArea.clientWidth;
        canvas.height = workArea.clientHeight;
        U1.WinCad.Services.LgWinService.Current.ActiveView.Invalidate();
    });
    canvas.width = workArea.clientWidth;
    canvas.height = workArea.clientHeight;
});
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiBase = (function () {
            function BiBase() {
                this.old_display = "";
                this.old_pointerEvents = "";
                this.IsEnable = true;
                this.IsVisible = true;
            }
            BiBase.prototype.Pause = function () {
                this.IsPasued = true;
                return this;
            };
            BiBase.prototype.Resume = function () {
                this.IsPasued = false;
                this.Update();
                return this;
            };
            BiBase.prototype.UnBind = function () {
                if (this.Source != null)
                    this.Source.PropertyChanged.Remove(this, this.OnPropertyChanged);
                return this;
            };
            BiBase.prototype.Update = function () {
                this.isUpdating = true;
                this.OnUpdate();
                this.isUpdating = false;
                return this;
            };
            BiBase.prototype.OnUpdate = function () {
                if (this.Source != null) {
                    if (this.IsEnabledSource != null) {
                        this.setIsEnable(this.Source[this.IsEnabledSource]);
                    }
                    else if (this.IsVisibleSource != null) {
                        this.setIsVisible(this.Source[this.IsVisibleSource]);
                    }
                }
            };
            BiBase.prototype.setSource = function (source) {
                this.Source = source;
                if (this.Source != null) {
                    this.Source.PropertyChanged.Add(this, this.CallOnPropertyChanged);
                }
                return this;
            };
            BiBase.prototype.setTarget = function (target) {
                this.Target = target;
                if (this.Target != null && this.Target.style.display != "none")
                    this.old_display = target.style.display;
                if (this.Target != null) {
                    this.old_pointerEvents = this.Target.style.pointerEvents;
                }
                return this;
            };
            BiBase.prototype.setIsEnableSource = function (prop) {
                this.IsEnabledSource = prop;
                return this;
            };
            BiBase.prototype.setIsVisibleSource = function (prop) {
                this.IsVisibleSource = prop;
                return this;
            };
            BiBase.prototype.setIsEnable = function (isEnable) {
                this.IsEnable = isEnable;
                if (!this.IsEnable) {
                    this.Target.setAttribute("disabled", "true");
                    this.Target.style.pointerEvents = "none";
                }
                else {
                    this.Target.removeAttribute("disabled");
                    this.Target.style.pointerEvents = this.old_pointerEvents;
                }
                return this;
            };
            BiBase.prototype.setIsVisible = function (isVisible) {
                this.IsVisible = isVisible;
                if (isVisible) {
                    //this.Target.style.visibility = "visible"; 
                    //if (this.Target instanceof HTMLTableRowElement)
                    this.Target.style.display = this.old_display;
                }
                else {
                    //this.Target.style.visibility = "collapse"; 
                    //if (this.Target instanceof HTMLTableRowElement)
                    this.Target.style.display = "none";
                }
                return this;
            };
            BiBase.prototype.CallOnPropertyChanged = function (sender, prop) {
                if (this.isUpdating)
                    return;
                this.isUpdating = true;
                this.OnPropertyChanged(sender, prop);
                this.isUpdating = false;
            };
            BiBase.prototype.OnPropertyChanged = function (sender, prop) {
                if (this.IsPasued)
                    return;
                if (this.IsEnabledSource != null && prop == this.IsEnabledSource) {
                    this.setIsEnable(this.Source[this.IsEnabledSource]);
                }
                else if (this.IsVisibleSource != null && prop == this.IsVisibleSource) {
                    this.setIsVisible(this.Source[this.IsVisibleSource]);
                }
            };
            BiBase.GetOrSetChild = function (ctr, container, tag) {
                var result = $(container).find(tag).get(0);
                if (result instanceof ctr)
                    return result;
                if (result != null)
                    return null;
                result = document.createElement(tag);
                container.appendChild(result);
                return result;
            };
            return BiBase;
        }());
        UIControls.BiBase = BiBase;
        var BiCollection = (function () {
            function BiCollection() {
                this.Children = [];
            }
            BiCollection.prototype.Pause = function () {
                for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                    var ch = _a[_i];
                    ch.Pause();
                }
            };
            BiCollection.prototype.Resume = function () {
                for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                    var ch = _a[_i];
                    ch.Resume();
                }
            };
            BiCollection.prototype.UnBind = function () {
                for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                    var ch = _a[_i];
                    ch.UnBind();
                }
                this.Children = [];
            };
            BiCollection.prototype.Update = function () {
                for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                    var ch = _a[_i];
                    ch.Update();
                }
            };
            return BiCollection;
        }());
        UIControls.BiCollection = BiCollection;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiCommand = (function (_super) {
            __extends(BiCommand, _super);
            function BiCommand() {
                _super.apply(this, arguments);
            }
            Object.defineProperty(BiCommand.prototype, "Command", {
                get: function () {
                    return this._command;
                },
                set: function (value) {
                    if (this._command != null)
                        this._command.PropertyChanged.Remove(this, this.OnPropertyChanged);
                    this._command = value;
                    if (this._command != null)
                        this._command.PropertyChanged.Add(this, this.OnPropertyChanged);
                },
                enumerable: true,
                configurable: true
            });
            BiCommand.prototype.setTarget = function (target) {
                var _this = this;
                this.Target = target;
                this.Target.onclick = function (ev) {
                    if (_this.Command != null) {
                        var cmdArg = _this.CommandArgGetter != null ? _this.CommandArgGetter(_this) : _this.CommandArg;
                        if (_this.Command.CanExecute(cmdArg)) {
                            _this.Command.Execute(cmdArg);
                        }
                    }
                };
                return this;
            };
            BiCommand.prototype.setContentRenderer = function (renderer) {
                this.ContentRenderer = renderer;
                return this;
            };
            BiCommand.prototype.setContentSource = function (content) {
                this.ContentSource = content;
                return this;
            };
            BiCommand.prototype.setCommandSource = function (source) {
                this.CommandSource = source;
                return this;
            };
            BiCommand.prototype.setCommand = function (command) {
                this.Command = command;
                return this;
            };
            BiCommand.prototype.setCommandArgumentGetter = function (argFunc) {
                this.CommandArgGetter = argFunc;
                return this;
            };
            BiCommand.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (sender === this._command && prop === "CanExecute") {
                    var canExecute = this._command.CanExecute(this._command);
                    if (canExecute == true)
                        this.Target.disabled = false;
                    else
                        this.Target.disabled = true;
                }
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.CommandSource) {
                    this.Command = this.Source[this.CommandSource];
                }
                else if (prop === this.ContentSource) {
                    this.UpdateContent();
                }
            };
            BiCommand.prototype.OnUpdate = function () {
                this.UpdateCommand();
                this.UpdateContent();
            };
            BiCommand.prototype.UpdateCommand = function () {
                if (this.Source != null && this.CommandSource != null)
                    this.Command = this.Source[this.CommandSource];
            };
            BiCommand.prototype.UpdateContent = function () {
                var content = this.ContentSource != null ? this.Source[this.ContentSource] : null;
                if (this.Content == content)
                    return;
                this.Content = content;
                if (this.Target != null && this.ContentRenderer != null)
                    this.ContentRenderer(this.Target, this.Content);
            };
            BiCommand.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.Target != null) {
                    this.Target.onchange = null;
                    this.Target.onclick = null;
                }
                if (this._command != null)
                    this._command.PropertyChanged.Remove(this, this.OnPropertyChanged);
                return this;
            };
            return BiCommand;
        }(UIControls.BiBase));
        UIControls.BiCommand = BiCommand;
        var BiButton = (function (_super) {
            __extends(BiButton, _super);
            function BiButton() {
                _super.apply(this, arguments);
            }
            return BiButton;
        }(BiCommand));
        UIControls.BiButton = BiButton;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiCheckBox = (function (_super) {
            __extends(BiCheckBox, _super);
            function BiCheckBox() {
                _super.apply(this, arguments);
            }
            BiCheckBox.prototype.setTarget = function (target) {
                var _this = this;
                this.Target = target;
                this.Target.onchange = function (ev) {
                    ev.preventDefault();
                    _this.OnTargetChanged(target, ev);
                };
                return this;
            };
            BiCheckBox.prototype.setContentRenderer = function (renderer) {
                this.ContentRenderer = renderer;
                return this;
            };
            BiCheckBox.prototype.setIsChecked = function (value) {
                this.IsChecked = value;
                return this;
            };
            BiCheckBox.prototype.setIsCheckedSource = function (source) {
                this.IsCheckedSource = source;
                return this;
            };
            BiCheckBox.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.IsCheckedSource) {
                    this.UpdateIsChecked();
                }
            };
            BiCheckBox.prototype.OnTargetChanged = function (target, ev) {
                if (this.IsPasued)
                    return;
                if (this.Source != null && this.IsCheckedSource != null)
                    this.Source[this.IsCheckedSource] = target.checked;
                else
                    this.IsChecked = target.checked;
            };
            BiCheckBox.prototype.OnUpdate = function () {
                this.UpdateIsChecked();
            };
            BiCheckBox.prototype.UnBind = function () {
                if (this.Source != null)
                    this.Source.PropertyChanged.Remove(this, this.OnPropertyChanged);
                if (this.Target != null)
                    this.Target.onchange = null;
                return this;
            };
            BiCheckBox.prototype.UpdateIsChecked = function () {
                if (this.Source != null && this.IsCheckedSource != null) {
                    var selectedItem = this.Source[this.IsCheckedSource];
                    if (selectedItem === this.IsChecked)
                        return;
                    this.IsChecked = selectedItem;
                }
                if (this.ContentRenderer != null) {
                    this.ContentRenderer(this.Target, this.IsChecked);
                }
                this.Target.checked = this.IsChecked;
            };
            return BiCheckBox;
        }(UIControls.BiBase));
        UIControls.BiCheckBox = BiCheckBox;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiColorPicker = (function (_super) {
            __extends(BiColorPicker, _super);
            function BiColorPicker() {
                _super.apply(this, arguments);
            }
            BiColorPicker.prototype.setTarget = function (target) {
                var _this = this;
                this.Target = target;
                $(this.Target).colorpicker({
                    cancel: function (arg) {
                        console.log("colorpicker.cancel" + arg);
                    },
                    close: function (arg) {
                        console.log("colorpicker.close" + arg);
                    },
                    init: function (arg) {
                        console.log("colorpicker.init" + arg);
                    },
                    select: function (arg) {
                        console.log("colorpicker.select" + arg);
                    },
                    ok: function (arg1, arg2) {
                        //console.log("colorpicker.ok" + args);  
                        _this.OnColorChange(arg2.a, arg2.rgb.r, arg2.rgb.g, arg2.rgb.b);
                    },
                    alpha: this.UseAlpha,
                    open: null
                });
                return this;
            };
            BiColorPicker.prototype.setUserAlpha = function (useAlpha) {
                this.UseAlpha = useAlpha;
                return this;
            };
            BiColorPicker.prototype.setColorSource = function (content) {
                this.ColorSource = content;
                return this;
            };
            BiColorPicker.prototype.OnColorChange = function (a, r, g, b) {
                this.Color = new U1.Color(r * 255, g * 255, b * 255, a * 255);
                if (this.Source != null && this.ColorSource != null)
                    this.Source[this.ColorSource] = this.Color;
            };
            BiColorPicker.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (this.IsPasued)
                    return;
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.ColorSource) {
                    this.UpdateColor();
                }
            };
            BiColorPicker.prototype.OnUpdate = function () {
                this.UpdateColor();
            };
            BiColorPicker.prototype.UpdateColor = function () {
                var color = this.ColorSource != null ? this.Source[this.ColorSource] : this.Color;
                //if (this.Color == color)
                //    return;
                if (color instanceof U1.Color) {
                    this.Color = color;
                    if (this.UseAlpha) {
                        this.Target.value = "" + U1.decimalToHex(this.Color.R) + U1.decimalToHex(this.Color.G) + U1.decimalToHex(this.Color.B) + U1.decimalToHex(this.Color.A);
                    }
                    else {
                        this.Target.value = "" + U1.decimalToHex(this.Color.R) + U1.decimalToHex(this.Color.G) + U1.decimalToHex(this.Color.B);
                    }
                }
                //this.Target.value = this.Color;
            };
            BiColorPicker.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.Target != null) {
                    this.Target.onchange = null;
                    this.Target.onkeyup = null;
                }
                return this;
            };
            return BiColorPicker;
        }(UIControls.BiBase));
        UIControls.BiColorPicker = BiColorPicker;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiComboBox = (function (_super) {
            __extends(BiComboBox, _super);
            function BiComboBox() {
                _super.apply(this, arguments);
                this._itemsMap = {};
                this._isItemsUpdated = false;
            }
            //Setter 
            BiComboBox.prototype.setTarget = function (target) {
                var _this = this;
                this.Target = target;
                this.Target.onchange = function (ev) {
                    _this.OnTargetChanged(target, ev);
                };
                return this;
            };
            BiComboBox.prototype.setItemRenderer = function (renderer) {
                this.ItemRenderer = renderer;
                return this;
            };
            BiComboBox.prototype.setSelectedItemSource = function (source) {
                this.SelectedItemSource = source;
                return this;
            };
            BiComboBox.prototype.setItemsSource = function (source) {
                this.ItemsSource = source;
                return this;
            };
            BiComboBox.prototype.setItems = function (items) {
                this.Items = items;
                this._isItemsUpdated = false;
                return this;
            };
            BiComboBox.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.SelectedItemSource) {
                    if (!this._isItemsUpdated)
                        this.UpdateItems();
                    this.UpdateSelectedItem();
                }
                else if (prop === this.ItemsSource) {
                    this.UpdateItems();
                }
                else if (prop === "Reload") {
                    this.UpdateItems();
                    this.UpdateSelectedItem();
                }
            };
            BiComboBox.prototype.OnTargetChanged = function (target, ev) {
                if (this.IsPasued)
                    return;
                var sel_item = this._itemsMap[target.value];
                this.Source[this.SelectedItemSource] = sel_item;
            };
            //Update
            BiComboBox.prototype.OnUpdate = function () {
                this.UpdateItems();
                this.UpdateSelectedItem();
            };
            BiComboBox.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.Target != null)
                    this.Target.onchange = null;
                return this;
            };
            BiComboBox.prototype.UpdateSelectedItem = function () {
                this.SelectedItem = this.Source[this.SelectedItemSource];
                if (this.SelectedItem == null && this.Target.selectedIndex != -1) {
                    this.Target.selectedIndex = -1;
                    return;
                }
                if (this._oldSelectedItem == this.SelectedItem)
                    return;
                if (this.ItemRenderer != null) {
                    this.ItemRenderer(this.Target, this.SelectedItem);
                }
                else
                    this.Target.value = this.SelectedItem.toString();
            };
            BiComboBox.prototype.UpdateItems = function () {
                var items = this.Items;
                if (this.ItemsSource != null)
                    items = this.Source[this.ItemsSource];
                if (items == null)
                    items = [];
                var isChanged = this.Items == null || !this._isItemsUpdated;
                if (!isChanged)
                    isChanged = items.length != this.Items.length;
                if (!isChanged) {
                    for (var i = 0; i < items.length; i++) {
                        isChanged = items[i] != this.Items[i];
                        if (isChanged)
                            break;
                    }
                }
                if (!isChanged)
                    return;
                while (this.Target.children.length > 0) {
                    this.Target.removeChild(this.Target.lastChild);
                }
                this.Items = items.slice();
                for (var i = 0; i < this.Items.length; i++) {
                    var item = this.Items[i];
                    var option = null;
                    if (i < this.Target.children.length) {
                        option = this.Target.children.item(0);
                    }
                    if (option == null) {
                        option = document.createElement("option");
                        this.Target.appendChild(option);
                    }
                    if (this.ItemRenderer != null) {
                        this.ItemRenderer(option, item);
                    }
                    else {
                        option.value = item.toString();
                        option.textContent = item.toString();
                    }
                    this._itemsMap[option.value] = item;
                }
                this._isItemsUpdated = true;
            };
            return BiComboBox;
        }(UIControls.BiBase));
        UIControls.BiComboBox = BiComboBox;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiContent = (function (_super) {
            __extends(BiContent, _super);
            function BiContent() {
                _super.apply(this, arguments);
            }
            BiContent.prototype.setContentRenderer = function (renderer) {
                this.ContentRenderer = renderer;
                return this;
            };
            BiContent.prototype.setContentSource = function (content) {
                this.ContentSource = content;
                return this;
            };
            BiContent.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.ContentSource) {
                    this.UpdateContent();
                }
            };
            BiContent.prototype.OnUpdate = function () {
                this.UpdateContent();
            };
            BiContent.prototype.UpdateContent = function () {
                var content = this.ContentSource != null ? this.Source[this.ContentSource] : null;
                if (this.Content == content)
                    return;
                this.Content = content;
                if (this.Target != null && this.ContentRenderer != null)
                    this.ContentRenderer(this.Target, this.Content);
            };
            BiContent.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                return this;
            };
            return BiContent;
        }(UIControls.BiBase));
        UIControls.BiContent = BiContent;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiDataGrid = (function (_super) {
            __extends(BiDataGrid, _super);
            function BiDataGrid() {
                _super.apply(this, arguments);
                this.row_elements = [];
            }
            Object.defineProperty(BiDataGrid.prototype, "SortColumn", {
                get: function () {
                    return this.sort_column;
                },
                set: function (value) {
                    if (this.sort_column == value) {
                        this.sort_reverse = !this.sort_reverse;
                    }
                    else {
                        this.sort_reverse = false;
                    }
                    this.sort_column = value;
                    this.UpdateItems(true);
                },
                enumerable: true,
                configurable: true
            });
            //Setter 
            BiDataGrid.prototype.setTarget = function (target) {
                var _this = this;
                this.Target = target;
                this.Target.onclick = function (ev) {
                    _this.OnItemClick(ev);
                };
                return this;
            };
            BiDataGrid.prototype.setItemRenderer = function (renderer) {
                this.ItemRenderer = renderer;
                return this;
            };
            BiDataGrid.prototype.setHeadRenderer = function (renderer) {
                this.HeadRenderer = renderer;
                return this;
            };
            BiDataGrid.prototype.setItemsSorter = function (renderer) {
                this.ItemsSorter = renderer;
                return this;
            };
            BiDataGrid.prototype.setSelectedItemSource = function (source) {
                this.SelectedItemSource = source;
                return this;
            };
            BiDataGrid.prototype.setItemsSource = function (source) {
                this.ItemsSource = source;
                return this;
            };
            BiDataGrid.prototype.setHeads = function (heads) {
                this.Heads = heads.slice();
                return this;
            };
            BiDataGrid.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.SelectedItemSource) {
                    this.UpdateSelectedItem();
                }
                else if (prop === this.ItemsSource) {
                    this.UpdateItems();
                }
            };
            BiDataGrid.prototype.OnItemClick = function (ev) {
                if (this.IsPasued)
                    return;
                var elm = ev.srcElement || ev.target;
                var row = elm;
                ev.preventDefault();
                while (!(row instanceof HTMLTableRowElement) && row != null) {
                    row = row.parentElement;
                }
                if (row instanceof HTMLTableRowElement) {
                    if (this.SelectedItemSource != null) {
                        for (var i = 0; i < this.row_elements.length; i++) {
                            var ri = this.row_elements[i];
                            if (ri.row == row) {
                                this.Source[this.SelectedItemSource] = ri.item;
                                return;
                            }
                        }
                    }
                }
                var th = elm;
                while (!(th instanceof HTMLTableHeaderCellElement) && th != null) {
                    th = th.parentElement;
                }
                for (var i = 0; i < this.head_elements.length; i++) {
                    var ri_1 = this.head_elements[i];
                    if (ri_1.th == th) {
                        this.SortColumn = ri_1.head;
                        return;
                    }
                }
            };
            //Update
            BiDataGrid.prototype.OnUpdate = function () {
                this.UpdateItems();
                this.UpdateSelectedItem();
            };
            BiDataGrid.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.Target != null)
                    this.Target.onclick = null;
                return this;
            };
            BiDataGrid.prototype.UpdateSelectedItem = function () {
                var curSelectedItem = this.Source[this.SelectedItemSource];
                if (curSelectedItem == this.SelectedItem)
                    return;
                if (this.row_elements == null)
                    this.UpdateItems();
                this.SelectedItem = curSelectedItem;
                if (this.row_elements != null) {
                    for (var i = 0; i < this.row_elements.length; i++) {
                        var li = this.row_elements[i];
                        if (this.ItemRenderer != null) {
                            var isSelected = this.SelectedItem == li.item;
                            if (li.isSelected != isSelected) {
                                li.isSelected = isSelected;
                                var child_edit = this.ItemRenderer(li.row, li.item, this.SelectedItem == li.item);
                                if (li.edit != null)
                                    li.edit.UnBind();
                                if (child_edit instanceof UIControls.BiBase) {
                                    li.edit = child_edit;
                                }
                            }
                        }
                    }
                }
            };
            BiDataGrid.prototype.UpdateItems = function (isChanged) {
                if (isChanged === void 0) { isChanged = false; }
                this.UpdatHeads();
                var items = this.Source[this.ItemsSource];
                var selectedItem = this.Source[this.SelectedItemSource];
                if (!isChanged)
                    isChanged = this.Items == null;
                if (!isChanged)
                    isChanged = items.length != this.Items.length;
                if (!isChanged) {
                    for (var i = 0; i < items.length; i++) {
                        isChanged = items[i] != this.Items[i];
                        if (isChanged)
                            break;
                    }
                }
                if (!isChanged)
                    return;
                var tbody = $(this.Target).find("tbody").get(0);
                if (tbody == null) {
                    tbody = document.createElement("tbody");
                    this.Target.appendChild(tbody);
                }
                while (tbody.children.length > 0) {
                    tbody.removeChild(tbody.lastChild);
                }
                this.Items = (items || []).slice();
                this.SelectedItem = selectedItem;
                if (this.row_elements != null) {
                    for (var _i = 0, _a = this.row_elements; _i < _a.length; _i++) {
                        var ri = _a[_i];
                        if (ri.edit != null)
                            ri.edit.UnBind();
                    }
                }
                this.row_elements = [];
                var sorted_items = this.Items;
                if (this.SortColumn != null && this.ItemsSorter != null) {
                    sorted_items = this.ItemsSorter(sorted_items, this.SortColumn);
                    if (this.sort_reverse) {
                        sorted_items.reverse();
                    }
                }
                for (var i = 0; i < sorted_items.length; i++) {
                    var item = sorted_items[i];
                    var row = null;
                    var isSelected = this.SelectedItem == item;
                    var edit = null;
                    row = document.createElement("tr");
                    tbody.appendChild(row);
                    if (this.ItemRenderer != null) {
                        edit = this.ItemRenderer(row, item, this.SelectedItem == item);
                    }
                    this.row_elements[i] = { row: row, item: item, isSelected: isSelected, edit: edit };
                }
            };
            BiDataGrid.prototype.UpdatHeads = function () {
                var thead = $(this.Target).find("thead").get(0);
                if (thead == null) {
                    thead = document.createElement("thead");
                    this.Target.appendChild(thead);
                }
                while (thead.children.length > 0) {
                    thead.removeChild(thead.lastChild);
                }
                this.head_elements = [];
                if (this.Heads != null && this.Heads.length > 0) {
                    var tr = document.createElement("tr");
                    thead.appendChild(tr);
                    for (var i = 0; i < this.Heads.length; i++) {
                        var th = document.createElement("th");
                        tr.appendChild(th);
                        var head = this.Heads[i];
                        if (this.HeadRenderer != null) {
                            this.HeadRenderer(th, this.Heads[i], this.SortColumn == this.Heads[i]);
                        }
                        else {
                            th.textContent = "" + head;
                        }
                        this.head_elements[i] = { head: head, th: th };
                    }
                }
            };
            return BiDataGrid;
        }(UIControls.BiBase));
        UIControls.BiDataGrid = BiDataGrid;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiDropdown = (function (_super) {
            __extends(BiDropdown, _super);
            function BiDropdown() {
                _super.apply(this, arguments);
                this.lielements = [];
                this.itemBinders = [];
            }
            //Setter 
            BiDropdown.prototype.setTarget = function (target) {
                var _this = this;
                this.Target = target;
                this.Target.onclick = function (ev) {
                    _this.OnItemClick(ev);
                };
                return this;
            };
            BiDropdown.prototype.setItemRenderer = function (renderer) {
                this.ItemRenderer = renderer;
                return this;
            };
            BiDropdown.prototype.setHeadRenderer = function (renderer) {
                this.HeadRenderer = renderer;
                return this;
            };
            BiDropdown.prototype.setSelectedItemSource = function (source) {
                this.SelectedItemSource = source;
                return this;
            };
            BiDropdown.prototype.setItemsSource = function (source) {
                this.ItemsSource = source;
                return this;
            };
            BiDropdown.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.SelectedItemSource) {
                    this.UpdateSelectedItem();
                }
                else if (prop === this.ItemsSource) {
                    this.UpdateItems();
                }
            };
            BiDropdown.prototype.OnItemClick = function (ev) {
                if (this.IsPasued)
                    return;
                var elm = ev.srcElement || ev.target;
                if (elm instanceof HTMLInputElement)
                    return;
                ev.preventDefault();
                while (!(elm instanceof HTMLLIElement) && elm != null) {
                    elm = elm.parentElement;
                }
                if (elm instanceof HTMLLIElement) {
                    var index = -1;
                    for (var i = 0; i < this.lielements.length; i++) {
                        if (this.lielements[i] == elm) {
                            index = i;
                            break;
                        }
                    }
                    if (index >= 0 && this.SelectedItemSource != null)
                        this.Source[this.SelectedItemSource] = this.Items[index];
                }
            };
            //Update
            BiDropdown.prototype.OnUpdate = function () {
                this.UpdateItems();
                this.UpdateSelectedItem();
            };
            BiDropdown.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.Target != null)
                    this.Target.onclick = null;
                for (var _i = 0, _a = this.itemBinders; _i < _a.length; _i++) {
                    var bi = _a[_i];
                    if (bi != null)
                        bi.UnBind();
                }
                return this;
            };
            BiDropdown.prototype.UpdateSelectedItem = function () {
                var curSelectedItem = this.Source[this.SelectedItemSource];
                if (curSelectedItem == this.SelectedItem)
                    return;
                this.SelectedItem = curSelectedItem;
                var btn_header;
                for (var i = 0; i < this.Target.children.length; i++) {
                    if (this.Target.children[i] instanceof HTMLButtonElement) {
                        btn_header = this.Target.children[i];
                        break;
                    }
                }
                var header_content = null;
                for (var i = 0; i < btn_header.children.length; i++) {
                    if (btn_header.children.item(i) instanceof HTMLElement) {
                        header_content = btn_header.children.item(i);
                        break;
                    }
                }
                while (header_content != null && header_content.children != null && header_content.children.length > 0) {
                    header_content.removeChild(header_content.lastChild);
                }
                if (this.HeadRenderer != null && this.SelectedItem != null) {
                    this.HeadRenderer(header_content, this.SelectedItem);
                }
            };
            BiDropdown.prototype.UpdateItems = function () {
                var items = this.Source[this.ItemsSource];
                var selectedItem = this.Source[this.SelectedItemSource];
                var isChanged = this.Items == null;
                if (!isChanged)
                    isChanged = items.length != this.Items.length;
                if (!isChanged) {
                    for (var i = 0; i < items.length; i++) {
                        isChanged = items[i] != this.Items[i];
                        if (isChanged)
                            break;
                    }
                }
                if (!isChanged)
                    return;
                var ul_items;
                for (var i = 0; i < this.Target.children.length; i++) {
                    if (this.Target.children[i] instanceof HTMLUListElement) {
                        ul_items = this.Target.children[i];
                        break;
                    }
                }
                if (ul_items != null) {
                    while (ul_items.children.length > 0) {
                        ul_items.removeChild(ul_items.lastChild);
                    }
                }
                else {
                    ul_items = document.createElement("ul");
                    this.Target.appendChild(ul_items);
                }
                for (var _i = 0, _a = this.itemBinders; _i < _a.length; _i++) {
                    var bi = _a[_i];
                    if (bi != null)
                        bi.UnBind();
                }
                this.itemBinders = [];
                this.Items = items;
                //this.SelectedItem = selectedItem;
                for (var i = 0; i < this.Items.length; i++) {
                    var item = this.Items[i];
                    var li = null;
                    li = document.createElement("li");
                    ul_items.appendChild(li);
                    if (this.ItemRenderer != null) {
                        var subBinder = this.ItemRenderer(li, item, selectedItem == item);
                        this.itemBinders[i] = subBinder;
                    }
                    else {
                        li.textContent = item.toString();
                        this.itemBinders[i] = null;
                    }
                    this.lielements[i] = li;
                }
                this.UpdateSelectedItem();
            };
            return BiDropdown;
        }(UIControls.BiBase));
        UIControls.BiDropdown = BiDropdown;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiEnable = (function (_super) {
            __extends(BiEnable, _super);
            function BiEnable() {
                _super.apply(this, arguments);
            }
            return BiEnable;
        }(UIControls.BiBase));
        UIControls.BiEnable = BiEnable;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiItemsControl = (function (_super) {
            __extends(BiItemsControl, _super);
            function BiItemsControl() {
                _super.apply(this, arguments);
                this.item_edits = [];
            }
            //Setter 
            BiItemsControl.prototype.setTarget = function (target) {
                var _this = this;
                this.Target = target;
                this.Target.onclick = function (ev) {
                    _this.OnItemClick(ev);
                };
                return this;
            };
            BiItemsControl.prototype.setItemRenderer = function (renderer) {
                this.ItemRenderer = renderer;
                return this;
            };
            BiItemsControl.prototype.setItemsSource = function (source) {
                this.ItemsSource = source;
                return this;
            };
            BiItemsControl.prototype.setClickHandler = function (handler) {
                this.ItemClickHandler = handler;
                return this;
            };
            BiItemsControl.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.ItemsSource) {
                    this.UpdateItems();
                }
            };
            BiItemsControl.prototype.OnItemClick = function (ev) {
                if (this.IsPasued)
                    return;
                var elm = ev.srcElement || ev.target;
                ev.preventDefault();
                while (!(elm instanceof HTMLLIElement) && elm != null) {
                    elm = elm.parentElement;
                }
                if (elm instanceof HTMLLIElement) {
                    var index = -1;
                    for (var i = 0; i < this.Target.children.length; i++) {
                        if (this.Target.children.item(i) == elm) {
                            index = i;
                            break;
                        }
                    }
                    if (this.ItemClickHandler != null && index >= 0)
                        this.ItemClickHandler(this.Items[index]);
                }
            };
            //Update
            BiItemsControl.prototype.OnUpdate = function () {
                this.UpdateItems();
            };
            BiItemsControl.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.Target != null)
                    this.Target.onchange = null;
                return this;
            };
            BiItemsControl.prototype.UpdateItems = function () {
                var items = this.Source[this.ItemsSource];
                var isChanged = this.Items == null;
                if (!isChanged)
                    isChanged = items.length != this.Items.length;
                if (!isChanged) {
                    for (var i = 0; i < items.length; i++) {
                        isChanged = items[i] != this.Items[i];
                        if (isChanged)
                            break;
                    }
                }
                if (!isChanged)
                    return;
                while (this.Target.children.length > 0) {
                    this.Target.removeChild(this.Target.lastChild);
                }
                for (var _i = 0, _a = this.item_edits; _i < _a.length; _i++) {
                    var item_edit = _a[_i];
                    if (item_edit != null)
                        item_edit.UnBind();
                }
                this.item_edits = [];
                this.Items = (items || []).slice();
                for (var i = 0; i < this.Items.length; i++) {
                    var item = this.Items[i];
                    var li = null;
                    if (i < this.Target.children.length) {
                        li = this.Target.children.item(0);
                    }
                    if (li == null) {
                        li = document.createElement("li");
                        this.Target.appendChild(li);
                    }
                    if (this.ItemRenderer != null) {
                        var child_edit = this.ItemRenderer(li, item);
                        if (child_edit instanceof UIControls.BiBase) {
                            this.item_edits[i] = child_edit;
                        }
                    }
                    else {
                        li.textContent = item.toString();
                    }
                }
            };
            return BiItemsControl;
        }(UIControls.BiBase));
        UIControls.BiItemsControl = BiItemsControl;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiLabel = (function (_super) {
            __extends(BiLabel, _super);
            function BiLabel() {
                _super.apply(this, arguments);
            }
            BiLabel.prototype.setTarget = function (target) {
                this.Target = target;
                return this;
            };
            BiLabel.prototype.setContentRenderer = function (renderer) {
                this.ContentRenderer = renderer;
                return this;
            };
            BiLabel.prototype.setContentSource = function (content) {
                this.ContentSource = content;
                return this;
            };
            BiLabel.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.ContentSource) {
                    this.UpdateContent();
                }
            };
            BiLabel.prototype.OnUpdate = function () {
                this.UpdateContent();
            };
            BiLabel.prototype.UpdateContent = function () {
                var content = this.ContentSource != null ? this.Source[this.ContentSource] : null;
                if (this.Content == content)
                    return;
                this.Content = content;
                if (this.Target != null && this.ContentRenderer != null)
                    this.ContentRenderer(this.Target, this.Content);
            };
            BiLabel.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                return this;
            };
            return BiLabel;
        }(UIControls.BiBase));
        UIControls.BiLabel = BiLabel;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiListBox = (function (_super) {
            __extends(BiListBox, _super);
            function BiListBox() {
                _super.apply(this, arguments);
                this.lielements = [];
            }
            //Setter 
            BiListBox.prototype.setTarget = function (target) {
                var _this = this;
                this.Target = target;
                this.Target.onclick = function (ev) {
                    _this.OnItemClick(ev);
                };
                return this;
            };
            BiListBox.prototype.setItemRenderer = function (renderer) {
                this.ItemRenderer = renderer;
                return this;
            };
            BiListBox.prototype.setSelectedItemSource = function (source) {
                this.SelectedItemSource = source;
                return this;
            };
            BiListBox.prototype.setItemsSource = function (source) {
                this.ItemsSource = source;
                return this;
            };
            BiListBox.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.SelectedItemSource) {
                    this.UpdateSelectedItem();
                }
                else if (prop === this.ItemsSource) {
                    this.UpdateItems();
                }
            };
            BiListBox.prototype.OnItemClick = function (ev) {
                if (this.IsPasued)
                    return;
                var elm = ev.srcElement || ev.target;
                ev.preventDefault();
                while (!(elm instanceof HTMLLIElement) && elm != null) {
                    elm = elm.parentElement;
                }
                if (elm instanceof HTMLLIElement) {
                    var index = -1;
                    for (var i = 0; i < this.Target.children.length; i++) {
                        if (this.Target.children.item(i) == elm) {
                            index = i;
                            break;
                        }
                    }
                    if (index >= 0)
                        this.Source[this.SelectedItemSource] = this.Items[index];
                }
            };
            //Update
            BiListBox.prototype.OnUpdate = function () {
                this.UpdateItems();
                this.UpdateSelectedItem();
            };
            BiListBox.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.Target != null)
                    this.Target.onclick = null;
                return this;
            };
            BiListBox.prototype.UpdateSelectedItem = function () {
                var curSelectedItem = this.Source[this.SelectedItemSource];
                if (curSelectedItem == this.SelectedItem)
                    return;
                this.SelectedItem = curSelectedItem;
                if (this.lielements == null)
                    this.UpdateItems();
                if (this.lielements == null)
                    return;
                for (var i = 0; i < this.lielements.length; i++) {
                    var li = this.lielements[i];
                    var isSelected = this.SelectedItem == li.item;
                    if (this.ItemRenderer != null) {
                        if (li.isSelected != isSelected) {
                            li.isSelected = isSelected;
                            var child_edit = this.ItemRenderer(li.li, this.Items[i], isSelected);
                            if (li.edit != null)
                                li.edit.UnBind();
                            li.edit = null;
                            if (child_edit instanceof UIControls.BiBase) {
                                li.edit = child_edit;
                            }
                        }
                    }
                }
            };
            BiListBox.prototype.UpdateItems = function () {
                var items = this.Source[this.ItemsSource];
                var selectedItem = this.Source[this.SelectedItemSource];
                var isChanged = this.Items == null;
                if (!isChanged)
                    isChanged = items.length != this.Items.length;
                if (!isChanged) {
                    for (var i = 0; i < items.length; i++) {
                        isChanged = items[i] != this.Items[i];
                        if (isChanged)
                            break;
                    }
                }
                if (!isChanged)
                    return;
                while (this.Target.children.length > 0) {
                    this.Target.removeChild(this.Target.lastChild);
                }
                this.Items = (items || []).slice();
                this.SelectedItem = selectedItem;
                for (var _i = 0, _a = this.lielements; _i < _a.length; _i++) {
                    var le = _a[_i];
                    if (le.edit != null)
                        le.edit.UnBind();
                }
                this.lielements = [];
                for (var i = 0; i < this.Items.length; i++) {
                    var item = this.Items[i];
                    var edit = null;
                    var isSelected = this.SelectedItem == item;
                    var li = document.createElement("li");
                    this.Target.appendChild(li);
                    if (this.ItemRenderer != null) {
                        var child_edit = this.ItemRenderer(li, item, isSelected);
                        if (child_edit instanceof UIControls.BiBase) {
                            edit = child_edit;
                        }
                    }
                    else {
                        li.textContent = item.toString();
                    }
                    this.lielements[i] = { li: li, item: item, edit: edit, isSelected: isSelected };
                }
            };
            return BiListBox;
        }(UIControls.BiBase));
        UIControls.BiListBox = BiListBox;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiNumber = (function (_super) {
            __extends(BiNumber, _super);
            function BiNumber() {
                _super.apply(this, arguments);
                this.ChangeAfterEnter = true;
            }
            BiNumber.prototype.setTarget = function (target) {
                var _this = this;
                this.Target = target;
                this.Target.onkeyup = function (ev) { return _this.OnKeyUp(ev); };
                target.onchange = function (ev) {
                    _this.OnTextChange(_this.Target.value);
                };
                return this;
            };
            BiNumber.prototype.setValueSource = function (content) {
                this.ValueSource = content;
                return this;
            };
            BiNumber.prototype.setChangeAfterEnter = function (value) {
                this.ChangeAfterEnter = value;
                return this;
            };
            BiNumber.prototype.OnKeyUp = function (event) {
                if (!this.ChangeAfterEnter || event.keyCode == 13) {
                    var input = event.target;
                    this.OnTextChange(input.value);
                    event.preventDefault();
                }
            };
            BiNumber.prototype.OnTextChange = function (text) {
                var value = parseInt(text);
                if (this.ValueSource != null && !isNaN(value) && value != this.Value) {
                    this.Source[this.ValueSource] = value;
                }
            };
            BiNumber.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (this.IsPasued)
                    return;
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.ValueSource) {
                    this.UpdateValue();
                }
            };
            BiNumber.prototype.OnUpdate = function () {
                this.UpdateValue();
            };
            BiNumber.prototype.UpdateValue = function () {
                var value = this.ValueSource != null ? this.Source[this.ValueSource] : this.Value;
                if (this.Value == value)
                    return;
                this.Value = value;
                this.Target.value = this.Value.toString();
            };
            BiNumber.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.Target != null) {
                    this.Target.onkeyup = null;
                    this.Target.onchange = null;
                }
                return this;
            };
            return BiNumber;
        }(UIControls.BiBase));
        UIControls.BiNumber = BiNumber;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiPropertyEdit = (function (_super) {
            __extends(BiPropertyEdit, _super);
            function BiPropertyEdit() {
                _super.apply(this, arguments);
            }
            Object.defineProperty(BiPropertyEdit.prototype, "Property", {
                get: function () {
                    return this.Source;
                },
                enumerable: true,
                configurable: true
            });
            BiPropertyEdit.prototype.setContentRenderer = function (renderer) {
                this.ContentRenderer = renderer;
                return this;
            };
            BiPropertyEdit.prototype.setSource = function (source) {
                _super.prototype.setSource.call(this, source);
                return this;
            };
            BiPropertyEdit.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop == "ValueText") {
                    this.input.value = this.Property.ValueText;
                    this.text = null;
                }
            };
            BiPropertyEdit.prototype.OnUpdate = function () {
                var _this = this;
                if (this.ContentRenderer != null) {
                    while (this.Target.children.length > 0) {
                        this.Target.removeChild(this.Target.lastChild);
                    }
                    this.ContentRenderer(this.Target);
                    return this;
                }
                if (this.label == null) {
                    this.label = document.createElement("label");
                    this.label.textContent = this.Property.Label;
                    this.label.setAttribute("class", "PropLabel");
                    var td = document.createElement("td");
                    td.appendChild(this.label);
                    this.Target.appendChild(td);
                }
                if (this.input == null) {
                    this.input = document.createElement("input");
                    this.input.type = "text";
                    this.input.value = this.Property.ValueText;
                    this.input.setAttribute("type", "number");
                    this.input.onkeyup = function (ev) { return _this.OnKeyUp(ev); };
                    this.input.onchange = function (ev) { return _this.OnChange(ev); };
                    var td = document.createElement("td");
                    td.appendChild(this.input);
                    this.Target.appendChild(td);
                }
                /*
                 <td width="10"></td>
                        <td> <label className="PropLabel"> {label} </label> </td>
                        <td> <input
                            type="text"
                            value={valutText}
                            onKeyUp= {this.OnKeyUp}
                            onChange={this.OnChange} />
                        </td>
                */
            };
            BiPropertyEdit.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.input != null) {
                    this.input.onkeyup = null;
                    this.input.onchange = null;
                }
                return this;
            };
            BiPropertyEdit.prototype.OnChange = function (event) {
                var input = event.target;
                this.OnTextChange(input.value);
            };
            BiPropertyEdit.prototype.OnKeyUp = function (event) {
                if (event.keyCode == 13) {
                    var input = event.target;
                    event.preventDefault();
                    this.OnTextChange(input.value);
                }
            };
            BiPropertyEdit.prototype.OnTextChange = function (text) {
                this.text = text;
                if (this.text != null && this.text != this.Property.ValueText)
                    this.Property.ValueText = this.text;
                this.text = null;
            };
            return BiPropertyEdit;
        }(UIControls.BiBase));
        UIControls.BiPropertyEdit = BiPropertyEdit;
        var BiPropertyCheckEdit = (function (_super) {
            __extends(BiPropertyCheckEdit, _super);
            function BiPropertyCheckEdit() {
                _super.apply(this, arguments);
            }
            Object.defineProperty(BiPropertyCheckEdit.prototype, "Property", {
                get: function () {
                    return this.Source;
                },
                enumerable: true,
                configurable: true
            });
            BiPropertyCheckEdit.prototype.setContentRenderer = function (renderer) {
                this.ContentRenderer = renderer;
                return this;
            };
            BiPropertyCheckEdit.prototype.setSource = function (source) {
                _super.prototype.setSource.call(this, source);
                return this;
            };
            BiPropertyCheckEdit.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (sender != this.Source || this.IsPasued)
                    return;
                this.input.checked = this.Property.Value;
            };
            BiPropertyCheckEdit.prototype.OnUpdate = function () {
                var _this = this;
                if (this.ContentRenderer != null) {
                    while (this.Target.children.length > 0) {
                        this.Target.removeChild(this.Target.lastChild);
                    }
                    this.ContentRenderer(this.Target);
                    return this;
                }
                if (this.label == null) {
                    this.label = document.createElement("label");
                    this.label.textContent = this.Property.Label;
                    this.label.setAttribute("class", "PropLabel");
                    var td = document.createElement("td");
                    td.appendChild(this.label);
                    this.Target.appendChild(td);
                }
                if (this.input == null) {
                    this.input = document.createElement("input");
                    this.input.type = "checkbox";
                    this.input.checked = this.Property.Value;
                    this.input.onchange = function (ev) { return _this.OnChange(ev); };
                    var td = document.createElement("td");
                    td.appendChild(this.input);
                    this.Target.appendChild(td);
                }
                /*
                 <td width="10"></td>
                        <td> <label className="PropLabel"> {label} </label> </td>
                        <td> <input
                            type="text"
                            value={valutText}
                            onKeyUp= {this.OnKeyUp}
                            onChange={this.OnChange} />
                        </td>
                */
            };
            BiPropertyCheckEdit.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.input != null) {
                    this.input.onchange = null;
                }
                return this;
            };
            BiPropertyCheckEdit.prototype.OnChange = function (event) {
                var input = event.target;
                this.OnCheckChange(input.checked);
            };
            BiPropertyCheckEdit.prototype.OnCheckChange = function (checked) {
                this.checked = checked;
                if (this.checked != null && this.checked != this.Property.Value)
                    this.Property.Value = this.checked;
                this.checked = null;
            };
            return BiPropertyCheckEdit;
        }(BiPropertyEdit));
        UIControls.BiPropertyCheckEdit = BiPropertyCheckEdit;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiPropertyGrid = (function (_super) {
            __extends(BiPropertyGrid, _super);
            function BiPropertyGrid() {
                _super.apply(this, arguments);
            }
            //Setter  
            BiPropertyGrid.prototype.setItemsSource = function (source) {
                this.ItemsSource = source;
                return this;
            };
            BiPropertyGrid.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (sender != this.Source || this.IsPasued)
                    return;
                if (sender === this.Source) {
                    if (prop === this.ItemsSource) {
                        this.UpdateItems();
                    }
                }
            };
            //Update
            BiPropertyGrid.prototype.OnUpdate = function () {
                this.UpdateItems();
            };
            BiPropertyGrid.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.PropertyEdits != null) {
                    for (var _i = 0, _a = this.PropertyEdits; _i < _a.length; _i++) {
                        var prop = _a[_i];
                        prop.UnBind();
                    }
                }
                if (this.Target != null)
                    this.Target.onchange = null;
                return this;
            };
            BiPropertyGrid.prototype.UpdateItems = function () {
                var items = this.Source[this.ItemsSource];
                var isChanged = this.Items == null;
                if (!isChanged)
                    isChanged = items.length != this.Items.length;
                if (!isChanged) {
                    for (var i = 0; i < items.length; i++) {
                        isChanged = items[i] != this.Items[i];
                        if (isChanged)
                            break;
                    }
                }
                if (!isChanged)
                    return;
                while (this.Target.children.length > 0) {
                    this.Target.removeChild(this.Target.lastChild);
                }
                var tbody = document.createElement("tbody");
                this.Target.appendChild(tbody);
                if (this.PropertyEdits != null) {
                    for (var _i = 0, _a = this.PropertyEdits; _i < _a.length; _i++) {
                        var prop = _a[_i];
                        prop.UnBind();
                    }
                }
                this.Items = items;
                this.PropertyEdits = [];
                for (var i = 0; i < this.Items.length; i++) {
                    var item = this.Items[i];
                    var tr = document.createElement("tr");
                    tbody.appendChild(tr);
                    if (item instanceof U1.UPropBool) {
                        var editor = new UIControls.BiPropertyCheckEdit()
                            .setSource(item)
                            .setTarget(tr)
                            .Update();
                        this.PropertyEdits.push(editor);
                    }
                    else {
                        var editor = new UIControls.BiPropertyEdit()
                            .setSource(item)
                            .setTarget(tr)
                            .Update();
                        this.PropertyEdits.push(editor);
                    }
                }
            };
            BiPropertyGrid.prototype.Pause = function () {
                _super.prototype.Pause.call(this);
                if (this.PropertyEdits != null) {
                    for (var _i = 0, _a = this.PropertyEdits; _i < _a.length; _i++) {
                        var prop = _a[_i];
                        prop.Pause();
                    }
                }
                return this;
            };
            BiPropertyGrid.prototype.Resume = function () {
                _super.prototype.Resume.call(this);
                if (this.PropertyEdits != null) {
                    for (var _i = 0, _a = this.PropertyEdits; _i < _a.length; _i++) {
                        var prop = _a[_i];
                        prop.Resume();
                    }
                }
                return this;
            };
            return BiPropertyGrid;
        }(UIControls.BiBase));
        UIControls.BiPropertyGrid = BiPropertyGrid;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiTextArea = (function (_super) {
            __extends(BiTextArea, _super);
            function BiTextArea() {
                _super.apply(this, arguments);
            }
            BiTextArea.prototype.setTarget = function (target) {
                var _this = this;
                this.Target = target;
                this.Target.onchange = function (ev) {
                    ev.preventDefault();
                    _this.OnTargetChanged(target, ev);
                };
                return this;
            };
            BiTextArea.prototype.setTextSource = function (content) {
                this.TextSource = content;
                return this;
            };
            BiTextArea.prototype.setAfterTextChangedFunc = function (func) {
                this.AfterTextChangedFunc = func;
                return this;
            };
            BiTextArea.prototype.OnTargetChanged = function (target, ev) {
                if (this.IsPasued)
                    return;
                if (this.isUpdating)
                    return;
                if (this.AfterTextChangedFunc != null)
                    this.AfterTextChangedFunc(this, target.value);
            };
            BiTextArea.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (this.IsPasued)
                    return;
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.TextSource) {
                    this.UpdateText();
                }
            };
            BiTextArea.prototype.OnUpdate = function () {
                this.UpdateText();
            };
            BiTextArea.prototype.UpdateText = function () {
                var text = this.TextSource != null ? this.Source[this.TextSource] : this.Text;
                if (this.Text == text)
                    return;
                this.Text = text;
                this.Target.value = this.Text;
            };
            BiTextArea.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.Target != null) {
                    this.Target.onchange = null;
                    this.Target.onkeyup = null;
                }
                return this;
            };
            return BiTextArea;
        }(UIControls.BiBase));
        UIControls.BiTextArea = BiTextArea;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiTextBox = (function (_super) {
            __extends(BiTextBox, _super);
            function BiTextBox() {
                _super.apply(this, arguments);
            }
            BiTextBox.prototype.setTarget = function (target) {
                var _this = this;
                if (target != null) {
                    this.Target = target;
                    this.Target.onkeyup = function (ev) { return _this.OnKeyUp(ev); };
                    target.onchange = function (ev) {
                        _this.OnTextChange(_this.Target.value);
                    };
                }
                else {
                    if (this.Target != null) {
                        this.Target.onchange = null;
                        this.Target.onkeyup = null;
                        this.Target = null;
                    }
                }
                return this;
            };
            BiTextBox.prototype.setTextSource = function (content) {
                this.TextSource = content;
                return this;
            };
            BiTextBox.prototype.setText = function (value) {
                this.Text = value;
                return this;
            };
            BiTextBox.prototype.setAfterTextChangedFunc = function (func) {
                this.AfterTextChangedFunc = func;
                return this;
            };
            BiTextBox.prototype.OnKeyUp = function (event) {
                if (event.keyCode == 13) {
                    var input = event.target;
                    var text = input.value;
                    event.preventDefault();
                    this.OnTextChange(text);
                }
            };
            BiTextBox.prototype.OnTextChange = function (text) {
                if (this.AfterTextChangedFunc != null) {
                    this.AfterTextChangedFunc(this, this.Target.value);
                }
                else {
                    if (this.Source != null && this.TextSource != null) {
                        if (text != null && text != this.Text) {
                            this.Source[this.TextSource] = text;
                        }
                    }
                    else {
                        this.Text = text;
                    }
                }
            };
            BiTextBox.prototype.OnPropertyChanged = function (sender, prop) {
                _super.prototype.OnPropertyChanged.call(this, sender, prop);
                if (this.IsPasued)
                    return;
                if (sender != this.Source || this.IsPasued)
                    return;
                if (prop === this.TextSource) {
                    this.UpdateText();
                }
            };
            BiTextBox.prototype.OnUpdate = function () {
                this.UpdateText();
            };
            BiTextBox.prototype.UpdateText = function () {
                var text = this.TextSource != null ? this.Source[this.TextSource] : this.Text;
                this.Text = text;
                if (this.Target.value == this.Text)
                    return;
                this.Target.value = this.Text;
            };
            BiTextBox.prototype.UnBind = function () {
                _super.prototype.UnBind.call(this);
                if (this.Target != null) {
                    this.Target.onchange = null;
                    this.Target.onkeyup = null;
                }
                return this;
            };
            return BiTextBox;
        }(UIControls.BiBase));
        UIControls.BiTextBox = BiTextBox;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
/// <reference path="bibase.ts" />
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var BiVisibility = (function (_super) {
            __extends(BiVisibility, _super);
            function BiVisibility() {
                _super.apply(this, arguments);
            }
            return BiVisibility;
        }(UIControls.BiBase));
        UIControls.BiVisibility = BiVisibility;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
// Copyright 2013 Basarat Ali Syed. All Rights Reserved.
//
// Licensed under MIT open source license http://opensource.org/licenses/MIT
//
// Orginal javascript code was by Mauricio Santos
/**
 * @namespace Top level namespace for collections, a TypeScript data structure library.
 */
var collections;
(function (collections) {
    var _hasOwnProperty = Object.prototype.hasOwnProperty;
    var has = function (obj, prop) {
        return _hasOwnProperty.call(obj, prop);
    };
    /**
     * Default function to compare element order.
     * @function
     */
    function defaultCompare(a, b) {
        if (a < b) {
            return -1;
        }
        else if (a === b) {
            return 0;
        }
        else {
            return 1;
        }
    }
    collections.defaultCompare = defaultCompare;
    /**
     * Default function to test equality.
     * @function
     */
    function defaultEquals(a, b) {
        return a === b;
    }
    collections.defaultEquals = defaultEquals;
    /**
     * Default function to convert an object to a string.
     * @function
     */
    function defaultToString(item) {
        if (item === null) {
            return 'COLLECTION_NULL';
        }
        else if (collections.isUndefined(item)) {
            return 'COLLECTION_UNDEFINED';
        }
        else if (collections.isString(item)) {
            return '$s' + item;
        }
        else {
            return '$o' + item.toString();
        }
    }
    collections.defaultToString = defaultToString;
    /**
    * Joins all the properies of the object using the provided join string
    */
    function makeString(item, join) {
        if (join === void 0) { join = ","; }
        if (item === null) {
            return 'COLLECTION_NULL';
        }
        else if (collections.isUndefined(item)) {
            return 'COLLECTION_UNDEFINED';
        }
        else if (collections.isString(item)) {
            return item.toString();
        }
        else {
            var toret = "{";
            var first = true;
            for (var prop in item) {
                if (has(item, prop)) {
                    if (first)
                        first = false;
                    else
                        toret = toret + join;
                    toret = toret + prop + ":" + item[prop];
                }
            }
            return toret + "}";
        }
    }
    collections.makeString = makeString;
    /**
     * Checks if the given argument is a function.
     * @function
     */
    function isFunction(func) {
        return (typeof func) === 'function';
    }
    collections.isFunction = isFunction;
    /**
     * Checks if the given argument is undefined.
     * @function
     */
    function isUndefined(obj) {
        return (typeof obj) === 'undefined';
    }
    collections.isUndefined = isUndefined;
    /**
     * Checks if the given argument is a string.
     * @function
     */
    function isString(obj) {
        return Object.prototype.toString.call(obj) === '[object String]';
    }
    collections.isString = isString;
    /**
     * Reverses a compare function.
     * @function
     */
    function reverseCompareFunction(compareFunction) {
        if (!collections.isFunction(compareFunction)) {
            return function (a, b) {
                if (a < b) {
                    return 1;
                }
                else if (a === b) {
                    return 0;
                }
                else {
                    return -1;
                }
            };
        }
        else {
            return function (d, v) {
                return compareFunction(d, v) * -1;
            };
        }
    }
    collections.reverseCompareFunction = reverseCompareFunction;
    /**
     * Returns an equal function given a compare function.
     * @function
     */
    function compareToEquals(compareFunction) {
        return function (a, b) {
            return compareFunction(a, b) === 0;
        };
    }
    collections.compareToEquals = compareToEquals;
    /**
     * @namespace Contains various functions for manipulating arrays.
     */
    var arrays;
    (function (arrays) {
        /**
         * Returns the position of the first occurrence of the specified item
         * within the specified array.
         * @param {*} array the array in which to search the element.
         * @param {Object} item the element to search.
         * @param {function(Object,Object):boolean=} equalsFunction optional function used to
         * check equality between 2 elements.
         * @return {number} the position of the first occurrence of the specified element
         * within the specified array, or -1 if not found.
         */
        function indexOf(array, item, equalsFunction) {
            var equals = equalsFunction || collections.defaultEquals;
            var length = array.length;
            for (var i = 0; i < length; i++) {
                if (equals(array[i], item)) {
                    return i;
                }
            }
            return -1;
        }
        arrays.indexOf = indexOf;
        /**
         * Returns the position of the last occurrence of the specified element
         * within the specified array.
         * @param {*} array the array in which to search the element.
         * @param {Object} item the element to search.
         * @param {function(Object,Object):boolean=} equalsFunction optional function used to
         * check equality between 2 elements.
         * @return {number} the position of the last occurrence of the specified element
         * within the specified array or -1 if not found.
         */
        function lastIndexOf(array, item, equalsFunction) {
            var equals = equalsFunction || collections.defaultEquals;
            var length = array.length;
            for (var i = length - 1; i >= 0; i--) {
                if (equals(array[i], item)) {
                    return i;
                }
            }
            return -1;
        }
        arrays.lastIndexOf = lastIndexOf;
        /**
         * Returns true if the specified array contains the specified element.
         * @param {*} array the array in which to search the element.
         * @param {Object} item the element to search.
         * @param {function(Object,Object):boolean=} equalsFunction optional function to
         * check equality between 2 elements.
         * @return {boolean} true if the specified array contains the specified element.
         */
        function contains(array, item, equalsFunction) {
            return arrays.indexOf(array, item, equalsFunction) >= 0;
        }
        arrays.contains = contains;
        /**
         * Removes the first ocurrence of the specified element from the specified array.
         * @param {*} array the array in which to search element.
         * @param {Object} item the element to search.
         * @param {function(Object,Object):boolean=} equalsFunction optional function to
         * check equality between 2 elements.
         * @return {boolean} true if the array changed after this call.
         */
        function remove(array, item, equalsFunction) {
            var index = arrays.indexOf(array, item, equalsFunction);
            if (index < 0) {
                return false;
            }
            array.splice(index, 1);
            return true;
        }
        arrays.remove = remove;
        /**
         * Returns the number of elements in the specified array equal
         * to the specified object.
         * @param {Array} array the array in which to determine the frequency of the element.
         * @param {Object} item the element whose frequency is to be determined.
         * @param {function(Object,Object):boolean=} equalsFunction optional function used to
         * check equality between 2 elements.
         * @return {number} the number of elements in the specified array
         * equal to the specified object.
         */
        function frequency(array, item, equalsFunction) {
            var equals = equalsFunction || collections.defaultEquals;
            var length = array.length;
            var freq = 0;
            for (var i = 0; i < length; i++) {
                if (equals(array[i], item)) {
                    freq++;
                }
            }
            return freq;
        }
        arrays.frequency = frequency;
        /**
         * Returns true if the two specified arrays are equal to one another.
         * Two arrays are considered equal if both arrays contain the same number
         * of elements, and all corresponding pairs of elements in the two
         * arrays are equal and are in the same order.
         * @param {Array} array1 one array to be tested for equality.
         * @param {Array} array2 the other array to be tested for equality.
         * @param {function(Object,Object):boolean=} equalsFunction optional function used to
         * check equality between elemements in the arrays.
         * @return {boolean} true if the two arrays are equal
         */
        function equals(array1, array2, equalsFunction) {
            var equals = equalsFunction || collections.defaultEquals;
            if (array1.length !== array2.length) {
                return false;
            }
            var length = array1.length;
            for (var i = 0; i < length; i++) {
                if (!equals(array1[i], array2[i])) {
                    return false;
                }
            }
            return true;
        }
        arrays.equals = equals;
        /**
         * Returns shallow a copy of the specified array.
         * @param {*} array the array to copy.
         * @return {Array} a copy of the specified array
         */
        function copy(array) {
            return array.concat();
        }
        arrays.copy = copy;
        /**
         * Swaps the elements at the specified positions in the specified array.
         * @param {Array} array The array in which to swap elements.
         * @param {number} i the index of one element to be swapped.
         * @param {number} j the index of the other element to be swapped.
         * @return {boolean} true if the array is defined and the indexes are valid.
         */
        function swap(array, i, j) {
            if (i < 0 || i >= array.length || j < 0 || j >= array.length) {
                return false;
            }
            var temp = array[i];
            array[i] = array[j];
            array[j] = temp;
            return true;
        }
        arrays.swap = swap;
        function toString(array) {
            return '[' + array.toString() + ']';
        }
        arrays.toString = toString;
        /**
         * Executes the provided function once for each element present in this array
         * starting from index 0 to length - 1.
         * @param {Array} array The array in which to iterate.
         * @param {function(Object):*} callback function to execute, it is
         * invoked with one argument: the element value, to break the iteration you can
         * optionally return false.
         */
        function forEach(array, callback) {
            var lenght = array.length;
            for (var i = 0; i < lenght; i++) {
                if (callback(array[i]) === false) {
                    return;
                }
            }
        }
        arrays.forEach = forEach;
    })(arrays = collections.arrays || (collections.arrays = {}));
    var LinkedList = (function () {
        /**
        * Creates an empty Linked List.
        * @class A linked list is a data structure consisting of a group of nodes
        * which together represent a sequence.
        * @constructor
        */
        function LinkedList() {
            /**
            * First node in the list
            * @type {Object}
            * @private
            */
            this.firstNode = null;
            /**
            * Last node in the list
            * @type {Object}
            * @private
            */
            this.lastNode = null;
            /**
            * Number of elements in the list
            * @type {number}
            * @private
            */
            this.nElements = 0;
        }
        /**
        * Adds an element to this list.
        * @param {Object} item element to be added.
        * @param {number=} index optional index to add the element. If no index is specified
        * the element is added to the end of this list.
        * @return {boolean} true if the element was added or false if the index is invalid
        * or if the element is undefined.
        */
        LinkedList.prototype.add = function (item, index) {
            if (collections.isUndefined(index)) {
                index = this.nElements;
            }
            if (index < 0 || index > this.nElements || collections.isUndefined(item)) {
                return false;
            }
            var newNode = this.createNode(item);
            if (this.nElements === 0) {
                // First node in the list.
                this.firstNode = newNode;
                this.lastNode = newNode;
            }
            else if (index === this.nElements) {
                // Insert at the end.
                this.lastNode.next = newNode;
                this.lastNode = newNode;
            }
            else if (index === 0) {
                // Change first node.
                newNode.next = this.firstNode;
                this.firstNode = newNode;
            }
            else {
                var prev = this.nodeAtIndex(index - 1);
                newNode.next = prev.next;
                prev.next = newNode;
            }
            this.nElements++;
            return true;
        };
        /**
        * Returns the first element in this list.
        * @return {*} the first element of the list or undefined if the list is
        * empty.
        */
        LinkedList.prototype.first = function () {
            if (this.firstNode !== null) {
                return this.firstNode.element;
            }
            return undefined;
        };
        /**
        * Returns the last element in this list.
        * @return {*} the last element in the list or undefined if the list is
        * empty.
        */
        LinkedList.prototype.last = function () {
            if (this.lastNode !== null) {
                return this.lastNode.element;
            }
            return undefined;
        };
        /**
         * Returns the element at the specified position in this list.
         * @param {number} index desired index.
         * @return {*} the element at the given index or undefined if the index is
         * out of bounds.
         */
        LinkedList.prototype.elementAtIndex = function (index) {
            var node = this.nodeAtIndex(index);
            if (node === null) {
                return undefined;
            }
            return node.element;
        };
        /**
         * Returns the index in this list of the first occurrence of the
         * specified element, or -1 if the List does not contain this element.
         * <p>If the elements inside this list are
         * not comparable with the === operator a custom equals function should be
         * provided to perform searches, the function must receive two arguments and
         * return true if they are equal, false otherwise. Example:</p>
         *
         * <pre>
         * var petsAreEqualByName = function(pet1, pet2) {
         *  return pet1.name === pet2.name;
         * }
         * </pre>
         * @param {Object} item element to search for.
         * @param {function(Object,Object):boolean=} equalsFunction Optional
         * function used to check if two elements are equal.
         * @return {number} the index in this list of the first occurrence
         * of the specified element, or -1 if this list does not contain the
         * element.
         */
        LinkedList.prototype.indexOf = function (item, equalsFunction) {
            var equalsF = equalsFunction || collections.defaultEquals;
            if (collections.isUndefined(item)) {
                return -1;
            }
            var currentNode = this.firstNode;
            var index = 0;
            while (currentNode !== null) {
                if (equalsF(currentNode.element, item)) {
                    return index;
                }
                index++;
                currentNode = currentNode.next;
            }
            return -1;
        };
        /**
           * Returns true if this list contains the specified element.
           * <p>If the elements inside the list are
           * not comparable with the === operator a custom equals function should be
           * provided to perform searches, the function must receive two arguments and
           * return true if they are equal, false otherwise. Example:</p>
           *
           * <pre>
           * var petsAreEqualByName = function(pet1, pet2) {
           *  return pet1.name === pet2.name;
           * }
           * </pre>
           * @param {Object} item element to search for.
           * @param {function(Object,Object):boolean=} equalsFunction Optional
           * function used to check if two elements are equal.
           * @return {boolean} true if this list contains the specified element, false
           * otherwise.
           */
        LinkedList.prototype.contains = function (item, equalsFunction) {
            return (this.indexOf(item, equalsFunction) >= 0);
        };
        /**
         * Removes the first occurrence of the specified element in this list.
         * <p>If the elements inside the list are
         * not comparable with the === operator a custom equals function should be
         * provided to perform searches, the function must receive two arguments and
         * return true if they are equal, false otherwise. Example:</p>
         *
         * <pre>
         * var petsAreEqualByName = function(pet1, pet2) {
         *  return pet1.name === pet2.name;
         * }
         * </pre>
         * @param {Object} item element to be removed from this list, if present.
         * @return {boolean} true if the list contained the specified element.
         */
        LinkedList.prototype.remove = function (item, equalsFunction) {
            var equalsF = equalsFunction || collections.defaultEquals;
            if (this.nElements < 1 || collections.isUndefined(item)) {
                return false;
            }
            var previous = null;
            var currentNode = this.firstNode;
            while (currentNode !== null) {
                if (equalsF(currentNode.element, item)) {
                    if (currentNode === this.firstNode) {
                        this.firstNode = this.firstNode.next;
                        if (currentNode === this.lastNode) {
                            this.lastNode = null;
                        }
                    }
                    else if (currentNode === this.lastNode) {
                        this.lastNode = previous;
                        previous.next = currentNode.next;
                        currentNode.next = null;
                    }
                    else {
                        previous.next = currentNode.next;
                        currentNode.next = null;
                    }
                    this.nElements--;
                    return true;
                }
                previous = currentNode;
                currentNode = currentNode.next;
            }
            return false;
        };
        /**
         * Removes all of the elements from this list.
         */
        LinkedList.prototype.clear = function () {
            this.firstNode = null;
            this.lastNode = null;
            this.nElements = 0;
        };
        /**
         * Returns true if this list is equal to the given list.
         * Two lists are equal if they have the same elements in the same order.
         * @param {LinkedList} other the other list.
         * @param {function(Object,Object):boolean=} equalsFunction optional
         * function used to check if two elements are equal. If the elements in the lists
         * are custom objects you should provide a function, otherwise
         * the === operator is used to check equality between elements.
         * @return {boolean} true if this list is equal to the given list.
         */
        LinkedList.prototype.equals = function (other, equalsFunction) {
            var eqF = equalsFunction || collections.defaultEquals;
            if (!(other instanceof collections.LinkedList)) {
                return false;
            }
            if (this.size() !== other.size()) {
                return false;
            }
            return this.equalsAux(this.firstNode, other.firstNode, eqF);
        };
        /**
        * @private
        */
        LinkedList.prototype.equalsAux = function (n1, n2, eqF) {
            while (n1 !== null) {
                if (!eqF(n1.element, n2.element)) {
                    return false;
                }
                n1 = n1.next;
                n2 = n2.next;
            }
            return true;
        };
        /**
         * Removes the element at the specified position in this list.
         * @param {number} index given index.
         * @return {*} removed element or undefined if the index is out of bounds.
         */
        LinkedList.prototype.removeElementAtIndex = function (index) {
            if (index < 0 || index >= this.nElements) {
                return undefined;
            }
            var element;
            if (this.nElements === 1) {
                //First node in the list.
                element = this.firstNode.element;
                this.firstNode = null;
                this.lastNode = null;
            }
            else {
                var previous = this.nodeAtIndex(index - 1);
                if (previous === null) {
                    element = this.firstNode.element;
                    this.firstNode = this.firstNode.next;
                }
                else if (previous.next === this.lastNode) {
                    element = this.lastNode.element;
                    this.lastNode = previous;
                }
                if (previous !== null) {
                    element = previous.next.element;
                    previous.next = previous.next.next;
                }
            }
            this.nElements--;
            return element;
        };
        /**
         * Executes the provided function once for each element present in this list in order.
         * @param {function(Object):*} callback function to execute, it is
         * invoked with one argument: the element value, to break the iteration you can
         * optionally return false.
         */
        LinkedList.prototype.forEach = function (callback) {
            var currentNode = this.firstNode;
            while (currentNode !== null) {
                if (callback(currentNode.element) === false) {
                    break;
                }
                currentNode = currentNode.next;
            }
        };
        /**
         * Reverses the order of the elements in this linked list (makes the last
         * element first, and the first element last).
         */
        LinkedList.prototype.reverse = function () {
            var previous = null;
            var current = this.firstNode;
            var temp = null;
            while (current !== null) {
                temp = current.next;
                current.next = previous;
                previous = current;
                current = temp;
            }
            temp = this.firstNode;
            this.firstNode = this.lastNode;
            this.lastNode = temp;
        };
        /**
         * Returns an array containing all of the elements in this list in proper
         * sequence.
         * @return {Array.<*>} an array containing all of the elements in this list,
         * in proper sequence.
         */
        LinkedList.prototype.toArray = function () {
            var array = [];
            var currentNode = this.firstNode;
            while (currentNode !== null) {
                array.push(currentNode.element);
                currentNode = currentNode.next;
            }
            return array;
        };
        /**
         * Returns the number of elements in this list.
         * @return {number} the number of elements in this list.
         */
        LinkedList.prototype.size = function () {
            return this.nElements;
        };
        /**
         * Returns true if this list contains no elements.
         * @return {boolean} true if this list contains no elements.
         */
        LinkedList.prototype.isEmpty = function () {
            return this.nElements <= 0;
        };
        LinkedList.prototype.toString = function () {
            return collections.arrays.toString(this.toArray());
        };
        /**
         * @private
         */
        LinkedList.prototype.nodeAtIndex = function (index) {
            if (index < 0 || index >= this.nElements) {
                return null;
            }
            if (index === (this.nElements - 1)) {
                return this.lastNode;
            }
            var node = this.firstNode;
            for (var i = 0; i < index; i++) {
                node = node.next;
            }
            return node;
        };
        /**
         * @private
         */
        LinkedList.prototype.createNode = function (item) {
            return {
                element: item,
                next: null
            };
        };
        return LinkedList;
    }());
    collections.LinkedList = LinkedList; // End of linked list 
    var Dictionary = (function () {
        /**
         * Creates an empty dictionary.
         * @class <p>Dictionaries map keys to values; each key can map to at most one value.
         * This implementation accepts any kind of objects as keys.</p>
         *
         * <p>If the keys are custom objects a function which converts keys to unique
         * strings must be provided. Example:</p>
         * <pre>
         * function petToString(pet) {
         *  return pet.name;
         * }
         * </pre>
         * @constructor
         * @param {function(Object):string=} toStrFunction optional function used
         * to convert keys to strings. If the keys aren't strings or if toString()
         * is not appropriate, a custom function which receives a key and returns a
         * unique string must be provided.
         */
        function Dictionary(toStrFunction) {
            this.table = {};
            this.nElements = 0;
            this.toStr = toStrFunction || collections.defaultToString;
        }
        /**
         * Returns the value to which this dictionary maps the specified key.
         * Returns undefined if this dictionary contains no mapping for this key.
         * @param {Object} key key whose associated value is to be returned.
         * @return {*} the value to which this dictionary maps the specified key or
         * undefined if the map contains no mapping for this key.
         */
        Dictionary.prototype.getValue = function (key) {
            var pair = this.table['$' + this.toStr(key)];
            if (collections.isUndefined(pair)) {
                return undefined;
            }
            return pair.value;
        };
        /**
         * Associates the specified value with the specified key in this dictionary.
         * If the dictionary previously contained a mapping for this key, the old
         * value is replaced by the specified value.
         * @param {Object} key key with which the specified value is to be
         * associated.
         * @param {Object} value value to be associated with the specified key.
         * @return {*} previous value associated with the specified key, or undefined if
         * there was no mapping for the key or if the key/value are undefined.
         */
        Dictionary.prototype.setValue = function (key, value) {
            if (collections.isUndefined(key) || collections.isUndefined(value)) {
                return undefined;
            }
            var ret;
            var k = '$' + this.toStr(key);
            var previousElement = this.table[k];
            if (collections.isUndefined(previousElement)) {
                this.nElements++;
                ret = undefined;
            }
            else {
                ret = previousElement.value;
            }
            this.table[k] = {
                key: key,
                value: value
            };
            return ret;
        };
        /**
         * Removes the mapping for this key from this dictionary if it is present.
         * @param {Object} key key whose mapping is to be removed from the
         * dictionary.
         * @return {*} previous value associated with specified key, or undefined if
         * there was no mapping for key.
         */
        Dictionary.prototype.remove = function (key) {
            var k = '$' + this.toStr(key);
            var previousElement = this.table[k];
            if (!collections.isUndefined(previousElement)) {
                delete this.table[k];
                this.nElements--;
                return previousElement.value;
            }
            return undefined;
        };
        /**
         * Returns an array containing all of the keys in this dictionary.
         * @return {Array} an array containing all of the keys in this dictionary.
         */
        Dictionary.prototype.keys = function () {
            var array = [];
            for (var name in this.table) {
                if (has(this.table, name)) {
                    var pair = this.table[name];
                    array.push(pair.key);
                }
            }
            return array;
        };
        /**
         * Returns an array containing all of the values in this dictionary.
         * @return {Array} an array containing all of the values in this dictionary.
         */
        Dictionary.prototype.values = function () {
            var array = [];
            for (var name in this.table) {
                if (has(this.table, name)) {
                    var pair = this.table[name];
                    array.push(pair.value);
                }
            }
            return array;
        };
        /**
        * Executes the provided function once for each key-value pair
        * present in this dictionary.
        * @param {function(Object,Object):*} callback function to execute, it is
        * invoked with two arguments: key and value. To break the iteration you can
        * optionally return false.
        */
        Dictionary.prototype.forEach = function (callback) {
            for (var name in this.table) {
                if (has(this.table, name)) {
                    var pair = this.table[name];
                    var ret = callback(pair.key, pair.value);
                    if (ret === false) {
                        return;
                    }
                }
            }
        };
        /**
         * Returns true if this dictionary contains a mapping for the specified key.
         * @param {Object} key key whose presence in this dictionary is to be
         * tested.
         * @return {boolean} true if this dictionary contains a mapping for the
         * specified key.
         */
        Dictionary.prototype.containsKey = function (key) {
            return !collections.isUndefined(this.getValue(key));
        };
        /**
        * Removes all mappings from this dictionary.
        * @this {collections.Dictionary}
        */
        Dictionary.prototype.clear = function () {
            this.table = {};
            this.nElements = 0;
        };
        /**
         * Returns the number of keys in this dictionary.
         * @return {number} the number of key-value mappings in this dictionary.
         */
        Dictionary.prototype.size = function () {
            return this.nElements;
        };
        /**
         * Returns true if this dictionary contains no mappings.
         * @return {boolean} true if this dictionary contains no mappings.
         */
        Dictionary.prototype.isEmpty = function () {
            return this.nElements <= 0;
        };
        Dictionary.prototype.toString = function () {
            var toret = "{";
            this.forEach(function (k, v) {
                toret = toret + "\n\t" + k.toString() + " : " + v.toString();
            });
            return toret + "\n}";
        };
        return Dictionary;
    }());
    collections.Dictionary = Dictionary; // End of dictionary
    // /**
    //  * Returns true if this dictionary is equal to the given dictionary.
    //  * Two dictionaries are equal if they contain the same mappings.
    //  * @param {collections.Dictionary} other the other dictionary.
    //  * @param {function(Object,Object):boolean=} valuesEqualFunction optional
    //  * function used to check if two values are equal.
    //  * @return {boolean} true if this dictionary is equal to the given dictionary.
    //  */
    // collections.Dictionary.prototype.equals = function(other,valuesEqualFunction) {
    // 	var eqF = valuesEqualFunction || collections.defaultEquals;
    // 	if(!(other instanceof collections.Dictionary)){
    // 		return false;
    // 	}
    // 	if(this.size() !== other.size()){
    // 		return false;
    // 	}
    // 	return this.equalsAux(this.firstNode,other.firstNode,eqF);
    // }
    var MultiDictionary = (function () {
        /**
         * Creates an empty multi dictionary.
         * @class <p>A multi dictionary is a special kind of dictionary that holds
         * multiple values against each key. Setting a value into the dictionary will
         * add the value to an array at that key. Getting a key will return an array,
         * holding all the values set to that key.
         * You can configure to allow duplicates in the values.
         * This implementation accepts any kind of objects as keys.</p>
         *
         * <p>If the keys are custom objects a function which converts keys to strings must be
         * provided. Example:</p>
         *
         * <pre>
         * function petToString(pet) {
           *  return pet.name;
           * }
         * </pre>
         * <p>If the values are custom objects a function to check equality between values
         * must be provided. Example:</p>
         *
         * <pre>
         * function petsAreEqualByAge(pet1,pet2) {
           *  return pet1.age===pet2.age;
           * }
         * </pre>
         * @constructor
         * @param {function(Object):string=} toStrFunction optional function
         * to convert keys to strings. If the keys aren't strings or if toString()
         * is not appropriate, a custom function which receives a key and returns a
         * unique string must be provided.
         * @param {function(Object,Object):boolean=} valuesEqualsFunction optional
         * function to check if two values are equal.
         *
         * @param allowDuplicateValues
         */
        function MultiDictionary(toStrFunction, valuesEqualsFunction, allowDuplicateValues) {
            if (allowDuplicateValues === void 0) { allowDuplicateValues = false; }
            this.dict = new Dictionary(toStrFunction);
            this.equalsF = valuesEqualsFunction || collections.defaultEquals;
            this.allowDuplicate = allowDuplicateValues;
        }
        /**
        * Returns an array holding the values to which this dictionary maps
        * the specified key.
        * Returns an empty array if this dictionary contains no mappings for this key.
        * @param {Object} key key whose associated values are to be returned.
        * @return {Array} an array holding the values to which this dictionary maps
        * the specified key.
        */
        MultiDictionary.prototype.getValue = function (key) {
            var values = this.dict.getValue(key);
            if (collections.isUndefined(values)) {
                return [];
            }
            return collections.arrays.copy(values);
        };
        /**
         * Adds the value to the array associated with the specified key, if
         * it is not already present.
         * @param {Object} key key with which the specified value is to be
         * associated.
         * @param {Object} value the value to add to the array at the key
         * @return {boolean} true if the value was not already associated with that key.
         */
        MultiDictionary.prototype.setValue = function (key, value) {
            if (collections.isUndefined(key) || collections.isUndefined(value)) {
                return false;
            }
            if (!this.containsKey(key)) {
                this.dict.setValue(key, [value]);
                return true;
            }
            var array = this.dict.getValue(key);
            if (!this.allowDuplicate) {
                if (collections.arrays.contains(array, value, this.equalsF)) {
                    return false;
                }
            }
            array.push(value);
            return true;
        };
        /**
         * Removes the specified values from the array of values associated with the
         * specified key. If a value isn't given, all values associated with the specified
         * key are removed.
         * @param {Object} key key whose mapping is to be removed from the
         * dictionary.
         * @param {Object=} value optional argument to specify the value to remove
         * from the array associated with the specified key.
         * @return {*} true if the dictionary changed, false if the key doesn't exist or
         * if the specified value isn't associated with the specified key.
         */
        MultiDictionary.prototype.remove = function (key, value) {
            if (collections.isUndefined(value)) {
                var v = this.dict.remove(key);
                return !collections.isUndefined(v);
            }
            var array = this.dict.getValue(key);
            if (collections.arrays.remove(array, value, this.equalsF)) {
                if (array.length === 0) {
                    this.dict.remove(key);
                }
                return true;
            }
            return false;
        };
        /**
         * Returns an array containing all of the keys in this dictionary.
         * @return {Array} an array containing all of the keys in this dictionary.
         */
        MultiDictionary.prototype.keys = function () {
            return this.dict.keys();
        };
        /**
         * Returns an array containing all of the values in this dictionary.
         * @return {Array} an array containing all of the values in this dictionary.
         */
        MultiDictionary.prototype.values = function () {
            var values = this.dict.values();
            var array = [];
            for (var i = 0; i < values.length; i++) {
                var v = values[i];
                for (var j = 0; j < v.length; j++) {
                    array.push(v[j]);
                }
            }
            return array;
        };
        /**
         * Returns true if this dictionary at least one value associatted the specified key.
         * @param {Object} key key whose presence in this dictionary is to be
         * tested.
         * @return {boolean} true if this dictionary at least one value associatted
         * the specified key.
         */
        MultiDictionary.prototype.containsKey = function (key) {
            return this.dict.containsKey(key);
        };
        /**
         * Removes all mappings from this dictionary.
         */
        MultiDictionary.prototype.clear = function () {
            this.dict.clear();
        };
        /**
         * Returns the number of keys in this dictionary.
         * @return {number} the number of key-value mappings in this dictionary.
         */
        MultiDictionary.prototype.size = function () {
            return this.dict.size();
        };
        /**
         * Returns true if this dictionary contains no mappings.
         * @return {boolean} true if this dictionary contains no mappings.
         */
        MultiDictionary.prototype.isEmpty = function () {
            return this.dict.isEmpty();
        };
        return MultiDictionary;
    }());
    collections.MultiDictionary = MultiDictionary; // end of multi dictionary 
    var Heap = (function () {
        /**
         * Creates an empty Heap.
         * @class
         * <p>A heap is a binary tree, where the nodes maintain the heap property:
         * each node is smaller than each of its children and therefore a MinHeap
         * This implementation uses an array to store elements.</p>
         * <p>If the inserted elements are custom objects a compare function must be provided,
         *  at construction time, otherwise the <=, === and >= operators are
         * used to compare elements. Example:</p>
         *
         * <pre>
         * function compare(a, b) {
         *  if (a is less than b by some ordering criterion) {
         *     return -1;
         *  } if (a is greater than b by the ordering criterion) {
         *     return 1;
         *  }
         *  // a must be equal to b
         *  return 0;
         * }
         * </pre>
         *
         * <p>If a Max-Heap is wanted (greater elements on top) you can a provide a
         * reverse compare function to accomplish that behavior. Example:</p>
         *
         * <pre>
         * function reverseCompare(a, b) {
         *  if (a is less than b by some ordering criterion) {
         *     return 1;
         *  } if (a is greater than b by the ordering criterion) {
         *     return -1;
         *  }
         *  // a must be equal to b
         *  return 0;
         * }
         * </pre>
         *
         * @constructor
         * @param {function(Object,Object):number=} compareFunction optional
         * function used to compare two elements. Must return a negative integer,
         * zero, or a positive integer as the first argument is less than, equal to,
         * or greater than the second.
         */
        function Heap(compareFunction) {
            /**
             * Array used to store the elements od the heap.
             * @type {Array.<Object>}
             * @private
             */
            this.data = [];
            this.compare = compareFunction || collections.defaultCompare;
        }
        /**
         * Returns the index of the left child of the node at the given index.
         * @param {number} nodeIndex The index of the node to get the left child
         * for.
         * @return {number} The index of the left child.
         * @private
         */
        Heap.prototype.leftChildIndex = function (nodeIndex) {
            return (2 * nodeIndex) + 1;
        };
        /**
         * Returns the index of the right child of the node at the given index.
         * @param {number} nodeIndex The index of the node to get the right child
         * for.
         * @return {number} The index of the right child.
         * @private
         */
        Heap.prototype.rightChildIndex = function (nodeIndex) {
            return (2 * nodeIndex) + 2;
        };
        /**
         * Returns the index of the parent of the node at the given index.
         * @param {number} nodeIndex The index of the node to get the parent for.
         * @return {number} The index of the parent.
         * @private
         */
        Heap.prototype.parentIndex = function (nodeIndex) {
            return Math.floor((nodeIndex - 1) / 2);
        };
        /**
         * Returns the index of the smaller child node (if it exists).
         * @param {number} leftChild left child index.
         * @param {number} rightChild right child index.
         * @return {number} the index with the minimum value or -1 if it doesn't
         * exists.
         * @private
         */
        Heap.prototype.minIndex = function (leftChild, rightChild) {
            if (rightChild >= this.data.length) {
                if (leftChild >= this.data.length) {
                    return -1;
                }
                else {
                    return leftChild;
                }
            }
            else {
                if (this.compare(this.data[leftChild], this.data[rightChild]) <= 0) {
                    return leftChild;
                }
                else {
                    return rightChild;
                }
            }
        };
        /**
         * Moves the node at the given index up to its proper place in the heap.
         * @param {number} index The index of the node to move up.
         * @private
         */
        Heap.prototype.siftUp = function (index) {
            var parent = this.parentIndex(index);
            while (index > 0 && this.compare(this.data[parent], this.data[index]) > 0) {
                collections.arrays.swap(this.data, parent, index);
                index = parent;
                parent = this.parentIndex(index);
            }
        };
        /**
         * Moves the node at the given index down to its proper place in the heap.
         * @param {number} nodeIndex The index of the node to move down.
         * @private
         */
        Heap.prototype.siftDown = function (nodeIndex) {
            //smaller child index
            var min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));
            while (min >= 0 && this.compare(this.data[nodeIndex], this.data[min]) > 0) {
                collections.arrays.swap(this.data, min, nodeIndex);
                nodeIndex = min;
                min = this.minIndex(this.leftChildIndex(nodeIndex), this.rightChildIndex(nodeIndex));
            }
        };
        /**
         * Retrieves but does not remove the root element of this heap.
         * @return {*} The value at the root of the heap. Returns undefined if the
         * heap is empty.
         */
        Heap.prototype.peek = function () {
            if (this.data.length > 0) {
                return this.data[0];
            }
            else {
                return undefined;
            }
        };
        /**
         * Adds the given element into the heap.
         * @param {*} element the element.
         * @return true if the element was added or fals if it is undefined.
         */
        Heap.prototype.add = function (element) {
            if (collections.isUndefined(element)) {
                return undefined;
            }
            this.data.push(element);
            this.siftUp(this.data.length - 1);
            return true;
        };
        /**
         * Retrieves and removes the root element of this heap.
         * @return {*} The value removed from the root of the heap. Returns
         * undefined if the heap is empty.
         */
        Heap.prototype.removeRoot = function () {
            if (this.data.length > 0) {
                var obj = this.data[0];
                this.data[0] = this.data[this.data.length - 1];
                this.data.splice(this.data.length - 1, 1);
                if (this.data.length > 0) {
                    this.siftDown(0);
                }
                return obj;
            }
            return undefined;
        };
        /**
         * Returns true if this heap contains the specified element.
         * @param {Object} element element to search for.
         * @return {boolean} true if this Heap contains the specified element, false
         * otherwise.
         */
        Heap.prototype.contains = function (element) {
            var equF = collections.compareToEquals(this.compare);
            return collections.arrays.contains(this.data, element, equF);
        };
        /**
         * Returns the number of elements in this heap.
         * @return {number} the number of elements in this heap.
         */
        Heap.prototype.size = function () {
            return this.data.length;
        };
        /**
         * Checks if this heap is empty.
         * @return {boolean} true if and only if this heap contains no items; false
         * otherwise.
         */
        Heap.prototype.isEmpty = function () {
            return this.data.length <= 0;
        };
        /**
         * Removes all of the elements from this heap.
         */
        Heap.prototype.clear = function () {
            this.data.length = 0;
        };
        /**
         * Executes the provided function once for each element present in this heap in
         * no particular order.
         * @param {function(Object):*} callback function to execute, it is
         * invoked with one argument: the element value, to break the iteration you can
         * optionally return false.
         */
        Heap.prototype.forEach = function (callback) {
            collections.arrays.forEach(this.data, callback);
        };
        return Heap;
    }());
    collections.Heap = Heap;
    var Stack = (function () {
        /**
         * Creates an empty Stack.
         * @class A Stack is a Last-In-First-Out (LIFO) data structure, the last
         * element added to the stack will be the first one to be removed. This
         * implementation uses a linked list as a container.
         * @constructor
         */
        function Stack() {
            this.list = new LinkedList();
        }
        /**
         * Pushes an item onto the top of this stack.
         * @param {Object} elem the element to be pushed onto this stack.
         * @return {boolean} true if the element was pushed or false if it is undefined.
         */
        Stack.prototype.push = function (elem) {
            return this.list.add(elem, 0);
        };
        /**
         * Pushes an item onto the top of this stack.
         * @param {Object} elem the element to be pushed onto this stack.
         * @return {boolean} true if the element was pushed or false if it is undefined.
         */
        Stack.prototype.add = function (elem) {
            return this.list.add(elem, 0);
        };
        /**
         * Removes the object at the top of this stack and returns that object.
         * @return {*} the object at the top of this stack or undefined if the
         * stack is empty.
         */
        Stack.prototype.pop = function () {
            return this.list.removeElementAtIndex(0);
        };
        /**
         * Looks at the object at the top of this stack without removing it from the
         * stack.
         * @return {*} the object at the top of this stack or undefined if the
         * stack is empty.
         */
        Stack.prototype.peek = function () {
            return this.list.first();
        };
        /**
         * Returns the number of elements in this stack.
         * @return {number} the number of elements in this stack.
         */
        Stack.prototype.size = function () {
            return this.list.size();
        };
        /**
         * Returns true if this stack contains the specified element.
         * <p>If the elements inside this stack are
         * not comparable with the === operator, a custom equals function should be
         * provided to perform searches, the function must receive two arguments and
         * return true if they are equal, false otherwise. Example:</p>
         *
         * <pre>
         * var petsAreEqualByName (pet1, pet2) {
         *  return pet1.name === pet2.name;
         * }
         * </pre>
         * @param {Object} elem element to search for.
         * @param {function(Object,Object):boolean=} equalsFunction optional
         * function to check if two elements are equal.
         * @return {boolean} true if this stack contains the specified element,
         * false otherwise.
         */
        Stack.prototype.contains = function (elem, equalsFunction) {
            return this.list.contains(elem, equalsFunction);
        };
        /**
         * Checks if this stack is empty.
         * @return {boolean} true if and only if this stack contains no items; false
         * otherwise.
         */
        Stack.prototype.isEmpty = function () {
            return this.list.isEmpty();
        };
        /**
         * Removes all of the elements from this stack.
         */
        Stack.prototype.clear = function () {
            this.list.clear();
        };
        /**
         * Executes the provided function once for each element present in this stack in
         * LIFO order.
         * @param {function(Object):*} callback function to execute, it is
         * invoked with one argument: the element value, to break the iteration you can
         * optionally return false.
         */
        Stack.prototype.forEach = function (callback) {
            this.list.forEach(callback);
        };
        return Stack;
    }());
    collections.Stack = Stack; // End of stack 
    var Queue = (function () {
        /**
         * Creates an empty queue.
         * @class A queue is a First-In-First-Out (FIFO) data structure, the first
         * element added to the queue will be the first one to be removed. This
         * implementation uses a linked list as a container.
         * @constructor
         */
        function Queue() {
            this.list = new LinkedList();
        }
        /**
         * Inserts the specified element into the end of this queue.
         * @param {Object} elem the element to insert.
         * @return {boolean} true if the element was inserted, or false if it is undefined.
         */
        Queue.prototype.enqueue = function (elem) {
            return this.list.add(elem);
        };
        /**
         * Inserts the specified element into the end of this queue.
         * @param {Object} elem the element to insert.
         * @return {boolean} true if the element was inserted, or false if it is undefined.
         */
        Queue.prototype.add = function (elem) {
            return this.list.add(elem);
        };
        /**
         * Retrieves and removes the head of this queue.
         * @return {*} the head of this queue, or undefined if this queue is empty.
         */
        Queue.prototype.dequeue = function () {
            if (this.list.size() !== 0) {
                var el = this.list.first();
                this.list.removeElementAtIndex(0);
                return el;
            }
            return undefined;
        };
        /**
         * Retrieves, but does not remove, the head of this queue.
         * @return {*} the head of this queue, or undefined if this queue is empty.
         */
        Queue.prototype.peek = function () {
            if (this.list.size() !== 0) {
                return this.list.first();
            }
            return undefined;
        };
        /**
         * Returns the number of elements in this queue.
         * @return {number} the number of elements in this queue.
         */
        Queue.prototype.size = function () {
            return this.list.size();
        };
        /**
         * Returns true if this queue contains the specified element.
         * <p>If the elements inside this stack are
         * not comparable with the === operator, a custom equals function should be
         * provided to perform searches, the function must receive two arguments and
         * return true if they are equal, false otherwise. Example:</p>
         *
         * <pre>
         * var petsAreEqualByName (pet1, pet2) {
         *  return pet1.name === pet2.name;
         * }
         * </pre>
         * @param {Object} elem element to search for.
         * @param {function(Object,Object):boolean=} equalsFunction optional
         * function to check if two elements are equal.
         * @return {boolean} true if this queue contains the specified element,
         * false otherwise.
         */
        Queue.prototype.contains = function (elem, equalsFunction) {
            return this.list.contains(elem, equalsFunction);
        };
        /**
         * Checks if this queue is empty.
         * @return {boolean} true if and only if this queue contains no items; false
         * otherwise.
         */
        Queue.prototype.isEmpty = function () {
            return this.list.size() <= 0;
        };
        /**
         * Removes all of the elements from this queue.
         */
        Queue.prototype.clear = function () {
            this.list.clear();
        };
        /**
         * Executes the provided function once for each element present in this queue in
         * FIFO order.
         * @param {function(Object):*} callback function to execute, it is
         * invoked with one argument: the element value, to break the iteration you can
         * optionally return false.
         */
        Queue.prototype.forEach = function (callback) {
            this.list.forEach(callback);
        };
        return Queue;
    }());
    collections.Queue = Queue; // End of queue
    var PriorityQueue = (function () {
        /**
         * Creates an empty priority queue.
         * @class <p>In a priority queue each element is associated with a "priority",
         * elements are dequeued in highest-priority-first order (the elements with the
         * highest priority are dequeued first). Priority Queues are implemented as heaps.
         * If the inserted elements are custom objects a compare function must be provided,
         * otherwise the <=, === and >= operators are used to compare object priority.</p>
         * <pre>
         * function compare(a, b) {
         *  if (a is less than b by some ordering criterion) {
         *     return -1;
         *  } if (a is greater than b by the ordering criterion) {
         *     return 1;
         *  }
         *  // a must be equal to b
         *  return 0;
         * }
         * </pre>
         * @constructor
         * @param {function(Object,Object):number=} compareFunction optional
         * function used to compare two element priorities. Must return a negative integer,
         * zero, or a positive integer as the first argument is less than, equal to,
         * or greater than the second.
         */
        function PriorityQueue(compareFunction) {
            this.heap = new Heap(collections.reverseCompareFunction(compareFunction));
        }
        /**
         * Inserts the specified element into this priority queue.
         * @param {Object} element the element to insert.
         * @return {boolean} true if the element was inserted, or false if it is undefined.
         */
        PriorityQueue.prototype.enqueue = function (element) {
            return this.heap.add(element);
        };
        /**
         * Inserts the specified element into this priority queue.
         * @param {Object} element the element to insert.
         * @return {boolean} true if the element was inserted, or false if it is undefined.
         */
        PriorityQueue.prototype.add = function (element) {
            return this.heap.add(element);
        };
        /**
         * Retrieves and removes the highest priority element of this queue.
         * @return {*} the the highest priority element of this queue,
         *  or undefined if this queue is empty.
         */
        PriorityQueue.prototype.dequeue = function () {
            if (this.heap.size() !== 0) {
                var el = this.heap.peek();
                this.heap.removeRoot();
                return el;
            }
            return undefined;
        };
        /**
         * Retrieves, but does not remove, the highest priority element of this queue.
         * @return {*} the highest priority element of this queue, or undefined if this queue is empty.
         */
        PriorityQueue.prototype.peek = function () {
            return this.heap.peek();
        };
        /**
         * Returns true if this priority queue contains the specified element.
         * @param {Object} element element to search for.
         * @return {boolean} true if this priority queue contains the specified element,
         * false otherwise.
         */
        PriorityQueue.prototype.contains = function (element) {
            return this.heap.contains(element);
        };
        /**
         * Checks if this priority queue is empty.
         * @return {boolean} true if and only if this priority queue contains no items; false
         * otherwise.
         */
        PriorityQueue.prototype.isEmpty = function () {
            return this.heap.isEmpty();
        };
        /**
         * Returns the number of elements in this priority queue.
         * @return {number} the number of elements in this priority queue.
         */
        PriorityQueue.prototype.size = function () {
            return this.heap.size();
        };
        /**
         * Removes all of the elements from this priority queue.
         */
        PriorityQueue.prototype.clear = function () {
            this.heap.clear();
        };
        /**
         * Executes the provided function once for each element present in this queue in
         * no particular order.
         * @param {function(Object):*} callback function to execute, it is
         * invoked with one argument: the element value, to break the iteration you can
         * optionally return false.
         */
        PriorityQueue.prototype.forEach = function (callback) {
            this.heap.forEach(callback);
        };
        return PriorityQueue;
    }());
    collections.PriorityQueue = PriorityQueue; // end of priority queue
    var Set = (function () {
        /**
         * Creates an empty set.
         * @class <p>A set is a data structure that contains no duplicate items.</p>
         * <p>If the inserted elements are custom objects a function
         * which converts elements to strings must be provided. Example:</p>
         *
         * <pre>
         * function petToString(pet) {
         *  return pet.name;
         * }
         * </pre>
         *
         * @constructor
         * @param {function(Object):string=} toStringFunction optional function used
         * to convert elements to strings. If the elements aren't strings or if toString()
         * is not appropriate, a custom function which receives a onject and returns a
         * unique string must be provided.
         */
        function Set(toStringFunction) {
            this.dictionary = new Dictionary(toStringFunction);
        }
        /**
         * Returns true if this set contains the specified element.
         * @param {Object} element element to search for.
         * @return {boolean} true if this set contains the specified element,
         * false otherwise.
         */
        Set.prototype.contains = function (element) {
            return this.dictionary.containsKey(element);
        };
        /**
         * Adds the specified element to this set if it is not already present.
         * @param {Object} element the element to insert.
         * @return {boolean} true if this set did not already contain the specified element.
         */
        Set.prototype.add = function (element) {
            if (this.contains(element) || collections.isUndefined(element)) {
                return false;
            }
            else {
                this.dictionary.setValue(element, element);
                return true;
            }
        };
        /**
         * Performs an intersecion between this an another set.
         * Removes all values that are not present this set and the given set.
         * @param {collections.Set} otherSet other set.
         */
        Set.prototype.intersection = function (otherSet) {
            var set = this;
            this.forEach(function (element) {
                if (!otherSet.contains(element)) {
                    set.remove(element);
                }
                return true;
            });
        };
        /**
         * Performs a union between this an another set.
         * Adds all values from the given set to this set.
         * @param {collections.Set} otherSet other set.
         */
        Set.prototype.union = function (otherSet) {
            var set = this;
            otherSet.forEach(function (element) {
                set.add(element);
                return true;
            });
        };
        /**
         * Performs a difference between this an another set.
         * Removes from this set all the values that are present in the given set.
         * @param {collections.Set} otherSet other set.
         */
        Set.prototype.difference = function (otherSet) {
            var set = this;
            otherSet.forEach(function (element) {
                set.remove(element);
                return true;
            });
        };
        /**
         * Checks whether the given set contains all the elements in this set.
         * @param {collections.Set} otherSet other set.
         * @return {boolean} true if this set is a subset of the given set.
         */
        Set.prototype.isSubsetOf = function (otherSet) {
            if (this.size() > otherSet.size()) {
                return false;
            }
            var isSub = true;
            this.forEach(function (element) {
                if (!otherSet.contains(element)) {
                    isSub = false;
                    return false;
                }
                return true;
            });
            return isSub;
        };
        /**
         * Removes the specified element from this set if it is present.
         * @return {boolean} true if this set contained the specified element.
         */
        Set.prototype.remove = function (element) {
            if (!this.contains(element)) {
                return false;
            }
            else {
                this.dictionary.remove(element);
                return true;
            }
        };
        /**
         * Executes the provided function once for each element
         * present in this set.
         * @param {function(Object):*} callback function to execute, it is
         * invoked with one arguments: the element. To break the iteration you can
         * optionally return false.
         */
        Set.prototype.forEach = function (callback) {
            this.dictionary.forEach(function (k, v) {
                return callback(v);
            });
        };
        /**
         * Returns an array containing all of the elements in this set in arbitrary order.
         * @return {Array} an array containing all of the elements in this set.
         */
        Set.prototype.toArray = function () {
            return this.dictionary.values();
        };
        /**
         * Returns true if this set contains no elements.
         * @return {boolean} true if this set contains no elements.
         */
        Set.prototype.isEmpty = function () {
            return this.dictionary.isEmpty();
        };
        /**
         * Returns the number of elements in this set.
         * @return {number} the number of elements in this set.
         */
        Set.prototype.size = function () {
            return this.dictionary.size();
        };
        /**
         * Removes all of the elements from this set.
         */
        Set.prototype.clear = function () {
            this.dictionary.clear();
        };
        /*
        * Provides a string representation for display
        */
        Set.prototype.toString = function () {
            return collections.arrays.toString(this.toArray());
        };
        return Set;
    }());
    collections.Set = Set; // end of Set
    var Bag = (function () {
        /**
         * Creates an empty bag.
         * @class <p>A bag is a special kind of set in which members are
         * allowed to appear more than once.</p>
         * <p>If the inserted elements are custom objects a function
         * which converts elements to unique strings must be provided. Example:</p>
         *
         * <pre>
         * function petToString(pet) {
         *  return pet.name;
         * }
         * </pre>
         *
         * @constructor
         * @param {function(Object):string=} toStrFunction optional function used
         * to convert elements to strings. If the elements aren't strings or if toString()
         * is not appropriate, a custom function which receives an object and returns a
         * unique string must be provided.
         */
        function Bag(toStrFunction) {
            this.toStrF = toStrFunction || collections.defaultToString;
            this.dictionary = new Dictionary(this.toStrF);
            this.nElements = 0;
        }
        /**
        * Adds nCopies of the specified object to this bag.
        * @param {Object} element element to add.
        * @param {number=} nCopies the number of copies to add, if this argument is
        * undefined 1 copy is added.
        * @return {boolean} true unless element is undefined.
        */
        Bag.prototype.add = function (element, nCopies) {
            if (nCopies === void 0) { nCopies = 1; }
            if (collections.isUndefined(element) || nCopies <= 0) {
                return false;
            }
            if (!this.contains(element)) {
                var node = {
                    value: element,
                    copies: nCopies
                };
                this.dictionary.setValue(element, node);
            }
            else {
                this.dictionary.getValue(element).copies += nCopies;
            }
            this.nElements += nCopies;
            return true;
        };
        /**
        * Counts the number of copies of the specified object in this bag.
        * @param {Object} element the object to search for..
        * @return {number} the number of copies of the object, 0 if not found
        */
        Bag.prototype.count = function (element) {
            if (!this.contains(element)) {
                return 0;
            }
            else {
                return this.dictionary.getValue(element).copies;
            }
        };
        /**
         * Returns true if this bag contains the specified element.
         * @param {Object} element element to search for.
         * @return {boolean} true if this bag contains the specified element,
         * false otherwise.
         */
        Bag.prototype.contains = function (element) {
            return this.dictionary.containsKey(element);
        };
        /**
        * Removes nCopies of the specified object to this bag.
        * If the number of copies to remove is greater than the actual number
        * of copies in the Bag, all copies are removed.
        * @param {Object} element element to remove.
        * @param {number=} nCopies the number of copies to remove, if this argument is
        * undefined 1 copy is removed.
        * @return {boolean} true if at least 1 element was removed.
        */
        Bag.prototype.remove = function (element, nCopies) {
            if (nCopies === void 0) { nCopies = 1; }
            if (collections.isUndefined(element) || nCopies <= 0) {
                return false;
            }
            if (!this.contains(element)) {
                return false;
            }
            else {
                var node = this.dictionary.getValue(element);
                if (nCopies > node.copies) {
                    this.nElements -= node.copies;
                }
                else {
                    this.nElements -= nCopies;
                }
                node.copies -= nCopies;
                if (node.copies <= 0) {
                    this.dictionary.remove(element);
                }
                return true;
            }
        };
        /**
         * Returns an array containing all of the elements in this big in arbitrary order,
         * including multiple copies.
         * @return {Array} an array containing all of the elements in this bag.
         */
        Bag.prototype.toArray = function () {
            var a = [];
            var values = this.dictionary.values();
            var vl = values.length;
            for (var i = 0; i < vl; i++) {
                var node = values[i];
                var element = node.value;
                var copies = node.copies;
                for (var j = 0; j < copies; j++) {
                    a.push(element);
                }
            }
            return a;
        };
        /**
         * Returns a set of unique elements in this bag.
         * @return {collections.Set<T>} a set of unique elements in this bag.
         */
        Bag.prototype.toSet = function () {
            var toret = new Set(this.toStrF);
            var elements = this.dictionary.values();
            var l = elements.length;
            for (var i = 0; i < l; i++) {
                var value = elements[i].value;
                toret.add(value);
            }
            return toret;
        };
        /**
         * Executes the provided function once for each element
         * present in this bag, including multiple copies.
         * @param {function(Object):*} callback function to execute, it is
         * invoked with one argument: the element. To break the iteration you can
         * optionally return false.
         */
        Bag.prototype.forEach = function (callback) {
            this.dictionary.forEach(function (k, v) {
                var value = v.value;
                var copies = v.copies;
                for (var i = 0; i < copies; i++) {
                    if (callback(value) === false) {
                        return false;
                    }
                }
                return true;
            });
        };
        /**
         * Returns the number of elements in this bag.
         * @return {number} the number of elements in this bag.
         */
        Bag.prototype.size = function () {
            return this.nElements;
        };
        /**
         * Returns true if this bag contains no elements.
         * @return {boolean} true if this bag contains no elements.
         */
        Bag.prototype.isEmpty = function () {
            return this.nElements === 0;
        };
        /**
         * Removes all of the elements from this bag.
         */
        Bag.prototype.clear = function () {
            this.nElements = 0;
            this.dictionary.clear();
        };
        return Bag;
    }());
    collections.Bag = Bag; // End of bag 
    var BSTree = (function () {
        /**
         * Creates an empty binary search tree.
         * @class <p>A binary search tree is a binary tree in which each
         * internal node stores an element such that the elements stored in the
         * left subtree are less than it and the elements
         * stored in the right subtree are greater.</p>
         * <p>Formally, a binary search tree is a node-based binary tree data structure which
         * has the following properties:</p>
         * <ul>
         * <li>The left subtree of a node contains only nodes with elements less
         * than the node's element</li>
         * <li>The right subtree of a node contains only nodes with elements greater
         * than the node's element</li>
         * <li>Both the left and right subtrees must also be binary search trees.</li>
         * </ul>
         * <p>If the inserted elements are custom objects a compare function must
         * be provided at construction time, otherwise the <=, === and >= operators are
         * used to compare elements. Example:</p>
         * <pre>
         * function compare(a, b) {
         *  if (a is less than b by some ordering criterion) {
         *     return -1;
         *  } if (a is greater than b by the ordering criterion) {
         *     return 1;
         *  }
         *  // a must be equal to b
         *  return 0;
         * }
         * </pre>
         * @constructor
         * @param {function(Object,Object):number=} compareFunction optional
         * function used to compare two elements. Must return a negative integer,
         * zero, or a positive integer as the first argument is less than, equal to,
         * or greater than the second.
         */
        function BSTree(compareFunction) {
            this.root = null;
            this.compare = compareFunction || collections.defaultCompare;
            this.nElements = 0;
        }
        /**
         * Adds the specified element to this tree if it is not already present.
         * @param {Object} element the element to insert.
         * @return {boolean} true if this tree did not already contain the specified element.
         */
        BSTree.prototype.add = function (element) {
            if (collections.isUndefined(element)) {
                return false;
            }
            if (this.insertNode(this.createNode(element)) !== null) {
                this.nElements++;
                return true;
            }
            return false;
        };
        /**
         * Removes all of the elements from this tree.
         */
        BSTree.prototype.clear = function () {
            this.root = null;
            this.nElements = 0;
        };
        /**
         * Returns true if this tree contains no elements.
         * @return {boolean} true if this tree contains no elements.
         */
        BSTree.prototype.isEmpty = function () {
            return this.nElements === 0;
        };
        /**
         * Returns the number of elements in this tree.
         * @return {number} the number of elements in this tree.
         */
        BSTree.prototype.size = function () {
            return this.nElements;
        };
        /**
         * Returns true if this tree contains the specified element.
         * @param {Object} element element to search for.
         * @return {boolean} true if this tree contains the specified element,
         * false otherwise.
         */
        BSTree.prototype.contains = function (element) {
            if (collections.isUndefined(element)) {
                return false;
            }
            return this.searchNode(this.root, element) !== null;
        };
        /**
         * Removes the specified element from this tree if it is present.
         * @return {boolean} true if this tree contained the specified element.
         */
        BSTree.prototype.remove = function (element) {
            var node = this.searchNode(this.root, element);
            if (node === null) {
                return false;
            }
            this.removeNode(node);
            this.nElements--;
            return true;
        };
        /**
         * Executes the provided function once for each element present in this tree in
         * in-order.
         * @param {function(Object):*} callback function to execute, it is invoked with one
         * argument: the element value, to break the iteration you can optionally return false.
         */
        BSTree.prototype.inorderTraversal = function (callback) {
            this.inorderTraversalAux(this.root, callback, {
                stop: false
            });
        };
        /**
         * Executes the provided function once for each element present in this tree in pre-order.
         * @param {function(Object):*} callback function to execute, it is invoked with one
         * argument: the element value, to break the iteration you can optionally return false.
         */
        BSTree.prototype.preorderTraversal = function (callback) {
            this.preorderTraversalAux(this.root, callback, {
                stop: false
            });
        };
        /**
         * Executes the provided function once for each element present in this tree in post-order.
         * @param {function(Object):*} callback function to execute, it is invoked with one
         * argument: the element value, to break the iteration you can optionally return false.
         */
        BSTree.prototype.postorderTraversal = function (callback) {
            this.postorderTraversalAux(this.root, callback, {
                stop: false
            });
        };
        /**
         * Executes the provided function once for each element present in this tree in
         * level-order.
         * @param {function(Object):*} callback function to execute, it is invoked with one
         * argument: the element value, to break the iteration you can optionally return false.
         */
        BSTree.prototype.levelTraversal = function (callback) {
            this.levelTraversalAux(this.root, callback);
        };
        /**
         * Returns the minimum element of this tree.
         * @return {*} the minimum element of this tree or undefined if this tree is
         * is empty.
         */
        BSTree.prototype.minimum = function () {
            if (this.isEmpty()) {
                return undefined;
            }
            return this.minimumAux(this.root).element;
        };
        /**
         * Returns the maximum element of this tree.
         * @return {*} the maximum element of this tree or undefined if this tree is
         * is empty.
         */
        BSTree.prototype.maximum = function () {
            if (this.isEmpty()) {
                return undefined;
            }
            return this.maximumAux(this.root).element;
        };
        /**
         * Executes the provided function once for each element present in this tree in inorder.
         * Equivalent to inorderTraversal.
         * @param {function(Object):*} callback function to execute, it is
         * invoked with one argument: the element value, to break the iteration you can
         * optionally return false.
         */
        BSTree.prototype.forEach = function (callback) {
            this.inorderTraversal(callback);
        };
        /**
         * Returns an array containing all of the elements in this tree in in-order.
         * @return {Array} an array containing all of the elements in this tree in in-order.
         */
        BSTree.prototype.toArray = function () {
            var array = [];
            this.inorderTraversal(function (element) {
                array.push(element);
                return true;
            });
            return array;
        };
        /**
         * Returns the height of this tree.
         * @return {number} the height of this tree or -1 if is empty.
         */
        BSTree.prototype.height = function () {
            return this.heightAux(this.root);
        };
        /**
        * @private
        */
        BSTree.prototype.searchNode = function (node, element) {
            var cmp = null;
            while (node !== null && cmp !== 0) {
                cmp = this.compare(element, node.element);
                if (cmp < 0) {
                    node = node.leftCh;
                }
                else if (cmp > 0) {
                    node = node.rightCh;
                }
            }
            return node;
        };
        /**
        * @private
        */
        BSTree.prototype.transplant = function (n1, n2) {
            if (n1.parent === null) {
                this.root = n2;
            }
            else if (n1 === n1.parent.leftCh) {
                n1.parent.leftCh = n2;
            }
            else {
                n1.parent.rightCh = n2;
            }
            if (n2 !== null) {
                n2.parent = n1.parent;
            }
        };
        /**
        * @private
        */
        BSTree.prototype.removeNode = function (node) {
            if (node.leftCh === null) {
                this.transplant(node, node.rightCh);
            }
            else if (node.rightCh === null) {
                this.transplant(node, node.leftCh);
            }
            else {
                var y = this.minimumAux(node.rightCh);
                if (y.parent !== node) {
                    this.transplant(y, y.rightCh);
                    y.rightCh = node.rightCh;
                    y.rightCh.parent = y;
                }
                this.transplant(node, y);
                y.leftCh = node.leftCh;
                y.leftCh.parent = y;
            }
        };
        /**
        * @private
        */
        BSTree.prototype.inorderTraversalAux = function (node, callback, signal) {
            if (node === null || signal.stop) {
                return;
            }
            this.inorderTraversalAux(node.leftCh, callback, signal);
            if (signal.stop) {
                return;
            }
            signal.stop = callback(node.element) === false;
            if (signal.stop) {
                return;
            }
            this.inorderTraversalAux(node.rightCh, callback, signal);
        };
        /**
        * @private
        */
        BSTree.prototype.levelTraversalAux = function (node, callback) {
            var queue = new Queue();
            if (node !== null) {
                queue.enqueue(node);
            }
            while (!queue.isEmpty()) {
                node = queue.dequeue();
                if (callback(node.element) === false) {
                    return;
                }
                if (node.leftCh !== null) {
                    queue.enqueue(node.leftCh);
                }
                if (node.rightCh !== null) {
                    queue.enqueue(node.rightCh);
                }
            }
        };
        /**
        * @private
        */
        BSTree.prototype.preorderTraversalAux = function (node, callback, signal) {
            if (node === null || signal.stop) {
                return;
            }
            signal.stop = callback(node.element) === false;
            if (signal.stop) {
                return;
            }
            this.preorderTraversalAux(node.leftCh, callback, signal);
            if (signal.stop) {
                return;
            }
            this.preorderTraversalAux(node.rightCh, callback, signal);
        };
        /**
        * @private
        */
        BSTree.prototype.postorderTraversalAux = function (node, callback, signal) {
            if (node === null || signal.stop) {
                return;
            }
            this.postorderTraversalAux(node.leftCh, callback, signal);
            if (signal.stop) {
                return;
            }
            this.postorderTraversalAux(node.rightCh, callback, signal);
            if (signal.stop) {
                return;
            }
            signal.stop = callback(node.element) === false;
        };
        /**
        * @private
        */
        BSTree.prototype.minimumAux = function (node) {
            while (node.leftCh !== null) {
                node = node.leftCh;
            }
            return node;
        };
        /**
        * @private
        */
        BSTree.prototype.maximumAux = function (node) {
            while (node.rightCh !== null) {
                node = node.rightCh;
            }
            return node;
        };
        /**
          * @private
          */
        BSTree.prototype.heightAux = function (node) {
            if (node === null) {
                return -1;
            }
            return Math.max(this.heightAux(node.leftCh), this.heightAux(node.rightCh)) + 1;
        };
        /*
        * @private
        */
        BSTree.prototype.insertNode = function (node) {
            var parent = null;
            var position = this.root;
            var cmp = null;
            while (position !== null) {
                cmp = this.compare(node.element, position.element);
                if (cmp === 0) {
                    return null;
                }
                else if (cmp < 0) {
                    parent = position;
                    position = position.leftCh;
                }
                else {
                    parent = position;
                    position = position.rightCh;
                }
            }
            node.parent = parent;
            if (parent === null) {
                // tree is empty
                this.root = node;
            }
            else if (this.compare(node.element, parent.element) < 0) {
                parent.leftCh = node;
            }
            else {
                parent.rightCh = node;
            }
            return node;
        };
        /**
        * @private
        */
        BSTree.prototype.createNode = function (element) {
            return {
                element: element,
                leftCh: null,
                rightCh: null,
                parent: null
            };
        };
        return BSTree;
    }());
    collections.BSTree = BSTree; // end of BSTree
})(collections || (collections = {})); // End of module 
if (typeof String.prototype.EndsWith !== 'function') {
    String.prototype.EndsWith = function (suffix, isgnoreCase) {
        var v = this;
        if (isgnoreCase) {
            v = this.toUpperCase();
            suffix = suffix.toUpperCase();
        }
        return v.indexOf(suffix, v.length - suffix.length) !== -1;
    };
}
if (typeof String.prototype.StartsWith !== 'function') {
    String.prototype.StartsWith = function (prefix, isgnoreCase) {
        var v = this;
        if (isgnoreCase) {
            v = this.toUpperCase();
            prefix = prefix.toUpperCase();
        }
        return v.indexOf(prefix) === 0;
    };
}
if (typeof String.IsNullOrEmpty !== 'function') {
    String.IsNullOrEmpty = function (value) {
        return value === undefined || value === null || value == "";
    };
}
if (typeof String.Compare !== 'function') {
    String.Compare = function (a, b, ignoreCase) {
        if (ignoreCase === void 0) { ignoreCase = false; }
        if (a == null && b == null)
            return 0;
        if (a == null)
            return -1;
        if (b == null)
            return 1;
        if (ignoreCase) {
            a = a.toUpperCase();
            b = b.toUpperCase();
        }
        return a.localeCompare(b);
    };
}
if (typeof Array.prototype.Contains !== 'function') {
    Array.prototype.Contains = function (value) {
        return this.indexOf(value) > -1;
    };
}
if (typeof Array.prototype.AddRange !== 'function') {
    Array.prototype.AddRange = function (items) {
        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {
            var item = items_1[_i];
            this.push(item);
        }
    };
}
if (typeof Array.prototype.OrderBy !== 'function') {
    Array.prototype.OrderBy = function (func) {
        var compare_func = function (a, b) {
            var va = func(a);
            var vb = func(b);
            if (va == vb)
                return 0;
            if (va < vb)
                return -1;
            return 1;
        };
        var arr = this.slice();
        arr.sort(compare_func);
        return arr;
    };
}
if (typeof Boolean.Parse !== 'function') {
    Boolean.Parse = function (value) {
        if (value == null)
            return null;
        value = value.toUpperCase();
        if (value == "TRUE")
            return true;
        if (value == "FALSE")
            return false;
        return null;
    };
}
/// <reference path="uextends.ts" />
var U1;
(function (U1) {
    var UValueUtil = (function () {
        function UValueUtil() {
        }
        UValueUtil.ConvertArrFromString = function (ctor, str) {
            var items = new Array();
            if (str == null)
                return items;
            var sb = "";
            var depth = 0;
            for (var i = 0; i < str.length; i++) {
                var ch = str[i];
                if (ch == ",") {
                    if (depth == 1) {
                        var item = new ctor(); // Attr<T>.ConvertFrom(sb.ToString());
                        item.ConvertFromStr(sb);
                        items.push(item);
                        sb = "";
                    }
                    else {
                        sb = sb.concat(ch);
                    }
                }
                else if (ch == '(') {
                    if (depth > 0)
                        sb = sb.concat(ch);
                    ++depth;
                }
                else if (ch == ')') {
                    --depth;
                    if (depth == 0) {
                        var item = new ctor();
                        item.ConvertFromStr(sb);
                        items.push(item);
                        sb = "";
                        break;
                    }
                    else {
                        sb = sb.concat(ch);
                    }
                }
                else {
                    sb = sb.concat(ch);
                }
            }
            return items;
        };
        UValueUtil.ConvertArrToString = function (val) {
            var result = "(";
            for (var i = 0; i < val.length; i++) {
                if (i > 0)
                    result += ",";
                result += val[i].ConvertToStr();
            }
            result += ")";
            return result;
        };
        UValueUtil.ConvertNumberArrFromString = function (str) {
            var items = new Array();
            if (str == null)
                return items;
            var sb = "";
            var depth = 0;
            for (var i = 0; i < str.length; i++) {
                var ch = str[i];
                if (ch == ",") {
                    if (depth == 1) {
                        var num = parseFloat(sb);
                        if (isNaN(num))
                            num = 0;
                        items.push(num);
                        sb = "";
                    }
                    else {
                        sb = sb.concat(ch);
                    }
                }
                else if (ch == '(') {
                    if (depth > 0)
                        sb = sb.concat(ch);
                    ++depth;
                }
                else if (ch == ')') {
                    --depth;
                    if (depth == 0) {
                        var num = parseFloat(sb);
                        if (isNaN(num))
                            num = 0;
                        items.push(num);
                        sb = "";
                        break;
                    }
                    else {
                        sb = sb.concat(ch);
                    }
                }
                else {
                    sb = sb.concat(ch);
                }
            }
            return items;
        };
        UValueUtil.ConvertNumberArrToString = function () {
            var val = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                val[_i - 0] = arguments[_i];
            }
            var result = "(";
            for (var i = 0; i < val.length; i++) {
                if (i > 0)
                    result += ",";
                result += val[i];
            }
            result += ")";
            return result;
        };
        UValueUtil.ConvertStrArrFromString = function (str) {
            if (str == null || str == "")
                return [];
            return str.split("~EoL!");
        };
        UValueUtil.ConvertStrArrToString = function () {
            var val = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                val[_i - 0] = arguments[_i];
            }
            if (val == null || val.length == 0)
                return "";
            return val.join("~EoL!");
        };
        UValueUtil.Fill_A_With_B = function (a, b) {
            if (a == b)
                return;
            a.splice(0, a.length);
            for (var i = 0; i < b.length; i++) {
                a.push(b[i]);
            }
        };
        return UValueUtil;
    }());
    U1.UValueUtil = UValueUtil;
    var LogService = (function () {
        function LogService() {
        }
        LogService.WriteException = function (err) {
            console.log(err);
            if (LogService.WriteExceptionFunc != null) {
                LogService.WriteExceptionFunc(err);
            }
        };
        LogService.WriteLogs = function () {
            var logs = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                logs[_i - 0] = arguments[_i];
            }
            var msg = logs.join("\r\n");
            console.log(msg);
            if (LogService.WriteLogsFunc != null) {
                LogService.WriteLogsFunc(logs);
            }
        };
        return LogService;
    }());
    U1.LogService = LogService;
    var Event1 = (function () {
        function Event1() {
        }
        Event1.prototype.Add = function (thisArg, listener) {
            if (this.listeners == null) {
                this.listeners = [];
            }
            this.listeners.push({ thisArg: thisArg, listener: listener });
        };
        Event1.prototype.Remove = function (thisArg, listener) {
            if (this.listeners == null)
                return;
            for (var idx = this.listeners.length - 1; idx >= 0; idx--) {
                var item = this.listeners[idx];
                if (item.thisArg == thisArg &&
                    item.listener == listener) {
                    this.listeners.splice(idx, 1);
                }
            }
        };
        Event1.prototype.Invoke = function (arg1) {
            if (this.listeners == null)
                return;
            for (var idx = 0; idx < this.listeners.length; idx++) {
                var item = this.listeners[idx];
                this.listeners[idx].listener.call(item.thisArg, arg1);
            }
        };
        Event1.prototype.Clear = function () {
            this.listeners = null;
        };
        return Event1;
    }());
    U1.Event1 = Event1;
    var Event2 = (function () {
        function Event2() {
        }
        Event2.prototype.Add = function (thisArg, listener) {
            if (this.listeners == null) {
                this.listeners = [];
            }
            this.listeners.push({ thisArg: thisArg, listener: listener });
        };
        Event2.prototype.Remove = function (thisArg, listener) {
            if (this.listeners == null)
                return;
            for (var idx = this.listeners.length - 1; idx >= 0; idx--) {
                var item = this.listeners[idx];
                if (item.thisArg == thisArg &&
                    item.listener == listener) {
                    this.listeners.splice(idx, 1);
                }
            }
        };
        Event2.prototype.Invoke = function (arg1, arg2) {
            if (this.listeners == null)
                return;
            for (var idx = this.listeners.length - 1; this.listeners != null && idx >= 0; --idx) {
                var item = this.listeners[idx];
                this.listeners[idx].listener.call(item.thisArg, arg1, arg2);
            }
        };
        Event2.prototype.Clear = function () {
            this.listeners = null;
        };
        return Event2;
    }());
    U1.Event2 = Event2;
    var Event3 = (function () {
        function Event3() {
        }
        Event3.prototype.Add = function (thisArg, listener) {
            if (this.listeners == null) {
                this.listeners = [];
            }
            this.listeners.push({ thisArg: thisArg, listener: listener });
        };
        Event3.prototype.Remove = function (thisArg, listener) {
            if (this.listeners == null)
                return;
            for (var idx = this.listeners.length - 1; idx >= 0; idx--) {
                var item = this.listeners[idx];
                if (item.thisArg == thisArg &&
                    item.listener == listener) {
                    this.listeners.splice(idx, 1);
                }
            }
        };
        Event3.prototype.Invoke = function (arg1, arg2, arg3) {
            if (this.listeners == null)
                return;
            for (var idx = 0; idx < this.listeners.length; idx++) {
                var item = this.listeners[idx];
                this.listeners[idx].listener.call(item.thisArg, arg1, arg2, arg3);
            }
        };
        Event3.prototype.Clear = function () {
            this.listeners = null;
        };
        return Event3;
    }());
    U1.Event3 = Event3;
    var PropertyChangedEvent = (function (_super) {
        __extends(PropertyChangedEvent, _super);
        function PropertyChangedEvent() {
            _super.apply(this, arguments);
        }
        return PropertyChangedEvent;
    }(Event2));
    U1.PropertyChangedEvent = PropertyChangedEvent;
    var UCommand = (function () {
        function UCommand(data) {
            if (data === void 0) { data = null; }
            this.PropertyChanged = new PropertyChangedEvent();
            this._key = "" + UCommand._key++;
            if (data != null) {
                this._canExecuteFunc = data.CanExecuteFunc;
                this._executeFunc = data.ExecuteFunc;
                this._toolTip = data.ToolTip;
                this._label = data.Label;
                this._id = data.ID;
            }
        }
        Object.defineProperty(UCommand.prototype, "CanExecuteFunc", {
            get: function () {
                return this._canExecuteFunc;
            },
            set: function (value) {
                this._canExecuteFunc = value;
                this.InvokeCanExecuteChanged();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UCommand.prototype, "ExecuteFunc", {
            get: function () {
                return this._executeFunc;
            },
            set: function (value) {
                this._executeFunc = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UCommand.prototype, "Key", {
            get: function () {
                return this._key;
            },
            set: function (value) {
                if (this._key === value)
                    return;
                this._key = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UCommand.prototype, "ID", {
            get: function () {
                return this._id;
            },
            set: function (value) {
                if (this._id === value)
                    return;
                this._id = value;
                this.InvokePropertyChanged("ID");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UCommand.prototype, "ToolTip", {
            get: function () {
                return this._toolTip;
            },
            set: function (value) {
                if (this._toolTip === value)
                    return;
                this._toolTip = value;
                this.InvokePropertyChanged("ToolTip");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UCommand.prototype, "Label", {
            get: function () {
                return this._label;
            },
            set: function (value) {
                if (this._label === value)
                    return;
                this._label = value;
                this.InvokePropertyChanged("Label");
            },
            enumerable: true,
            configurable: true
        });
        UCommand.prototype.CanExecute = function (parameter) {
            if (this._canExecuteFunc != null)
                return this._canExecuteFunc();
            return true;
        };
        UCommand.prototype.Execute = function (arg) {
            if (this.ExecuteFunc != null)
                this.ExecuteFunc(arg);
        };
        UCommand.prototype.InvokeCanExecuteChanged = function () {
            if (this.CanExecuteChanged != null)
                this.CanExecuteChanged.Invoke(this);
            this.InvokePropertyChanged("CanExecute");
        };
        UCommand.prototype.InvokePropertyChanged = function (prop) {
            if (this.PropertyChanged != null) {
                this.PropertyChanged.Invoke(this, prop);
            }
        };
        UCommand.prototype.Dispose = function () {
            if (this.PropertyChanged != null) {
                this.PropertyChanged.Clear();
                delete this.PropertyChanged;
            }
            if (this._canExecuteFunc != null)
                delete this._canExecuteFunc;
            if (this._executeFunc != null)
                delete this._executeFunc;
        };
        UCommand._key = 0;
        return UCommand;
    }());
    U1.UCommand = UCommand;
    var StringUtil = (function () {
        function StringUtil() {
        }
        StringUtil.IsWhiteSpace = function (char) {
            return ' \t\n\r\v'.indexOf(char) >= 0;
        };
        StringUtil.IsDigit = function (char) {
            return char >= '0' && char <= '9';
        };
        StringUtil.IsLetterOrDigit = function (char) {
            return (char >= '0' && char <= '9') ||
                (char >= 'a' && char <= 'z') ||
                (char >= 'A' && char <= 'Z');
        };
        StringUtil.IsLetter = function (char) {
            return (char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z');
        };
        return StringUtil;
    }());
    U1.StringUtil = StringUtil;
    var StringBuilder = (function () {
        function StringBuilder() {
            this.buffer = new Array();
            this.length = 0;
        }
        StringBuilder.prototype.Append = function (value) {
            this.buffer.push(value);
            this.length += value.length;
        };
        StringBuilder.prototype.toString = function () {
            return this.buffer.join("");
        };
        Object.defineProperty(StringBuilder.prototype, "Length", {
            get: function () {
                return this.length;
            },
            enumerable: true,
            configurable: true
        });
        return StringBuilder;
    }());
    U1.StringBuilder = StringBuilder;
    var Utf8Util = (function () {
        function Utf8Util() {
        }
        /**
        * Encodes multi-byte Unicode string into utf-8 multiple single-byte characters
        * (BMP / basic multilingual plane only).
        *
        * Chars in range U+0080 - U+07FF are encoded in 2 chars, U+0800 - U+FFFF in 3 chars.
        *
        * Can be achieved in JavaScript by unescape(encodeURIComponent(str)),
        * but this approach may be useful in other languages.
        *
        * @param {string} strUni Unicode string to be encoded as UTF-8.
        * @returns {string} Encoded string.
        */
        Utf8Util.Utf8Encode = function (strUni) {
            var strUtf = strUni.replace(/[\u0080-\u07ff]/g, // U+0080 - U+07FF => 2 bytes 110yyyyy, 10zzzzzz
            function (c) {
                var cc = c.charCodeAt(0);
                return String.fromCharCode(0xc0 | cc >> 6, 0x80 | cc & 0x3f);
            });
            strUtf = strUtf.replace(/[\u0800-\uffff]/g, // U+0800 - U+FFFF => 3 bytes 1110xxxx, 10yyyyyy, 10zzzzzz
            function (c) {
                var cc = c.charCodeAt(0);
                return String.fromCharCode(0xe0 | cc >> 12, 0x80 | cc >> 6 & 0x3F, 0x80 | cc & 0x3f);
            });
            return strUtf;
        };
        /**
         * Decodes utf-8 encoded string back into multi-byte Unicode characters.
         *
         * Can be achieved JavaScript by decodeURIComponent(escape(str)),
         * but this approach may be useful in other languages.
         *
         * @param {string} strUtf UTF-8 string to be decoded back to Unicode.
         * @returns {string} Decoded string.
         */
        Utf8Util.Utf8Decode = function (strUtf) {
            // note: decode 3-byte chars first as decoded 2-byte strings could appear to be 3-byte char!
            var strUni = strUtf.replace(/[\u00e0-\u00ef][\u0080-\u00bf][\u0080-\u00bf]/g, // 3-byte chars
            function (c) {
                var cc = ((c.charCodeAt(0) & 0x0f) << 12) | ((c.charCodeAt(1) & 0x3f) << 6) | (c.charCodeAt(2) & 0x3f);
                return String.fromCharCode(cc);
            });
            strUni = strUni.replace(/[\u00c0-\u00df][\u0080-\u00bf]/g, // 2-byte chars
            function (c) {
                var cc = (c.charCodeAt(0) & 0x1f) << 6 | c.charCodeAt(1) & 0x3f;
                return String.fromCharCode(cc);
            });
            return strUni;
        };
        return Utf8Util;
    }());
    U1.Utf8Util = Utf8Util;
    function utf8_to_b64(str) {
        var unescape = unescape || (function (a_) { return a_; });
        return window.btoa(unescape(encodeURIComponent(str)));
        //return window.btoa(str);
    }
    U1.utf8_to_b64 = utf8_to_b64;
    function b64_to_utf8(str) {
        var escape = escape || (function (a_) { return a_; });
        return decodeURIComponent(escape(window.atob(str)));
        //return window.btoa(unescape(str)); 
        //return window.atob(str);
    }
    U1.b64_to_utf8 = b64_to_utf8;
    var _fileInput;
    var _afterLoaded;
    var _link;
    var _imglink;
    function decimalToHex(d, padding) {
        var hex = d.toString(16);
        padding = typeof (padding) === "undefined" || padding === null ? padding = 2 : padding;
        while (hex.length < padding) {
            hex = "0" + hex;
        }
        return hex;
    }
    U1.decimalToHex = decimalToHex;
    function OpenFileDialog(calback, accept) {
        if (accept === void 0) { accept = null; }
        if (_fileInput == null) {
            _fileInput = document.createElement('input');
            _fileInput.type = 'file';
            _fileInput.style.visibility = "hidden";
            $(document).find("body").append(_fileInput);
        }
        _fileInput.accept = accept;
        if (_afterLoaded != null)
            _fileInput.removeEventListener('change', _afterLoaded);
        _afterLoaded = function (event) {
            calback(_fileInput.files);
        };
        if (_fileInput.addEventListener) {
            _fileInput.addEventListener('change', _afterLoaded);
        }
        //else if ((_fileInput as any).attachEvent)
        //{ // IE DOM
        //    (_fileInput as any).attachEvent("onchange" , _afterLoaded);
        //}
        //else
        //{ // No much to do
        //    _fileInput["change"] = _afterLoaded;
        //}
        _fileInput.click();
    }
    U1.OpenFileDialog = OpenFileDialog;
    function SaveTextFile(output, type, file) {
        if (type === void 0) { type = 'text/xml'; }
        if (file === void 0) { file = 'test.xml'; }
        var blob = new Blob([output], { type: type });
        var objectURL = URL.createObjectURL(blob);
        if (_link == null) {
            _link = document.createElement('a');
            _link.style.display = 'none';
            document.body.appendChild(_link); // Firefox workaround, see #6594
        }
        if (navigator.msSaveBlob) {
            var blob = new Blob([output], {
                "type": type + ";charset=utf-8;"
            });
            navigator.msSaveBlob(blob, file);
        }
        else {
            _link.href = objectURL;
            _link.download = file;
            _link.target = '_blank';
            var event = document.createEvent("MouseEvents");
            event.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
            _link.click();
        }
    }
    U1.SaveTextFile = SaveTextFile;
    function SaveImageFile(canvas, file) {
        if (file === void 0) { file = 'image.png'; }
        if (navigator.msSaveBlob) {
            var blob = canvas.msToBlob();
            navigator.msSaveBlob(blob, file);
        }
        else {
            /// create an "off-screen" anchor tag
            var lnk = document.createElement('a');
            /// the key here is to set the download attribute of the a tag
            lnk.download = file;
            /// convert canvas content to data-uri for link. When download
            /// attribute is set the content pointed to by link will be
            /// pushed as "download" in HTML5 capable browsers
            lnk.href = canvas.toDataURL('image / png');
            /// create a "fake" click-event to trigger the download
            if (document.createEvent) {
                var e = document.createEvent("MouseEvents");
                e.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
                lnk.dispatchEvent(e);
            }
            else if (lnk.fireEvent) {
                lnk.fireEvent("onclick");
            }
        }
    }
    U1.SaveImageFile = SaveImageFile;
    (function (MessageBoxButton) {
        MessageBoxButton[MessageBoxButton["OK"] = 0] = "OK";
        MessageBoxButton[MessageBoxButton["OKCancel"] = 1] = "OKCancel";
    })(U1.MessageBoxButton || (U1.MessageBoxButton = {}));
    var MessageBoxButton = U1.MessageBoxButton;
    //
    // 요약:
    //     메시지 상자에 대한 사용자 응답을 나타냅니다.
    (function (MessageBoxResult) {
        //
        // 요약:
        //     이 값은 현재 사용되지 않습니다.
        MessageBoxResult[MessageBoxResult["None"] = 0] = "None";
        //
        // 요약:
        //     사용자가 확인 단추를 클릭했습니다.
        MessageBoxResult[MessageBoxResult["OK"] = 1] = "OK";
        //
        // 요약:
        //     사용자가 취소 단추를 클릭하거나 Esc 키를 눌렀습니다.
        MessageBoxResult[MessageBoxResult["Cancel"] = 2] = "Cancel";
        //
        // 요약:
        //     이 값은 현재 사용되지 않습니다.
        MessageBoxResult[MessageBoxResult["Yes"] = 6] = "Yes";
        //
        // 요약:
        //     이 값은 현재 사용되지 않습니다.
        MessageBoxResult[MessageBoxResult["No"] = 7] = "No";
    })(U1.MessageBoxResult || (U1.MessageBoxResult = {}));
    var MessageBoxResult = U1.MessageBoxResult;
    var MessageBox = (function () {
        function MessageBox() {
        }
        MessageBox.Show = function (message, title, button) {
            if (title === void 0) { title = ""; }
            if (button === void 0) { button = MessageBoxButton.OK; }
            alert(message + title);
            return MessageBoxResult.OK;
        };
        return MessageBox;
    }());
    U1.MessageBox = MessageBox;
    var UDispatcher = (function () {
        function UDispatcher() {
        }
        UDispatcher.BeginInvoke = function (func) {
            var arg = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                arg[_i - 1] = arguments[_i];
            }
            setTimeout(func, 10, arg);
        };
        UDispatcher.BeginInvokeDelay = function (func, delay) {
            var arg = [];
            for (var _i = 2; _i < arguments.length; _i++) {
                arg[_i - 2] = arguments[_i];
            }
            setTimeout(func, delay, arg);
        };
        return UDispatcher;
    }());
    U1.UDispatcher = UDispatcher;
    var AddressParams = (function () {
        function AddressParams() {
        }
        AddressParams.getParameter = function (name) {
            var rtnval = '';
            var nowAddress = decodeURI(location.href);
            var parameters = (nowAddress.slice(nowAddress.indexOf('?') + 1, nowAddress.length)).split('&');
            for (var i = 0; i < parameters.length; i++) {
                var varName = parameters[i].split('=')[0];
                if (varName.toUpperCase() == name.toUpperCase()) {
                    rtnval = parameters[i].split('=')[1];
                    break;
                }
            }
            return rtnval;
        };
        AddressParams.getParameters = function () {
            var result = {};
            var nowAddress = decodeURI(location.href);
            var startParams = nowAddress.indexOf('?') + 1;
            if (startParams <= 0)
                return result;
            var parameters = (nowAddress.slice(startParams, nowAddress.length)).split('&');
            for (var i = 0; i < parameters.length; i++) {
                var varName = parameters[i].split('=')[0];
                if (varName == null || varName == "")
                    continue;
                var varValue = parameters[i].split('=')[1] || "";
                result[varName] = varValue;
            }
            return result;
        };
        return AddressParams;
    }());
    U1.AddressParams = AddressParams;
    function isIE9() {
        var agent = navigator.userAgent.toLowerCase();
        if ((agent.indexOf("msie 9") != -1)) {
            return true;
        }
        return false;
    }
    U1.isIE9 = isIE9;
})(U1 || (U1 = {}));
///<reference path="../Commons/UCommon.ts"/>
var U1;
(function (U1) {
    U1.PRECISION = 0.00001;
    U1.Epsilon = 0.000001;
    function WithinEpsilon(a, b) {
        var num = a - b;
        return ((-0.00001 <= num) && (num <= 0.00001));
    }
    U1.WithinEpsilon = WithinEpsilon;
    function Clamp(value, min, max) {
        value = (value > max) ? max : value;
        value = (value < min) ? min : value;
        return value;
    }
    U1.Clamp = Clamp;
    function EpsilonEqualsPointPoint(point0, point1, epsilon) {
        if (epsilon === void 0) { epsilon = U1.Epsilon; }
        if (Math.abs(point1.X - point0.X) > epsilon)
            return false;
        if (Math.abs(point1.Y - point0.Y) > epsilon)
            return false;
        return true;
    }
    U1.EpsilonEqualsPointPoint = EpsilonEqualsPointPoint;
    var randomVector3s;
    var N_RANDOMS = 100;
    function CustomRandom(nseed) {
        var seed, constant = Math.pow(2, 13) + 1, prime = 37, maximum = Math.pow(2, 10);
        seed = nseed;
        return {
            next: function () {
                seed *= constant;
                seed += prime;
                seed %= maximum;
                return seed / maximum;
            }
        };
    }
    function RandomVector3() {
        if (randomVector3s == null) {
            randomVector3s = new Array();
            var random = CustomRandom(613973267);
            for (var i = 0; i < N_RANDOMS; i++) {
                var x = random.next() - 0.5;
                var y = random.next() - 0.5;
                var z = random.next() - 0.5;
                var ray = new Vector3(x, y, z);
                ray.Normalize();
                randomVector3s[i] = ray;
            }
        }
        return randomVector3s;
    }
    U1.RandomVector3 = RandomVector3;
    var Cache = (function () {
        function Cache(creter, size) {
            if (size === void 0) { size = 100; }
            this._head_fill = -1;
            this._head_empty = -1;
            this._items = new Array(size);
            this._link = new Array(size);
            this._creater = creter;
            for (var i = 0; i < size; i++) {
                this._link[i] = i - 1;
            }
            this._head_empty = size - 1;
        }
        Cache.prototype.New = function () {
            if (this._head_fill > -1) {
                var idx = this._head_fill;
                this._head_fill = this._link[idx];
                this._link[idx] = this._head_empty;
                this._head_empty = idx;
                var item = this._items[idx];
                //this._items[idx] = null;
                if (item != null)
                    return item;
                else {
                    return new this._creater();
                }
            }
            return new this._creater();
        };
        Cache.prototype.Release = function (v) {
            if (this._head_empty > -1) {
                var idx = this._head_empty;
                this._head_empty = this._link[idx];
                this._link[idx] = this._head_fill;
                this._head_fill = idx;
                this._items[idx] = v;
            }
            return this;
        };
        return Cache;
    }());
    U1.Cache = Cache;
    var Vector2 = (function () {
        function Vector2(x, y) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            this.X = x;
            this.Y = y;
        }
        Vector2.prototype.ConvertFromStr = function (value) {
            var items = U1.UValueUtil.ConvertNumberArrFromString(value);
            this.X = items.length > 0 ? items[0] : 0;
            this.Y = items.length > 1 ? items[1] : 0;
        };
        Vector2.prototype.ConvertToStr = function () {
            return U1.UValueUtil.ConvertNumberArrToString(this.X, this.Y);
        };
        Vector2.prototype.CopyFrom = function (other) {
            this.X = other.X;
            this.Y = other.Y;
        };
        Vector2.prototype.toString = function () {
            return "(" + this.X + "," + this.Y + ")";
        };
        Vector2.prototype.Clone = function () {
            return new Vector2(this.X, this.Y);
        };
        Object.defineProperty(Vector2.prototype, "Left", {
            get: function () {
                return Vector2.Create(-this.Y, this.X);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector2.prototype, "Right", {
            get: function () {
                return Vector2.Create(this.Y, -this.X);
            },
            enumerable: true,
            configurable: true
        });
        Vector2.prototype.LeftRef = function (ref) {
            var x = -this.Y;
            var y = this.X;
            ref.X = x;
            ref.Y = y;
            return ref;
        };
        Vector2.prototype.RightRef = function (ref) {
            var x = this.Y;
            var y = -this.X;
            ref.X = x;
            ref.Y = y;
            return ref;
        };
        Object.defineProperty(Vector2, "MaxValue", {
            get: function () {
                return new Vector2(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector2, "MinValue", {
            get: function () {
                return new Vector2(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
            },
            enumerable: true,
            configurable: true
        });
        Vector2.prototype.SetMaxValue = function () {
            this.X = Number.POSITIVE_INFINITY;
            this.Y = Number.POSITIVE_INFINITY;
            return this;
        };
        Vector2.prototype.SetMinValue = function () {
            this.X = Number.NEGATIVE_INFINITY;
            this.Y = Number.NEGATIVE_INFINITY;
            return this;
        };
        Vector2.prototype.Set = function (x, y) {
            this.X = x;
            this.Y = y;
            return this;
        };
        Vector2.prototype.Equals = function (other) {
            return ((this.X === other.X) && (this.Y === other.Y));
        };
        Vector2.prototype.EpsilonEquals = function (point1, epsilon) {
            if (epsilon === void 0) { epsilon = U1.Epsilon; }
            if (Math.abs(point1.X - this.X) > epsilon)
                return false;
            if (Math.abs(point1.Y - this.Y) > epsilon)
                return false;
            return true;
        };
        Vector2.EpsilonEquals = function (point0, point1, epsilon) {
            if (epsilon === void 0) { epsilon = U1.Epsilon; }
            if (Math.abs(point1.X - point0.X) > epsilon)
                return false;
            if (Math.abs(point1.Y - point0.Y) > epsilon)
                return false;
            return true;
        };
        Vector2.prototype.Length = function () {
            var num = (this.X * this.X) + (this.Y * this.Y);
            return Math.sqrt(num);
        };
        Vector2.prototype.LengthSquareduared = function () {
            return ((this.X * this.X) + (this.Y * this.Y));
        };
        Vector2.Distance = function (value1, value2) {
            "use asm";
            var num2 = +(value1.X - value2.X);
            var num = +(value1.Y - value2.Y);
            var num3 = +((num2 * num2) + (num * num));
            return +Math.sqrt(num3);
        };
        Vector2.DistanceSquared = function (value1, value2) {
            var num2 = value1.X - value2.X;
            var num = value1.Y - value2.Y;
            return ((num2 * num2) + (num * num));
        };
        Vector2.Dot = function (a, b) {
            return a.X * b.X + a.Y * b.Y;
        };
        Vector2.prototype.Normalize = function () {
            var num2 = (this.X * this.X) + (this.Y * this.Y);
            var num = 1 / (Math.sqrt(num2));
            this.X *= num;
            this.Y *= num;
            return this;
        };
        Vector2.Normalize = function (value, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector2.New();
            var num2 = (value.X * value.X) + (value.Y * value.Y);
            var num = 1 / (Math.sqrt(num2));
            return result.Set(value.X * num, value.Y * num);
        };
        Vector2.prototype.SetNormalize = function (value) {
            var num2 = (value.X * value.X) + (value.Y * value.Y);
            var num = 1 / (Math.sqrt(num2));
            this.X = value.X * num;
            this.Y = value.Y * num;
            return this;
        };
        Vector2.Reflect = function (vector, normal, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector2.New();
            var num = (vector.X * normal.X) + (vector.Y * normal.Y);
            return result.Set(vector.X - ((2 * num) * normal.X), vector.Y - ((2 * num) * normal.Y));
        };
        Vector2.prototype.SetReflect = function (vector, normal) {
            var num = (vector.X * normal.X) + (vector.Y * normal.Y);
            this.X = vector.X - ((2 * num) * normal.X);
            this.Y = vector.Y - ((2 * num) * normal.Y);
            return this;
        };
        Vector2.Min = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector2.New();
            result.X = (value1.X < value2.X) ? value1.X : value2.X;
            result.Y = (value1.Y < value2.Y) ? value1.Y : value2.Y;
            return result;
        };
        Vector2.prototype.SetMin = function (value1, value2) {
            this.X = (value1.X < value2.X) ? value1.X : value2.X;
            this.Y = (value1.Y < value2.Y) ? value1.Y : value2.Y;
            return this;
        };
        Vector2.Max = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector2.New();
            result.X = (value1.X > value2.X) ? value1.X : value2.X;
            result.Y = (value1.Y > value2.Y) ? value1.Y : value2.Y;
            return result;
        };
        Vector2.prototype.SetMax = function (value1, value2) {
            this.X = (value1.X > value2.X) ? value1.X : value2.X;
            this.Y = (value1.Y > value2.Y) ? value1.Y : value2.Y;
            return this;
        };
        Vector2.Clamp = function (value1, min, max, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector2.New();
            var x = value1.X;
            x = (x > max.X) ? max.X : x;
            x = (x < min.X) ? min.X : x;
            var y = value1.Y;
            y = (y > max.Y) ? max.Y : y;
            y = (y < min.Y) ? min.Y : y;
            result.X = x;
            result.Y = y;
            return result;
        };
        Vector2.prototype.SetClamp = function (value1, min, max) {
            var x = value1.X;
            x = (x > max.X) ? max.X : x;
            x = (x < min.X) ? min.X : x;
            var y = value1.Y;
            y = (y > max.Y) ? max.Y : y;
            y = (y < min.Y) ? min.Y : y;
            this.X = x;
            this.Y = y;
            return this;
        };
        Vector2.Lerp = function (value1, value2, amount, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector2.New();
            result.X = value1.X + ((value2.X - value1.X) * amount);
            result.Y = value1.Y + ((value2.Y - value1.Y) * amount);
            return result;
        };
        Vector2.prototype.SetLerpRef = function (value1, value2, amount) {
            this.X = value1.X + ((value2.X - value1.X) * amount);
            this.Y = value1.Y + ((value2.Y - value1.Y) * amount);
            return this;
        };
        Vector2.Barycentric = function (value1, value2, value3, amount1, amount2, result) {
            if (result === void 0) { result = null; }
            var vector = result != null ? result : Vector2.New();
            vector.X = (value1.X + (amount1 * (value2.X - value1.X))) + (amount2 * (value3.X - value1.X));
            vector.Y = (value1.Y + (amount1 * (value2.Y - value1.Y))) + (amount2 * (value3.Y - value1.Y));
            return vector;
        };
        Vector2.prototype.SetBarycentric = function (value1, value2, value3, amount1, amount2) {
            this.X = (value1.X + (amount1 * (value2.X - value1.X))) + (amount2 * (value3.X - value1.X));
            this.Y = (value1.Y + (amount1 * (value2.Y - value1.Y))) + (amount2 * (value3.Y - value1.Y));
            return this;
        };
        Vector2.SmoothStep = function (value1, value2, amount, result) {
            if (result === void 0) { result = null; }
            var vector = result != null ? result : Vector2.New();
            amount = (amount > 1) ? 1 : ((amount < 0) ? 0 : amount);
            amount = (amount * amount) * (3 - (2 * amount));
            vector.X = value1.X + ((value2.X - value1.X) * amount);
            vector.Y = value1.Y + ((value2.Y - value1.Y) * amount);
            return vector;
        };
        Vector2.prototype.SetSmoothStep = function (value1, value2, amount) {
            amount = (amount > 1) ? 1 : ((amount < 0) ? 0 : amount);
            amount = (amount * amount) * (3 - (2 * amount));
            this.X = value1.X + ((value2.X - value1.X) * amount);
            this.Y = value1.Y + ((value2.Y - value1.Y) * amount);
            return this;
        };
        Vector2.CatmullRom = function (value1, value2, value3, value4, amount, result) {
            var vector = result != null ? result : Vector2.New();
            var num = amount * amount;
            var num2 = amount * num;
            vector.X = 0.5 * ((((2 * value2.X) + ((-value1.X + value3.X) * amount)) + (((((2 * value1.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num)) + ((((-value1.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2));
            vector.Y = 0.5 * ((((2 * value2.Y) + ((-value1.Y + value3.Y) * amount)) + (((((2 * value1.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num)) + ((((-value1.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2));
            return vector;
        };
        Vector2.prototype.SetCatmullRom = function (value1, value2, value3, value4, amount) {
            var num = amount * amount;
            var num2 = amount * num;
            var X = 0.5 * ((((2 * value2.X) + ((-value1.X + value3.X) * amount)) + (((((2 * value1.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num)) + ((((-value1.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2));
            var Y = 0.5 * ((((2 * value2.Y) + ((-value1.Y + value3.Y) * amount)) + (((((2 * value1.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num)) + ((((-value1.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2));
            this.X = X;
            this.Y = Y;
            return this;
        };
        Vector2.Hermite = function (value1, tangent1, value2, tangent2, amount, result) {
            if (result === void 0) { result = null; }
            var vector = result != null ? result : Vector2.New();
            var num = amount * amount;
            var num2 = amount * num;
            var num6 = ((2 * num2) - (3 * num)) + 1;
            var num5 = (-2 * num2) + (3 * num);
            var num4 = (num2 - (2 * num)) + amount;
            var num3 = num2 - num;
            vector.X = (((value1.X * num6) + (value2.X * num5)) + (tangent1.X * num4)) + (tangent2.X * num3);
            vector.Y = (((value1.Y * num6) + (value2.Y * num5)) + (tangent1.Y * num4)) + (tangent2.Y * num3);
            return vector;
        };
        Vector2.prototype.SetHermite = function (value1, tangent1, value2, tangent2, amount) {
            var num = amount * amount;
            var num2 = amount * num;
            var num6 = ((2 * num2) - (3 * num)) + 1;
            var num5 = (-2 * num2) + (3 * num);
            var num4 = (num2 - (2 * num)) + amount;
            var num3 = num2 - num;
            var X = (((value1.X * num6) + (value2.X * num5)) + (tangent1.X * num4)) + (tangent2.X * num3);
            var Y = (((value1.Y * num6) + (value2.Y * num5)) + (tangent1.Y * num4)) + (tangent2.Y * num3);
            this.X = X;
            this.Y = Y;
            return this;
        };
        Vector2.prototype.Transform = function (matrix) {
            var num2 = ((this.X * matrix.M11) + (this.Y * matrix.M21)) + matrix.M41;
            var num = ((this.X * matrix.M12) + (this.Y * matrix.M22)) + matrix.M42;
            this.X = num2;
            this.Y = num;
        };
        Vector2.Transform = function (position, matrix, result) {
            if (result === void 0) { result = null; }
            var vector = result != null ? result : Vector2.New();
            var num2 = ((position.X * matrix.M11) + (position.Y * matrix.M21)) + matrix.M41;
            var num = ((position.X * matrix.M12) + (position.Y * matrix.M22)) + matrix.M42;
            vector.X = num2;
            vector.Y = num;
            return vector;
        };
        Vector2.prototype.SetTransform = function (position, matrix) {
            var num2 = ((position.X * matrix.M11) + (position.Y * matrix.M21)) + matrix.M41;
            var num = ((position.X * matrix.M12) + (position.Y * matrix.M22)) + matrix.M42;
            this.X = num2;
            this.Y = num;
            return this;
        };
        Vector2.TransformNormal = function (normal, matrix, result) {
            if (result === void 0) { result = null; }
            var vector = result != null ? result : Vector2.New();
            var num2 = (normal.X * matrix.M11) + (normal.Y * matrix.M21);
            var num = (normal.X * matrix.M12) + (normal.Y * matrix.M22);
            vector.X = num2;
            vector.Y = num;
            return vector;
        };
        Vector2.prototype.SetTransformNormal = function (normal, matrix) {
            var num2 = (normal.X * matrix.M11) + (normal.Y * matrix.M21);
            var num = (normal.X * matrix.M12) + (normal.Y * matrix.M22);
            this.X = num2;
            this.Y = num;
            return this;
        };
        Vector2.TransformQuaternion = function (value, rotation, result) {
            if (result === void 0) { result = null; }
            var vector = result != null ? result : Vector2.New();
            var num10 = rotation.X + rotation.X;
            var num5 = rotation.Y + rotation.Y;
            var num4 = rotation.Z + rotation.Z;
            var num3 = rotation.W * num4;
            var num9 = rotation.X * num10;
            var num2 = rotation.X * num5;
            var num8 = rotation.Y * num5;
            var num = rotation.Z * num4;
            var num7 = (value.X * ((1 - num8) - num)) + (value.Y * (num2 - num3));
            var num6 = (value.X * (num2 + num3)) + (value.Y * ((1 - num9) - num));
            vector.X = num7;
            vector.Y = num6;
            return vector;
        };
        Vector2.prototype.SetTransformQuaternion = function (value, rotation) {
            var num10 = rotation.X + rotation.X;
            var num5 = rotation.Y + rotation.Y;
            var num4 = rotation.Z + rotation.Z;
            var num3 = rotation.W * num4;
            var num9 = rotation.X * num10;
            var num2 = rotation.X * num5;
            var num8 = rotation.Y * num5;
            var num = rotation.Z * num4;
            var num7 = (value.X * ((1 - num8) - num)) + (value.Y * (num2 - num3));
            var num6 = (value.X * (num2 + num3)) + (value.Y * ((1 - num9) - num));
            this.X = num7;
            this.Y = num6;
            return this;
        };
        Vector2.prototype.Negate = function () {
            this.X *= -1;
            this.Y *= -1;
            return this;
        };
        Vector2.Negate = function (value, result) {
            if (result === void 0) { result = null; }
            var vector = result != null ? result : Vector2.New();
            return vector.Set(-value.X, -value.Y);
        };
        Vector2.prototype.SetNegate = function (value) {
            this.X = -value.X;
            this.Y = -value.Y;
            return this;
        };
        Vector2.prototype.Add = function (value1) {
            this.X += value1.X;
            this.Y += value1.Y;
            return this;
        };
        Vector2.Add = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            var vector = result != null ? result : Vector2.New();
            return vector.Set(value1.X + value2.X, value1.Y + value2.Y);
        };
        Vector2.prototype.SetAdd = function (value1, value2) {
            var ref = this;
            ref.X = value1.X + value2.X;
            ref.Y = value1.Y + value2.Y;
            return ref;
        };
        Vector2.prototype.ScaleAdd = function (scale, dir) {
            this.X = this.X + scale * dir.X;
            this.Y = this.Y + scale * dir.Y;
            return this;
        };
        Vector2.ScaleAdd = function (pos, scale, dir, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector2.New();
            result.X = pos.X + scale * dir.X;
            result.Y = pos.Y + scale * dir.Y;
            return result;
        };
        Vector2.prototype.SetScaleAdd = function (pos, scale, dir) {
            this.X = pos.X + scale * dir.X;
            this.Y = pos.Y + scale * dir.Y;
            return this;
        };
        Vector2.prototype.Subtract = function (value1) {
            this.X -= value1.X;
            this.Y -= value1.Y;
            return this;
        };
        Vector2.Subtract = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector2.New();
            return result.Set(value1.X - value2.X, value1.Y - value2.Y);
        };
        Vector2.prototype.SetSubtract = function (value1, value2) {
            var ref = this;
            ref.X = value1.X - value2.X;
            ref.Y = value1.Y - value2.Y;
            return ref;
        };
        Vector2.prototype.Multiply = function (value1) {
            this.X *= value1.X;
            this.Y *= value1.Y;
            return this;
        };
        Vector2.Multiply = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            return (result != null ? result : Vector2.New()).Set(value1.X * value2.X, value1.Y * value2.Y);
        };
        Vector2.prototype.SetMultiply = function (value1, value2) {
            var ref = this;
            ref.X = value1.X * value2.X;
            ref.Y = value1.Y * value2.Y;
            return ref;
        };
        Vector2.prototype.Scale = function (scaleFactor) {
            this.X *= scaleFactor;
            this.Y *= scaleFactor;
            return this;
        };
        Vector2.Scale = function (value1, scaleFactor, result) {
            if (result === void 0) { result = null; }
            return (result != null ? result : Vector2.New()).Set(value1.X * scaleFactor, value1.Y * scaleFactor);
        };
        Vector2.prototype.SetScale = function (value1, scaleFactor) {
            var X = value1.X * scaleFactor;
            var Y = value1.Y * scaleFactor;
            this.X = X;
            this.Y = Y;
            return this;
        };
        Vector2.prototype.Divide = function (value1) {
            this.X /= value1.X;
            this.Y /= value1.Y;
            return this;
        };
        Vector2.Divide = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            return (result != null ? result : Vector2.New()).Set(value1.X / value2.X, value1.Y / value2.Y);
        };
        Vector2.prototype.SetDivide = function (value1, value2) {
            this.X = value1.X / value2.X;
            this.Y = value1.Y / value2.Y;
            return this;
        };
        Vector2.prototype.Minimize = function (right) {
            this.X = (this.X < right.X) ? this.X : right.X;
            this.Y = (this.Y < right.Y) ? this.Y : right.Y;
            return this;
        };
        Vector2.Minimize = function (left, right, result) {
            if (result === void 0) { result = null; }
            var x = (left.X < right.X) ? left.X : right.X;
            var y = (left.Y < right.Y) ? left.Y : right.Y;
            return (result != null ? result : Vector2.New()).Set(x, y);
        };
        Vector2.prototype.SetMinimize = function (left, right) {
            this.X = (left.X < right.X) ? left.X : right.X;
            this.Y = (left.Y < right.Y) ? left.Y : right.Y;
            return this;
        };
        Vector2.prototype.Maximize = function (right) {
            this.X = (this.X > right.X) ? this.X : right.X;
            this.Y = (this.Y > right.Y) ? this.Y : right.Y;
            return this;
        };
        Vector2.Maximize = function (left, right, result) {
            if (result === void 0) { result = null; }
            var x = (left.X > right.X) ? left.X : right.X;
            var y = (left.Y > right.Y) ? left.Y : right.Y;
            return (result != null ? result : Vector2.New()).Set(x, y);
        };
        Vector2.prototype.SetMaximize = function (left, right) {
            this.X = (left.X > right.X) ? left.X : right.X;
            this.Y = (left.Y > right.Y) ? left.Y : right.Y;
            return this;
        };
        Vector2.prototype.ToArray = function (array, index) {
            if (index === void 0) { index = 0; }
            array[index] = this.X;
            array[index + 1] = this.Y;
            return this;
        };
        Vector2.prototype.AsArray = function () {
            var result = new Array();
            this.ToArray(result, 0);
            return result;
        };
        Vector2.Create = function (x, y) {
            var result = Vector2.New();
            result.X = x;
            result.Y = y;
            return result;
        };
        Object.defineProperty(Vector2, "Zero", {
            get: function () {
                return Vector2.New().Set(0, 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector2, "One", {
            get: function () {
                return Vector2.New().Set(1, 1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector2, "UnitX", {
            get: function () {
                return Vector2.New().Set(1, 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector2, "UnitY", {
            get: function () {
                return Vector2.New().Set(0, 1);
            },
            enumerable: true,
            configurable: true
        });
        Vector2.prototype.SetZero = function () {
            this.X = 0;
            this.Y = 0;
            return this;
        };
        Vector2.prototype.SetOne = function () {
            this.X = 1;
            this.Y = 1;
            return this;
        };
        Vector2.prototype.SetUnitX = function () {
            this.X = 1;
            this.Y = 0;
            return this;
        };
        Vector2.prototype.SetUnitY = function () {
            this.X = 0;
            this.Y = 1;
            return this;
        };
        Vector2.New = function () {
            var res = Vector2._cache.New();
            res.Set(0, 0);
            return res;
        };
        Vector2.Release = function (v) {
            Vector2._cache.Release(v);
        };
        Vector2.prototype.Release = function () {
            Vector2.Release(this);
        };
        Vector2._cache = new Cache(Vector2);
        return Vector2;
    }());
    U1.Vector2 = Vector2;
    var Vector3 = (function () {
        function Vector3(x, y, z) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (z === void 0) { z = 0; }
            this.X = x;
            this.Y = y;
            this.Z = z;
        }
        Vector3.Dot = function (a, b) {
            return a.X * b.X + a.Y * b.Y + a.Z * b.Z;
        };
        Vector3.prototype.ConvertFromStr = function (value) {
            var items = U1.UValueUtil.ConvertNumberArrFromString(value);
            this.X = items.length > 0 ? items[0] : 0;
            this.Y = items.length > 1 ? items[1] : 0;
            this.Z = items.length > 2 ? items[2] : 0;
        };
        Vector3.prototype.ConvertToStr = function () {
            return U1.UValueUtil.ConvertNumberArrToString(this.X, this.Y, this.Z);
        };
        Vector3.prototype.toString = function () {
            return "(" + this.X + "," + this.Y + "," + this.Z + ")";
        };
        Vector3.Create = function (x, y, z) {
            var result = Vector3.New().Set(x, y, z);
            return result;
        };
        Vector3.prototype.Set = function (x, y, z) {
            this.X = x;
            this.Y = y;
            this.Z = z;
            return this;
        };
        Vector3.prototype.Clone = function () {
            return new Vector3(this.X, this.Y, this.Z);
        };
        Vector3.prototype.CopyFrom = function (source) {
            if (source != null) {
                this.X = source.X;
                this.Y = source.Y;
                this.Z = source.Z;
            }
            return this;
        };
        Object.defineProperty(Vector3.prototype, "IsZero", {
            get: function () {
                return (this.X == 0 && this.Y == 0 && this.Z == 0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Vector3, "Zero", {
            get: function () {
                return Vector3.New().Set(0, 0, 0);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetZero = function () {
            this.X = 0;
            this.Y = 0;
            this.Z = 0;
            return this;
        };
        Object.defineProperty(Vector3, "One", {
            get: function () {
                return Vector3.New().Set(1, 1, 1);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetOne = function () {
            this.X = 1;
            this.Y = 1;
            this.Z = 1;
            return this;
        };
        Object.defineProperty(Vector3, "UnitX", {
            get: function () {
                return Vector3.New().Set(1, 0, 0);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetUnitX = function () {
            this.X = 1;
            this.Y = 0;
            this.Z = 0;
            return this;
        };
        Object.defineProperty(Vector3, "UnitY", {
            get: function () {
                return Vector3.New().Set(0, 1, 0);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetUnitY = function () {
            this.X = 0;
            this.Y = 1;
            this.Z = 0;
            return this;
        };
        Object.defineProperty(Vector3, "UnitZ", {
            get: function () {
                return Vector3.New().Set(0, 0, 1);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetUnitZ = function () {
            this.X = 0;
            this.Y = 0;
            this.Z = 1;
            return this;
        };
        Object.defineProperty(Vector3, "Up", {
            get: function () {
                return Vector3.New().Set(0, 1, 0);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetUp = function () {
            this.X = 0;
            this.Y = 1;
            this.Z = 0;
            return this;
        };
        Object.defineProperty(Vector3, "Down", {
            get: function () {
                return Vector3.New().Set(0, -1, 0);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetDown = function () {
            this.X = 0;
            this.Y = -1;
            this.Z = 0;
            return this;
        };
        Object.defineProperty(Vector3, "Right", {
            get: function () {
                return Vector3.New().Set(1, 0, 0);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetRight = function () {
            this.X = 1;
            this.Y = 0;
            this.Z = 0;
            return this;
        };
        Object.defineProperty(Vector3, "Left", {
            get: function () {
                return Vector3.New().Set(-1, 0, 0);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetLeft = function () {
            this.X = -1;
            this.Y = 0;
            this.Z = 0;
            return this;
        };
        Object.defineProperty(Vector3, "Forward", {
            get: function () {
                return Vector3.New().Set(0, 0, -1);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetForward = function () {
            this.X = 0;
            this.Y = 0;
            this.Z = -1;
            return this;
        };
        Object.defineProperty(Vector3, "Backward", {
            get: function () {
                return Vector3.New().Set(0, 0, 1);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetBackward = function () {
            this.X = 0;
            this.Y = 0;
            this.Z = 1;
            return this;
        };
        Object.defineProperty(Vector3, "MaxValue", {
            get: function () {
                return Vector3.New().Set(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetMaxValue = function () {
            this.X = Number.POSITIVE_INFINITY;
            this.Y = Number.POSITIVE_INFINITY;
            this.Z = Number.POSITIVE_INFINITY;
            return this;
        };
        Object.defineProperty(Vector3, "MinValue", {
            get: function () {
                return Vector3.New().Set(Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
            },
            enumerable: true,
            configurable: true
        });
        Vector3.prototype.SetMinValue = function () {
            this.X = Number.NEGATIVE_INFINITY;
            this.Y = Number.NEGATIVE_INFINITY;
            this.Z = Number.NEGATIVE_INFINITY;
            return this;
        };
        Vector3.prototype.Equals = function (other) {
            return this.X === other.X
                && this.Y === other.Y
                && this.Z === other.Z;
        };
        Vector3.Equals = function (value1, value2) {
            return value1.X === value2.X
                && value1.Y === value2.Y
                && value1.Z === value2.Z;
        };
        Vector3.prototype.EpsilonEquals = function (other, epsilon) {
            var num3 = this.X - other.X;
            var num2 = this.Y - other.Y;
            var num = this.Z - other.Z;
            return (((num3 * num3) + (num2 * num2)) + (num * num)) <= epsilon * epsilon;
        };
        Vector3.EpsilonEquals = function (point0, point1, epsilon) {
            if (epsilon === void 0) { epsilon = U1.Epsilon; }
            if (Math.abs(point1.X - point0.X) > epsilon)
                return false;
            if (Math.abs(point1.Y - point0.Y) > epsilon)
                return false;
            if (Math.abs(point1.Z - point0.Z) > epsilon)
                return false;
            return true;
        };
        Vector3.Length = function (offset) {
            return offset.Length();
        };
        Vector3.prototype.Length = function () {
            var num = ((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z);
            return Math.sqrt(num);
        };
        Vector3.prototype.LengthSquareduared = function () {
            return (((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z));
        };
        Vector3.Distance = function (value1, value2) {
            var num3 = value1.X - value2.X;
            var num2 = value1.Y - value2.Y;
            var num = value1.Z - value2.Z;
            var num4 = ((num3 * num3) + (num2 * num2)) + (num * num);
            return Math.sqrt(num4);
        };
        Vector3.prototype.Distance = function (value2) {
            var num3 = this.X - value2.X;
            var num2 = this.Y - value2.Y;
            var num = this.Z - value2.Z;
            var num4 = ((num3 * num3) + (num2 * num2)) + (num * num);
            return Math.sqrt(num4);
        };
        Vector3.DistanceSquared = function (value1, value2) {
            var num3 = value1.X - value2.X;
            var num2 = value1.Y - value2.Y;
            var num = value1.Z - value2.Z;
            return (((num3 * num3) + (num2 * num2)) + (num * num));
        };
        Vector3.prototype.DistanceSquared = function (value2) {
            var num3 = this.X - value2.X;
            var num2 = this.Y - value2.Y;
            var num = this.Z - value2.Z;
            return (((num3 * num3) + (num2 * num2)) + (num * num));
        };
        Vector3.prototype.Normalize = function () {
            if (this.X == 0 && this.Y == 0 && this.Z == 0) {
                return this;
            }
            var num2 = ((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z);
            var num = 1 / (Math.sqrt(num2));
            this.X *= num;
            this.Y *= num;
            this.Z *= num;
            return this;
        };
        Vector3.Normalize = function (value, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            if (value.IsZero)
                return result.CopyFrom(value);
            var num2 = ((value.X * value.X) + (value.Y * value.Y)) + (value.Z * value.Z);
            var num = 1 / (Math.sqrt(num2));
            result.X = value.X * num;
            result.Y = value.Y * num;
            result.Z = value.Z * num;
            return result;
        };
        Vector3.prototype.SetNormalize = function (value) {
            if (value.IsZero) {
                return this.SetZero();
            }
            var num2 = ((value.X * value.X) + (value.Y * value.Y)) + (value.Z * value.Z);
            var num = 1 / (Math.sqrt(num2));
            this.X = value.X * num;
            this.Y = value.Y * num;
            this.Z = value.Z * num;
            return this;
        };
        Vector3.Cross = function (vector1, vector2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            var X = (vector1.Y * vector2.Z) - (vector1.Z * vector2.Y);
            var Y = (vector1.Z * vector2.X) - (vector1.X * vector2.Z);
            var Z = (vector1.X * vector2.Y) - (vector1.Y * vector2.X);
            result.X = X;
            result.Y = Y;
            result.Z = Z;
            return result;
        };
        Vector3.prototype.SetCross = function (vector1, vector2) {
            var X = (vector1.Y * vector2.Z) - (vector1.Z * vector2.Y);
            var Y = (vector1.Z * vector2.X) - (vector1.X * vector2.Z);
            var Z = (vector1.X * vector2.Y) - (vector1.Y * vector2.X);
            this.X = X;
            this.Y = Y;
            this.Z = Z;
            return this;
        };
        Vector3.prototype.Cross = function (vector2) {
            var X = (this.Y * vector2.Z) - (this.Z * vector2.Y);
            var Y = (this.Z * vector2.X) - (this.X * vector2.Z);
            var Z = (this.X * vector2.Y) - (this.Y * vector2.X);
            this.X = X;
            this.Y = Y;
            this.Z = Z;
            return this;
        };
        Vector3.Reflect = function (vector, normal, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            var num = ((vector.X * normal.X) + (vector.Y * normal.Y)) + (vector.Z * normal.Z);
            result.X = vector.X - ((2 * num) * normal.X);
            result.Y = vector.Y - ((2 * num) * normal.Y);
            result.Z = vector.Z - ((2 * num) * normal.Z);
            return result;
        };
        Vector3.prototype.SetReflect = function (vector, normal) {
            var num = ((vector.X * normal.X) + (vector.Y * normal.Y)) + (vector.Z * normal.Z);
            this.X = vector.X - ((2 * num) * normal.X);
            this.Y = vector.Y - ((2 * num) * normal.Y);
            this.Z = vector.Z - ((2 * num) * normal.Z);
            return this;
        };
        Vector3.prototype.Reflect = function (normal) {
            var num = ((this.X * normal.X) + (this.Y * normal.Y)) + (this.Z * normal.Z);
            this.X = this.X - ((2 * num) * normal.X);
            this.Y = this.Y - ((2 * num) * normal.Y);
            this.Z = this.Z - ((2 * num) * normal.Z);
            return this;
        };
        Vector3.Min = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            result.X = (value1.X < value2.X) ? value1.X : value2.X;
            result.Y = (value1.Y < value2.Y) ? value1.Y : value2.Y;
            result.Z = (value1.Z < value2.Z) ? value1.Z : value2.Z;
            return result;
        };
        Vector3.prototype.SetMin = function (value1, value2) {
            this.X = (value1.X < value2.X) ? value1.X : value2.X;
            this.Y = (value1.Y < value2.Y) ? value1.Y : value2.Y;
            this.Z = (value1.Z < value2.Z) ? value1.Z : value2.Z;
            return this;
        };
        Vector3.Max = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            result.X = (value1.X > value2.X) ? value1.X : value2.X;
            result.Y = (value1.Y > value2.Y) ? value1.Y : value2.Y;
            result.Z = (value1.Z > value2.Z) ? value1.Z : value2.Z;
            return result;
        };
        Vector3.prototype.SetMax = function (value1, value2) {
            this.X = (value1.X > value2.X) ? value1.X : value2.X;
            this.Y = (value1.Y > value2.Y) ? value1.Y : value2.Y;
            this.Z = (value1.Z > value2.Z) ? value1.Z : value2.Z;
            return this;
        };
        Vector3.Clamp = function (value1, min, max, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            var x = value1.X;
            x = (x > max.X) ? max.X : x;
            x = (x < min.X) ? min.X : x;
            var y = value1.Y;
            y = (y > max.Y) ? max.Y : y;
            y = (y < min.Y) ? min.Y : y;
            var z = value1.Z;
            z = (z > max.Z) ? max.Z : z;
            z = (z < min.Z) ? min.Z : z;
            return result.Set(x, y, z);
        };
        Vector3.prototype.SetClamp = function (value1, min, max) {
            var x = value1.X;
            x = (x > max.X) ? max.X : x;
            x = (x < min.X) ? min.X : x;
            var y = value1.Y;
            y = (y > max.Y) ? max.Y : y;
            y = (y < min.Y) ? min.Y : y;
            var z = value1.Z;
            z = (z > max.Z) ? max.Z : z;
            z = (z < min.Z) ? min.Z : z;
            this.X = x;
            this.Y = y;
            this.Z = z;
            return this;
        };
        /**
        * Performs a linear interpolation.
        * 선형보간
        */
        Vector3.Lerp = function (value1, value2, amount, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            var x = value1.X + ((value2.X - value1.X) * amount);
            var y = value1.Y + ((value2.Y - value1.Y) * amount);
            var z = value1.Z + ((value2.Z - value1.Z) * amount);
            return result.Set(x, y, z);
        };
        Vector3.prototype.SetLerp = function (value1, value2, amount) {
            this.X = value1.X + ((value2.X - value1.X) * amount);
            this.Y = value1.Y + ((value2.Y - value1.Y) * amount);
            this.Z = value1.Z + ((value2.Z - value1.Z) * amount);
            return this;
        };
        Vector3.prototype.Lerp = function (value2, amount) {
            this.X = this.X + ((value2.X - this.X) * amount);
            this.Y = this.Y + ((value2.Y - this.Y) * amount);
            this.Z = this.Z + ((value2.Z - this.Z) * amount);
            return this;
        };
        /**
        * 무게중심
        */
        Vector3.Barycentric = function (value1, value2, value3, amount1, amount2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            var x = (value1.X + (amount1 * (value2.X - value1.X))) + (amount2 * (value3.X - value1.X));
            var y = (value1.Y + (amount1 * (value2.Y - value1.Y))) + (amount2 * (value3.Y - value1.Y));
            var z = (value1.Z + (amount1 * (value2.Z - value1.Z))) + (amount2 * (value3.Z - value1.Z));
            return result.Set(x, y, z);
        };
        Vector3.prototype.SetBarycentric = function (value1, value2, value3, amount1, amount2) {
            this.X = (value1.X + (amount1 * (value2.X - value1.X))) + (amount2 * (value3.X - value1.X));
            this.Y = (value1.Y + (amount1 * (value2.Y - value1.Y))) + (amount2 * (value3.Y - value1.Y));
            this.Z = (value1.Z + (amount1 * (value2.Z - value1.Z))) + (amount2 * (value3.Z - value1.Z));
            return this;
        };
        Vector3.prototype.Barycentric = function (value2, value3, amount1, amount2) {
            this.X = (this.X + (amount1 * (value2.X - this.X))) + (amount2 * (value3.X - this.X));
            this.Y = (this.Y + (amount1 * (value2.Y - this.Y))) + (amount2 * (value3.Y - this.Y));
            this.Z = (this.Z + (amount1 * (value2.Z - this.Z))) + (amount2 * (value3.Z - this.Z));
            return this;
        };
        Vector3.SmoothStep = function (value1, value2, amount, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            amount = (amount > 1) ? 1 : ((amount < 0) ? 0 : amount);
            amount = (amount * amount) * (3 - (2 * amount));
            result.X = value1.X + ((value2.X - value1.X) * amount);
            result.Y = value1.Y + ((value2.Y - value1.Y) * amount);
            result.Z = value1.Z + ((value2.Z - value1.Z) * amount);
            return result;
        };
        Vector3.prototype.SetSmoothStep = function (value1, value2, amount) {
            amount = (amount > 1) ? 1 : ((amount < 0) ? 0 : amount);
            amount = (amount * amount) * (3 - (2 * amount));
            this.X = value1.X + ((value2.X - value1.X) * amount);
            this.Y = value1.Y + ((value2.Y - value1.Y) * amount);
            this.Z = value1.Z + ((value2.Z - value1.Z) * amount);
            return this;
        };
        Vector3.prototype.SmoothStep = function (value2, amount) {
            amount = (amount > 1) ? 1 : ((amount < 0) ? 0 : amount);
            amount = (amount * amount) * (3 - (2 * amount));
            this.X = this.X + ((value2.X - this.X) * amount);
            this.Y = this.Y + ((value2.Y - this.Y) * amount);
            this.Z = this.Z + ((value2.Z - this.Z) * amount);
            return this;
        };
        Vector3.CatmullRom = function (value1, value2, value3, value4, amount, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            var num = amount * amount;
            var num2 = amount * num;
            var x = 0.5 * ((((2 * value2.X) + ((-value1.X + value3.X) * amount)) + (((((2 * value1.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num)) + ((((-value1.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2));
            var y = 0.5 * ((((2 * value2.Y) + ((-value1.Y + value3.Y) * amount)) + (((((2 * value1.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num)) + ((((-value1.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2));
            var z = 0.5 * ((((2 * value2.Z) + ((-value1.Z + value3.Z) * amount)) + (((((2 * value1.Z) - (5 * value2.Z)) + (4 * value3.Z)) - value4.Z) * num)) + ((((-value1.Z + (3 * value2.Z)) - (3 * value3.Z)) + value4.Z) * num2));
            return result.Set(x, y, z);
        };
        Vector3.prototype.SetCatmullRom = function (value1, value2, value3, value4, amount) {
            var num = amount * amount;
            var num2 = amount * num;
            this.X = 0.5 * ((((2 * value2.X) + ((-value1.X + value3.X) * amount)) + (((((2 * value1.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num)) + ((((-value1.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2));
            this.Y = 0.5 * ((((2 * value2.Y) + ((-value1.Y + value3.Y) * amount)) + (((((2 * value1.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num)) + ((((-value1.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2));
            this.Z = 0.5 * ((((2 * value2.Z) + ((-value1.Z + value3.Z) * amount)) + (((((2 * value1.Z) - (5 * value2.Z)) + (4 * value3.Z)) - value4.Z) * num)) + ((((-value1.Z + (3 * value2.Z)) - (3 * value3.Z)) + value4.Z) * num2));
            return this;
        };
        Vector3.prototype.CatmullRom = function (value2, value3, value4, amount) {
            var num = amount * amount;
            var num2 = amount * num;
            this.X = 0.5 * ((((2 * value2.X) + ((-this.X + value3.X) * amount)) + (((((2 * this.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num)) + ((((-this.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2));
            this.Y = 0.5 * ((((2 * value2.Y) + ((-this.Y + value3.Y) * amount)) + (((((2 * this.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num)) + ((((-this.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2));
            this.Z = 0.5 * ((((2 * value2.Z) + ((-this.Z + value3.Z) * amount)) + (((((2 * this.Z) - (5 * value2.Z)) + (4 * value3.Z)) - value4.Z) * num)) + ((((-this.Z + (3 * value2.Z)) - (3 * value3.Z)) + value4.Z) * num2));
            return this;
        };
        Vector3.Hermite = function (value1, tangent1, value2, tangent2, amount, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            var num = amount * amount;
            var num2 = amount * num;
            var num6 = ((2 * num2) - (3 * num)) + 1;
            var num5 = (-2 * num2) + (3 * num);
            var num4 = (num2 - (2 * num)) + amount;
            var num3 = num2 - num;
            var X = (((value1.X * num6) + (value2.X * num5)) + (tangent1.X * num4)) + (tangent2.X * num3);
            var Y = (((value1.Y * num6) + (value2.Y * num5)) + (tangent1.Y * num4)) + (tangent2.Y * num3);
            var Z = (((value1.Z * num6) + (value2.Z * num5)) + (tangent1.Z * num4)) + (tangent2.Z * num3);
            return result.Set(X, Y, Z);
        };
        Vector3.prototype.SetHermite = function (value1, tangent1, value2, tangent2, amount) {
            var num = amount * amount;
            var num2 = amount * num;
            var num6 = ((2 * num2) - (3 * num)) + 1;
            var num5 = (-2 * num2) + (3 * num);
            var num4 = (num2 - (2 * num)) + amount;
            var num3 = num2 - num;
            this.X = (((value1.X * num6) + (value2.X * num5)) + (tangent1.X * num4)) + (tangent2.X * num3);
            this.Y = (((value1.Y * num6) + (value2.Y * num5)) + (tangent1.Y * num4)) + (tangent2.Y * num3);
            this.Z = (((value1.Z * num6) + (value2.Z * num5)) + (tangent1.Z * num4)) + (tangent2.Z * num3);
            return this;
        };
        Vector3.Transform = function (position, matrix, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            var x = (((position.X * matrix.M11) + (position.Y * matrix.M21)) + (position.Z * matrix.M31)) + matrix.M41;
            var y = (((position.X * matrix.M12) + (position.Y * matrix.M22)) + (position.Z * matrix.M32)) + matrix.M42;
            var z = (((position.X * matrix.M13) + (position.Y * matrix.M23)) + (position.Z * matrix.M33)) + matrix.M43;
            return result.Set(x, y, z);
        };
        Vector3.prototype.SetTransform = function (position, matrix) {
            var X = (((position.X * matrix.M11) + (position.Y * matrix.M21)) + (position.Z * matrix.M31)) + matrix.M41;
            var Y = (((position.X * matrix.M12) + (position.Y * matrix.M22)) + (position.Z * matrix.M32)) + matrix.M42;
            var Z = (((position.X * matrix.M13) + (position.Y * matrix.M23)) + (position.Z * matrix.M33)) + matrix.M43;
            this.X = X;
            this.Y = Y;
            this.Z = Z;
            return this;
        };
        Vector3.prototype.Transform = function (matrix) {
            var x = (((this.X * matrix.M11) + (this.Y * matrix.M21)) + (this.Z * matrix.M31)) + matrix.M41;
            var y = (((this.X * matrix.M12) + (this.Y * matrix.M22)) + (this.Z * matrix.M32)) + matrix.M42;
            var z = (((this.X * matrix.M13) + (this.Y * matrix.M23)) + (this.Z * matrix.M33)) + matrix.M43;
            this.X = x;
            this.Y = y;
            this.Z = z;
            return this;
        };
        Vector3.TransformNormal = function (normal, matrix, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            var x = ((normal.X * matrix.M11) + (normal.Y * matrix.M21)) + (normal.Z * matrix.M31);
            var y = ((normal.X * matrix.M12) + (normal.Y * matrix.M22)) + (normal.Z * matrix.M32);
            var z = ((normal.X * matrix.M13) + (normal.Y * matrix.M23)) + (normal.Z * matrix.M33);
            return result.Set(x, y, z);
        };
        Vector3.prototype.SetTransformNormal = function (normal, matrix) {
            var X = ((normal.X * matrix.M11) + (normal.Y * matrix.M21)) + (normal.Z * matrix.M31);
            var Y = ((normal.X * matrix.M12) + (normal.Y * matrix.M22)) + (normal.Z * matrix.M32);
            var Z = ((normal.X * matrix.M13) + (normal.Y * matrix.M23)) + (normal.Z * matrix.M33);
            this.X = X;
            this.Y = Y;
            this.Z = Z;
            return this;
        };
        Vector3.prototype.TransformNormal = function (matrix) {
            var x = ((this.X * matrix.M11) + (this.Y * matrix.M21)) + (this.Z * matrix.M31);
            var y = ((this.X * matrix.M12) + (this.Y * matrix.M22)) + (this.Z * matrix.M32);
            var z = ((this.X * matrix.M13) + (this.Y * matrix.M23)) + (this.Z * matrix.M33);
            this.X = x;
            this.Y = y;
            this.Z = z;
            return this;
        };
        Vector3.Negate = function (value, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            return result.Set(-value.X, -value.Y, -value.Z);
        };
        Vector3.prototype.SetNegate = function (value) {
            this.X = -value.X;
            this.Y = -value.Y;
            this.Z = -value.Z;
            return this;
        };
        Vector3.prototype.Negate = function () {
            this.X *= -1;
            this.Y *= -1;
            this.Z *= -1;
            return this;
        };
        Vector3.Add = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            return result.Set(value1.X + value2.X, value1.Y + value2.Y, value1.Z + value2.Z);
        };
        Vector3.prototype.SetAdd = function (value1, value2) {
            this.X = value1.X + value2.X;
            this.Y = value1.Y + value2.Y;
            this.Z = value1.Z + value2.Z;
            return this;
        };
        Vector3.prototype.Add = function (value2) {
            this.X += value2.X;
            this.Y += value2.Y;
            this.Z += value2.Z;
            return this;
        };
        Vector3.Subtract = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            return result.Set(value1.X - value2.X, value1.Y - value2.Y, value1.Z - value2.Z);
        };
        Vector3.prototype.SetSubtract = function (value1, value2) {
            this.Set(value1.X - value2.X, value1.Y - value2.Y, value1.Z - value2.Z);
            return this;
        };
        Vector3.prototype.Subtract = function (value2) {
            this.X -= value2.X;
            this.Y -= value2.Y;
            this.Z -= value2.Z;
            return this;
        };
        Vector3.Multiply = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            return result.Set(value1.X * value2.X, value1.Y * value2.Y, value1.Z * value2.Z);
        };
        Vector3.prototype.SetMultiply = function (value1, value2) {
            this.X = value1.X * value2.X;
            this.Y = value1.Y * value2.Y;
            this.Z = value1.Z * value2.Z;
            return this;
        };
        Vector3.prototype.Multiply = function (value2) {
            this.X *= value2.X;
            this.Y *= value2.Y;
            this.Z *= value2.Z;
            return this;
        };
        Vector3.Scale = function (value1, scaleFactor, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            result.X = value1.X * scaleFactor;
            result.Y = value1.Y * scaleFactor;
            result.Z = value1.Z * scaleFactor;
            return result;
        };
        Vector3.prototype.SetScale = function (value1, scaleFactor) {
            this.X = value1.X * scaleFactor;
            this.Y = value1.Y * scaleFactor;
            this.Z = value1.Z * scaleFactor;
            return this;
        };
        Vector3.prototype.Scale = function (scaleFactor) {
            this.X = this.X * scaleFactor;
            this.Y = this.Y * scaleFactor;
            this.Z = this.Z * scaleFactor;
            return this;
        };
        Vector3.ScaleAdd = function (pos, scale, dir, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            return result.Set(pos.X + scale * dir.X, pos.Y + scale * dir.Y, pos.Z + scale * dir.Z);
        };
        Vector3.prototype.SetScaleAdd = function (pos, scale, dir) {
            this.X = pos.X + scale * dir.X;
            this.Y = pos.Y + scale * dir.Y;
            this.Z = pos.Z + scale * dir.Z;
            return this;
        };
        Vector3.prototype.ScaleAdd = function (scale, dir) {
            this.X = this.X + scale * dir.X;
            this.Y = this.Y + scale * dir.Y;
            this.Z = this.Z + scale * dir.Z;
            return this;
        };
        Vector3.Divide = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            return result.Set(value1.X / value2.X, value1.Y / value2.Y, value1.Z / value2.Z);
        };
        Vector3.prototype.SetDivide = function (value1, value2) {
            this.X = value1.X / value2.X;
            this.Y = value1.Y / value2.Y;
            this.Z = value1.Z / value2.Z;
            return this;
        };
        Vector3.prototype.Divide = function (value2) {
            this.X /= value2.X;
            this.Y /= value2.Y;
            this.Z /= value2.Z;
            return this;
        };
        Vector3.Project = function (source, projection, view, world, screenSize, mindepth, maxdepth, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            var matrix = Matrix4.New().SetMultiply(world, view).Multiply(projection);
            result.SetTransform(source, matrix);
            var a = (((source.X * matrix.M14) + (source.Y * matrix.M24)) + (source.Z * matrix.M34)) + matrix.M44;
            if (!WithinEpsilon(a, 1)) {
                result.Scale(1 / a);
            }
            result.X = (((result.X + 1) * 0.5) * screenSize.X);
            result.Y = (((-result.Y + 1) * 0.5) * screenSize.Y);
            result.Z = (result.Z * (maxdepth - mindepth)) + mindepth;
            matrix.Release();
            return result;
        };
        Vector3.prototype.SetProject = function (source, projection, view, world, screenSize, mindepth, maxdepth) {
            var matrix = Matrix4.New().SetMultiply(world, view).Multiply(projection);
            this.SetTransform(source, matrix);
            var a = (((source.X * matrix.M14) + (source.Y * matrix.M24)) + (source.Z * matrix.M34)) + matrix.M44;
            if (!WithinEpsilon(a, 1)) {
                this.Scale(1 / a);
            }
            this.X = (((this.X + 1) * 0.5) * screenSize.X);
            this.Y = (((-this.Y + 1) * 0.5) * screenSize.Y);
            this.Z = (this.Z * (maxdepth - mindepth)) + mindepth;
            matrix.Release();
            return this;
        };
        Vector3.prototype.Minimize = function (other) {
            if (other.X < this.X)
                this.X = other.X;
            if (other.Y < this.Y)
                this.Y = other.Y;
            if (other.Z < this.Z)
                this.Z = other.Z;
            return this;
        };
        Vector3.Minimize = function (left, right, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            result.CopyFrom(left);
            result.Minimize(right);
            return result;
        };
        Vector3.prototype.SetMinimize = function (left, right) {
            this.X = (left.X < right.X) ? left.X : right.X;
            this.Y = (left.Y < right.Y) ? left.Y : right.Y;
            this.Z = (left.Z < right.Z) ? left.Z : right.Z;
            return this;
        };
        Vector3.prototype.Maximize = function (other) {
            if (other.X > this.X)
                this.X = other.X;
            if (other.Y > this.Y)
                this.Y = other.Y;
            if (other.Z > this.Z)
                this.Z = other.Z;
            return this;
        };
        Vector3.Maximize = function (left, right, result) {
            if (result == null)
                result = Vector3.New();
            result.CopyFrom(left);
            result.Maximize(right);
            return result;
        };
        Vector3.prototype.SetMaximize = function (left, right) {
            this.X = (left.X > right.X) ? left.X : right.X;
            this.Y = (left.Y > right.Y) ? left.Y : right.Y;
            this.Z = (left.Z > right.Z) ? left.Z : right.Z;
            return this;
        };
        Vector3.prototype.XY = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector2.New();
            return result.Set(this.X, this.Y);
        };
        Vector3.prototype.YZ = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector2.New();
            return result.Set(this.Y, this.Z);
        };
        Vector3.New = function () {
            var result = Vector3._cache.New();
            result.Set(0, 0, 0);
            return result;
        };
        Vector3.NewArray = function (num) {
            var result = [];
            for (var i = 0; i < num; i++) {
                var v = Vector3._cache.New().Set(0, 0, 0);
                result.push(v);
            }
            return result;
        };
        Vector3.Release = function (v) {
            if (Array.isArray(v)) {
                for (var i = 0; i < v.length; i++) {
                    v[i].Release();
                }
            }
            else {
                Vector3._cache.Release(v);
            }
        };
        Vector3.prototype.Release = function () {
            Vector3._cache.Release(this);
        };
        Vector3._cache = new Cache(Vector3);
        return Vector3;
    }());
    U1.Vector3 = Vector3;
    var Vector4 = (function () {
        function Vector4(x, y, z, w) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (z === void 0) { z = 0; }
            if (w === void 0) { w = 0; }
            this.X = x;
            this.Y = y;
            this.Z = z;
            this.W = w;
        }
        Vector4.prototype.ConvertFromStr = function (value) {
            var items = U1.UValueUtil.ConvertNumberArrFromString(value);
            this.X = items.length > 0 ? items[0] : 0;
            this.Y = items.length > 1 ? items[1] : 0;
            this.Z = items.length > 2 ? items[2] : 0;
            this.W = items.length > 3 ? items[3] : 0;
        };
        Vector4.prototype.ConvertToStr = function () {
            return U1.UValueUtil.ConvertNumberArrToString(this.X, this.Y, this.Z, this.W);
        };
        Vector4.prototype.toString = function () {
            return "(" + this.X + "," + this.Y + "," + this.Z + "," + this.W + ")";
        };
        Vector4.prototype.Set = function (x, y, z, w) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (z === void 0) { z = 0; }
            if (w === void 0) { w = 0; }
            this.X = x;
            this.Y = y;
            this.Z = z;
            this.W = w;
            return this;
        };
        Object.defineProperty(Vector4, "Zero", {
            get: function () {
                return new Vector4();
            },
            enumerable: true,
            configurable: true
        });
        Vector4.ZeroRef = function (ref) {
            ref.X = 0;
            ref.Y = 0;
            ref.Z = 0;
            ref.W = 0;
            return ref;
        };
        Vector4.prototype.SetZero = function () {
            this.X = 0;
            this.Y = 0;
            this.Z = 0;
            this.W = 0;
            return this;
        };
        Object.defineProperty(Vector4, "One", {
            get: function () {
                return new Vector4(1, 1, 1, 1);
            },
            enumerable: true,
            configurable: true
        });
        Vector4.prototype.SetOne = function () {
            this.X = 1;
            this.Y = 1;
            this.Z = 1;
            this.W = 1;
            return this;
        };
        Object.defineProperty(Vector4, "UnitX", {
            get: function () {
                return new Vector4(1, 0, 0, 0);
            },
            enumerable: true,
            configurable: true
        });
        Vector4.prototype.SetUnitX = function () {
            this.X = 1;
            this.Y = 0;
            this.Z = 0;
            this.W = 0;
            return this;
        };
        Object.defineProperty(Vector4, "UnitY", {
            get: function () {
                return new Vector4(0, 1, 0, 0);
            },
            enumerable: true,
            configurable: true
        });
        Vector4.prototype.SetUnitY = function (ref) {
            this.X = 0;
            this.Y = 1;
            this.Z = 0;
            this.W = 0;
            return this;
        };
        Object.defineProperty(Vector4, "UnitZ", {
            get: function () {
                return new Vector4(0, 0, 1, 0);
            },
            enumerable: true,
            configurable: true
        });
        Vector4.prototype.SetUnitZ = function (ref) {
            this.X = 0;
            this.Y = 0;
            this.Z = 1;
            this.W = 0;
            return this;
        };
        Object.defineProperty(Vector4, "UnitW", {
            get: function () {
                return new Vector4(0, 0, 0, 1);
            },
            enumerable: true,
            configurable: true
        });
        Vector4.prototype.SetUnitW = function (ref) {
            this.X = 0;
            this.Y = 0;
            this.Z = 0;
            this.W = 1;
            return this;
        };
        Vector4.prototype.Clone = function () {
            return new Vector4(this.X, this.Y, this.Z, this.W);
        };
        Vector4.prototype.CopyFrom = function (source) {
            this.X = source.X;
            this.Y = source.Y;
            this.Z = source.Z;
            this.W = source.W;
            return this;
        };
        Vector4.FromArray = function (array, offset) {
            if (!offset) {
                offset = 0;
            }
            return new Vector4(array[offset], array[offset + 1], array[offset + 2], array[offset + 3]);
        };
        Vector4.prototype.Equals = function (other) {
            return ((((this.X == other.X) && (this.Y == other.Y)) && (this.Z == other.Z)) && (this.W == other.W));
        };
        Vector4.prototype.EpsilonEquals = function (other, epsilon) {
            var num3 = this.X - other.X;
            var num2 = this.Y - other.Y;
            var num1 = this.Z - other.Z;
            var num0 = this.W - other.W;
            return (((num3 * num3) + (num2 * num2)) + (num1 * num1) + (num0 * num0)) <= epsilon * epsilon;
        };
        Vector4.EpsilonEquals = function (point0, point1, epsilon) {
            if (epsilon === void 0) { epsilon = U1.Epsilon; }
            if (Math.abs(point1.X - point0.X) > epsilon)
                return false;
            if (Math.abs(point1.Y - point0.Y) > epsilon)
                return false;
            if (Math.abs(point1.Z - point0.Z) > epsilon)
                return false;
            if (Math.abs(point1.W - point0.W) > epsilon)
                return false;
            return true;
        };
        Vector4.prototype.Length = function () {
            var num = (((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W);
            return Math.sqrt(num);
        };
        Vector4.prototype.LengthSquareduared = function () {
            return ((((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W));
        };
        Vector4.Distance = function (value1, value2) {
            var num4 = value1.X - value2.X;
            var num3 = value1.Y - value2.Y;
            var num2 = value1.Z - value2.Z;
            var num = value1.W - value2.W;
            var num5 = (((num4 * num4) + (num3 * num3)) + (num2 * num2)) + (num * num);
            return Math.sqrt(num5);
        };
        Vector4.DistanceSquared = function (value1, value2) {
            var num4 = value1.X - value2.X;
            var num3 = value1.Y - value2.Y;
            var num2 = value1.Z - value2.Z;
            var num = value1.W - value2.W;
            return num4 * num4 + num3 * num3 + num2 * num2 + num * num;
        };
        Vector4.Dot = function (vector1, vector2) {
            return ((((vector1.X * vector2.X) + (vector1.Y * vector2.Y)) + (vector1.Z * vector2.Z)) + (vector1.W * vector2.W));
        };
        Vector4.prototype.Normalize = function () {
            var num2 = (((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W);
            var num = 1 / (Math.sqrt(num2));
            this.X *= num;
            this.Y *= num;
            this.Z *= num;
            this.W *= num;
        };
        Vector4.Normalize = function (vector, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            var num2 = (((vector.X * vector.X) + (vector.Y * vector.Y)) + (vector.Z * vector.Z)) + (vector.W * vector.W);
            var num = 1 / (Math.sqrt(num2));
            result.X = vector.X * num;
            result.Y = vector.Y * num;
            result.Z = vector.Z * num;
            result.W = vector.W * num;
            return result;
        };
        Vector4.prototype.SetNormalize = function (vector) {
            var num2 = (((vector.X * vector.X) + (vector.Y * vector.Y)) + (vector.Z * vector.Z)) + (vector.W * vector.W);
            var num = 1 / (Math.sqrt(num2));
            this.X = vector.X * num;
            this.Y = vector.Y * num;
            this.Z = vector.Z * num;
            this.W = vector.W * num;
            return this;
        };
        Vector4.Min = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.X = (value1.X < value2.X) ? value1.X : value2.X;
            result.Y = (value1.Y < value2.Y) ? value1.Y : value2.Y;
            result.Z = (value1.Z < value2.Z) ? value1.Z : value2.Z;
            result.W = (value1.W < value2.W) ? value1.W : value2.W;
            return result;
        };
        Vector4.prototype.SetMin = function (value1, value2) {
            this.X = (value1.X < value2.X) ? value1.X : value2.X;
            this.Y = (value1.Y < value2.Y) ? value1.Y : value2.Y;
            this.Z = (value1.Z < value2.Z) ? value1.Z : value2.Z;
            this.W = (value1.W < value2.W) ? value1.W : value2.W;
            return this;
        };
        Vector4.Max = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.X = (value1.X > value2.X) ? value1.X : value2.X;
            result.Y = (value1.Y > value2.Y) ? value1.Y : value2.Y;
            result.Z = (value1.Z > value2.Z) ? value1.Z : value2.Z;
            result.W = (value1.W > value2.W) ? value1.W : value2.W;
            return result;
        };
        Vector4.prototype.SetMax = function (value1, value2) {
            this.X = (value1.X > value2.X) ? value1.X : value2.X;
            this.Y = (value1.Y > value2.Y) ? value1.Y : value2.Y;
            this.Z = (value1.Z > value2.Z) ? value1.Z : value2.Z;
            this.W = (value1.W > value2.W) ? value1.W : value2.W;
            return this;
        };
        Vector4.Clamp = function (value1, min, max, result) {
            if (result === void 0) { result = null; }
            var x = value1.X;
            x = (x > max.X) ? max.X : x;
            x = (x < min.X) ? min.X : x;
            var y = value1.Y;
            y = (y > max.Y) ? max.Y : y;
            y = (y < min.Y) ? min.Y : y;
            var z = value1.Z;
            z = (z > max.Z) ? max.Z : z;
            z = (z < min.Z) ? min.Z : z;
            var w = value1.W;
            w = (w > max.W) ? max.W : w;
            w = (w < min.W) ? min.W : w;
            if (result == null)
                result = Vector4.New();
            result.X = x;
            result.Y = y;
            result.Z = z;
            result.W = w;
            return result;
        };
        Vector4.prototype.SetClamp = function (value1, min, max) {
            var x = value1.X;
            x = (x > max.X) ? max.X : x;
            x = (x < min.X) ? min.X : x;
            var y = value1.Y;
            y = (y > max.Y) ? max.Y : y;
            y = (y < min.Y) ? min.Y : y;
            var z = value1.Z;
            z = (z > max.Z) ? max.Z : z;
            z = (z < min.Z) ? min.Z : z;
            var w = value1.W;
            w = (w > max.W) ? max.W : w;
            w = (w < min.W) ? min.W : w;
            this.X = x;
            this.Y = y;
            this.Z = z;
            this.W = w;
            return this;
        };
        Vector4.Lerp = function (value1, value2, amount, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.X = value1.X + ((value2.X - value1.X) * amount);
            result.Y = value1.Y + ((value2.Y - value1.Y) * amount);
            result.Z = value1.Z + ((value2.Z - value1.Z) * amount);
            result.W = value1.W + ((value2.W - value1.W) * amount);
            return result;
        };
        Vector4.prototype.SetLerp = function (value1, value2, amount) {
            this.X = value1.X + ((value2.X - value1.X) * amount);
            this.Y = value1.Y + ((value2.Y - value1.Y) * amount);
            this.Z = value1.Z + ((value2.Z - value1.Z) * amount);
            this.W = value1.W + ((value2.W - value1.W) * amount);
            return this;
        };
        Vector4.Barycentric = function (value1, value2, value3, amount1, amount2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.X = (value1.X + (amount1 * (value2.X - value1.X))) + (amount2 * (value3.X - value1.X));
            result.Y = (value1.Y + (amount1 * (value2.Y - value1.Y))) + (amount2 * (value3.Y - value1.Y));
            result.Z = (value1.Z + (amount1 * (value2.Z - value1.Z))) + (amount2 * (value3.Z - value1.Z));
            result.W = (value1.W + (amount1 * (value2.W - value1.W))) + (amount2 * (value3.W - value1.W));
            return result;
        };
        Vector4.prototype.SetBarycentric = function (value1, value2, value3, amount1, amount2) {
            this.X = (value1.X + (amount1 * (value2.X - value1.X))) + (amount2 * (value3.X - value1.X));
            this.Y = (value1.Y + (amount1 * (value2.Y - value1.Y))) + (amount2 * (value3.Y - value1.Y));
            this.Z = (value1.Z + (amount1 * (value2.Z - value1.Z))) + (amount2 * (value3.Z - value1.Z));
            this.W = (value1.W + (amount1 * (value2.W - value1.W))) + (amount2 * (value3.W - value1.W));
            return this;
        };
        Vector4.SmoothStepRef = function (value1, value2, amount, result) {
            if (result === void 0) { result = null; }
            amount = (amount > 1) ? 1 : ((amount < 0) ? 0 : amount);
            amount = (amount * amount) * (3 - (2 * amount));
            if (result == null)
                result = Vector4.New();
            result.X = value1.X + ((value2.X - value1.X) * amount);
            result.Y = value1.Y + ((value2.Y - value1.Y) * amount);
            result.Z = value1.Z + ((value2.Z - value1.Z) * amount);
            result.W = value1.W + ((value2.W - value1.W) * amount);
            return result;
        };
        Vector4.prototype.SetSmoothStep = function (value1, value2, amount) {
            amount = (amount > 1) ? 1 : ((amount < 0) ? 0 : amount);
            amount = (amount * amount) * (3 - (2 * amount));
            this.X = value1.X + ((value2.X - value1.X) * amount);
            this.Y = value1.Y + ((value2.Y - value1.Y) * amount);
            this.Z = value1.Z + ((value2.Z - value1.Z) * amount);
            this.W = value1.W + ((value2.W - value1.W) * amount);
            return this;
        };
        Vector4.CatmullRomRef = function (value1, value2, value3, value4, amount, result) {
            if (result === void 0) { result = null; }
            var num = amount * amount;
            var num2 = amount * num;
            if (result == null)
                result = Vector4.New();
            result.X = 0.5 * ((((2 * value2.X) + ((-value1.X + value3.X) * amount)) + (((((2 * value1.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num)) + ((((-value1.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2));
            result.Y = 0.5 * ((((2 * value2.Y) + ((-value1.Y + value3.Y) * amount)) + (((((2 * value1.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num)) + ((((-value1.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2));
            result.Z = 0.5 * ((((2 * value2.Z) + ((-value1.Z + value3.Z) * amount)) + (((((2 * value1.Z) - (5 * value2.Z)) + (4 * value3.Z)) - value4.Z) * num)) + ((((-value1.Z + (3 * value2.Z)) - (3 * value3.Z)) + value4.Z) * num2));
            result.W = 0.5 * ((((2 * value2.W) + ((-value1.W + value3.W) * amount)) + (((((2 * value1.W) - (5 * value2.W)) + (4 * value3.W)) - value4.W) * num)) + ((((-value1.W + (3 * value2.W)) - (3 * value3.W)) + value4.W) * num2));
            return result;
        };
        Vector4.prototype.SetCatmullRom = function (value1, value2, value3, value4, amount) {
            var num = amount * amount;
            var num2 = amount * num;
            this.X = 0.5 * ((((2 * value2.X) + ((-value1.X + value3.X) * amount)) + (((((2 * value1.X) - (5 * value2.X)) + (4 * value3.X)) - value4.X) * num)) + ((((-value1.X + (3 * value2.X)) - (3 * value3.X)) + value4.X) * num2));
            this.Y = 0.5 * ((((2 * value2.Y) + ((-value1.Y + value3.Y) * amount)) + (((((2 * value1.Y) - (5 * value2.Y)) + (4 * value3.Y)) - value4.Y) * num)) + ((((-value1.Y + (3 * value2.Y)) - (3 * value3.Y)) + value4.Y) * num2));
            this.Z = 0.5 * ((((2 * value2.Z) + ((-value1.Z + value3.Z) * amount)) + (((((2 * value1.Z) - (5 * value2.Z)) + (4 * value3.Z)) - value4.Z) * num)) + ((((-value1.Z + (3 * value2.Z)) - (3 * value3.Z)) + value4.Z) * num2));
            this.W = 0.5 * ((((2 * value2.W) + ((-value1.W + value3.W) * amount)) + (((((2 * value1.W) - (5 * value2.W)) + (4 * value3.W)) - value4.W) * num)) + ((((-value1.W + (3 * value2.W)) - (3 * value3.W)) + value4.W) * num2));
            return this;
        };
        Vector4.HermiteRef = function (value1, tangent1, value2, tangent2, amount, result) {
            if (result === void 0) { result = null; }
            var num = amount * amount;
            var num6 = amount * num;
            var num5 = ((2 * num6) - (3 * num)) + 1;
            var num4 = (-2 * num6) + (3 * num);
            var num3 = (num6 - (2 * num)) + amount;
            var num2 = num6 - num;
            if (result == null)
                result = Vector4.New();
            result.X = (((value1.X * num5) + (value2.X * num4)) + (tangent1.X * num3)) + (tangent2.X * num2);
            result.Y = (((value1.Y * num5) + (value2.Y * num4)) + (tangent1.Y * num3)) + (tangent2.Y * num2);
            result.Z = (((value1.Z * num5) + (value2.Z * num4)) + (tangent1.Z * num3)) + (tangent2.Z * num2);
            result.W = (((value1.W * num5) + (value2.W * num4)) + (tangent1.W * num3)) + (tangent2.W * num2);
            return result;
        };
        Vector4.prototype.SetHermite = function (value1, tangent1, value2, tangent2, amount) {
            var num = amount * amount;
            var num6 = amount * num;
            var num5 = ((2 * num6) - (3 * num)) + 1;
            var num4 = (-2 * num6) + (3 * num);
            var num3 = (num6 - (2 * num)) + amount;
            var num2 = num6 - num;
            this.X = (((value1.X * num5) + (value2.X * num4)) + (tangent1.X * num3)) + (tangent2.X * num2);
            this.Y = (((value1.Y * num5) + (value2.Y * num4)) + (tangent1.Y * num3)) + (tangent2.Y * num2);
            this.Z = (((value1.Z * num5) + (value2.Z * num4)) + (tangent1.Z * num3)) + (tangent2.Z * num2);
            this.W = (((value1.W * num5) + (value2.W * num4)) + (tangent1.W * num3)) + (tangent2.W * num2);
            return this;
        };
        Vector4.TransformVector2 = function (position, matrix, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.X = ((position.X * matrix.M11) + (position.Y * matrix.M21)) + matrix.M41;
            result.Y = ((position.X * matrix.M12) + (position.Y * matrix.M22)) + matrix.M42;
            result.Z = ((position.X * matrix.M13) + (position.Y * matrix.M23)) + matrix.M43;
            result.W = ((position.X * matrix.M14) + (position.Y * matrix.M24)) + matrix.M44;
            return result;
        };
        Vector4.prototype.SetTransformVector2 = function (position, matrix) {
            this.X = ((position.X * matrix.M11) + (position.Y * matrix.M21)) + matrix.M41;
            this.Y = ((position.X * matrix.M12) + (position.Y * matrix.M22)) + matrix.M42;
            this.Z = ((position.X * matrix.M13) + (position.Y * matrix.M23)) + matrix.M43;
            this.W = ((position.X * matrix.M14) + (position.Y * matrix.M24)) + matrix.M44;
            return this;
        };
        Vector4.TransformVector3 = function (position, matrix, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.X = (((position.X * matrix.M11) + (position.Y * matrix.M21)) + (position.Z * matrix.M31)) + matrix.M41;
            result.Y = (((position.X * matrix.M12) + (position.Y * matrix.M22)) + (position.Z * matrix.M32)) + matrix.M42;
            result.Z = (((position.X * matrix.M13) + (position.Y * matrix.M23)) + (position.Z * matrix.M33)) + matrix.M43;
            result.W = (((position.X * matrix.M14) + (position.Y * matrix.M24)) + (position.Z * matrix.M34)) + matrix.M44;
            return result;
        };
        Vector4.prototype.SetTransformVector3 = function (position, matrix) {
            this.X = (((position.X * matrix.M11) + (position.Y * matrix.M21)) + (position.Z * matrix.M31)) + matrix.M41;
            this.Y = (((position.X * matrix.M12) + (position.Y * matrix.M22)) + (position.Z * matrix.M32)) + matrix.M42;
            this.Z = (((position.X * matrix.M13) + (position.Y * matrix.M23)) + (position.Z * matrix.M33)) + matrix.M43;
            this.W = (((position.X * matrix.M14) + (position.Y * matrix.M24)) + (position.Z * matrix.M34)) + matrix.M44;
            return this;
        };
        Vector4.Transform = function (vector, matrix, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.X = (((vector.X * matrix.M11) + (vector.Y * matrix.M21)) + (vector.Z * matrix.M31)) + (vector.W * matrix.M41);
            result.Y = (((vector.X * matrix.M12) + (vector.Y * matrix.M22)) + (vector.Z * matrix.M32)) + (vector.W * matrix.M42);
            result.Z = (((vector.X * matrix.M13) + (vector.Y * matrix.M23)) + (vector.Z * matrix.M33)) + (vector.W * matrix.M43);
            result.W = (((vector.X * matrix.M14) + (vector.Y * matrix.M24)) + (vector.Z * matrix.M34)) + (vector.W * matrix.M44);
            return result;
        };
        Vector4.prototype.SetTransform = function (vector, matrix) {
            this.X = (((vector.X * matrix.M11) + (vector.Y * matrix.M21)) + (vector.Z * matrix.M31)) + (vector.W * matrix.M41);
            this.Y = (((vector.X * matrix.M12) + (vector.Y * matrix.M22)) + (vector.Z * matrix.M32)) + (vector.W * matrix.M42);
            this.Z = (((vector.X * matrix.M13) + (vector.Y * matrix.M23)) + (vector.Z * matrix.M33)) + (vector.W * matrix.M43);
            this.W = (((vector.X * matrix.M14) + (vector.Y * matrix.M24)) + (vector.Z * matrix.M34)) + (vector.W * matrix.M44);
            return this;
        };
        Vector4.TransformVector2Quaternion = function (value, rotation, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            var num6 = rotation.X + rotation.X;
            var num2 = rotation.Y + rotation.Y;
            var num = rotation.Z + rotation.Z;
            var num15 = rotation.W * num6;
            var num14 = rotation.W * num2;
            var num5 = rotation.W * num;
            var num13 = rotation.X * num6;
            var num4 = rotation.X * num2;
            var num12 = rotation.X * num;
            var num11 = rotation.Y * num2;
            var num10 = rotation.Y * num;
            var num3 = rotation.Z * num;
            var num9 = (value.X * ((1 - num11) - num3)) + (value.Y * (num4 - num5));
            var num8 = (value.X * (num4 + num5)) + (value.Y * ((1 - num13) - num3));
            var num7 = (value.X * (num12 - num14)) + (value.Y * (num10 + num15));
            result.X = num9;
            result.Y = num8;
            result.Z = num7;
            result.W = 1;
            return result;
        };
        Vector4.prototype.SetTransformVector2Quaternion = function (value, rotation) {
            var num6 = rotation.X + rotation.X;
            var num2 = rotation.Y + rotation.Y;
            var num = rotation.Z + rotation.Z;
            var num15 = rotation.W * num6;
            var num14 = rotation.W * num2;
            var num5 = rotation.W * num;
            var num13 = rotation.X * num6;
            var num4 = rotation.X * num2;
            var num12 = rotation.X * num;
            var num11 = rotation.Y * num2;
            var num10 = rotation.Y * num;
            var num3 = rotation.Z * num;
            var num9 = (value.X * ((1 - num11) - num3)) + (value.Y * (num4 - num5));
            var num8 = (value.X * (num4 + num5)) + (value.Y * ((1 - num13) - num3));
            var num7 = (value.X * (num12 - num14)) + (value.Y * (num10 + num15));
            this.X = num9;
            this.Y = num8;
            this.Z = num7;
            this.W = 1;
            return this;
        };
        Vector4.TransformVector3Quaternion = function (value, rotation, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            var num12 = rotation.X + rotation.X;
            var num2 = rotation.Y + rotation.Y;
            var num = rotation.Z + rotation.Z;
            var num11 = rotation.W * num12;
            var num10 = rotation.W * num2;
            var num9 = rotation.W * num;
            var num8 = rotation.X * num12;
            var num7 = rotation.X * num2;
            var num6 = rotation.X * num;
            var num5 = rotation.Y * num2;
            var num4 = rotation.Y * num;
            var num3 = rotation.Z * num;
            var num15 = ((value.X * ((1 - num5) - num3)) + (value.Y * (num7 - num9))) + (value.Z * (num6 + num10));
            var num14 = ((value.X * (num7 + num9)) + (value.Y * ((1 - num8) - num3))) + (value.Z * (num4 - num11));
            var num13 = ((value.X * (num6 - num10)) + (value.Y * (num4 + num11))) + (value.Z * ((1 - num8) - num5));
            result.X = num15;
            result.Y = num14;
            result.Z = num13;
            result.W = 1;
            return result;
        };
        Vector4.prototype.SetTransformVector3Quaternion = function (value, rotation) {
            var num12 = rotation.X + rotation.X;
            var num2 = rotation.Y + rotation.Y;
            var num = rotation.Z + rotation.Z;
            var num11 = rotation.W * num12;
            var num10 = rotation.W * num2;
            var num9 = rotation.W * num;
            var num8 = rotation.X * num12;
            var num7 = rotation.X * num2;
            var num6 = rotation.X * num;
            var num5 = rotation.Y * num2;
            var num4 = rotation.Y * num;
            var num3 = rotation.Z * num;
            var num15 = ((value.X * ((1 - num5) - num3)) + (value.Y * (num7 - num9))) + (value.Z * (num6 + num10));
            var num14 = ((value.X * (num7 + num9)) + (value.Y * ((1 - num8) - num3))) + (value.Z * (num4 - num11));
            var num13 = ((value.X * (num6 - num10)) + (value.Y * (num4 + num11))) + (value.Z * ((1 - num8) - num5));
            this.X = num15;
            this.Y = num14;
            this.Z = num13;
            this.W = 1;
            return this;
        };
        Vector4.TransformVector4Quaternion = function (value, rotation, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            var num12 = rotation.X + rotation.X;
            var num2 = rotation.Y + rotation.Y;
            var num = rotation.Z + rotation.Z;
            var num11 = rotation.W * num12;
            var num10 = rotation.W * num2;
            var num9 = rotation.W * num;
            var num8 = rotation.X * num12;
            var num7 = rotation.X * num2;
            var num6 = rotation.X * num;
            var num5 = rotation.Y * num2;
            var num4 = rotation.Y * num;
            var num3 = rotation.Z * num;
            var num15 = ((value.X * ((1 - num5) - num3)) + (value.Y * (num7 - num9))) + (value.Z * (num6 + num10));
            var num14 = ((value.X * (num7 + num9)) + (value.Y * ((1 - num8) - num3))) + (value.Z * (num4 - num11));
            var num13 = ((value.X * (num6 - num10)) + (value.Y * (num4 + num11))) + (value.Z * ((1 - num8) - num5));
            result.X = num15;
            result.Y = num14;
            result.Z = num13;
            result.W = value.W;
            return result;
        };
        Vector4.prototype.SetTransformVector4Quaternion = function (value, rotation) {
            var num12 = rotation.X + rotation.X;
            var num2 = rotation.Y + rotation.Y;
            var num = rotation.Z + rotation.Z;
            var num11 = rotation.W * num12;
            var num10 = rotation.W * num2;
            var num9 = rotation.W * num;
            var num8 = rotation.X * num12;
            var num7 = rotation.X * num2;
            var num6 = rotation.X * num;
            var num5 = rotation.Y * num2;
            var num4 = rotation.Y * num;
            var num3 = rotation.Z * num;
            var num15 = ((value.X * ((1 - num5) - num3)) + (value.Y * (num7 - num9))) + (value.Z * (num6 + num10));
            var num14 = ((value.X * (num7 + num9)) + (value.Y * ((1 - num8) - num3))) + (value.Z * (num4 - num11));
            var num13 = ((value.X * (num6 - num10)) + (value.Y * (num4 + num11))) + (value.Z * ((1 - num8) - num5));
            this.X = num15;
            this.Y = num14;
            this.Z = num13;
            this.W = value.W;
            return this;
        };
        Vector4.Negate = function (value, result) {
            if (result == null)
                result = Vector4.New();
            result.X = -value.X;
            result.Y = -value.Y;
            result.Z = -value.Z;
            result.W = -value.W;
            return result;
        };
        Vector4.prototype.SetNegate = function (value) {
            this.X = -value.X;
            this.Y = -value.Y;
            this.Z = -value.Z;
            this.W = -value.W;
            return this;
        };
        Vector4.prototype.Negate = function () {
            this.X = -this.X;
            this.Y = -this.Y;
            this.Z = -this.Z;
            this.W = -this.W;
            return this;
        };
        Vector4.Add = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.X = value1.X + value2.X;
            result.Y = value1.Y + value2.Y;
            result.Z = value1.Z + value2.Z;
            result.W = value1.W + value2.W;
            return result;
        };
        Vector4.prototype.SetAdd = function (value1, value2) {
            this.X = value1.X + value2.X;
            this.Y = value1.Y + value2.Y;
            this.Z = value1.Z + value2.Z;
            this.W = value1.W + value2.W;
            return this;
        };
        Vector4.prototype.Add = function (value1) {
            this.X = value1.X + this.X;
            this.Y = value1.Y + this.Y;
            this.Z = value1.Z + this.Z;
            this.W = value1.W + this.W;
            return this;
        };
        Vector4.Subtract = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.X = value1.X - value2.X;
            result.Y = value1.Y - value2.Y;
            result.Z = value1.Z - value2.Z;
            result.W = value1.W - value2.W;
            return result;
        };
        Vector4.prototype.SetSubtract = function (value1, value2) {
            this.X = value1.X - value2.X;
            this.Y = value1.Y - value2.Y;
            this.Z = value1.Z - value2.Z;
            this.W = value1.W - value2.W;
            return this;
        };
        Vector4.prototype.Subtract = function (value2) {
            this.X = this.X - value2.X;
            this.Y = this.Y - value2.Y;
            this.Z = this.Z - value2.Z;
            this.W = this.W - value2.W;
            return this;
        };
        Vector4.Multiply = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.X = value1.X * value2.X;
            result.Y = value1.Y * value2.Y;
            result.Z = value1.Z * value2.Z;
            result.W = value1.W * value2.W;
            return result;
        };
        Vector4.prototype.SetMultiply = function (value1, value2) {
            this.X = value1.X * value2.X;
            this.Y = value1.Y * value2.Y;
            this.Z = value1.Z * value2.Z;
            this.W = value1.W * value2.W;
            return this;
        };
        Vector4.prototype.Multiply = function (value2) {
            this.X = this.X * value2.X;
            this.Y = this.Y * value2.Y;
            this.Z = this.Z * value2.Z;
            this.W = this.W * value2.W;
            return this;
        };
        Vector4.Scale = function (value1, scaleFactor, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.X = value1.X * scaleFactor;
            result.Y = value1.Y * scaleFactor;
            result.Z = value1.Z * scaleFactor;
            result.W = value1.W * scaleFactor;
            return result;
        };
        Vector4.prototype.SetScale = function (value1, scaleFactor) {
            this.X = value1.X * scaleFactor;
            this.Y = value1.Y * scaleFactor;
            this.Z = value1.Z * scaleFactor;
            this.W = value1.W * scaleFactor;
            return this;
        };
        Vector4.prototype.Scale = function (scaleFactor) {
            this.X = this.X * scaleFactor;
            this.Y = this.Y * scaleFactor;
            this.Z = this.Z * scaleFactor;
            this.W = this.W * scaleFactor;
            return this;
        };
        Vector4.Divide = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.X = value1.X / value2.X;
            result.Y = value1.Y / value2.Y;
            result.Z = value1.Z / value2.Z;
            result.W = value1.W / value2.W;
            return result;
        };
        Vector4.prototype.SetDivide = function (value1, value2) {
            this.X = value1.X / value2.X;
            this.Y = value1.Y / value2.Y;
            this.Z = value1.Z / value2.Z;
            this.W = value1.W / value2.W;
            return this;
        };
        Vector4.prototype.Divide = function (value2) {
            this.X = this.X / value2.X;
            this.Y = this.Y / value2.Y;
            this.Z = this.Z / value2.Z;
            this.W = this.W / value2.W;
            return this;
        };
        Vector4.New = function () {
            var res = Vector4._cache.New();
            res.Set(0, 0, 0);
            return res;
        };
        Vector4.Release = function (v) {
            Vector4._cache.Release(v);
        };
        Vector4.prototype.Release = function () {
            Vector4.Release(this);
        };
        Vector4._cache = new Cache(Vector4);
        return Vector4;
    }());
    U1.Vector4 = Vector4;
    var Matrix4 = (function () {
        function Matrix4(m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
            if (m11 === void 0) { m11 = 0; }
            if (m12 === void 0) { m12 = 0; }
            if (m13 === void 0) { m13 = 0; }
            if (m14 === void 0) { m14 = 0; }
            if (m21 === void 0) { m21 = 0; }
            if (m22 === void 0) { m22 = 0; }
            if (m23 === void 0) { m23 = 0; }
            if (m24 === void 0) { m24 = 0; }
            if (m31 === void 0) { m31 = 0; }
            if (m32 === void 0) { m32 = 0; }
            if (m33 === void 0) { m33 = 0; }
            if (m34 === void 0) { m34 = 0; }
            if (m41 === void 0) { m41 = 0; }
            if (m42 === void 0) { m42 = 0; }
            if (m43 === void 0) { m43 = 0; }
            if (m44 === void 0) { m44 = 0; }
            this.M11 = m11;
            this.M12 = m12;
            this.M13 = m13;
            this.M14 = m14;
            this.M21 = m21;
            this.M22 = m22;
            this.M23 = m23;
            this.M24 = m24;
            this.M31 = m31;
            this.M32 = m32;
            this.M33 = m33;
            this.M34 = m34;
            this.M41 = m41;
            this.M42 = m42;
            this.M43 = m43;
            this.M44 = m44;
        }
        Matrix4.prototype.ConvertFromStr = function (value) {
            var items = U1.UValueUtil.ConvertNumberArrFromString(value);
            var idx = 0;
            this.M11 = items.length > idx ? items[idx++] : 0;
            this.M12 = items.length > idx ? items[idx++] : 0;
            this.M13 = items.length > idx ? items[idx++] : 0;
            this.M14 = items.length > idx ? items[idx++] : 0;
            this.M21 = items.length > idx ? items[idx++] : 0;
            this.M22 = items.length > idx ? items[idx++] : 0;
            this.M23 = items.length > idx ? items[idx++] : 0;
            this.M24 = items.length > idx ? items[idx++] : 0;
            this.M31 = items.length > idx ? items[idx++] : 0;
            this.M32 = items.length > idx ? items[idx++] : 0;
            this.M33 = items.length > idx ? items[idx++] : 0;
            this.M34 = items.length > idx ? items[idx++] : 0;
            this.M41 = items.length > idx ? items[idx++] : 0;
            this.M42 = items.length > idx ? items[idx++] : 0;
            this.M43 = items.length > idx ? items[idx++] : 0;
            this.M44 = items.length > idx ? items[idx++] : 0;
        };
        Matrix4.prototype.ConvertToStr = function () {
            return U1.UValueUtil.ConvertNumberArrToString(this.M11, this.M12, this.M13, this.M14, this.M21, this.M22, this.M23, this.M24, this.M31, this.M32, this.M33, this.M34, this.M41, this.M42, this.M43, this.M44);
        };
        Matrix4.prototype.Clone = function () {
            var copy = Matrix4.New();
            copy.CopyFrom(this);
            return copy;
        };
        Matrix4.prototype.Equals = function (other) {
            return this.M11 == other.M11
                && this.M22 == other.M22
                && this.M33 == other.M33
                && this.M44 == other.M44
                && this.M12 == other.M12
                && this.M13 == other.M13
                && this.M14 == other.M14
                && this.M21 == other.M21
                && this.M23 == other.M23
                && this.M24 == other.M24
                && this.M31 == other.M31
                && this.M32 == other.M32
                && this.M34 == other.M34
                && this.M41 == other.M41
                && this.M42 == other.M42
                && this.M43 == other.M43;
        };
        Matrix4.prototype.CopyFrom = function (other) {
            this.M11 = other.M11;
            this.M12 = other.M12;
            this.M13 = other.M13;
            this.M14 = other.M14;
            this.M21 = other.M21;
            this.M22 = other.M22;
            this.M23 = other.M23;
            this.M24 = other.M24;
            this.M31 = other.M31;
            this.M32 = other.M32;
            this.M33 = other.M33;
            this.M34 = other.M34;
            this.M41 = other.M41;
            this.M42 = other.M42;
            this.M43 = other.M43;
            this.M44 = other.M44;
            return this;
        };
        Matrix4.prototype.Set = function (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, m41, m42, m43, m44) {
            if (m11 === void 0) { m11 = 0; }
            if (m12 === void 0) { m12 = 0; }
            if (m13 === void 0) { m13 = 0; }
            if (m14 === void 0) { m14 = 0; }
            if (m21 === void 0) { m21 = 0; }
            if (m22 === void 0) { m22 = 0; }
            if (m23 === void 0) { m23 = 0; }
            if (m24 === void 0) { m24 = 0; }
            if (m31 === void 0) { m31 = 0; }
            if (m32 === void 0) { m32 = 0; }
            if (m33 === void 0) { m33 = 0; }
            if (m34 === void 0) { m34 = 0; }
            if (m41 === void 0) { m41 = 0; }
            if (m42 === void 0) { m42 = 0; }
            if (m43 === void 0) { m43 = 0; }
            if (m44 === void 0) { m44 = 0; }
            this.M11 = m11;
            this.M12 = m12;
            this.M13 = m13;
            this.M14 = m14;
            this.M21 = m21;
            this.M22 = m22;
            this.M23 = m23;
            this.M24 = m24;
            this.M31 = m31;
            this.M32 = m32;
            this.M33 = m33;
            this.M34 = m34;
            this.M41 = m41;
            this.M42 = m42;
            this.M43 = m43;
            this.M44 = m44;
            return this;
        };
        Object.defineProperty(Matrix4, "Identity", {
            get: function () {
                var matrix = Matrix4.New();
                return matrix.Set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
            },
            enumerable: true,
            configurable: true
        });
        Matrix4.prototype.SetIdentity = function () {
            this.Set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);
            return this;
        };
        Object.defineProperty(Matrix4.prototype, "Up", {
            get: function () {
                return new Vector3(this.M21, this.M22, this.M23);
            },
            set: function (value) {
                this.M21 = value.X;
                this.M22 = value.Y;
                this.M23 = value.Z;
            },
            enumerable: true,
            configurable: true
        });
        Matrix4.prototype.GetUp = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            result.Set(this.M21, this.M22, this.M23);
            return result;
        };
        Object.defineProperty(Matrix4.prototype, "Down", {
            get: function () {
                return new Vector3(-this.M21, -this.M22, -this.M23);
            },
            set: function (value) {
                this.M21 = -value.X;
                this.M22 = -value.Y;
                this.M23 = -value.Z;
            },
            enumerable: true,
            configurable: true
        });
        Matrix4.prototype.GetDown = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            result.Set(-this.M21, -this.M22, -this.M23);
            return result;
        };
        Object.defineProperty(Matrix4.prototype, "Right", {
            get: function () {
                return new Vector3(this.M11, this.M12, this.M13);
            },
            set: function (value) {
                this.M11 = value.X;
                this.M12 = value.Y;
                this.M13 = value.Z;
            },
            enumerable: true,
            configurable: true
        });
        Matrix4.prototype.GetRight = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            result.Set(this.M11, this.M12, this.M13);
            return result;
        };
        Object.defineProperty(Matrix4.prototype, "Left", {
            get: function () {
                return new Vector3(-this.M11, -this.M12, -this.M13);
            },
            set: function (value) {
                this.M11 = -value.X;
                this.M12 = -value.Y;
                this.M13 = -value.Z;
            },
            enumerable: true,
            configurable: true
        });
        Matrix4.prototype.GetLeft = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            result.Set(-this.M11, -this.M12, -this.M13);
            return result;
        };
        Object.defineProperty(Matrix4.prototype, "Forward", {
            get: function () {
                return new Vector3(-this.M31, -this.M32, -this.M33);
            },
            set: function (value) {
                this.M31 = -value.X;
                this.M32 = -value.Y;
                this.M33 = -value.Z;
            },
            enumerable: true,
            configurable: true
        });
        Matrix4.prototype.GetForward = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            result.Set(-this.M31, -this.M32, -this.M33);
            return result;
        };
        Object.defineProperty(Matrix4.prototype, "Backward", {
            get: function () {
                return new Vector3(this.M31, this.M32, this.M33);
            },
            set: function (value) {
                this.M31 = value.X;
                this.M32 = value.Y;
                this.M33 = value.Z;
            },
            enumerable: true,
            configurable: true
        });
        Matrix4.prototype.GetBackward = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            result.Set(this.M31, this.M32, this.M33);
            return result;
        };
        Object.defineProperty(Matrix4.prototype, "Translation", {
            get: function () {
                return new Vector3(this.M41, this.M42, this.M43);
            },
            set: function (value) {
                this.M41 = value.X;
                this.M42 = value.Y;
                this.M43 = value.Z;
            },
            enumerable: true,
            configurable: true
        });
        Matrix4.prototype.GetTranslation = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            result.Set(this.M41, this.M42, this.M43);
            return result;
        };
        Matrix4.CreateFromAxes = function (xAxis, yAxis, zAxis, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.Identity;
            result.M11 = xAxis.X;
            result.M12 = xAxis.Y;
            result.M13 = xAxis.Z;
            result.M21 = yAxis.X;
            result.M22 = yAxis.Y;
            result.M23 = yAxis.Z;
            result.M31 = zAxis.X;
            result.M32 = zAxis.Y;
            result.M33 = zAxis.Z;
            return result;
        };
        Matrix4.CreateBillboard = function (objectPosition, cameraPosition, cameraUpVector, cameraForwardVector, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var vector1 = Vector3.New();
            var vector2 = Vector3.New();
            var vector3 = Vector3.New();
            vector1.X = objectPosition.X - cameraPosition.X;
            vector1.Y = objectPosition.Y - cameraPosition.Y;
            vector1.Z = objectPosition.Z - cameraPosition.Z;
            var num = vector1.LengthSquareduared();
            if (num < 0.0001) {
                vector1 = cameraForwardVector != null ? vector1.SetNegate(cameraForwardVector) : vector1.SetForward();
            }
            else {
                vector1.Scale(1 / (Math.sqrt(num)));
            }
            vector3.SetCross(cameraUpVector, vector1).Normalize();
            vector2.SetCross(vector1, vector3).Normalize();
            result.M11 = vector3.X;
            result.M12 = vector3.Y;
            result.M13 = vector3.Z;
            result.M14 = 0;
            result.M21 = vector2.X;
            result.M22 = vector2.Y;
            result.M23 = vector2.Z;
            result.M24 = 0;
            result.M31 = vector1.X;
            result.M32 = vector1.Y;
            result.M33 = vector1.Z;
            result.M34 = 0;
            result.M41 = objectPosition.X;
            result.M42 = objectPosition.Y;
            result.M43 = objectPosition.Z;
            result.M44 = 1;
            vector1.Release();
            vector2.Release();
            vector3.Release();
            return result;
        };
        Matrix4.prototype.SetCreateBillboard = function (objectPosition, cameraPosition, cameraUpVector, cameraForwardVector) {
            var vector1 = Vector3.New();
            var vector2 = Vector3.New();
            var vector3 = Vector3.New();
            vector1.SetSubtract(objectPosition, cameraPosition);
            var num = vector1.LengthSquareduared();
            if (num < 0.0001) {
                vector1 = cameraForwardVector != null
                    ? vector1.SetNegate(cameraForwardVector)
                    : vector1.SetForward();
            }
            else {
                vector1.Scale(1 / (Math.sqrt(num)));
            }
            vector3.SetCross(cameraUpVector, vector1).Normalize();
            vector2.SetCross(vector1, vector3).Normalize();
            this.M11 = vector3.X;
            this.M12 = vector3.Y;
            this.M13 = vector3.Z;
            this.M14 = 0;
            this.M21 = vector2.X;
            this.M22 = vector2.Y;
            this.M23 = vector2.Z;
            this.M24 = 0;
            this.M31 = vector1.X;
            this.M32 = vector1.Y;
            this.M33 = vector1.Z;
            this.M34 = 0;
            this.M41 = objectPosition.X;
            this.M42 = objectPosition.Y;
            this.M43 = objectPosition.Z;
            this.M44 = 1;
            vector1.Release();
            vector2.Release();
            vector3.Release();
            return this;
        };
        Matrix4.CreateConstrainedBillboard = function (objectPosition, cameraPosition, rotateAxis, cameraForwardVector, objectForwardVector, result) {
            if (result === void 0) { result = null; }
            var num;
            if (result == null)
                result = Matrix4.Identity;
            var vector1 = Vector3.New();
            var vector2 = Vector3.New();
            var vector3 = Vector3.New();
            vector2.X = objectPosition.X - cameraPosition.X;
            vector2.Y = objectPosition.Y - cameraPosition.Y;
            vector2.Z = objectPosition.Z - cameraPosition.Z;
            var num2 = vector2.LengthSquareduared();
            if (num2 < 0.0001) {
                vector2 = cameraForwardVector != null ? Vector3.Negate(cameraForwardVector) : Vector3.Forward;
            }
            else {
                vector2.Scale(1 / (Math.sqrt(num2)));
            }
            var vector4 = rotateAxis;
            num = Vector3.Dot(rotateAxis, vector2);
            if (Math.abs(num) > 0.9982547) {
                if (objectForwardVector != null) {
                    vector1 = objectForwardVector;
                    num = Vector3.Dot(rotateAxis, vector1);
                    if (Math.abs(num) > 0.9982547) {
                        num = ((rotateAxis.X * Vector3.Forward.X) + (rotateAxis.Y * Vector3.Forward.Y)) + (rotateAxis.Z * Vector3.Forward.Z);
                        vector1 = (Math.abs(num) > 0.9982547) ? Vector3.Right : Vector3.Forward;
                    }
                }
                else {
                    num = ((rotateAxis.X * Vector3.Forward.X) + (rotateAxis.Y * Vector3.Forward.Y)) + (rotateAxis.Z * Vector3.Forward.Z);
                    vector1 = (Math.abs(num) > 0.9982547) ? Vector3.Right : Vector3.Forward;
                }
                vector3.SetCross(rotateAxis, vector1).Normalize();
                vector1.SetCross(vector3, rotateAxis).Normalize();
            }
            else {
                vector3.SetCross(rotateAxis, vector2).Normalize();
                vector1.SetCross(vector3, vector4).Normalize();
            }
            result.M11 = vector3.X;
            result.M12 = vector3.Y;
            result.M13 = vector3.Z;
            result.M14 = 0;
            result.M21 = vector4.X;
            result.M22 = vector4.Y;
            result.M23 = vector4.Z;
            result.M24 = 0;
            result.M31 = vector1.X;
            result.M32 = vector1.Y;
            result.M33 = vector1.Z;
            result.M34 = 0;
            result.M41 = objectPosition.X;
            result.M42 = objectPosition.Y;
            result.M43 = objectPosition.Z;
            result.M44 = 1;
            vector1.Release();
            vector2.Release();
            vector3.Release();
            return result;
        };
        Matrix4.prototype.SetCreateConstrainedBillboard = function (objectPosition, cameraPosition, rotateAxis, cameraForwardVector, objectForwardVector) {
            var num;
            var vector1 = Vector3.New();
            var vector2 = Vector3.New();
            var vector3 = Vector3.New();
            vector2.X = objectPosition.X - cameraPosition.X;
            vector2.Y = objectPosition.Y - cameraPosition.Y;
            vector2.Z = objectPosition.Z - cameraPosition.Z;
            var num2 = vector2.LengthSquareduared();
            if (num2 < 0.0001) {
                vector2 = cameraForwardVector != null
                    ? vector2.SetNegate(cameraForwardVector)
                    : vector2.SetForward();
            }
            else {
                vector2.Scale(1 / (Math.sqrt(num2)));
            }
            var vector4 = rotateAxis;
            num = Vector3.Dot(rotateAxis, vector2);
            if (Math.abs(num) > 0.9982547) {
                if (objectForwardVector != null) {
                    vector1 = objectForwardVector;
                    num = Vector3.Dot(rotateAxis, vector1);
                    if (Math.abs(num) > 0.9982547) {
                        num = ((rotateAxis.X * Vector3.Forward.X) + (rotateAxis.Y * Vector3.Forward.Y)) + (rotateAxis.Z * Vector3.Forward.Z);
                        vector1 = (Math.abs(num) > 0.9982547) ? Vector3.Right : Vector3.Forward;
                    }
                }
                else {
                    num = ((rotateAxis.X * Vector3.Forward.X) + (rotateAxis.Y * Vector3.Forward.Y)) + (rotateAxis.Z * Vector3.Forward.Z);
                    vector1 = (Math.abs(num) > 0.9982547) ? Vector3.Right : Vector3.Forward;
                }
                vector3.SetCross(rotateAxis, vector1).Normalize();
                vector1.SetCross(vector3, rotateAxis).Normalize();
            }
            else {
                vector3.SetCross(rotateAxis, vector2).Normalize();
                vector1.SetCross(vector3, vector4).Normalize();
            }
            this.M11 = vector3.X;
            this.M12 = vector3.Y;
            this.M13 = vector3.Z;
            this.M14 = 0;
            this.M21 = vector4.X;
            this.M22 = vector4.Y;
            this.M23 = vector4.Z;
            this.M24 = 0;
            this.M31 = vector1.X;
            this.M32 = vector1.Y;
            this.M33 = vector1.Z;
            this.M34 = 0;
            this.M41 = objectPosition.X;
            this.M42 = objectPosition.Y;
            this.M43 = objectPosition.Z;
            this.M44 = 1;
            vector1.Release();
            vector2.Release();
            vector3.Release();
            return this;
        };
        Matrix4.CreateTranslation = function (position, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            result.M11 = 1;
            result.M12 = 0;
            result.M13 = 0;
            result.M14 = 0;
            result.M21 = 0;
            result.M22 = 1;
            result.M23 = 0;
            result.M24 = 0;
            result.M31 = 0;
            result.M32 = 0;
            result.M33 = 1;
            result.M34 = 0;
            result.M41 = position.X;
            result.M42 = position.Y;
            result.M43 = position.Z;
            result.M44 = 1;
            return result;
        };
        Matrix4.prototype.SetCreateTranslation = function (position) {
            this.M11 = 1;
            this.M12 = 0;
            this.M13 = 0;
            this.M14 = 0;
            this.M21 = 0;
            this.M22 = 1;
            this.M23 = 0;
            this.M24 = 0;
            this.M31 = 0;
            this.M32 = 0;
            this.M33 = 1;
            this.M34 = 0;
            this.M41 = position.X;
            this.M42 = position.Y;
            this.M43 = position.Z;
            this.M44 = 1;
            return this;
        };
        Matrix4.CreateScaleByFloats = function (xScale, yScale, zScale, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var num3 = xScale;
            var num2 = yScale;
            var num = zScale;
            result.M11 = num3;
            result.M12 = 0;
            result.M13 = 0;
            result.M14 = 0;
            result.M21 = 0;
            result.M22 = num2;
            result.M23 = 0;
            result.M24 = 0;
            result.M31 = 0;
            result.M32 = 0;
            result.M33 = num;
            result.M34 = 0;
            result.M41 = 0;
            result.M42 = 0;
            result.M43 = 0;
            result.M44 = 1;
            return result;
        };
        Matrix4.prototype.SetCreateScaleByFloats = function (xScale, yScale, zScale) {
            var num3 = xScale;
            var num2 = yScale;
            var num = zScale;
            this.M11 = num3;
            this.M12 = 0;
            this.M13 = 0;
            this.M14 = 0;
            this.M21 = 0;
            this.M22 = num2;
            this.M23 = 0;
            this.M24 = 0;
            this.M31 = 0;
            this.M32 = 0;
            this.M33 = num;
            this.M34 = 0;
            this.M41 = 0;
            this.M42 = 0;
            this.M43 = 0;
            this.M44 = 1;
            return this;
        };
        Matrix4.CreateScale = function (scales, reslut) {
            if (reslut === void 0) { reslut = null; }
            return Matrix4.CreateScaleByFloats(scales.X, scales.Y, scales.Z, reslut);
        };
        Matrix4.prototype.SetCreateScale = function (scales) {
            return this.SetCreateScaleByFloats(scales.X, scales.Y, scales.Z);
        };
        Matrix4.CreateRotationX = function (radians, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var num2 = Math.cos(radians);
            var num = Math.sin(radians);
            result.M11 = 1;
            result.M12 = 0;
            result.M13 = 0;
            result.M14 = 0;
            result.M21 = 0;
            result.M22 = num2;
            result.M23 = num;
            result.M24 = 0;
            result.M31 = 0;
            result.M32 = -num;
            result.M33 = num2;
            result.M34 = 0;
            result.M41 = 0;
            result.M42 = 0;
            result.M43 = 0;
            result.M44 = 1;
            return result;
        };
        Matrix4.prototype.SetCreateRotationX = function (radians) {
            var num2 = Math.cos(radians);
            var num = Math.sin(radians);
            this.M11 = 1;
            this.M12 = 0;
            this.M13 = 0;
            this.M14 = 0;
            this.M21 = 0;
            this.M22 = num2;
            this.M23 = num;
            this.M24 = 0;
            this.M31 = 0;
            this.M32 = -num;
            this.M33 = num2;
            this.M34 = 0;
            this.M41 = 0;
            this.M42 = 0;
            this.M43 = 0;
            this.M44 = 1;
            return this;
        };
        Matrix4.CreateRotationY = function (radians, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var num2 = Math.cos(radians);
            var num = Math.sin(radians);
            result.M11 = num2;
            result.M12 = 0;
            result.M13 = -num;
            result.M14 = 0;
            result.M21 = 0;
            result.M22 = 1;
            result.M23 = 0;
            result.M24 = 0;
            result.M31 = num;
            result.M32 = 0;
            result.M33 = num2;
            result.M34 = 0;
            result.M41 = 0;
            result.M42 = 0;
            result.M43 = 0;
            result.M44 = 1;
            return result;
        };
        Matrix4.prototype.SetCreateRotationY = function (radians) {
            var num2 = Math.cos(radians);
            var num = Math.sin(radians);
            this.M11 = num2;
            this.M12 = 0;
            this.M13 = -num;
            this.M14 = 0;
            this.M21 = 0;
            this.M22 = 1;
            this.M23 = 0;
            this.M24 = 0;
            this.M31 = num;
            this.M32 = 0;
            this.M33 = num2;
            this.M34 = 0;
            this.M41 = 0;
            this.M42 = 0;
            this.M43 = 0;
            this.M44 = 1;
            return this;
        };
        Matrix4.CreateRotationZ = function (radians, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var num2 = Math.cos(radians);
            var num = Math.sin(radians);
            result.M11 = num2;
            result.M12 = num;
            result.M13 = 0;
            result.M14 = 0;
            result.M21 = -num;
            result.M22 = num2;
            result.M23 = 0;
            result.M24 = 0;
            result.M31 = 0;
            result.M32 = 0;
            result.M33 = 1;
            result.M34 = 0;
            result.M41 = 0;
            result.M42 = 0;
            result.M43 = 0;
            result.M44 = 1;
            return result;
        };
        Matrix4.prototype.SetCreateRotationZ = function (radians) {
            var num2 = Math.cos(radians);
            var num = Math.sin(radians);
            this.M11 = num2;
            this.M12 = num;
            this.M13 = 0;
            this.M14 = 0;
            this.M21 = -num;
            this.M22 = num2;
            this.M23 = 0;
            this.M24 = 0;
            this.M31 = 0;
            this.M32 = 0;
            this.M33 = 1;
            this.M34 = 0;
            this.M41 = 0;
            this.M42 = 0;
            this.M43 = 0;
            this.M44 = 1;
            return this;
        };
        Matrix4.CreateFromAxisAngle = function (axis, angle, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            if (angle == 0)
                return result;
            var x = axis.X;
            var y = axis.Y;
            var z = axis.Z;
            var num2 = Math.sin(angle);
            var num = Math.cos(angle);
            var num11 = x * x;
            var num10 = y * y;
            var num9 = z * z;
            var num8 = x * y;
            var num7 = x * z;
            var num6 = y * z;
            result.M11 = num11 + (num * (1 - num11));
            result.M12 = (num8 - (num * num8)) + (num2 * z);
            result.M13 = (num7 - (num * num7)) - (num2 * y);
            result.M14 = 0;
            result.M21 = (num8 - (num * num8)) - (num2 * z);
            result.M22 = num10 + (num * (1 - num10));
            result.M23 = (num6 - (num * num6)) + (num2 * x);
            result.M24 = 0;
            result.M31 = (num7 - (num * num7)) + (num2 * y);
            result.M32 = (num6 - (num * num6)) - (num2 * x);
            result.M33 = num9 + (num * (1 - num9));
            result.M34 = 0;
            result.M41 = 0;
            result.M42 = 0;
            result.M43 = 0;
            result.M44 = 1;
            return result;
        };
        Matrix4.prototype.SetCreateFromAxisAngle = function (axis, angle) {
            var x = axis.X;
            var y = axis.Y;
            var z = axis.Z;
            var num2 = Math.sin(angle);
            var num = Math.cos(angle);
            var num11 = x * x;
            var num10 = y * y;
            var num9 = z * z;
            var num8 = x * y;
            var num7 = x * z;
            var num6 = y * z;
            this.M11 = num11 + (num * (1 - num11));
            this.M12 = (num8 - (num * num8)) + (num2 * z);
            this.M13 = (num7 - (num * num7)) - (num2 * y);
            this.M14 = 0;
            this.M21 = (num8 - (num * num8)) - (num2 * z);
            this.M22 = num10 + (num * (1 - num10));
            this.M23 = (num6 - (num * num6)) + (num2 * x);
            this.M24 = 0;
            this.M31 = (num7 - (num * num7)) + (num2 * y);
            this.M32 = (num6 - (num * num6)) - (num2 * x);
            this.M33 = num9 + (num * (1 - num9));
            this.M34 = 0;
            this.M41 = 0;
            this.M42 = 0;
            this.M43 = 0;
            this.M44 = 1;
            return this;
        };
        Matrix4.CreatePerspectiveFieldOfView = function (fieldOfView, aspectRatio, nearPlaneDistance, farPlaneDistance, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            if ((fieldOfView <= 0) || (fieldOfView >= 3.141593)) {
                //fieldOfView <= 0 ? 0.1 : fieldOfView;
                //fieldOfView >= 3.141593 ? 3 : fieldOfView;
                throw "ArgumentOutOfRangeException( fieldOfView)";
            }
            if (nearPlaneDistance <= 0) {
                //nearPlaneDistance = 0.1;
                throw "ArgumentOutOfRangeException( nearPlaneDistance)";
            }
            if (farPlaneDistance <= 0) {
                //farPlaneDistance = 100;
                throw "ArgumentOutOfRangeException( farPlaneDistance)";
            }
            if (nearPlaneDistance >= farPlaneDistance) {
                //var t = nearPlaneDistance;
                //nearPlaneDistance = farPlaneDistance;
                //farPlaneDistance = t;
                throw "ArgumentOutOfRangeException( nearPlaneDistance)";
            }
            var num = 1 / (Math.tan((fieldOfView * 0.5)));
            var num9 = num / aspectRatio;
            result.M11 = num9;
            result.M12 = result.M13 = result.M14 = 0;
            result.M22 = num;
            result.M21 = result.M23 = result.M24 = 0;
            result.M31 = result.M32 = 0;
            result.M33 = farPlaneDistance / (nearPlaneDistance - farPlaneDistance);
            result.M34 = -1;
            result.M41 = result.M42 = result.M44 = 0;
            result.M43 = (nearPlaneDistance * farPlaneDistance) / (nearPlaneDistance - farPlaneDistance);
            return result;
        };
        Matrix4.prototype.SetCreatePerspectiveFieldOfView = function (fieldOfView, aspectRatio, nearPlaneDistance, farPlaneDistance) {
            if ((fieldOfView <= 0) || (fieldOfView >= 3.141593)) {
                //fieldOfView <= 0 ? 0.1 : fieldOfView;
                //fieldOfView >= 3.141593 ? 3 : fieldOfView;
                throw "ArgumentOutOfRangeException( fieldOfView)";
            }
            if (nearPlaneDistance <= 0) {
                //nearPlaneDistance = 0.1;
                throw "ArgumentOutOfRangeException( nearPlaneDistance)";
            }
            if (farPlaneDistance <= 0) {
                //farPlaneDistance = 100;
                throw "ArgumentOutOfRangeException( farPlaneDistance)";
            }
            if (nearPlaneDistance >= farPlaneDistance) {
                //var t = nearPlaneDistance;
                //nearPlaneDistance = farPlaneDistance;
                //farPlaneDistance = t;
                throw "ArgumentOutOfRangeException( nearPlaneDistance)";
            }
            var num = 1 / (Math.tan((fieldOfView * 0.5)));
            var num9 = num / aspectRatio;
            this.M11 = num9;
            this.M12 = this.M13 = this.M14 = 0;
            this.M22 = num;
            this.M21 = this.M23 = this.M24 = 0;
            this.M31 = this.M32 = 0;
            this.M33 = farPlaneDistance / (nearPlaneDistance - farPlaneDistance);
            this.M34 = -1;
            this.M41 = this.M42 = this.M44 = 0;
            this.M43 = (nearPlaneDistance * farPlaneDistance) / (nearPlaneDistance - farPlaneDistance);
            return this;
        };
        Matrix4.CreatePerspective = function (width, height, nearPlaneDistance, farPlaneDistance) {
            var matrix = Matrix4.Identity;
            if (nearPlaneDistance <= 0) {
                //nearPlaneDistance = 0.1;
                throw "ArgumentOutOfRangeException( nearPlaneDistance)";
            }
            if (farPlaneDistance <= 0) {
                //farPlaneDistance = 100;
                throw "ArgumentOutOfRangeException( farPlaneDistance)";
            }
            if (nearPlaneDistance >= farPlaneDistance) {
                //var t = nearPlaneDistance;
                //nearPlaneDistance = farPlaneDistance;
                //farPlaneDistance = t;
                throw "ArgumentOutOfRangeException( nearPlaneDistance)";
            }
            matrix.M11 = (2 * nearPlaneDistance) / width;
            matrix.M12 = matrix.M13 = matrix.M14 = 0;
            matrix.M22 = (2 * nearPlaneDistance) / height;
            matrix.M21 = matrix.M23 = matrix.M24 = 0;
            matrix.M33 = farPlaneDistance / (nearPlaneDistance - farPlaneDistance);
            matrix.M31 = matrix.M32 = 0;
            matrix.M34 = -1;
            matrix.M41 = matrix.M42 = matrix.M44 = 0;
            matrix.M43 = (nearPlaneDistance * farPlaneDistance) / (nearPlaneDistance - farPlaneDistance);
            return matrix;
        };
        Matrix4.prototype.SetCreatePerspective = function (width, height, nearPlaneDistance, farPlaneDistance) {
            if (nearPlaneDistance <= 0) {
                //nearPlaneDistance = 0.1;
                throw "ArgumentOutOfRangeException( nearPlaneDistance)";
            }
            if (farPlaneDistance <= 0) {
                //farPlaneDistance = 100;
                throw "ArgumentOutOfRangeException( farPlaneDistance)";
            }
            if (nearPlaneDistance >= farPlaneDistance) {
                //var t = nearPlaneDistance;
                //nearPlaneDistance = farPlaneDistance;
                //farPlaneDistance = t;
                throw "ArgumentOutOfRangeException( nearPlaneDistance)";
            }
            this.M11 = (2 * nearPlaneDistance) / width;
            this.M12 = this.M13 = this.M14 = 0;
            this.M22 = (2 * nearPlaneDistance) / height;
            this.M21 = this.M23 = this.M24 = 0;
            this.M33 = farPlaneDistance / (nearPlaneDistance - farPlaneDistance);
            this.M31 = this.M32 = 0;
            this.M34 = -1;
            this.M41 = this.M42 = this.M44 = 0;
            this.M43 = (nearPlaneDistance * farPlaneDistance) / (nearPlaneDistance - farPlaneDistance);
            return this;
        };
        Matrix4.CreatePerspectiveOffCenter = function (left, right, bottom, top, nearPlaneDistance, farPlaneDistance, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            if (nearPlaneDistance <= 0) {
                throw "ArgumentOutOfRangeException( nearPlaneDistance)";
            }
            if (farPlaneDistance <= 0) {
                throw "ArgumentOutOfRangeException( farPlaneDistance)";
            }
            if (nearPlaneDistance >= farPlaneDistance) {
                throw "ArgumentOutOfRangeException( nearPlaneDistance)";
            }
            result.M11 = (2 * nearPlaneDistance) / (right - left);
            result.M12 = result.M13 = result.M14 = 0;
            result.M22 = (2 * nearPlaneDistance) / (top - bottom);
            result.M21 = result.M23 = result.M24 = 0;
            result.M31 = (left + right) / (right - left);
            result.M32 = (top + bottom) / (top - bottom);
            result.M33 = farPlaneDistance / (nearPlaneDistance - farPlaneDistance);
            result.M34 = -1;
            result.M43 = (nearPlaneDistance * farPlaneDistance) / (nearPlaneDistance - farPlaneDistance);
            result.M41 = result.M42 = result.M44 = 0;
            return result;
        };
        Matrix4.prototype.SetCreatePerspectiveOffCenter = function (left, right, bottom, top, nearPlaneDistance, farPlaneDistance) {
            if (nearPlaneDistance <= 0) {
                throw "ArgumentOutOfRangeException( nearPlaneDistance)";
            }
            if (farPlaneDistance <= 0) {
                throw "ArgumentOutOfRangeException( farPlaneDistance)";
            }
            if (nearPlaneDistance >= farPlaneDistance) {
                throw "ArgumentOutOfRangeException( nearPlaneDistance)";
            }
            this.M11 = (2 * nearPlaneDistance) / (right - left);
            this.M12 = this.M13 = this.M14 = 0;
            this.M22 = (2 * nearPlaneDistance) / (top - bottom);
            this.M21 = this.M23 = this.M24 = 0;
            this.M31 = (left + right) / (right - left);
            this.M32 = (top + bottom) / (top - bottom);
            this.M33 = farPlaneDistance / (nearPlaneDistance - farPlaneDistance);
            this.M34 = -1;
            this.M43 = (nearPlaneDistance * farPlaneDistance) / (nearPlaneDistance - farPlaneDistance);
            this.M41 = this.M42 = this.M44 = 0;
            return this;
        };
        Matrix4.CreateOrthographic = function (width, height, zNearPlane, zFarPlane, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            result.M11 = 2 / width;
            result.M12 = result.M13 = result.M14 = 0;
            result.M22 = 2 / height;
            result.M21 = result.M23 = result.M24 = 0;
            result.M33 = 1 / (zNearPlane - zFarPlane);
            result.M31 = result.M32 = result.M34 = 0;
            result.M41 = result.M42 = 0;
            result.M43 = zNearPlane / (zNearPlane - zFarPlane);
            result.M44 = 1;
            return result;
        };
        Matrix4.prototype.SetCreateOrthographic = function (width, height, zNearPlane, zFarPlane) {
            this.M11 = 2 / width;
            this.M12 = this.M13 = this.M14 = 0;
            this.M22 = 2 / height;
            this.M21 = this.M23 = this.M24 = 0;
            this.M33 = 1 / (zNearPlane - zFarPlane);
            this.M31 = this.M32 = this.M34 = 0;
            this.M41 = this.M42 = 0;
            this.M43 = zNearPlane / (zNearPlane - zFarPlane);
            this.M44 = 1;
            return this;
        };
        Matrix4.CreateOrthographicOffCenter = function (left, right, bottom, top, zNearPlane, zFarPlane, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            result.M11 = 2 / (right - left);
            result.M12 = result.M13 = result.M14 = 0;
            result.M22 = 2 / (top - bottom);
            result.M21 = result.M23 = result.M24 = 0;
            result.M33 = 1 / (zNearPlane - zFarPlane);
            result.M31 = result.M32 = result.M34 = 0;
            result.M41 = (left + right) / (left - right);
            result.M42 = (top + bottom) / (bottom - top);
            result.M43 = zNearPlane / (zNearPlane - zFarPlane);
            result.M44 = 1;
            return result;
        };
        Matrix4.prototype.SetCreateOrthographicOffCenter = function (left, right, bottom, top, zNearPlane, zFarPlane) {
            this.SetIdentity();
            this.M11 = 2 / (right - left);
            this.M12 = this.M13 = this.M14 = 0;
            this.M22 = 2 / (top - bottom);
            this.M21 = this.M23 = this.M24 = 0;
            this.M33 = 1 / (zNearPlane - zFarPlane);
            this.M31 = this.M32 = this.M34 = 0;
            this.M41 = (left + right) / (left - right);
            this.M42 = (top + bottom) / (bottom - top);
            this.M43 = zNearPlane / (zNearPlane - zFarPlane);
            this.M44 = 1;
            return this;
        };
        Matrix4.CreateLookAt = function (cameraPosition, cameraTarget, cameraUpVector, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var zdir = Vector3.Subtract(cameraPosition, cameraTarget).Normalize();
            var xdir = Vector3.Cross(cameraUpVector, zdir).Normalize();
            var ydir = Vector3.Cross(zdir, xdir).Normalize();
            result.M11 = xdir.X;
            result.M12 = ydir.X;
            result.M13 = zdir.X;
            result.M14 = 0;
            result.M21 = xdir.Y;
            result.M22 = ydir.Y;
            result.M23 = zdir.Y;
            result.M24 = 0;
            result.M31 = xdir.Z;
            result.M32 = ydir.Z;
            result.M33 = zdir.Z;
            result.M34 = 0;
            result.M41 = -Vector3.Dot(xdir, cameraPosition);
            result.M42 = -Vector3.Dot(ydir, cameraPosition);
            result.M43 = -Vector3.Dot(zdir, cameraPosition);
            result.M44 = 1;
            zdir.Release();
            xdir.Release();
            ydir.Release();
            return result;
        };
        Matrix4.prototype.SetCreateLookAt = function (cameraPosition, cameraTarget, cameraUpVector) {
            var zdir = Vector3.Subtract(cameraPosition, cameraTarget).Normalize();
            var xdir = Vector3.Cross(cameraUpVector, zdir).Normalize();
            var ydir = Vector3.Cross(zdir, xdir).Normalize();
            this.M11 = xdir.X;
            this.M12 = ydir.X;
            this.M13 = zdir.X;
            this.M14 = 0;
            this.M21 = xdir.Y;
            this.M22 = ydir.Y;
            this.M23 = zdir.Y;
            this.M24 = 0;
            this.M31 = xdir.Z;
            this.M32 = ydir.Z;
            this.M33 = zdir.Z;
            this.M34 = 0;
            this.M41 = -Vector3.Dot(xdir, cameraPosition);
            this.M42 = -Vector3.Dot(ydir, cameraPosition);
            this.M43 = -Vector3.Dot(zdir, cameraPosition);
            this.M44 = 1;
            zdir.Release();
            xdir.Release();
            ydir.Release();
            return this;
        };
        Matrix4.CreateWorld = function (position, forward, up, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var zAxis = Vector3.Negate(forward).Normalize();
            var xAxis = Vector3.Cross(up, zAxis).Normalize();
            var yAxis = Vector3.Cross(zAxis, xAxis).Normalize();
            result.M11 = xAxis.X;
            result.M12 = xAxis.Y;
            result.M13 = xAxis.Z;
            result.M14 = 0;
            result.M21 = yAxis.X;
            result.M22 = yAxis.Y;
            result.M23 = yAxis.Z;
            result.M24 = 0;
            result.M31 = zAxis.X;
            result.M32 = zAxis.Y;
            result.M33 = zAxis.Z;
            result.M34 = 0;
            result.M41 = position.X;
            result.M42 = position.Y;
            result.M43 = position.Z;
            result.M44 = 1;
            zAxis.Release();
            xAxis.Release();
            yAxis.Release();
            return result;
        };
        Matrix4.prototype.SetCreateWorld = function (position, forward, up) {
            var zAxis = Vector3.Negate(forward).Normalize();
            var xAxis = Vector3.Cross(up, zAxis).Normalize();
            var yAxis = Vector3.Cross(zAxis, xAxis).Normalize();
            this.M11 = xAxis.X;
            this.M12 = xAxis.Y;
            this.M13 = xAxis.Z;
            this.M14 = 0;
            this.M21 = yAxis.X;
            this.M22 = yAxis.Y;
            this.M23 = yAxis.Z;
            this.M24 = 0;
            this.M31 = zAxis.X;
            this.M32 = zAxis.Y;
            this.M33 = zAxis.Z;
            this.M34 = 0;
            this.M41 = position.X;
            this.M42 = position.Y;
            this.M43 = position.Z;
            this.M44 = 1;
            zAxis.Release();
            xAxis.Release();
            yAxis.Release();
            return this;
        };
        Matrix4.CreateFromQuaternion = function (quaternion, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var num9 = quaternion.X * quaternion.X;
            var num8 = quaternion.Y * quaternion.Y;
            var num7 = quaternion.Z * quaternion.Z;
            var num6 = quaternion.X * quaternion.Y;
            var num5 = quaternion.Z * quaternion.W;
            var num4 = quaternion.Z * quaternion.X;
            var num3 = quaternion.Y * quaternion.W;
            var num2 = quaternion.Y * quaternion.Z;
            var num = quaternion.X * quaternion.W;
            result.M11 = 1 - (2 * (num8 + num7));
            result.M12 = 2 * (num6 + num5);
            result.M13 = 2 * (num4 - num3);
            result.M14 = 0;
            result.M21 = 2 * (num6 - num5);
            result.M22 = 1 - (2 * (num7 + num9));
            result.M23 = 2 * (num2 + num);
            result.M24 = 0;
            result.M31 = 2 * (num4 + num3);
            result.M32 = 2 * (num2 - num);
            result.M33 = 1 - (2 * (num8 + num9));
            result.M34 = 0;
            result.M41 = 0;
            result.M42 = 0;
            result.M43 = 0;
            result.M44 = 1;
            return result;
        };
        Matrix4.prototype.SetCreateFromQuaternion = function (quaternion) {
            var num9 = quaternion.X * quaternion.X;
            var num8 = quaternion.Y * quaternion.Y;
            var num7 = quaternion.Z * quaternion.Z;
            var num6 = quaternion.X * quaternion.Y;
            var num5 = quaternion.Z * quaternion.W;
            var num4 = quaternion.Z * quaternion.X;
            var num3 = quaternion.Y * quaternion.W;
            var num2 = quaternion.Y * quaternion.Z;
            var num = quaternion.X * quaternion.W;
            this.M11 = 1 - (2 * (num8 + num7));
            this.M12 = 2 * (num6 + num5);
            this.M13 = 2 * (num4 - num3);
            this.M14 = 0;
            this.M21 = 2 * (num6 - num5);
            this.M22 = 1 - (2 * (num7 + num9));
            this.M23 = 2 * (num2 + num);
            this.M24 = 0;
            this.M31 = 2 * (num4 + num3);
            this.M32 = 2 * (num2 - num);
            this.M33 = 1 - (2 * (num8 + num9));
            this.M34 = 0;
            this.M41 = 0;
            this.M42 = 0;
            this.M43 = 0;
            this.M44 = 1;
            return this;
        };
        Matrix4.CreateFromYawPitchRoll = function (yaw, pitch, roll, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var quaternion = Quaternion.New().SetCreateFromYawPitchRoll(yaw, pitch, roll);
            result.SetCreateFromQuaternion(quaternion);
            quaternion.Release();
            return result;
        };
        Matrix4.prototype.SetCreateFromYawPitchRoll = function (yaw, pitch, roll) {
            var quaternion = Quaternion.New().SetCreateFromYawPitchRoll(yaw, pitch, roll);
            this.SetCreateFromQuaternion(quaternion);
            quaternion.Release();
            return this;
        };
        Matrix4.CreateShadow = function (lightDirection, plane, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var plane2 = plane.Clone().Normalize();
            var num = ((plane2.Normal.X * lightDirection.X) + (plane2.Normal.Y * lightDirection.Y)) + (plane2.Normal.Z * lightDirection.Z);
            var num5 = -plane2.Normal.X;
            var num4 = -plane2.Normal.Y;
            var num3 = -plane2.Normal.Z;
            var num2 = -plane2.D;
            result.M11 = (num5 * lightDirection.X) + num;
            result.M21 = num4 * lightDirection.X;
            result.M31 = num3 * lightDirection.X;
            result.M41 = num2 * lightDirection.X;
            result.M12 = num5 * lightDirection.Y;
            result.M22 = (num4 * lightDirection.Y) + num;
            result.M32 = num3 * lightDirection.Y;
            result.M42 = num2 * lightDirection.Y;
            result.M13 = num5 * lightDirection.Z;
            result.M23 = num4 * lightDirection.Z;
            result.M33 = (num3 * lightDirection.Z) + num;
            result.M43 = num2 * lightDirection.Z;
            result.M14 = 0;
            result.M24 = 0;
            result.M34 = 0;
            result.M44 = num;
            plane2.Release();
            return result;
        };
        Matrix4.prototype.SetCreateShadow = function (lightDirection, plane) {
            var plane2 = Plane.Normalize(plane);
            var num = ((plane2.Normal.X * lightDirection.X) + (plane2.Normal.Y * lightDirection.Y)) + (plane2.Normal.Z * lightDirection.Z);
            var num5 = -plane2.Normal.X;
            var num4 = -plane2.Normal.Y;
            var num3 = -plane2.Normal.Z;
            var num2 = -plane2.D;
            this.M11 = (num5 * lightDirection.X) + num;
            this.M21 = num4 * lightDirection.X;
            this.M31 = num3 * lightDirection.X;
            this.M41 = num2 * lightDirection.X;
            this.M12 = num5 * lightDirection.Y;
            this.M22 = (num4 * lightDirection.Y) + num;
            this.M32 = num3 * lightDirection.Y;
            this.M42 = num2 * lightDirection.Y;
            this.M13 = num5 * lightDirection.Z;
            this.M23 = num4 * lightDirection.Z;
            this.M33 = (num3 * lightDirection.Z) + num;
            this.M43 = num2 * lightDirection.Z;
            this.M14 = 0;
            this.M24 = 0;
            this.M34 = 0;
            this.M44 = num;
            plane2.Release();
            return this;
        };
        Matrix4.CreateReflection = function (value, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            value = Plane.Normalize(value);
            var x = value.Normal.X;
            var y = value.Normal.Y;
            var z = value.Normal.Z;
            var num3 = -2 * x;
            var num2 = -2 * y;
            var num = -2 * z;
            result.M11 = (num3 * x) + 1;
            result.M12 = num2 * x;
            result.M13 = num * x;
            result.M14 = 0;
            result.M21 = num3 * y;
            result.M22 = (num2 * y) + 1;
            result.M23 = num * y;
            result.M24 = 0;
            result.M31 = num3 * z;
            result.M32 = num2 * z;
            result.M33 = (num * z) + 1;
            result.M34 = 0;
            result.M41 = num3 * value.D;
            result.M42 = num2 * value.D;
            result.M43 = num * value.D;
            result.M44 = 1;
            value.Release();
            return result;
        };
        Matrix4.prototype.SetCreateReflection = function (value) {
            value = Plane.Normalize(value);
            var x = value.Normal.X;
            var y = value.Normal.Y;
            var z = value.Normal.Z;
            var num3 = -2 * x;
            var num2 = -2 * y;
            var num = -2 * z;
            this.M11 = (num3 * x) + 1;
            this.M12 = num2 * x;
            this.M13 = num * x;
            this.M14 = 0;
            this.M21 = num3 * y;
            this.M22 = (num2 * y) + 1;
            this.M23 = num * y;
            this.M24 = 0;
            this.M31 = num3 * z;
            this.M32 = num2 * z;
            this.M33 = (num * z) + 1;
            this.M34 = 0;
            this.M41 = num3 * value.D;
            this.M42 = num2 * value.D;
            this.M43 = num * value.D;
            this.M44 = 1;
            value.Release();
            return this;
        };
        Matrix4.TransformByQuaternion = function (value, rotation, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var num21 = rotation.X + rotation.X;
            var num11 = rotation.Y + rotation.Y;
            var num10 = rotation.Z + rotation.Z;
            var num20 = rotation.W * num21;
            var num19 = rotation.W * num11;
            var num18 = rotation.W * num10;
            var num17 = rotation.X * num21;
            var num16 = rotation.X * num11;
            var num15 = rotation.X * num10;
            var num14 = rotation.Y * num11;
            var num13 = rotation.Y * num10;
            var num12 = rotation.Z * num10;
            var num9 = (1 - num14) - num12;
            var num8 = num16 - num18;
            var num7 = num15 + num19;
            var num6 = num16 + num18;
            var num5 = (1 - num17) - num12;
            var num4 = num13 - num20;
            var num3 = num15 - num19;
            var num2 = num13 + num20;
            var num = (1 - num17) - num14;
            result.M11 = ((value.M11 * num9) + (value.M12 * num8)) + (value.M13 * num7);
            result.M12 = ((value.M11 * num6) + (value.M12 * num5)) + (value.M13 * num4);
            result.M13 = ((value.M11 * num3) + (value.M12 * num2)) + (value.M13 * num);
            result.M14 = value.M14;
            result.M21 = ((value.M21 * num9) + (value.M22 * num8)) + (value.M23 * num7);
            result.M22 = ((value.M21 * num6) + (value.M22 * num5)) + (value.M23 * num4);
            result.M23 = ((value.M21 * num3) + (value.M22 * num2)) + (value.M23 * num);
            result.M24 = value.M24;
            result.M31 = ((value.M31 * num9) + (value.M32 * num8)) + (value.M33 * num7);
            result.M32 = ((value.M31 * num6) + (value.M32 * num5)) + (value.M33 * num4);
            result.M33 = ((value.M31 * num3) + (value.M32 * num2)) + (value.M33 * num);
            result.M34 = value.M34;
            result.M41 = ((value.M41 * num9) + (value.M42 * num8)) + (value.M43 * num7);
            result.M42 = ((value.M41 * num6) + (value.M42 * num5)) + (value.M43 * num4);
            result.M43 = ((value.M41 * num3) + (value.M42 * num2)) + (value.M43 * num);
            result.M44 = value.M44;
            return result;
        };
        Matrix4.prototype.SetTransformByQuaternion = function (value, rotation) {
            var num21 = rotation.X + rotation.X;
            var num11 = rotation.Y + rotation.Y;
            var num10 = rotation.Z + rotation.Z;
            var num20 = rotation.W * num21;
            var num19 = rotation.W * num11;
            var num18 = rotation.W * num10;
            var num17 = rotation.X * num21;
            var num16 = rotation.X * num11;
            var num15 = rotation.X * num10;
            var num14 = rotation.Y * num11;
            var num13 = rotation.Y * num10;
            var num12 = rotation.Z * num10;
            var num9 = (1 - num14) - num12;
            var num8 = num16 - num18;
            var num7 = num15 + num19;
            var num6 = num16 + num18;
            var num5 = (1 - num17) - num12;
            var num4 = num13 - num20;
            var num3 = num15 - num19;
            var num2 = num13 + num20;
            var num = (1 - num17) - num14;
            this.M11 = ((value.M11 * num9) + (value.M12 * num8)) + (value.M13 * num7);
            this.M12 = ((value.M11 * num6) + (value.M12 * num5)) + (value.M13 * num4);
            this.M13 = ((value.M11 * num3) + (value.M12 * num2)) + (value.M13 * num);
            this.M14 = value.M14;
            this.M21 = ((value.M21 * num9) + (value.M22 * num8)) + (value.M23 * num7);
            this.M22 = ((value.M21 * num6) + (value.M22 * num5)) + (value.M23 * num4);
            this.M23 = ((value.M21 * num3) + (value.M22 * num2)) + (value.M23 * num);
            this.M24 = value.M24;
            this.M31 = ((value.M31 * num9) + (value.M32 * num8)) + (value.M33 * num7);
            this.M32 = ((value.M31 * num6) + (value.M32 * num5)) + (value.M33 * num4);
            this.M33 = ((value.M31 * num3) + (value.M32 * num2)) + (value.M33 * num);
            this.M34 = value.M34;
            this.M41 = ((value.M41 * num9) + (value.M42 * num8)) + (value.M43 * num7);
            this.M42 = ((value.M41 * num6) + (value.M42 * num5)) + (value.M43 * num4);
            this.M43 = ((value.M41 * num3) + (value.M42 * num2)) + (value.M43 * num);
            this.M44 = value.M44;
            return this;
        };
        Matrix4.Transpose = function (matrix, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            result.M11 = matrix.M11;
            result.M12 = matrix.M21;
            result.M13 = matrix.M31;
            result.M14 = matrix.M41;
            result.M21 = matrix.M12;
            result.M22 = matrix.M22;
            result.M23 = matrix.M32;
            result.M24 = matrix.M42;
            result.M31 = matrix.M13;
            result.M32 = matrix.M23;
            result.M33 = matrix.M33;
            result.M34 = matrix.M43;
            result.M41 = matrix.M14;
            result.M42 = matrix.M24;
            result.M43 = matrix.M34;
            result.M44 = matrix.M44;
            return result;
        };
        Matrix4.prototype.SetTranspose = function (matrix) {
            var m11 = matrix.M11;
            var m12 = matrix.M21;
            var m13 = matrix.M31;
            var m14 = matrix.M41;
            var m21 = matrix.M12;
            var m22 = matrix.M22;
            var m23 = matrix.M32;
            var m24 = matrix.M42;
            var m31 = matrix.M13;
            var m32 = matrix.M23;
            var m33 = matrix.M33;
            var m34 = matrix.M43;
            var m41 = matrix.M14;
            var m42 = matrix.M24;
            var m43 = matrix.M34;
            var m44 = matrix.M44;
            this.M11 = m11;
            this.M12 = m12;
            this.M13 = m13;
            this.M14 = m14;
            this.M21 = m21;
            this.M22 = m22;
            this.M23 = m23;
            this.M24 = m24;
            this.M31 = m31;
            this.M32 = m32;
            this.M33 = m33;
            this.M34 = m34;
            this.M41 = m41;
            this.M42 = m42;
            this.M43 = m43;
            this.M44 = m44;
            return this;
        };
        Matrix4.prototype.Determinant = function () {
            var num22 = this.M11;
            var num21 = this.M12;
            var num20 = this.M13;
            var num19 = this.M14;
            var num12 = this.M21;
            var num11 = this.M22;
            var num10 = this.M23;
            var num9 = this.M24;
            var num8 = this.M31;
            var num7 = this.M32;
            var num6 = this.M33;
            var num5 = this.M34;
            var num4 = this.M41;
            var num3 = this.M42;
            var num2 = this.M43;
            var num = this.M44;
            var num18 = (num6 * num) - (num5 * num2);
            var num17 = (num7 * num) - (num5 * num3);
            var num16 = (num7 * num2) - (num6 * num3);
            var num15 = (num8 * num) - (num5 * num4);
            var num14 = (num8 * num2) - (num6 * num4);
            var num13 = (num8 * num3) - (num7 * num4);
            return ((((num22 * (((num11 * num18) - (num10 * num17)) + (num9 * num16))) - (num21 * (((num12 * num18) - (num10 * num15)) + (num9 * num14)))) + (num20 * (((num12 * num17) - (num11 * num15)) + (num9 * num13)))) - (num19 * (((num12 * num16) - (num11 * num14)) + (num10 * num13))));
        };
        Matrix4.Invert = function (matrix, result) {
            if (result == null)
                result = Matrix4.New();
            return result.CopyFrom(matrix).Invert();
        };
        Matrix4.prototype.SetInvert = function (source) {
            var num5 = source.M11;
            var num4 = source.M12;
            var num3 = source.M13;
            var num2 = source.M14;
            var num9 = source.M21;
            var num8 = source.M22;
            var num7 = source.M23;
            var num6 = source.M24;
            var num17 = source.M31;
            var num16 = source.M32;
            var num15 = source.M33;
            var num14 = source.M34;
            var num13 = source.M41;
            var num12 = source.M42;
            var num11 = source.M43;
            var num10 = source.M44;
            var num23 = (num15 * num10) - (num14 * num11);
            var num22 = (num16 * num10) - (num14 * num12);
            var num21 = (num16 * num11) - (num15 * num12);
            var num20 = (num17 * num10) - (num14 * num13);
            var num19 = (num17 * num11) - (num15 * num13);
            var num18 = (num17 * num12) - (num16 * num13);
            var num39 = ((num8 * num23) - (num7 * num22)) + (num6 * num21);
            var num38 = -(((num9 * num23) - (num7 * num20)) + (num6 * num19));
            var num37 = ((num9 * num22) - (num8 * num20)) + (num6 * num18);
            var num36 = -(((num9 * num21) - (num8 * num19)) + (num7 * num18));
            var num = 1 / ((((num5 * num39) + (num4 * num38)) + (num3 * num37)) + (num2 * num36));
            this.M11 = num39 * num;
            this.M21 = num38 * num;
            this.M31 = num37 * num;
            this.M41 = num36 * num;
            this.M12 = -(((num4 * num23) - (num3 * num22)) + (num2 * num21)) * num;
            this.M22 = (((num5 * num23) - (num3 * num20)) + (num2 * num19)) * num;
            this.M32 = -(((num5 * num22) - (num4 * num20)) + (num2 * num18)) * num;
            this.M42 = (((num5 * num21) - (num4 * num19)) + (num3 * num18)) * num;
            var num35 = (num7 * num10) - (num6 * num11);
            var num34 = (num8 * num10) - (num6 * num12);
            var num33 = (num8 * num11) - (num7 * num12);
            var num32 = (num9 * num10) - (num6 * num13);
            var num31 = (num9 * num11) - (num7 * num13);
            var num30 = (num9 * num12) - (num8 * num13);
            this.M13 = (((num4 * num35) - (num3 * num34)) + (num2 * num33)) * num;
            this.M23 = -(((num5 * num35) - (num3 * num32)) + (num2 * num31)) * num;
            this.M33 = (((num5 * num34) - (num4 * num32)) + (num2 * num30)) * num;
            this.M43 = -(((num5 * num33) - (num4 * num31)) + (num3 * num30)) * num;
            var num29 = (num7 * num14) - (num6 * num15);
            var num28 = (num8 * num14) - (num6 * num16);
            var num27 = (num8 * num15) - (num7 * num16);
            var num26 = (num9 * num14) - (num6 * num17);
            var num25 = (num9 * num15) - (num7 * num17);
            var num24 = (num9 * num16) - (num8 * num17);
            this.M14 = -(((num4 * num29) - (num3 * num28)) + (num2 * num27)) * num;
            this.M24 = (((num5 * num29) - (num3 * num26)) + (num2 * num25)) * num;
            this.M34 = -(((num5 * num28) - (num4 * num26)) + (num2 * num24)) * num;
            this.M44 = (((num5 * num27) - (num4 * num25)) + (num3 * num24)) * num;
            return this;
        };
        Matrix4.prototype.Invert = function () {
            this.SetInvert(this);
            return this;
        };
        Matrix4.Lerp = function (matrix1, matrix2, amount, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            result.M11 = matrix1.M11 + ((matrix2.M11 - matrix1.M11) * amount);
            result.M12 = matrix1.M12 + ((matrix2.M12 - matrix1.M12) * amount);
            result.M13 = matrix1.M13 + ((matrix2.M13 - matrix1.M13) * amount);
            result.M14 = matrix1.M14 + ((matrix2.M14 - matrix1.M14) * amount);
            result.M21 = matrix1.M21 + ((matrix2.M21 - matrix1.M21) * amount);
            result.M22 = matrix1.M22 + ((matrix2.M22 - matrix1.M22) * amount);
            result.M23 = matrix1.M23 + ((matrix2.M23 - matrix1.M23) * amount);
            result.M24 = matrix1.M24 + ((matrix2.M24 - matrix1.M24) * amount);
            result.M31 = matrix1.M31 + ((matrix2.M31 - matrix1.M31) * amount);
            result.M32 = matrix1.M32 + ((matrix2.M32 - matrix1.M32) * amount);
            result.M33 = matrix1.M33 + ((matrix2.M33 - matrix1.M33) * amount);
            result.M34 = matrix1.M34 + ((matrix2.M34 - matrix1.M34) * amount);
            result.M41 = matrix1.M41 + ((matrix2.M41 - matrix1.M41) * amount);
            result.M42 = matrix1.M42 + ((matrix2.M42 - matrix1.M42) * amount);
            result.M43 = matrix1.M43 + ((matrix2.M43 - matrix1.M43) * amount);
            result.M44 = matrix1.M44 + ((matrix2.M44 - matrix1.M44) * amount);
            return result;
        };
        Matrix4.prototype.SetLerp = function (matrix1, matrix2, amount) {
            this.M11 = matrix1.M11 + ((matrix2.M11 - matrix1.M11) * amount);
            this.M12 = matrix1.M12 + ((matrix2.M12 - matrix1.M12) * amount);
            this.M13 = matrix1.M13 + ((matrix2.M13 - matrix1.M13) * amount);
            this.M14 = matrix1.M14 + ((matrix2.M14 - matrix1.M14) * amount);
            this.M21 = matrix1.M21 + ((matrix2.M21 - matrix1.M21) * amount);
            this.M22 = matrix1.M22 + ((matrix2.M22 - matrix1.M22) * amount);
            this.M23 = matrix1.M23 + ((matrix2.M23 - matrix1.M23) * amount);
            this.M24 = matrix1.M24 + ((matrix2.M24 - matrix1.M24) * amount);
            this.M31 = matrix1.M31 + ((matrix2.M31 - matrix1.M31) * amount);
            this.M32 = matrix1.M32 + ((matrix2.M32 - matrix1.M32) * amount);
            this.M33 = matrix1.M33 + ((matrix2.M33 - matrix1.M33) * amount);
            this.M34 = matrix1.M34 + ((matrix2.M34 - matrix1.M34) * amount);
            this.M41 = matrix1.M41 + ((matrix2.M41 - matrix1.M41) * amount);
            this.M42 = matrix1.M42 + ((matrix2.M42 - matrix1.M42) * amount);
            this.M43 = matrix1.M43 + ((matrix2.M43 - matrix1.M43) * amount);
            this.M44 = matrix1.M44 + ((matrix2.M44 - matrix1.M44) * amount);
            return this;
        };
        Matrix4.Negate = function (matrix, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            result.M11 = -matrix.M11;
            result.M12 = -matrix.M12;
            result.M13 = -matrix.M13;
            result.M14 = -matrix.M14;
            result.M21 = -matrix.M21;
            result.M22 = -matrix.M22;
            result.M23 = -matrix.M23;
            result.M24 = -matrix.M24;
            result.M31 = -matrix.M31;
            result.M32 = -matrix.M32;
            result.M33 = -matrix.M33;
            result.M34 = -matrix.M34;
            result.M41 = -matrix.M41;
            result.M42 = -matrix.M42;
            result.M43 = -matrix.M43;
            result.M44 = -matrix.M44;
            return result;
        };
        Matrix4.prototype.SetNegate = function (matrix) {
            this.M11 = -matrix.M11;
            this.M12 = -matrix.M12;
            this.M13 = -matrix.M13;
            this.M14 = -matrix.M14;
            this.M21 = -matrix.M21;
            this.M22 = -matrix.M22;
            this.M23 = -matrix.M23;
            this.M24 = -matrix.M24;
            this.M31 = -matrix.M31;
            this.M32 = -matrix.M32;
            this.M33 = -matrix.M33;
            this.M34 = -matrix.M34;
            this.M41 = -matrix.M41;
            this.M42 = -matrix.M42;
            this.M43 = -matrix.M43;
            this.M44 = -matrix.M44;
            return this;
        };
        Matrix4.prototype.Negate = function (matrix) {
            return this.SetNegate(this);
        };
        Matrix4.Add = function (matrix1, matrix2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            result.M11 = matrix1.M11 + matrix2.M11;
            result.M12 = matrix1.M12 + matrix2.M12;
            result.M13 = matrix1.M13 + matrix2.M13;
            result.M14 = matrix1.M14 + matrix2.M14;
            result.M21 = matrix1.M21 + matrix2.M21;
            result.M22 = matrix1.M22 + matrix2.M22;
            result.M23 = matrix1.M23 + matrix2.M23;
            result.M24 = matrix1.M24 + matrix2.M24;
            result.M31 = matrix1.M31 + matrix2.M31;
            result.M32 = matrix1.M32 + matrix2.M32;
            result.M33 = matrix1.M33 + matrix2.M33;
            result.M34 = matrix1.M34 + matrix2.M34;
            result.M41 = matrix1.M41 + matrix2.M41;
            result.M42 = matrix1.M42 + matrix2.M42;
            result.M43 = matrix1.M43 + matrix2.M43;
            result.M44 = matrix1.M44 + matrix2.M44;
            return result;
        };
        Matrix4.prototype.SetAdd = function (matrix1, matrix2) {
            this.M11 = matrix1.M11 + matrix2.M11;
            this.M12 = matrix1.M12 + matrix2.M12;
            this.M13 = matrix1.M13 + matrix2.M13;
            this.M14 = matrix1.M14 + matrix2.M14;
            this.M21 = matrix1.M21 + matrix2.M21;
            this.M22 = matrix1.M22 + matrix2.M22;
            this.M23 = matrix1.M23 + matrix2.M23;
            this.M24 = matrix1.M24 + matrix2.M24;
            this.M31 = matrix1.M31 + matrix2.M31;
            this.M32 = matrix1.M32 + matrix2.M32;
            this.M33 = matrix1.M33 + matrix2.M33;
            this.M34 = matrix1.M34 + matrix2.M34;
            this.M41 = matrix1.M41 + matrix2.M41;
            this.M42 = matrix1.M42 + matrix2.M42;
            this.M43 = matrix1.M43 + matrix2.M43;
            this.M44 = matrix1.M44 + matrix2.M44;
            return this;
        };
        Matrix4.prototype.Add = function (matrix2) {
            return this.SetAdd(this, matrix2);
        };
        Matrix4.Subtract = function (matrix1, matrix2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            result.M11 = matrix1.M11 - matrix2.M11;
            result.M12 = matrix1.M12 - matrix2.M12;
            result.M13 = matrix1.M13 - matrix2.M13;
            result.M14 = matrix1.M14 - matrix2.M14;
            result.M21 = matrix1.M21 - matrix2.M21;
            result.M22 = matrix1.M22 - matrix2.M22;
            result.M23 = matrix1.M23 - matrix2.M23;
            result.M24 = matrix1.M24 - matrix2.M24;
            result.M31 = matrix1.M31 - matrix2.M31;
            result.M32 = matrix1.M32 - matrix2.M32;
            result.M33 = matrix1.M33 - matrix2.M33;
            result.M34 = matrix1.M34 - matrix2.M34;
            result.M41 = matrix1.M41 - matrix2.M41;
            result.M42 = matrix1.M42 - matrix2.M42;
            result.M43 = matrix1.M43 - matrix2.M43;
            result.M44 = matrix1.M44 - matrix2.M44;
            return result;
        };
        Matrix4.prototype.SetSubtract = function (matrix1, matrix2) {
            this.M11 = matrix1.M11 - matrix2.M11;
            this.M12 = matrix1.M12 - matrix2.M12;
            this.M13 = matrix1.M13 - matrix2.M13;
            this.M14 = matrix1.M14 - matrix2.M14;
            this.M21 = matrix1.M21 - matrix2.M21;
            this.M22 = matrix1.M22 - matrix2.M22;
            this.M23 = matrix1.M23 - matrix2.M23;
            this.M24 = matrix1.M24 - matrix2.M24;
            this.M31 = matrix1.M31 - matrix2.M31;
            this.M32 = matrix1.M32 - matrix2.M32;
            this.M33 = matrix1.M33 - matrix2.M33;
            this.M34 = matrix1.M34 - matrix2.M34;
            this.M41 = matrix1.M41 - matrix2.M41;
            this.M42 = matrix1.M42 - matrix2.M42;
            this.M43 = matrix1.M43 - matrix2.M43;
            this.M44 = matrix1.M44 - matrix2.M44;
            return this;
        };
        Matrix4.prototype.Subtract = function (matrix2) {
            return this.SetSubtract(this, matrix2);
        };
        Matrix4.Multiply = function (matrix1, matrix2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            if (matrix1 == null && matrix2 == null) {
                result.SetIdentity();
                return result;
            }
            if (matrix1 == null) {
                result.CopyFrom(matrix2);
                return result;
            }
            if (matrix2 == null) {
                result.CopyFrom(matrix1);
                return result;
            }
            result.M11 = (((matrix1.M11 * matrix2.M11) + (matrix1.M12 * matrix2.M21)) + (matrix1.M13 * matrix2.M31)) + (matrix1.M14 * matrix2.M41);
            result.M12 = (((matrix1.M11 * matrix2.M12) + (matrix1.M12 * matrix2.M22)) + (matrix1.M13 * matrix2.M32)) + (matrix1.M14 * matrix2.M42);
            result.M13 = (((matrix1.M11 * matrix2.M13) + (matrix1.M12 * matrix2.M23)) + (matrix1.M13 * matrix2.M33)) + (matrix1.M14 * matrix2.M43);
            result.M14 = (((matrix1.M11 * matrix2.M14) + (matrix1.M12 * matrix2.M24)) + (matrix1.M13 * matrix2.M34)) + (matrix1.M14 * matrix2.M44);
            result.M21 = (((matrix1.M21 * matrix2.M11) + (matrix1.M22 * matrix2.M21)) + (matrix1.M23 * matrix2.M31)) + (matrix1.M24 * matrix2.M41);
            result.M22 = (((matrix1.M21 * matrix2.M12) + (matrix1.M22 * matrix2.M22)) + (matrix1.M23 * matrix2.M32)) + (matrix1.M24 * matrix2.M42);
            result.M23 = (((matrix1.M21 * matrix2.M13) + (matrix1.M22 * matrix2.M23)) + (matrix1.M23 * matrix2.M33)) + (matrix1.M24 * matrix2.M43);
            result.M24 = (((matrix1.M21 * matrix2.M14) + (matrix1.M22 * matrix2.M24)) + (matrix1.M23 * matrix2.M34)) + (matrix1.M24 * matrix2.M44);
            result.M31 = (((matrix1.M31 * matrix2.M11) + (matrix1.M32 * matrix2.M21)) + (matrix1.M33 * matrix2.M31)) + (matrix1.M34 * matrix2.M41);
            result.M32 = (((matrix1.M31 * matrix2.M12) + (matrix1.M32 * matrix2.M22)) + (matrix1.M33 * matrix2.M32)) + (matrix1.M34 * matrix2.M42);
            result.M33 = (((matrix1.M31 * matrix2.M13) + (matrix1.M32 * matrix2.M23)) + (matrix1.M33 * matrix2.M33)) + (matrix1.M34 * matrix2.M43);
            result.M34 = (((matrix1.M31 * matrix2.M14) + (matrix1.M32 * matrix2.M24)) + (matrix1.M33 * matrix2.M34)) + (matrix1.M34 * matrix2.M44);
            result.M41 = (((matrix1.M41 * matrix2.M11) + (matrix1.M42 * matrix2.M21)) + (matrix1.M43 * matrix2.M31)) + (matrix1.M44 * matrix2.M41);
            result.M42 = (((matrix1.M41 * matrix2.M12) + (matrix1.M42 * matrix2.M22)) + (matrix1.M43 * matrix2.M32)) + (matrix1.M44 * matrix2.M42);
            result.M43 = (((matrix1.M41 * matrix2.M13) + (matrix1.M42 * matrix2.M23)) + (matrix1.M43 * matrix2.M33)) + (matrix1.M44 * matrix2.M43);
            result.M44 = (((matrix1.M41 * matrix2.M14) + (matrix1.M42 * matrix2.M24)) + (matrix1.M43 * matrix2.M34)) + (matrix1.M44 * matrix2.M44);
            return result;
        };
        Matrix4.prototype.SetMultiply = function (matrix1, matrix2) {
            if (matrix1 == null && matrix2 == null) {
                this.SetIdentity();
                return this;
            }
            if (matrix1 == null) {
                this.CopyFrom(matrix2);
                return this;
            }
            if (matrix2 == null) {
                this.CopyFrom(matrix1);
                return this;
            }
            var m11 = (((matrix1.M11 * matrix2.M11) + (matrix1.M12 * matrix2.M21)) + (matrix1.M13 * matrix2.M31)) + (matrix1.M14 * matrix2.M41);
            var m12 = (((matrix1.M11 * matrix2.M12) + (matrix1.M12 * matrix2.M22)) + (matrix1.M13 * matrix2.M32)) + (matrix1.M14 * matrix2.M42);
            var m13 = (((matrix1.M11 * matrix2.M13) + (matrix1.M12 * matrix2.M23)) + (matrix1.M13 * matrix2.M33)) + (matrix1.M14 * matrix2.M43);
            var m14 = (((matrix1.M11 * matrix2.M14) + (matrix1.M12 * matrix2.M24)) + (matrix1.M13 * matrix2.M34)) + (matrix1.M14 * matrix2.M44);
            var m21 = (((matrix1.M21 * matrix2.M11) + (matrix1.M22 * matrix2.M21)) + (matrix1.M23 * matrix2.M31)) + (matrix1.M24 * matrix2.M41);
            var m22 = (((matrix1.M21 * matrix2.M12) + (matrix1.M22 * matrix2.M22)) + (matrix1.M23 * matrix2.M32)) + (matrix1.M24 * matrix2.M42);
            var m23 = (((matrix1.M21 * matrix2.M13) + (matrix1.M22 * matrix2.M23)) + (matrix1.M23 * matrix2.M33)) + (matrix1.M24 * matrix2.M43);
            var m24 = (((matrix1.M21 * matrix2.M14) + (matrix1.M22 * matrix2.M24)) + (matrix1.M23 * matrix2.M34)) + (matrix1.M24 * matrix2.M44);
            var m31 = (((matrix1.M31 * matrix2.M11) + (matrix1.M32 * matrix2.M21)) + (matrix1.M33 * matrix2.M31)) + (matrix1.M34 * matrix2.M41);
            var m32 = (((matrix1.M31 * matrix2.M12) + (matrix1.M32 * matrix2.M22)) + (matrix1.M33 * matrix2.M32)) + (matrix1.M34 * matrix2.M42);
            var m33 = (((matrix1.M31 * matrix2.M13) + (matrix1.M32 * matrix2.M23)) + (matrix1.M33 * matrix2.M33)) + (matrix1.M34 * matrix2.M43);
            var m34 = (((matrix1.M31 * matrix2.M14) + (matrix1.M32 * matrix2.M24)) + (matrix1.M33 * matrix2.M34)) + (matrix1.M34 * matrix2.M44);
            var m41 = (((matrix1.M41 * matrix2.M11) + (matrix1.M42 * matrix2.M21)) + (matrix1.M43 * matrix2.M31)) + (matrix1.M44 * matrix2.M41);
            var m42 = (((matrix1.M41 * matrix2.M12) + (matrix1.M42 * matrix2.M22)) + (matrix1.M43 * matrix2.M32)) + (matrix1.M44 * matrix2.M42);
            var m43 = (((matrix1.M41 * matrix2.M13) + (matrix1.M42 * matrix2.M23)) + (matrix1.M43 * matrix2.M33)) + (matrix1.M44 * matrix2.M43);
            var m44 = (((matrix1.M41 * matrix2.M14) + (matrix1.M42 * matrix2.M24)) + (matrix1.M43 * matrix2.M34)) + (matrix1.M44 * matrix2.M44);
            this.M11 = m11;
            this.M12 = m12;
            this.M13 = m13;
            this.M14 = m14;
            this.M21 = m21;
            this.M22 = m22;
            this.M23 = m23;
            this.M24 = m24;
            this.M31 = m31;
            this.M32 = m32;
            this.M33 = m33;
            this.M34 = m34;
            this.M41 = m41;
            this.M42 = m42;
            this.M43 = m43;
            this.M44 = m44;
            return this;
        };
        Matrix4.prototype.Multiply = function (matrix2) {
            if (matrix2 == null)
                return this;
            return this.SetMultiply(this, matrix2);
        };
        Matrix4.Scale = function (matrix1, scaleFactor, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var num = scaleFactor;
            result.M11 = matrix1.M11 * num;
            result.M12 = matrix1.M12 * num;
            result.M13 = matrix1.M13 * num;
            result.M14 = matrix1.M14 * num;
            result.M21 = matrix1.M21 * num;
            result.M22 = matrix1.M22 * num;
            result.M23 = matrix1.M23 * num;
            result.M24 = matrix1.M24 * num;
            result.M31 = matrix1.M31 * num;
            result.M32 = matrix1.M32 * num;
            result.M33 = matrix1.M33 * num;
            result.M34 = matrix1.M34 * num;
            result.M41 = matrix1.M41 * num;
            result.M42 = matrix1.M42 * num;
            result.M43 = matrix1.M43 * num;
            result.M44 = matrix1.M44 * num;
            return result;
        };
        Matrix4.prototype.SetScale = function (matrix1, scaleFactor) {
            var num = scaleFactor;
            this.M11 = matrix1.M11 * num;
            this.M12 = matrix1.M12 * num;
            this.M13 = matrix1.M13 * num;
            this.M14 = matrix1.M14 * num;
            this.M21 = matrix1.M21 * num;
            this.M22 = matrix1.M22 * num;
            this.M23 = matrix1.M23 * num;
            this.M24 = matrix1.M24 * num;
            this.M31 = matrix1.M31 * num;
            this.M32 = matrix1.M32 * num;
            this.M33 = matrix1.M33 * num;
            this.M34 = matrix1.M34 * num;
            this.M41 = matrix1.M41 * num;
            this.M42 = matrix1.M42 * num;
            this.M43 = matrix1.M43 * num;
            this.M44 = matrix1.M44 * num;
            return this;
        };
        Matrix4.prototype.Scale = function (scaleFactor) {
            return this.SetScale(this, scaleFactor);
        };
        Matrix4.Divide = function (matrix1, matrix2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            result.M11 = matrix1.M11 / matrix2.M11;
            result.M12 = matrix1.M12 / matrix2.M12;
            result.M13 = matrix1.M13 / matrix2.M13;
            result.M14 = matrix1.M14 / matrix2.M14;
            result.M21 = matrix1.M21 / matrix2.M21;
            result.M22 = matrix1.M22 / matrix2.M22;
            result.M23 = matrix1.M23 / matrix2.M23;
            result.M24 = matrix1.M24 / matrix2.M24;
            result.M31 = matrix1.M31 / matrix2.M31;
            result.M32 = matrix1.M32 / matrix2.M32;
            result.M33 = matrix1.M33 / matrix2.M33;
            result.M34 = matrix1.M34 / matrix2.M34;
            result.M41 = matrix1.M41 / matrix2.M41;
            result.M42 = matrix1.M42 / matrix2.M42;
            result.M43 = matrix1.M43 / matrix2.M43;
            result.M44 = matrix1.M44 / matrix2.M44;
            return result;
        };
        Matrix4.prototype.SetDivide = function (matrix1, matrix2) {
            this.M11 = matrix1.M11 / matrix2.M11;
            this.M12 = matrix1.M12 / matrix2.M12;
            this.M13 = matrix1.M13 / matrix2.M13;
            this.M14 = matrix1.M14 / matrix2.M14;
            this.M21 = matrix1.M21 / matrix2.M21;
            this.M22 = matrix1.M22 / matrix2.M22;
            this.M23 = matrix1.M23 / matrix2.M23;
            this.M24 = matrix1.M24 / matrix2.M24;
            this.M31 = matrix1.M31 / matrix2.M31;
            this.M32 = matrix1.M32 / matrix2.M32;
            this.M33 = matrix1.M33 / matrix2.M33;
            this.M34 = matrix1.M34 / matrix2.M34;
            this.M41 = matrix1.M41 / matrix2.M41;
            this.M42 = matrix1.M42 / matrix2.M42;
            this.M43 = matrix1.M43 / matrix2.M43;
            this.M44 = matrix1.M44 / matrix2.M44;
            return this;
        };
        Matrix4.prototype.Divide = function (matrix2) {
            return this.SetDivide(this, matrix2);
        };
        Matrix4.DivideFloat = function (matrix1, divider, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.New();
            var num = 1 / divider;
            result.M11 = matrix1.M11 * num;
            result.M12 = matrix1.M12 * num;
            result.M13 = matrix1.M13 * num;
            result.M14 = matrix1.M14 * num;
            result.M21 = matrix1.M21 * num;
            result.M22 = matrix1.M22 * num;
            result.M23 = matrix1.M23 * num;
            result.M24 = matrix1.M24 * num;
            result.M31 = matrix1.M31 * num;
            result.M32 = matrix1.M32 * num;
            result.M33 = matrix1.M33 * num;
            result.M34 = matrix1.M34 * num;
            result.M41 = matrix1.M41 * num;
            result.M42 = matrix1.M42 * num;
            result.M43 = matrix1.M43 * num;
            result.M44 = matrix1.M44 * num;
            return result;
        };
        Matrix4.prototype.SetDivideFloat = function (matrix1, divider) {
            var num = 1 / divider;
            this.M11 = matrix1.M11 * num;
            this.M12 = matrix1.M12 * num;
            this.M13 = matrix1.M13 * num;
            this.M14 = matrix1.M14 * num;
            this.M21 = matrix1.M21 * num;
            this.M22 = matrix1.M22 * num;
            this.M23 = matrix1.M23 * num;
            this.M24 = matrix1.M24 * num;
            this.M31 = matrix1.M31 * num;
            this.M32 = matrix1.M32 * num;
            this.M33 = matrix1.M33 * num;
            this.M34 = matrix1.M34 * num;
            this.M41 = matrix1.M41 * num;
            this.M42 = matrix1.M42 * num;
            this.M43 = matrix1.M43 * num;
            this.M44 = matrix1.M44 * num;
            return this;
        };
        Object.defineProperty(Matrix4.prototype, "M1", {
            get: function () {
                return Vector4.New().Set(this.M11, this.M12, this.M13, this.M14);
            },
            set: function (value) {
                this.M11 = value.X;
                this.M12 = value.Y;
                this.M13 = value.Z;
                this.M14 = value.W;
            },
            enumerable: true,
            configurable: true
        });
        Matrix4.prototype.GetM1 = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.Set(this.M11, this.M12, this.M13, this.M14);
            return result;
        };
        Object.defineProperty(Matrix4.prototype, "M2", {
            get: function () {
                return Vector4.New().Set(this.M21, this.M22, this.M23, this.M24);
            },
            set: function (value) {
                this.M21 = value.X;
                this.M22 = value.Y;
                this.M23 = value.Z;
                this.M24 = value.W;
            },
            enumerable: true,
            configurable: true
        });
        Matrix4.prototype.GetM2 = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.Set(this.M21, this.M22, this.M23, this.M24);
            return result;
        };
        Object.defineProperty(Matrix4.prototype, "M3", {
            get: function () {
                return Vector4.New().Set(this.M31, this.M32, this.M33, this.M34);
            },
            set: function (value) {
                this.M31 = value.X;
                this.M32 = value.Y;
                this.M33 = value.Z;
                this.M34 = value.W;
            },
            enumerable: true,
            configurable: true
        });
        Matrix4.prototype.GetM3 = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.Set(this.M31, this.M32, this.M33, this.M34);
            return result;
        };
        Object.defineProperty(Matrix4.prototype, "M4", {
            get: function () {
                return Vector4.New().Set(this.M41, this.M42, this.M43, this.M44);
            },
            set: function (value) {
                this.M41 = value.X;
                this.M42 = value.Y;
                this.M43 = value.Z;
                this.M44 = value.W;
            },
            enumerable: true,
            configurable: true
        });
        Matrix4.prototype.GetM4 = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector4.New();
            result.Set(this.M41, this.M42, this.M43, this.M44);
            return result;
        };
        Matrix4.New = function () {
            var res = Matrix4._cache.New();
            res.SetIdentity();
            return res;
        };
        Matrix4.Release = function (v) {
            Matrix4._cache.Release(v);
        };
        Matrix4.prototype.Release = function () {
            Matrix4.Release(this);
        };
        Matrix4.tv0 = Vector3.Zero;
        Matrix4.tv1 = Vector3.Zero;
        Matrix4.tv2 = Vector3.Zero;
        Matrix4.tv3 = Vector3.Zero;
        Matrix4._cache = new Cache(Matrix4);
        return Matrix4;
    }());
    U1.Matrix4 = Matrix4;
    var Quaternion = (function () {
        function Quaternion(x, y, z, w) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (z === void 0) { z = 0; }
            if (w === void 0) { w = 1; }
            this.X = x;
            this.Y = y;
            this.Z = z;
            this.W = w;
        }
        Quaternion.prototype.ConvertFromStr = function (value) {
            var items = U1.UValueUtil.ConvertNumberArrFromString(value);
            this.X = items.length > 0 ? items[0] : 0;
            this.Y = items.length > 1 ? items[1] : 0;
            this.Z = items.length > 2 ? items[2] : 0;
            this.W = items.length > 3 ? items[3] : 0;
        };
        Quaternion.prototype.ConvertToStr = function () {
            return U1.UValueUtil.ConvertNumberArrToString(this.X, this.Y, this.Z, this.W);
        };
        Quaternion.prototype.Equals = function (other) {
            return this.X == other.X && this.Y == other.Y && this.Z == other.Z && this.W == other.W;
        };
        Quaternion.prototype.CopyFrom = function (other) {
            this.X = other.X;
            this.Y = other.Y;
            this.Z = other.Z;
            this.W = other.W;
        };
        Quaternion.prototype.Clone = function () {
            var copy = new Quaternion();
            copy.CopyFrom(this);
            return copy;
        };
        Object.defineProperty(Quaternion, "Identity", {
            get: function () {
                return new Quaternion();
            },
            enumerable: true,
            configurable: true
        });
        Quaternion.prototype.LengthSquareduared = function () {
            return ((((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W));
        };
        Quaternion.prototype.Length = function () {
            var num = (((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W);
            return (Math.sqrt(num));
        };
        Quaternion.prototype.Normalize = function () {
            var num2 = (((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W);
            var num = 1 / (Math.sqrt(num2));
            this.X *= num;
            this.Y *= num;
            this.Z *= num;
            this.W *= num;
        };
        Quaternion.Normalize = function (quaternion, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Quaternion.New();
            var num2 = (((quaternion.X * quaternion.X) + (quaternion.Y * quaternion.Y)) + (quaternion.Z * quaternion.Z)) + (quaternion.W * quaternion.W);
            var num = 1 / (Math.sqrt(num2));
            result.X = quaternion.X * num;
            result.Y = quaternion.Y * num;
            result.Z = quaternion.Z * num;
            result.W = quaternion.W * num;
            return result;
        };
        Quaternion.prototype.SetNormalize = function (quaternion) {
            var num2 = (((quaternion.X * quaternion.X) + (quaternion.Y * quaternion.Y)) + (quaternion.Z * quaternion.Z)) + (quaternion.W * quaternion.W);
            var num = 1 / (Math.sqrt(num2));
            this.X = quaternion.X * num;
            this.Y = quaternion.Y * num;
            this.Z = quaternion.Z * num;
            this.W = quaternion.W * num;
            return this;
        };
        Quaternion.prototype.Conjugate = function () {
            this.X = -this.X;
            this.Y = -this.Y;
            this.Z = -this.Z;
        };
        Quaternion.Conjugate = function (value, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Quaternion.New();
            result.X = -value.X;
            result.Y = -value.Y;
            result.Z = -value.Z;
            result.W = value.W;
            return result;
        };
        Quaternion.prototype.SetConjugate = function (value) {
            this.X = -value.X;
            this.Y = -value.Y;
            this.Z = -value.Z;
            this.W = value.W;
            return this;
        };
        Quaternion.Inverse = function (quaternion, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Quaternion.New();
            var num2 = (((quaternion.X * quaternion.X) + (quaternion.Y * quaternion.Y)) + (quaternion.Z * quaternion.Z)) + (quaternion.W * quaternion.W);
            var num = 1 / num2;
            result.X = -quaternion.X * num;
            result.Y = -quaternion.Y * num;
            result.Z = -quaternion.Z * num;
            result.W = quaternion.W * num;
            return result;
        };
        Quaternion.prototype.SetInverse = function (quaternion) {
            var num2 = (((quaternion.X * quaternion.X) + (quaternion.Y * quaternion.Y)) + (quaternion.Z * quaternion.Z)) + (quaternion.W * quaternion.W);
            var num = 1 / num2;
            this.X = -quaternion.X * num;
            this.Y = -quaternion.Y * num;
            this.Z = -quaternion.Z * num;
            this.W = quaternion.W * num;
            return this;
        };
        Quaternion.prototype.Inverse = function () {
            var num2 = (((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W);
            var num = 1 / num2;
            this.X = -this.X * num;
            this.Y = -this.Y * num;
            this.Z = -this.Z * num;
            this.W = this.W * num;
            return this;
        };
        Quaternion.CreateFromAxisAngle = function (axis, angle, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Quaternion.New();
            var num2 = angle * 0.5;
            var num = Math.sin(num2);
            var num3 = Math.cos(num2);
            result.X = axis.X * num;
            result.Y = axis.Y * num;
            result.Z = axis.Z * num;
            result.W = num3;
            return result;
        };
        Quaternion.prototype.SetCreateFromAxisAngle = function (axis, angle) {
            var num2 = angle * 0.5;
            var num = Math.sin(num2);
            var num3 = Math.cos(num2);
            this.X = axis.X * num;
            this.Y = axis.Y * num;
            this.Z = axis.Z * num;
            this.W = num3;
            return this;
        };
        Quaternion.CreateFromYawPitchRoll = function (yaw, pitch, roll, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Quaternion.New();
            var num9 = roll * 0.5;
            var num6 = Math.sin(num9);
            var num5 = Math.cos(num9);
            var num8 = pitch * 0.5;
            var num4 = Math.sin(num8);
            var num3 = Math.cos(num8);
            var num7 = yaw * 0.5;
            var num2 = Math.sin(num7);
            var num = Math.cos(num7);
            result.X = ((num * num4) * num5) + ((num2 * num3) * num6);
            result.Y = ((num2 * num3) * num5) - ((num * num4) * num6);
            result.Z = ((num * num3) * num6) - ((num2 * num4) * num5);
            result.W = ((num * num3) * num5) + ((num2 * num4) * num6);
            return result;
        };
        Quaternion.prototype.SetCreateFromYawPitchRoll = function (yaw, pitch, roll) {
            var num9 = roll * 0.5;
            var num6 = Math.sin(num9);
            var num5 = Math.cos(num9);
            var num8 = pitch * 0.5;
            var num4 = Math.sin(num8);
            var num3 = Math.cos(num8);
            var num7 = yaw * 0.5;
            var num2 = Math.sin(num7);
            var num = Math.cos(num7);
            this.X = ((num * num4) * num5) + ((num2 * num3) * num6);
            this.Y = ((num2 * num3) * num5) - ((num * num4) * num6);
            this.Z = ((num * num3) * num6) - ((num2 * num4) * num5);
            this.W = ((num * num3) * num5) + ((num2 * num4) * num6);
            return this;
        };
        Quaternion.CreateFromRotationMatrix = function (matrix, result) {
            if (result === void 0) { result = null; }
            var num8 = (matrix.M11 + matrix.M22) + matrix.M33;
            if (result == null)
                result = Quaternion.New();
            if (num8 > 0) {
                var num = Math.sqrt((num8 + 1));
                result.W = num * 0.5;
                num = 0.5 / num;
                result.X = (matrix.M23 - matrix.M32) * num;
                result.Y = (matrix.M31 - matrix.M13) * num;
                result.Z = (matrix.M12 - matrix.M21) * num;
                return result;
            }
            if ((matrix.M11 >= matrix.M22) && (matrix.M11 >= matrix.M33)) {
                var num7 = Math.sqrt((((1 + matrix.M11) - matrix.M22) - matrix.M33));
                var num4 = 0.5 / num7;
                result.X = 0.5 * num7;
                result.Y = (matrix.M12 + matrix.M21) * num4;
                result.Z = (matrix.M13 + matrix.M31) * num4;
                result.W = (matrix.M23 - matrix.M32) * num4;
                return result;
            }
            if (matrix.M22 > matrix.M33) {
                var num6 = Math.sqrt((((1 + matrix.M22) - matrix.M11) - matrix.M33));
                var num3 = 0.5 / num6;
                result.X = (matrix.M21 + matrix.M12) * num3;
                result.Y = 0.5 * num6;
                result.Z = (matrix.M32 + matrix.M23) * num3;
                result.W = (matrix.M31 - matrix.M13) * num3;
                return result;
            }
            var num5 = Math.sqrt((((1 + matrix.M33) - matrix.M11) - matrix.M22));
            var num2 = 0.5 / num5;
            result.X = (matrix.M31 + matrix.M13) * num2;
            result.Y = (matrix.M32 + matrix.M23) * num2;
            result.Z = 0.5 * num5;
            result.W = (matrix.M12 - matrix.M21) * num2;
            return result;
        };
        Quaternion.prototype.SetCreateFromRotationMatrix = function (matrix) {
            var num8 = (matrix.M11 + matrix.M22) + matrix.M33;
            if (num8 > 0) {
                var num = Math.sqrt((num8 + 1));
                this.W = num * 0.5;
                num = 0.5 / num;
                this.X = (matrix.M23 - matrix.M32) * num;
                this.Y = (matrix.M31 - matrix.M13) * num;
                this.Z = (matrix.M12 - matrix.M21) * num;
                return this;
            }
            if ((matrix.M11 >= matrix.M22) && (matrix.M11 >= matrix.M33)) {
                var num7 = Math.sqrt((((1 + matrix.M11) - matrix.M22) - matrix.M33));
                var num4 = 0.5 / num7;
                this.X = 0.5 * num7;
                this.Y = (matrix.M12 + matrix.M21) * num4;
                this.Z = (matrix.M13 + matrix.M31) * num4;
                this.W = (matrix.M23 - matrix.M32) * num4;
                return this;
            }
            if (matrix.M22 > matrix.M33) {
                var num6 = Math.sqrt((((1 + matrix.M22) - matrix.M11) - matrix.M33));
                var num3 = 0.5 / num6;
                this.X = (matrix.M21 + matrix.M12) * num3;
                this.Y = 0.5 * num6;
                this.Z = (matrix.M32 + matrix.M23) * num3;
                this.W = (matrix.M31 - matrix.M13) * num3;
                return this;
            }
            var num5 = Math.sqrt((((1 + matrix.M33) - matrix.M11) - matrix.M22));
            var num2 = 0.5 / num5;
            this.X = (matrix.M31 + matrix.M13) * num2;
            this.Y = (matrix.M32 + matrix.M23) * num2;
            this.Z = 0.5 * num5;
            this.W = (matrix.M12 - matrix.M21) * num2;
            return this;
        };
        Quaternion.Dot = function (quaternion1, quaternion2) {
            return quaternion1.X * quaternion2.X
                + quaternion1.Y * quaternion2.Y
                + quaternion1.Z * quaternion2.Z
                + quaternion1.W * quaternion2.W;
        };
        Quaternion.Slerp = function (quaternion1, quaternion2, amount, result) {
            if (result === void 0) { result = null; }
            var num2;
            var num3;
            if (result == null)
                result = Quaternion.New();
            var num = amount;
            var num4 = (((quaternion1.X * quaternion2.X) + (quaternion1.Y * quaternion2.Y)) + (quaternion1.Z * quaternion2.Z)) + (quaternion1.W * quaternion2.W);
            var flag = false;
            if (num4 < 0) {
                flag = true;
                num4 = -num4;
            }
            if (num4 > 0.999999) {
                num3 = 1 - num;
                num2 = flag ? -num : num;
            }
            else {
                var num5 = Math.acos(num4);
                var num6 = (1.0 / Math.sin(num5));
                num3 = (Math.sin(((1 - num) * num5))) * num6;
                num2 = flag ? ((-Math.sin((num * num5))) * num6) : ((Math.sin((num * num5))) * num6);
            }
            result.X = (num3 * quaternion1.X) + (num2 * quaternion2.X);
            result.Y = (num3 * quaternion1.Y) + (num2 * quaternion2.Y);
            result.Z = (num3 * quaternion1.Z) + (num2 * quaternion2.Z);
            result.W = (num3 * quaternion1.W) + (num2 * quaternion2.W);
            return result;
        };
        Quaternion.prototype.SetSlerp = function (quaternion1, quaternion2, amount) {
            var num2;
            var num3;
            var num = amount;
            var num4 = (((quaternion1.X * quaternion2.X) + (quaternion1.Y * quaternion2.Y)) + (quaternion1.Z * quaternion2.Z)) + (quaternion1.W * quaternion2.W);
            var flag = false;
            if (num4 < 0) {
                flag = true;
                num4 = -num4;
            }
            if (num4 > 0.999999) {
                num3 = 1 - num;
                num2 = flag ? -num : num;
            }
            else {
                var num5 = Math.acos(num4);
                var num6 = (1.0 / Math.sin(num5));
                num3 = (Math.sin(((1 - num) * num5))) * num6;
                num2 = flag ? ((-Math.sin((num * num5))) * num6) : ((Math.sin((num * num5))) * num6);
            }
            this.X = (num3 * quaternion1.X) + (num2 * quaternion2.X);
            this.Y = (num3 * quaternion1.Y) + (num2 * quaternion2.Y);
            this.Z = (num3 * quaternion1.Z) + (num2 * quaternion2.Z);
            this.W = (num3 * quaternion1.W) + (num2 * quaternion2.W);
            return this;
        };
        Quaternion.prototype.Slerp = function (quaternion2, amount) {
            var num2;
            var num3;
            var num = amount;
            var num4 = (((this.X * quaternion2.X) + (this.Y * quaternion2.Y)) + (this.Z * quaternion2.Z)) + (this.W * quaternion2.W);
            var flag = false;
            if (num4 < 0) {
                flag = true;
                num4 = -num4;
            }
            if (num4 > 0.999999) {
                num3 = 1 - num;
                num2 = flag ? -num : num;
            }
            else {
                var num5 = Math.acos(num4);
                var num6 = (1.0 / Math.sin(num5));
                num3 = (Math.sin(((1 - num) * num5))) * num6;
                num2 = flag ? ((-Math.sin((num * num5))) * num6) : ((Math.sin((num * num5))) * num6);
            }
            this.X = (num3 * this.X) + (num2 * quaternion2.X);
            this.Y = (num3 * this.Y) + (num2 * quaternion2.Y);
            this.Z = (num3 * this.Z) + (num2 * quaternion2.Z);
            this.W = (num3 * this.W) + (num2 * quaternion2.W);
            return this;
        };
        Quaternion.Lerp = function (quaternion1, quaternion2, amount, result) {
            if (result === void 0) { result = null; }
            var num = amount;
            var num2 = 1 - num;
            if (result == null)
                result = Quaternion.New();
            var num5 = (((quaternion1.X * quaternion2.X) + (quaternion1.Y * quaternion2.Y)) + (quaternion1.Z * quaternion2.Z)) + (quaternion1.W * quaternion2.W);
            if (num5 >= 0) {
                result.X = (num2 * quaternion1.X) + (num * quaternion2.X);
                result.Y = (num2 * quaternion1.Y) + (num * quaternion2.Y);
                result.Z = (num2 * quaternion1.Z) + (num * quaternion2.Z);
                result.W = (num2 * quaternion1.W) + (num * quaternion2.W);
            }
            else {
                result.X = (num2 * quaternion1.X) - (num * quaternion2.X);
                result.Y = (num2 * quaternion1.Y) - (num * quaternion2.Y);
                result.Z = (num2 * quaternion1.Z) - (num * quaternion2.Z);
                result.W = (num2 * quaternion1.W) - (num * quaternion2.W);
            }
            var num4 = (((result.X * result.X) + (result.Y * result.Y)) + (result.Z * result.Z)) + (result.W * result.W);
            var num3 = 1 / (Math.sqrt(num4));
            result.X *= num3;
            result.Y *= num3;
            result.Z *= num3;
            result.W *= num3;
            return result;
        };
        Quaternion.prototype.SetLerp = function (quaternion1, quaternion2, amount) {
            var num = amount;
            var num2 = 1 - num;
            var num5 = (((quaternion1.X * quaternion2.X) + (quaternion1.Y * quaternion2.Y)) + (quaternion1.Z * quaternion2.Z)) + (quaternion1.W * quaternion2.W);
            if (num5 >= 0) {
                this.X = (num2 * quaternion1.X) + (num * quaternion2.X);
                this.Y = (num2 * quaternion1.Y) + (num * quaternion2.Y);
                this.Z = (num2 * quaternion1.Z) + (num * quaternion2.Z);
                this.W = (num2 * quaternion1.W) + (num * quaternion2.W);
            }
            else {
                this.X = (num2 * quaternion1.X) - (num * quaternion2.X);
                this.Y = (num2 * quaternion1.Y) - (num * quaternion2.Y);
                this.Z = (num2 * quaternion1.Z) - (num * quaternion2.Z);
                this.W = (num2 * quaternion1.W) - (num * quaternion2.W);
            }
            var num4 = (((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W);
            var num3 = 1 / (Math.sqrt(num4));
            this.X *= num3;
            this.Y *= num3;
            this.Z *= num3;
            this.W *= num3;
            return this;
        };
        Quaternion.prototype.Lerp = function (quaternion2, amount) {
            var num = amount;
            var num2 = 1 - num;
            var num5 = (((this.X * quaternion2.X) + (this.Y * quaternion2.Y)) + (this.Z * quaternion2.Z)) + (this.W * quaternion2.W);
            if (num5 >= 0) {
                this.X = (num2 * this.X) + (num * quaternion2.X);
                this.Y = (num2 * this.Y) + (num * quaternion2.Y);
                this.Z = (num2 * this.Z) + (num * quaternion2.Z);
                this.W = (num2 * this.W) + (num * quaternion2.W);
            }
            else {
                this.X = (num2 * this.X) - (num * quaternion2.X);
                this.Y = (num2 * this.Y) - (num * quaternion2.Y);
                this.Z = (num2 * this.Z) - (num * quaternion2.Z);
                this.W = (num2 * this.W) - (num * quaternion2.W);
            }
            var num4 = (((this.X * this.X) + (this.Y * this.Y)) + (this.Z * this.Z)) + (this.W * this.W);
            var num3 = 1 / (Math.sqrt(num4));
            this.X *= num3;
            this.Y *= num3;
            this.Z *= num3;
            this.W *= num3;
            return this;
        };
        Quaternion.Concatenate = function (value1, value2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Quaternion.New();
            var x = value2.X;
            var y = value2.Y;
            var z = value2.Z;
            var w = value2.W;
            var num4 = value1.X;
            var num3 = value1.Y;
            var num2 = value1.Z;
            var num = value1.W;
            var num12 = (y * num2) - (z * num3);
            var num11 = (z * num4) - (x * num2);
            var num10 = (x * num3) - (y * num4);
            var num9 = ((x * num4) + (y * num3)) + (z * num2);
            result.X = ((x * num) + (num4 * w)) + num12;
            result.Y = ((y * num) + (num3 * w)) + num11;
            result.Z = ((z * num) + (num2 * w)) + num10;
            result.W = (w * num) - num9;
            return result;
        };
        Quaternion.prototype.SetConcatenate = function (value1, value2) {
            var x = value2.X;
            var y = value2.Y;
            var z = value2.Z;
            var w = value2.W;
            var num4 = value1.X;
            var num3 = value1.Y;
            var num2 = value1.Z;
            var num = value1.W;
            var num12 = (y * num2) - (z * num3);
            var num11 = (z * num4) - (x * num2);
            var num10 = (x * num3) - (y * num4);
            var num9 = ((x * num4) + (y * num3)) + (z * num2);
            this.X = ((x * num) + (num4 * w)) + num12;
            this.Y = ((y * num) + (num3 * w)) + num11;
            this.Z = ((z * num) + (num2 * w)) + num10;
            this.W = (w * num) - num9;
            return this;
        };
        Quaternion.prototype.Concatenate = function (value2) {
            var x = value2.X;
            var y = value2.Y;
            var z = value2.Z;
            var w = value2.W;
            var num4 = this.X;
            var num3 = this.Y;
            var num2 = this.Z;
            var num = this.W;
            var num12 = (y * num2) - (z * num3);
            var num11 = (z * num4) - (x * num2);
            var num10 = (x * num3) - (y * num4);
            var num9 = ((x * num4) + (y * num3)) + (z * num2);
            this.X = ((x * num) + (num4 * w)) + num12;
            this.Y = ((y * num) + (num3 * w)) + num11;
            this.Z = ((z * num) + (num2 * w)) + num10;
            this.W = (w * num) - num9;
            return this;
        };
        Quaternion.Negate = function (quaternion) {
            var quaternion2 = new Quaternion();
            quaternion2.X = -quaternion.X;
            quaternion2.Y = -quaternion.Y;
            quaternion2.Z = -quaternion.Z;
            quaternion2.W = -quaternion.W;
            return quaternion2;
        };
        Quaternion.prototype.SetNegate = function (quaternion) {
            this.X = -quaternion.X;
            this.Y = -quaternion.Y;
            this.Z = -quaternion.Z;
            this.W = -quaternion.W;
            return this;
        };
        Quaternion.prototype.Negate = function () {
            this.X = -this.X;
            this.Y = -this.Y;
            this.Z = -this.Z;
            this.W = -this.W;
            return this;
        };
        Quaternion.Add = function (quaternion1, quaternion2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Quaternion.New();
            result.X = quaternion1.X + quaternion2.X;
            result.Y = quaternion1.Y + quaternion2.Y;
            result.Z = quaternion1.Z + quaternion2.Z;
            result.W = quaternion1.W + quaternion2.W;
            return result;
        };
        Quaternion.prototype.SetAdd = function (quaternion1, quaternion2) {
            this.X = quaternion1.X + quaternion2.X;
            this.Y = quaternion1.Y + quaternion2.Y;
            this.Z = quaternion1.Z + quaternion2.Z;
            this.W = quaternion1.W + quaternion2.W;
            return this;
        };
        Quaternion.prototype.Add = function (quaternion2) {
            this.X = this.X + quaternion2.X;
            this.Y = this.Y + quaternion2.Y;
            this.Z = this.Z + quaternion2.Z;
            this.W = this.W + quaternion2.W;
            return this;
        };
        Quaternion.Subtract = function (quaternion1, quaternion2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Quaternion.New();
            result.X = quaternion1.X - quaternion2.X;
            result.Y = quaternion1.Y - quaternion2.Y;
            result.Z = quaternion1.Z - quaternion2.Z;
            result.W = quaternion1.W - quaternion2.W;
            return result;
        };
        Quaternion.prototype.SetSubtract = function (quaternion1, quaternion2) {
            this.X = quaternion1.X - quaternion2.X;
            this.Y = quaternion1.Y - quaternion2.Y;
            this.Z = quaternion1.Z - quaternion2.Z;
            this.W = quaternion1.W - quaternion2.W;
            return this;
        };
        Quaternion.prototype.Subtract = function (quaternion2) {
            this.X = this.X - quaternion2.X;
            this.Y = this.Y - quaternion2.Y;
            this.Z = this.Z - quaternion2.Z;
            this.W = this.W - quaternion2.W;
            return this;
        };
        Quaternion.Multiply = function (quaternion1, quaternion2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Quaternion.New();
            var x = quaternion1.X;
            var y = quaternion1.Y;
            var z = quaternion1.Z;
            var w = quaternion1.W;
            var num4 = quaternion2.X;
            var num3 = quaternion2.Y;
            var num2 = quaternion2.Z;
            var num = quaternion2.W;
            var num12 = (y * num2) - (z * num3);
            var num11 = (z * num4) - (x * num2);
            var num10 = (x * num3) - (y * num4);
            var num9 = ((x * num4) + (y * num3)) + (z * num2);
            result.X = ((x * num) + (num4 * w)) + num12;
            result.Y = ((y * num) + (num3 * w)) + num11;
            result.Z = ((z * num) + (num2 * w)) + num10;
            result.W = (w * num) - num9;
            return result;
        };
        Quaternion.prototype.SetMultiply = function (quaternion1, quaternion2) {
            var x = quaternion1.X;
            var y = quaternion1.Y;
            var z = quaternion1.Z;
            var w = quaternion1.W;
            var num4 = quaternion2.X;
            var num3 = quaternion2.Y;
            var num2 = quaternion2.Z;
            var num = quaternion2.W;
            var num12 = (y * num2) - (z * num3);
            var num11 = (z * num4) - (x * num2);
            var num10 = (x * num3) - (y * num4);
            var num9 = ((x * num4) + (y * num3)) + (z * num2);
            this.X = ((x * num) + (num4 * w)) + num12;
            this.Y = ((y * num) + (num3 * w)) + num11;
            this.Z = ((z * num) + (num2 * w)) + num10;
            this.W = (w * num) - num9;
            return this;
        };
        Quaternion.prototype.Multiply = function (quaternion2) {
            var x = this.X;
            var y = this.Y;
            var z = this.Z;
            var w = this.W;
            var num4 = quaternion2.X;
            var num3 = quaternion2.Y;
            var num2 = quaternion2.Z;
            var num = quaternion2.W;
            var num12 = (y * num2) - (z * num3);
            var num11 = (z * num4) - (x * num2);
            var num10 = (x * num3) - (y * num4);
            var num9 = ((x * num4) + (y * num3)) + (z * num2);
            this.X = ((x * num) + (num4 * w)) + num12;
            this.Y = ((y * num) + (num3 * w)) + num11;
            this.Z = ((z * num) + (num2 * w)) + num10;
            this.W = (w * num) - num9;
            return this;
        };
        Quaternion.Scale = function (quaternion1, scaleFactor, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Quaternion.New();
            result.X = quaternion1.X * scaleFactor;
            result.Y = quaternion1.Y * scaleFactor;
            result.Z = quaternion1.Z * scaleFactor;
            result.W = quaternion1.W * scaleFactor;
            return result;
        };
        Quaternion.prototype.SetScale = function (quaternion1, scaleFactor) {
            this.X = quaternion1.X * scaleFactor;
            this.Y = quaternion1.Y * scaleFactor;
            this.Z = quaternion1.Z * scaleFactor;
            this.W = quaternion1.W * scaleFactor;
            return this;
        };
        Quaternion.prototype.Scale = function (scaleFactor) {
            this.X = this.X * scaleFactor;
            this.Y = this.Y * scaleFactor;
            this.Z = this.Z * scaleFactor;
            this.W = this.W * scaleFactor;
            return this;
        };
        Quaternion.Divide = function (quaternion1, quaternion2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Quaternion.New();
            var x = quaternion1.X;
            var y = quaternion1.Y;
            var z = quaternion1.Z;
            var w = quaternion1.W;
            var num14 = (((quaternion2.X * quaternion2.X) + (quaternion2.Y * quaternion2.Y)) + (quaternion2.Z * quaternion2.Z)) + (quaternion2.W * quaternion2.W);
            var num5 = 1 / num14;
            var num4 = -quaternion2.X * num5;
            var num3 = -quaternion2.Y * num5;
            var num2 = -quaternion2.Z * num5;
            var num = quaternion2.W * num5;
            var num13 = (y * num2) - (z * num3);
            var num12 = (z * num4) - (x * num2);
            var num11 = (x * num3) - (y * num4);
            var num10 = ((x * num4) + (y * num3)) + (z * num2);
            result.X = ((x * num) + (num4 * w)) + num13;
            result.Y = ((y * num) + (num3 * w)) + num12;
            result.Z = ((z * num) + (num2 * w)) + num11;
            result.W = (w * num) - num10;
            return result;
        };
        Quaternion.prototype.SetDivide = function (quaternion1, quaternion2) {
            var x = quaternion1.X;
            var y = quaternion1.Y;
            var z = quaternion1.Z;
            var w = quaternion1.W;
            var num14 = (((quaternion2.X * quaternion2.X) + (quaternion2.Y * quaternion2.Y)) + (quaternion2.Z * quaternion2.Z)) + (quaternion2.W * quaternion2.W);
            var num5 = 1 / num14;
            var num4 = -quaternion2.X * num5;
            var num3 = -quaternion2.Y * num5;
            var num2 = -quaternion2.Z * num5;
            var num = quaternion2.W * num5;
            var num13 = (y * num2) - (z * num3);
            var num12 = (z * num4) - (x * num2);
            var num11 = (x * num3) - (y * num4);
            var num10 = ((x * num4) + (y * num3)) + (z * num2);
            this.X = ((x * num) + (num4 * w)) + num13;
            this.Y = ((y * num) + (num3 * w)) + num12;
            this.Z = ((z * num) + (num2 * w)) + num11;
            this.W = (w * num) - num10;
            return this;
        };
        Quaternion.prototype.Divide = function (quaternion2) {
            var x = this.X;
            var y = this.Y;
            var z = this.Z;
            var w = this.W;
            var num14 = (((quaternion2.X * quaternion2.X) + (quaternion2.Y * quaternion2.Y)) + (quaternion2.Z * quaternion2.Z)) + (quaternion2.W * quaternion2.W);
            var num5 = 1 / num14;
            var num4 = -quaternion2.X * num5;
            var num3 = -quaternion2.Y * num5;
            var num2 = -quaternion2.Z * num5;
            var num = quaternion2.W * num5;
            var num13 = (y * num2) - (z * num3);
            var num12 = (z * num4) - (x * num2);
            var num11 = (x * num3) - (y * num4);
            var num10 = ((x * num4) + (y * num3)) + (z * num2);
            this.X = ((x * num) + (num4 * w)) + num13;
            this.Y = ((y * num) + (num3 * w)) + num12;
            this.Z = ((z * num) + (num2 * w)) + num11;
            this.W = (w * num) - num10;
            return this;
        };
        Quaternion.prototype.ToAxisAngle = function () {
            var q1 = this;
            var x, y, z;
            if (q1.W > 1)
                q1.Normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised
            var angle = 2 * Math.acos(q1.W);
            var s = Math.sqrt(1 - q1.W * q1.W); // assuming quaternion normalised then w is less than 1, so term always positive.
            if (s < U1.PRECISION) {
                // test to avoid divide by zero, s is always positive due to sqrt
                // if s close to zero then direction of axis not important
                x = q1.X; // if it is important that axis is normalised then replace with x=1; y=z=0;
                y = q1.Y;
                z = q1.Z;
            }
            else {
                x = q1.X / s; // normalise axis
                y = q1.Y / s;
                z = q1.Z / s;
            }
            var axis = new Vector3(x, y, z);
            return { Axis: axis, Angle: angle };
        };
        Quaternion.New = function () {
            var res = Quaternion._cache.New();
            res.X = 0;
            res.Y = 0;
            res.Z = 0;
            res.W = 1;
            return res;
        };
        Quaternion.Release = function (v) {
            Quaternion._cache.Release(v);
        };
        Quaternion.prototype.Release = function () {
            Quaternion.Release(this);
        };
        Quaternion._cache = new Cache(Quaternion);
        return Quaternion;
    }());
    U1.Quaternion = Quaternion;
    (function (PlaneIntersectionTypeEnum) {
        PlaneIntersectionTypeEnum[PlaneIntersectionTypeEnum["Front"] = 0] = "Front";
        PlaneIntersectionTypeEnum[PlaneIntersectionTypeEnum["Back"] = 1] = "Back";
        PlaneIntersectionTypeEnum[PlaneIntersectionTypeEnum["Intersecting"] = 2] = "Intersecting";
    })(U1.PlaneIntersectionTypeEnum || (U1.PlaneIntersectionTypeEnum = {}));
    var PlaneIntersectionTypeEnum = U1.PlaneIntersectionTypeEnum;
    (function (ContainmentTypeEnum) {
        ContainmentTypeEnum[ContainmentTypeEnum["Disjoint"] = 0] = "Disjoint";
        ContainmentTypeEnum[ContainmentTypeEnum["Contains"] = 1] = "Contains";
        ContainmentTypeEnum[ContainmentTypeEnum["Intersects"] = 2] = "Intersects";
    })(U1.ContainmentTypeEnum || (U1.ContainmentTypeEnum = {}));
    var ContainmentTypeEnum = U1.ContainmentTypeEnum;
    var Plane = (function () {
        function Plane(a, b, c, d) {
            if (a === void 0) { a = 0; }
            if (b === void 0) { b = 0; }
            if (c === void 0) { c = 0; }
            if (d === void 0) { d = 0; }
            this.Normal = new Vector3(a, b, c);
            this.D = d;
        }
        Plane.prototype.ConvertFromStr = function (value) {
            this.Normal = new Vector3();
            var items = U1.UValueUtil.ConvertNumberArrFromString(value);
            var idx = 0;
            this.Normal.X = items.length > idx ? items[idx++] : 0;
            this.Normal.Y = items.length > idx ? items[idx++] : 0;
            this.Normal.Z = items.length > idx ? items[idx++] : 0;
            this.D = items.length > idx ? items[idx] : 0;
        };
        Plane.prototype.ConvertToStr = function () {
            return U1.UValueUtil.ConvertNumberArrToString(this.Normal.X, this.Normal.Y, this.Normal.Z, this.D);
        };
        Plane.prototype.Equals = function (other) {
            return this.Normal.X == other.Normal.X
                && this.Normal.Y == other.Normal.Y
                && this.Normal.Z == other.Normal.Z
                && this.D == other.D;
        };
        Plane.prototype.Set = function (nx, ny, nz, d) {
            this.Normal.X = nx;
            this.Normal.Y = ny;
            this.Normal.Z = nz;
            this.D = d;
            return this;
        };
        Plane.prototype.Clone = function () {
            var result = Plane.New().Set(this.Normal.X, this.Normal.Y, this.Normal.Z, this.D);
            return result;
        };
        Plane.prototype.CopyFrom = function (source) {
            this.Normal.CopyFrom(source.Normal);
            this.D = source.D;
            return this;
        };
        Plane.Zero = function () {
            return new Plane(0, 0, 0, 0);
        };
        Plane.prototype.SetZeroRef = function () {
            this.Normal.X = 0;
            this.Normal.Y = 0;
            this.Normal.Z = 0;
            this.D = 0;
            return this;
        };
        Plane.prototype.Normalize = function () {
            var num2 = ((this.Normal.X * this.Normal.X) + (this.Normal.Y * this.Normal.Y)) + (this.Normal.Z * this.Normal.Z);
            if (Math.abs((num2 - 1)) >= 1.192093E-07) {
                var num = 1 / (Math.sqrt(num2));
                this.Normal.X *= num;
                this.Normal.Y *= num;
                this.Normal.Z *= num;
                this.D *= num;
            }
            return this;
        };
        Plane.Normalize = function (value, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Plane.New();
            var num2 = ((value.Normal.X * value.Normal.X) + (value.Normal.Y * value.Normal.Y)) + (value.Normal.Z * value.Normal.Z);
            if (Math.abs((num2 - 1)) < 1.192093E-07) {
                result.Normal = value.Normal;
                result.D = value.D;
                return result;
            }
            var num = 1 / (Math.sqrt(num2));
            result.Normal.X = value.Normal.X * num;
            result.Normal.Y = value.Normal.Y * num;
            result.Normal.Z = value.Normal.Z * num;
            result.D = value.D * num;
            return result;
        };
        Plane.prototype.SetNormalize = function (value) {
            var num2 = ((value.Normal.X * value.Normal.X) + (value.Normal.Y * value.Normal.Y)) + (value.Normal.Z * value.Normal.Z);
            if (Math.abs((num2 - 1)) < 1.192093E-07) {
                this.Normal = value.Normal;
                this.D = value.D;
                return this;
            }
            var num = 1 / (Math.sqrt(num2));
            this.Normal.X = value.Normal.X * num;
            this.Normal.Y = value.Normal.Y * num;
            this.Normal.Z = value.Normal.Z * num;
            this.D = value.D * num;
            return this;
        };
        Plane.Transform = function (plane, matrix, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Plane.New();
            var matrix2 = Matrix4.Invert(matrix);
            var x = plane.Normal.X;
            var y = plane.Normal.Y;
            var z = plane.Normal.Z;
            var d = plane.D;
            result.Normal.X = (((x * matrix2.M11) + (y * matrix2.M12)) + (z * matrix2.M13)) + (d * matrix2.M14);
            result.Normal.Y = (((x * matrix2.M21) + (y * matrix2.M22)) + (z * matrix2.M23)) + (d * matrix2.M24);
            result.Normal.Z = (((x * matrix2.M31) + (y * matrix2.M32)) + (z * matrix2.M33)) + (d * matrix2.M34);
            result.D = (((x * matrix2.M41) + (y * matrix2.M42)) + (z * matrix2.M43)) + (d * matrix2.M44);
            matrix2.Release();
            return result;
        };
        Plane.prototype.SetTransform = function (plane, matrix) {
            var matrix2 = Matrix4.Invert(matrix);
            var x = plane.Normal.X;
            var y = plane.Normal.Y;
            var z = plane.Normal.Z;
            var d = plane.D;
            this.Normal.X = (((x * matrix2.M11) + (y * matrix2.M12)) + (z * matrix2.M13)) + (d * matrix2.M14);
            this.Normal.Y = (((x * matrix2.M21) + (y * matrix2.M22)) + (z * matrix2.M23)) + (d * matrix2.M24);
            this.Normal.Z = (((x * matrix2.M31) + (y * matrix2.M32)) + (z * matrix2.M33)) + (d * matrix2.M34);
            this.D = (((x * matrix2.M41) + (y * matrix2.M42)) + (z * matrix2.M43)) + (d * matrix2.M44);
            return this;
        };
        Plane.TransformQuaternion = function (plane, rotation, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Plane.New();
            var num15 = rotation.X + rotation.X;
            var num5 = rotation.Y + rotation.Y;
            var num = rotation.Z + rotation.Z;
            var num14 = rotation.W * num15;
            var num13 = rotation.W * num5;
            var num12 = rotation.W * num;
            var num11 = rotation.X * num15;
            var num10 = rotation.X * num5;
            var num9 = rotation.X * num;
            var num8 = rotation.Y * num5;
            var num7 = rotation.Y * num;
            var num6 = rotation.Z * num;
            var num24 = (1 - num8) - num6;
            var num23 = num10 - num12;
            var num22 = num9 + num13;
            var num21 = num10 + num12;
            var num20 = (1 - num11) - num6;
            var num19 = num7 - num14;
            var num18 = num9 - num13;
            var num17 = num7 + num14;
            var num16 = (1 - num11) - num8;
            var x = plane.Normal.X;
            var y = plane.Normal.Y;
            var z = plane.Normal.Z;
            result.Normal.X = ((x * num24) + (y * num23)) + (z * num22);
            result.Normal.Y = ((x * num21) + (y * num20)) + (z * num19);
            result.Normal.Z = ((x * num18) + (y * num17)) + (z * num16);
            result.D = plane.D;
            return result;
        };
        Plane.prototype.SetTransformQuaternion = function (plane, rotation) {
            var num15 = rotation.X + rotation.X;
            var num5 = rotation.Y + rotation.Y;
            var num = rotation.Z + rotation.Z;
            var num14 = rotation.W * num15;
            var num13 = rotation.W * num5;
            var num12 = rotation.W * num;
            var num11 = rotation.X * num15;
            var num10 = rotation.X * num5;
            var num9 = rotation.X * num;
            var num8 = rotation.Y * num5;
            var num7 = rotation.Y * num;
            var num6 = rotation.Z * num;
            var num24 = (1 - num8) - num6;
            var num23 = num10 - num12;
            var num22 = num9 + num13;
            var num21 = num10 + num12;
            var num20 = (1 - num11) - num6;
            var num19 = num7 - num14;
            var num18 = num9 - num13;
            var num17 = num7 + num14;
            var num16 = (1 - num11) - num8;
            var x = plane.Normal.X;
            var y = plane.Normal.Y;
            var z = plane.Normal.Z;
            this.Normal.X = ((x * num24) + (y * num23)) + (z * num22);
            this.Normal.Y = ((x * num21) + (y * num20)) + (z * num19);
            this.Normal.Z = ((x * num18) + (y * num17)) + (z * num16);
            this.D = plane.D;
            return this;
        };
        Plane.prototype.Dot = function (value) {
            return ((((this.Normal.X * value.X) + (this.Normal.Y * value.Y)) + (this.Normal.Z * value.Z)) + (this.D * value.W));
        };
        Plane.prototype.DotCoordinate = function (value) {
            return ((((this.Normal.X * value.X) + (this.Normal.Y * value.Y)) + (this.Normal.Z * value.Z)) + this.D);
        };
        Plane.prototype.DotNormal = function (value) {
            return (((this.Normal.X * value.X) + (this.Normal.Y * value.Y)) + (this.Normal.Z * value.Z));
        };
        Plane.prototype.IntersectsBoundingBox = function (box) {
            var vector = new Vector3();
            var vector2 = new Vector3();
            vector2.X = (this.Normal.X >= 0) ? box.Min.X : box.Max.X;
            vector2.Y = (this.Normal.Y >= 0) ? box.Min.Y : box.Max.Y;
            vector2.Z = (this.Normal.Z >= 0) ? box.Min.Z : box.Max.Z;
            vector.X = (this.Normal.X >= 0) ? box.Max.X : box.Min.X;
            vector.Y = (this.Normal.Y >= 0) ? box.Max.Y : box.Min.Y;
            vector.Z = (this.Normal.Z >= 0) ? box.Max.Z : box.Min.Z;
            var num = ((this.Normal.X * vector2.X) + (this.Normal.Y * vector2.Y)) + (this.Normal.Z * vector2.Z);
            if ((num + this.D) > 0) {
                return PlaneIntersectionTypeEnum.Front;
            }
            num = ((this.Normal.X * vector.X) + (this.Normal.Y * vector.Y)) + (this.Normal.Z * vector.Z);
            if ((num + this.D) < 0) {
                return PlaneIntersectionTypeEnum.Back;
            }
            return PlaneIntersectionTypeEnum.Intersecting;
        };
        /**
        * 선과 면의 교차
        * @return : 교차되면 선위의 위치, 아니면 null
        */
        Plane.prototype.IntersectsLine = function (position, direction) {
            var result = null;
            var num2 = ((this.Normal.X * direction.X) + (this.Normal.Y * direction.Y)) + (this.Normal.Z * direction.Z);
            if (Math.abs(num2) < 1E-05) {
                result = null;
            }
            else {
                var num3 = ((this.Normal.X * position.X) + (this.Normal.Y * position.Y)) + (this.Normal.Z * position.Z);
                var num = (-this.D - num3) / num2;
                if (-1E-05 < num && num < 1E-05)
                    result = 0;
                else
                    result = num;
            }
            return result;
        };
        Plane.prototype.Intersects = function (frustum) {
            if (null == frustum) {
                throw "NullNotAllowed";
            }
            return frustum.IntersectsPlane(this);
        };
        Plane.prototype.IntersectsBoundingSphere = function (sphere) {
            var num2 = ((sphere.Center.X * this.Normal.X) + (sphere.Center.Y * this.Normal.Y)) + (sphere.Center.Z * this.Normal.Z);
            var num = num2 + this.D;
            if (num > sphere.Radius) {
                return PlaneIntersectionTypeEnum.Front;
            }
            if (num < -sphere.Radius) {
                return PlaneIntersectionTypeEnum.Back;
            }
            return PlaneIntersectionTypeEnum.Intersecting;
        };
        Plane.FromPointNormal = function (point, normal, result) {
            if (result === void 0) { result = null; }
            normal = Vector3.Normalize(normal);
            normal.Normalize();
            var d = Vector3.Dot(point, normal);
            if (result == null)
                result = Plane.New();
            result.Set(normal.X, normal.Y, normal.Z, -d);
            normal.Release();
            return result;
        };
        Plane.prototype.SetFromPointNormal = function (point, normal) {
            this.Normal.SetNormalize(normal);
            var d = Vector3.Dot(point, this.Normal);
            this.D = -d;
            return this;
        };
        Plane.FromTriangle = function (point1, point2, point3, result) {
            if (result === void 0) { result = null; }
            var num10 = point2.X - point1.X;
            var num9 = point2.Y - point1.Y;
            var num8 = point2.Z - point1.Z;
            var num7 = point3.X - point1.X;
            var num6 = point3.Y - point1.Y;
            var num5 = point3.Z - point1.Z;
            var num4 = (num9 * num5) - (num8 * num6);
            var num3 = (num8 * num7) - (num10 * num5);
            var num2 = (num10 * num6) - (num9 * num7);
            var num11 = ((num4 * num4) + (num3 * num3)) + (num2 * num2);
            var num = 1 / (Math.sqrt(num11));
            var X = num4 * num;
            var Y = num3 * num;
            var Z = num2 * num;
            var D = -(((X * point1.X) + (Y * point1.Y)) + (Z * point1.Z));
            if (result == null)
                result = Plane.New();
            return result.Set(X, Y, Z, D);
        };
        Plane.prototype.SetFromTriangle = function (point1, point2, point3) {
            var num10 = point2.X - point1.X;
            var num9 = point2.Y - point1.Y;
            var num8 = point2.Z - point1.Z;
            var num7 = point3.X - point1.X;
            var num6 = point3.Y - point1.Y;
            var num5 = point3.Z - point1.Z;
            var num4 = (num9 * num5) - (num8 * num6);
            var num3 = (num8 * num7) - (num10 * num5);
            var num2 = (num10 * num6) - (num9 * num7);
            var num11 = ((num4 * num4) + (num3 * num3)) + (num2 * num2);
            var num = 1 / (Math.sqrt(num11));
            this.Normal.X = num4 * num;
            this.Normal.Y = num3 * num;
            this.Normal.Z = num2 * num;
            this.D = -(((this.Normal.X * point1.X) + (this.Normal.Y * point1.Y)) + (this.Normal.Z * point1.Z));
            return this;
        };
        Plane.New = function () {
            var res = Plane._cache.New();
            res.Normal.Set(0, 0, 0);
            res.D = 0;
            return res;
        };
        Plane.Release = function (v) {
            Plane._cache.Release(v);
        };
        Plane.prototype.Release = function () {
            Plane.Release(this);
        };
        Plane._cache = new Cache(Plane);
        return Plane;
    }());
    U1.Plane = Plane;
    var BoundingBox = (function () {
        function BoundingBox(min, max) {
            if (min === void 0) { min = Vector3.Zero; }
            if (max === void 0) { max = Vector3.Zero; }
            this.Min = min.Clone();
            this.Max = max.Clone();
        }
        BoundingBox.prototype.GetCorners = function () {
            var result = new Array(8);
            result[0] = new Vector3(this.Min.X, this.Max.Y, this.Max.Z); //LKT
            result[1] = new Vector3(this.Max.X, this.Max.Y, this.Max.Z); //RKT
            result[2] = new Vector3(this.Max.X, this.Min.Y, this.Max.Z); //RFT
            result[3] = new Vector3(this.Min.X, this.Min.Y, this.Max.Z); //LFT
            result[4] = new Vector3(this.Min.X, this.Max.Y, this.Min.Z); //LKB
            result[5] = new Vector3(this.Max.X, this.Max.Y, this.Min.Z); //RKB
            result[6] = new Vector3(this.Max.X, this.Min.Y, this.Min.Z); //RFB
            result[7] = new Vector3(this.Min.X, this.Min.Y, this.Min.Z); //LFB 
            return result;
        };
        BoundingBox.prototype.Equals = function (other) {
            if (this.Min.X != other.Min.X)
                return false;
            if (this.Min.Y != other.Min.Y)
                return false;
            if (this.Min.Z != other.Min.Z)
                return false;
            if (this.Max.X != other.Max.X)
                return false;
            if (this.Max.Y != other.Max.Y)
                return false;
            if (this.Max.Z != other.Max.Z)
                return false;
            return true;
        };
        BoundingBox.prototype.Set = function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i - 0] = arguments[_i];
            }
            this.SetCreateFromPoints(params);
            return this;
        };
        BoundingBox.prototype.Clone = function () {
            var result = new BoundingBox(this.Min, this.Max);
            return result;
        };
        BoundingBox.prototype.ConvertFromStr = function (value) {
            var items = U1.UValueUtil.ConvertNumberArrFromString(value);
            var idx = 0;
            this.Min.X = items.length > idx ? items[idx++] : 0;
            this.Min.Y = items.length > idx ? items[idx++] : 0;
            this.Min.Z = items.length > idx ? items[idx++] : 0;
            this.Max.X = items.length > idx ? items[idx++] : 0;
            this.Max.Y = items.length > idx ? items[idx++] : 0;
            this.Max.Z = items.length > idx ? items[idx++] : 0;
        };
        BoundingBox.prototype.ConvertToStr = function () {
            return U1.UValueUtil.ConvertNumberArrToString(this.Min.X, this.Min.Y, this.Min.Z, this.Max.X, this.Max.Y, this.Max.Z);
        };
        BoundingBox.prototype.CopyFrom = function (source) {
            this.Min.CopyFrom(source.Min);
            this.Max.CopyFrom(source.Max);
        };
        BoundingBox.CreateMerged = function (original, additional, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = BoundingBox.New();
            result.Min = Vector3.Min(original.Min, additional.Min);
            result.Max = Vector3.Max(original.Max, additional.Max);
            return result;
        };
        BoundingBox.prototype.SetCreateMerged = function (original, additional) {
            this.Min = Vector3.Min(original.Min, additional.Min);
            this.Max = Vector3.Max(original.Max, additional.Max);
            return this;
        };
        BoundingBox.CreateFromSphere = function (sphere, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = BoundingBox.New();
            result.Min.X = sphere.Center.X - sphere.Radius;
            result.Min.Y = sphere.Center.Y - sphere.Radius;
            result.Min.Z = sphere.Center.Z - sphere.Radius;
            result.Max.X = sphere.Center.X + sphere.Radius;
            result.Max.Y = sphere.Center.Y + sphere.Radius;
            result.Max.Z = sphere.Center.Z + sphere.Radius;
            return result;
        };
        BoundingBox.prototype.SetCreateFromSphere = function (sphere) {
            this.Min.X = sphere.Center.X - sphere.Radius;
            this.Min.Y = sphere.Center.Y - sphere.Radius;
            this.Min.Z = sphere.Center.Z - sphere.Radius;
            this.Max.X = sphere.Center.X + sphere.Radius;
            this.Max.Y = sphere.Center.Y + sphere.Radius;
            this.Max.Z = sphere.Center.Z + sphere.Radius;
            return this;
        };
        BoundingBox.CreateFromPoints = function (points, result) {
            if (result === void 0) { result = null; }
            if (points == null) {
                throw "ArgumentNullException";
            }
            var flag = false;
            var min = Vector3.MaxValue;
            var max = Vector3.MinValue;
            for (var i = 0; i < points.length; i++) {
                min = Vector3.Min(min, points[i]);
                max = Vector3.Max(max, points[i]);
                flag = true;
            }
            if (result == null)
                result = BoundingBox.New();
            if (!flag) {
                return result;
            }
            result.Min.CopyFrom(min);
            result.Max.CopyFrom(max);
            min.Release();
            max.Release();
            return result;
        };
        BoundingBox.prototype.SetCreateFromPoints = function (points) {
            if (points == null || points.length == 0) {
                return;
            }
            var flag = false;
            var min = this.Min;
            var max = this.Max;
            min.SetMaxValue();
            max.SetMinValue();
            for (var i = 0; i < points.length; i++) {
                min.Minimize(points[i]);
                max.Maximize(points[i]);
            }
            return this;
        };
        BoundingBox.prototype.IntersectsBoundingBox = function (box) {
            if ((this.Max.X < box.Min.X) || (this.Min.X > box.Max.X)) {
                return false;
            }
            if ((this.Max.Y < box.Min.Y) || (this.Min.Y > box.Max.Y)) {
                return false;
            }
            return ((this.Max.Z >= box.Min.Z) && (this.Min.Z <= box.Max.Z));
        };
        BoundingBox.prototype.IntersectsBoundingFrustum = function (frustum) {
            if (null == frustum) {
                throw "ArgumentNullException";
            }
            return frustum.IntersectsBoundingBox(this);
        };
        BoundingBox.prototype.IntersectsPlane = function (plane) {
            var vector = new Vector3();
            var vector2 = new Vector3();
            vector2.X = (plane.Normal.X >= 0) ? this.Min.X : this.Max.X;
            vector2.Y = (plane.Normal.Y >= 0) ? this.Min.Y : this.Max.Y;
            vector2.Z = (plane.Normal.Z >= 0) ? this.Min.Z : this.Max.Z;
            vector.X = (plane.Normal.X >= 0) ? this.Max.X : this.Min.X;
            vector.Y = (plane.Normal.Y >= 0) ? this.Max.Y : this.Min.Y;
            vector.Z = (plane.Normal.Z >= 0) ? this.Max.Z : this.Min.Z;
            var num = ((plane.Normal.X * vector2.X) + (plane.Normal.Y * vector2.Y)) + (plane.Normal.Z * vector2.Z);
            if ((num + plane.D) > 0) {
                return PlaneIntersectionTypeEnum.Front;
            }
            num = ((plane.Normal.X * vector.X) + (plane.Normal.Y * vector.Y)) + (plane.Normal.Z * vector.Z);
            if ((num + plane.D) < 0) {
                return PlaneIntersectionTypeEnum.Back;
            }
            return PlaneIntersectionTypeEnum.Intersecting;
        };
        BoundingBox.prototype.IntersectsRay = function (ray) {
            var num = 0;
            var maxValue = Number.MAX_VALUE;
            if (Math.abs(ray.Direction.X) < 1E-06) {
                if ((ray.Position.X < this.Min.X) || (ray.Position.X > this.Max.X)) {
                    return null;
                }
            }
            else {
                var num11 = 1 / ray.Direction.X;
                var num8 = (this.Min.X - ray.Position.X) * num11;
                var num7 = (this.Max.X - ray.Position.X) * num11;
                if (num8 > num7) {
                    var num14 = num8;
                    num8 = num7;
                    num7 = num14;
                }
                num = Math.max(num8, num);
                maxValue = Math.min(num7, maxValue);
                if (num > maxValue) {
                    return null;
                }
            }
            if (Math.abs(ray.Direction.Y) < 1E-06) {
                if ((ray.Position.Y < this.Min.Y) || (ray.Position.Y > this.Max.Y)) {
                    return null;
                }
            }
            else {
                var num10 = 1 / ray.Direction.Y;
                var num6 = (this.Min.Y - ray.Position.Y) * num10;
                var num5 = (this.Max.Y - ray.Position.Y) * num10;
                if (num6 > num5) {
                    var num13 = num6;
                    num6 = num5;
                    num5 = num13;
                }
                num = Math.max(num6, num);
                maxValue = Math.min(num5, maxValue);
                if (num > maxValue) {
                    return null;
                }
            }
            if (Math.abs(ray.Direction.Z) < 1E-06) {
                if ((ray.Position.Z < this.Min.Z) || (ray.Position.Z > this.Max.Z)) {
                    return null;
                }
            }
            else {
                var num9 = 1 / ray.Direction.Z;
                var num4 = (this.Min.Z - ray.Position.Z) * num9;
                var num3 = (this.Max.Z - ray.Position.Z) * num9;
                if (num4 > num3) {
                    var num12 = num4;
                    num4 = num3;
                    num3 = num12;
                }
                num = Math.max(num4, num);
                maxValue = Math.min(num3, maxValue);
                if (num > maxValue) {
                    return null;
                }
            }
            return num;
        };
        BoundingBox.prototype.IntersectsBoundingSphere = function (sphere) {
            var vector = Vector3.Clamp(sphere.Center, this.Min, this.Max);
            var num = Vector3.DistanceSquared(sphere.Center, vector);
            return (num <= (sphere.Radius * sphere.Radius));
        };
        BoundingBox.prototype.ContainsBoundingBox = function (box) {
            if ((this.Max.X < box.Min.X) || (this.Min.X > box.Max.X)) {
                return ContainmentTypeEnum.Disjoint;
            }
            if ((this.Max.Y < box.Min.Y) || (this.Min.Y > box.Max.Y)) {
                return ContainmentTypeEnum.Disjoint;
            }
            if ((this.Max.Z < box.Min.Z) || (this.Min.Z > box.Max.Z)) {
                return ContainmentTypeEnum.Disjoint;
            }
            if ((((this.Min.X <= box.Min.X) && (box.Max.X <= this.Max.X)) && ((this.Min.Y <= box.Min.Y) && (box.Max.Y <= this.Max.Y))) && ((this.Min.Z <= box.Min.Z) && (box.Max.Z <= this.Max.Z))) {
                return ContainmentTypeEnum.Contains;
            }
            return ContainmentTypeEnum.Intersects;
        };
        BoundingBox.prototype.ContainsBoundingFrustum = function (frustum) {
            if (null == frustum) {
                throw "ArgumentNullException";
            }
            if (!frustum.IntersectsBoundingBox(this)) {
                return ContainmentTypeEnum.Disjoint;
            }
            var cornerArray = frustum.CornerArray;
            for (var i = 0; i < cornerArray.length; i++) {
                if (this.ContainsPoint(cornerArray[i]) == ContainmentTypeEnum.Disjoint) {
                    return ContainmentTypeEnum.Intersects;
                }
            }
            return ContainmentTypeEnum.Contains;
        };
        BoundingBox.prototype.ContainsPoint = function (point) {
            if (this.Min.X <= point.X
                && point.X <= this.Max.X
                && this.Min.Y <= point.Y
                && point.Y <= this.Max.Y
                && this.Min.Z <= point.Z
                && point.Z <= this.Max.Z) {
                return ContainmentTypeEnum.Contains;
            }
            return ContainmentTypeEnum.Disjoint;
        };
        BoundingBox.prototype.ContainsBoundingSphere = function (sphere) {
            var vector = Vector3.Clamp(sphere.Center, this.Min, this.Max);
            var num2 = Vector3.DistanceSquared(sphere.Center, vector);
            var radius = sphere.Radius;
            if (num2 > (radius * radius)) {
                return ContainmentTypeEnum.Disjoint;
            }
            if (this.Min.X + radius <= sphere.Center.X
                && sphere.Center.X <= this.Max.X - radius
                && this.Max.X - this.Min.X > radius
                && this.Min.Y + radius <= sphere.Center.Y
                && sphere.Center.Y <= this.Max.Y - radius
                && this.Max.Y - this.Min.Y > radius
                && this.Min.Z + radius <= sphere.Center.Z
                && sphere.Center.Z <= this.Max.Z - radius
                && this.Max.X - this.Min.X > radius) {
                return ContainmentTypeEnum.Contains;
            }
            return ContainmentTypeEnum.Intersects;
        };
        BoundingBox.prototype.SupportMapping = function (v) {
            var result = new Vector3();
            result.X = (v.X >= 0) ? this.Max.X : this.Min.X;
            result.Y = (v.Y >= 0) ? this.Max.Y : this.Min.Y;
            result.Z = (v.Z >= 0) ? this.Max.Z : this.Min.Z;
            return result;
        };
        BoundingBox.New = function () {
            var res = BoundingBox._cache.New();
            res.Min.Set(0, 0, 0);
            res.Max.Set(0, 0, 0);
            return res;
        };
        BoundingBox.Release = function (v) {
            BoundingBox._cache.Release(v);
        };
        BoundingBox.prototype.Release = function () {
            BoundingBox.Release(this);
        };
        BoundingBox._cache = new Cache(BoundingBox);
        return BoundingBox;
    }());
    U1.BoundingBox = BoundingBox;
    var BoundingSphere = (function () {
        function BoundingSphere(center, radius) {
            if (center === void 0) { center = Vector3.Zero; }
            if (radius === void 0) { radius = 0; }
            if (radius < 0) {
                throw "ArgumentException(\"NegativeRadius\")";
            }
            this.Center = new Vector3(center.X, center.Y, center.Z);
            this.Radius = radius;
        }
        BoundingSphere.prototype.ConvertFromStr = function (value) {
            this.Center = this.Center == null ? new Vector3() : this.Center;
            var items = U1.UValueUtil.ConvertNumberArrFromString(value);
            var idx = 0;
            this.Center.X = items.length > idx ? (items[idx++]) : 0;
            this.Center.Y = items.length > idx ? (items[idx++]) : 0;
            this.Center.Z = items.length > idx ? (items[idx++]) : 0;
            this.Radius = items.length > idx ? (items[idx++]) : 0;
        };
        BoundingSphere.prototype.ConvertToStr = function () {
            return U1.UValueUtil.ConvertNumberArrToString(this.Center.X, this.Center.Y, this.Center.Z, this.Radius);
        };
        BoundingSphere.prototype.Equals = function (other) {
            if (this.Center.Y != other.Center.Y)
                return false;
            if (this.Center.Z != other.Center.Z)
                return false;
            if (this.Center.X != other.Center.X)
                return false;
            if (this.Radius != other.Radius)
                return false;
            return true;
        };
        BoundingSphere.prototype.Clone = function () {
            var result = new BoundingSphere(this.Center.Clone(), this.Radius);
            return result;
        };
        BoundingSphere.prototype.CopyFrom = function (source) {
            this.Center.CopyFrom(source.Center);
            this.Radius = source.Radius;
        };
        BoundingSphere.CreateMerged = function (original, additional, result) {
            if (result === void 0) { result = null; }
            var vect1 = Vector3.Subtract(additional.Center, original.Center);
            var num = vect1.Length();
            var radius = original.Radius;
            var num2 = additional.Radius;
            if ((radius + num2) >= num) {
                if ((radius - num2) >= num) {
                    return original;
                }
                if ((num2 - radius) >= num) {
                    return additional;
                }
            }
            var vect2 = Vector3.Scale(vect1, (1 / num));
            var num5 = Math.min(-radius, num - num2);
            var num4 = (Math.max(radius, num + num2) - num5) * 0.5;
            if (result == null)
                result = BoundingSphere.New();
            result.Center.SetScaleAdd(original.Center, (num4 + num5), vect2);
            result.Radius = num4;
            vect1.Release();
            vect2.Release();
            return result;
        };
        BoundingSphere.prototype.SetCreateMerged = function (original, additional) {
            var vect = Vector3.Subtract(additional.Center, original.Center);
            var num = vect.Length();
            var radius = original.Radius;
            var num2 = additional.Radius;
            if ((radius + num2) >= num) {
                if ((radius - num2) >= num) {
                    return original;
                }
                if ((num2 - radius) >= num) {
                    return additional;
                }
            }
            vect.Scale((1 / num));
            var num5 = Math.min(-radius, num - num2);
            var num4 = (Math.max(radius, num + num2) - num5) * 0.5;
            this.Center.SetAdd(original.Center, vect.Scale((num4 + num5)));
            this.Radius = num4;
            vect.Release();
            return this;
        };
        BoundingSphere.CreateFromBoundingBox = function (box, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = BoundingSphere.New();
            result.Center.SetLerp(box.Min, box.Max, 0.5);
            var num = Vector3.Distance(box.Min, box.Max);
            result.Radius = num * 0.5;
            return result;
        };
        BoundingSphere.prototype.SetCreateFromBoundingBox = function (box) {
            this.Center.SetLerp(box.Min, box.Max, 0.5);
            var num = Vector3.Distance(box.Min, box.Max);
            this.Radius = num * 0.5;
            return this;
        };
        BoundingSphere.CreateFromPoints = function (points, result) {
            if (result === void 0) { result = null; }
            var min = Vector3.MaxValue;
            var max = Vector3.MinValue;
            for (var i = 0; i < points.length; i++) {
                min = Vector3.Min(points[i], min);
                max = Vector3.Max(points[i], max);
            }
            if (result == null)
                result = BoundingSphere.New();
            result.Center.SetAdd(min, max).Scale(0.5);
            result.Radius = Vector3.Distance(min, max) / 2;
            min.Release();
            max.Release();
            return result;
        };
        BoundingSphere.prototype.SetCreateFromPoints = function (points) {
            var min = Vector3.MaxValue;
            var max = Vector3.MinValue;
            for (var i = 0; i < points.length; i++) {
                min.Minimize(points[i]);
                max.Maximize(points[i]);
            }
            this.Center.SetAdd(min, max).Scale(0.5);
            this.Radius = Vector3.Distance(min, max) * 0.5;
            return this;
        };
        BoundingSphere.CreateFromFrustum = function (frustum, result) {
            if (result === void 0) { result = null; }
            if (frustum == null) {
                throw "ArgumentNullException(\"frustum\")";
            }
            var points = frustum.CornerArray;
            result = this.CreateFromPoints(points, result);
            return result;
        };
        BoundingSphere.prototype.SetCreateFromFrustum = function (frustum) {
            if (frustum == null) {
                throw "ArgumentNullException(\"frustum\")";
            }
            return this.SetCreateFromPoints(frustum.CornerArray);
        };
        BoundingSphere.prototype.IntersectsBoundingBox = function (box) {
            var vector = Vector3.Clamp(this.Center, box.Min, box.Max);
            var num = Vector3.DistanceSquared(this.Center, vector);
            vector.Release();
            return (num <= (this.Radius * this.Radius));
        };
        BoundingSphere.prototype.IntersectsBoundingFrustum = function (frustum) {
            if (null == frustum) {
                throw "ArgumentNullException(\"frustum\", \"NullNotAllowed\")";
            }
            return frustum.IntersectsBoundingSphere(this);
        };
        BoundingSphere.prototype.IntersectsPlane = function (plane) {
            return plane.IntersectsBoundingSphere(this);
        };
        BoundingSphere.prototype.Intersects = function (ray) {
            return ray.IntersectsBoundingSphere(this);
        };
        BoundingSphere.prototype.IntersectsBoundingSphere = function (sphere) {
            var num3 = Vector3.DistanceSquared(this.Center, sphere.Center);
            var radius1 = this.Radius;
            var radius2 = sphere.Radius;
            if ((((radius1 * radius1) + ((2 * radius1) * radius2)) + (radius2 * radius2)) <= num3) {
                return false;
            }
            return true;
        };
        BoundingSphere.prototype.ContainsBoundingBox = function (box) {
            if (!box.IntersectsBoundingSphere(this)) {
                return ContainmentTypeEnum.Disjoint;
            }
            var vector = new Vector3();
            var num = this.Radius * this.Radius;
            vector.X = this.Center.X - box.Min.X;
            vector.Y = this.Center.Y - box.Max.Y;
            vector.Z = this.Center.Z - box.Max.Z;
            if (vector.LengthSquareduared() > num) {
                return ContainmentTypeEnum.Intersects;
            }
            vector.X = this.Center.X - box.Max.X;
            vector.Y = this.Center.Y - box.Max.Y;
            vector.Z = this.Center.Z - box.Max.Z;
            if (vector.LengthSquareduared() > num) {
                return ContainmentTypeEnum.Intersects;
            }
            vector.X = this.Center.X - box.Max.X;
            vector.Y = this.Center.Y - box.Min.Y;
            vector.Z = this.Center.Z - box.Max.Z;
            if (vector.LengthSquareduared() > num) {
                return ContainmentTypeEnum.Intersects;
            }
            vector.X = this.Center.X - box.Min.X;
            vector.Y = this.Center.Y - box.Min.Y;
            vector.Z = this.Center.Z - box.Max.Z;
            if (vector.LengthSquareduared() > num) {
                return ContainmentTypeEnum.Intersects;
            }
            vector.X = this.Center.X - box.Min.X;
            vector.Y = this.Center.Y - box.Max.Y;
            vector.Z = this.Center.Z - box.Min.Z;
            if (vector.LengthSquareduared() > num) {
                return ContainmentTypeEnum.Intersects;
            }
            vector.X = this.Center.X - box.Max.X;
            vector.Y = this.Center.Y - box.Max.Y;
            vector.Z = this.Center.Z - box.Min.Z;
            if (vector.LengthSquareduared() > num) {
                return ContainmentTypeEnum.Intersects;
            }
            vector.X = this.Center.X - box.Max.X;
            vector.Y = this.Center.Y - box.Min.Y;
            vector.Z = this.Center.Z - box.Min.Z;
            if (vector.LengthSquareduared() > num) {
                return ContainmentTypeEnum.Intersects;
            }
            vector.X = this.Center.X - box.Min.X;
            vector.Y = this.Center.Y - box.Min.Y;
            vector.Z = this.Center.Z - box.Min.Z;
            if (vector.LengthSquareduared() > num) {
                return ContainmentTypeEnum.Intersects;
            }
            return ContainmentTypeEnum.Contains;
        };
        BoundingSphere.prototype.ContainsBoundingFrustum = function (frustum) {
            if (null == frustum) {
                throw "ArgumentNullException(\"frustum\", \"NullNotAllowed\")";
            }
            if (!frustum.IntersectsBoundingSphere(this)) {
                return ContainmentTypeEnum.Disjoint;
            }
            var num2 = this.Radius * this.Radius;
            var cornerarray = frustum.CornerArray;
            var vector = Vector3.New();
            for (var i = 0; i < cornerarray.length; i++) {
                vector.X = cornerarray[i].X - this.Center.X;
                vector.Y = cornerarray[i].Y - this.Center.Y;
                vector.Z = cornerarray[i].Z - this.Center.Z;
                if (vector.LengthSquareduared() > num2) {
                    return ContainmentTypeEnum.Intersects;
                }
            }
            vector.Release();
            return ContainmentTypeEnum.Contains;
        };
        BoundingSphere.prototype.ContainsPoint = function (point) {
            if (Vector3.DistanceSquared(point, this.Center) >= (this.Radius * this.Radius)) {
                return ContainmentTypeEnum.Disjoint;
            }
            return ContainmentTypeEnum.Contains;
        };
        BoundingSphere.prototype.ContainsBoundingSphere = function (sphere) {
            var num3 = Vector3.Distance(this.Center, sphere.Center);
            var radius = this.Radius;
            var num = sphere.Radius;
            if ((radius + num) < num3) {
                return ContainmentTypeEnum.Disjoint;
            }
            if ((radius - num) < num3) {
                return ContainmentTypeEnum.Intersects;
            }
            return ContainmentTypeEnum.Contains;
        };
        BoundingSphere.prototype.SupportMapping = function (v, result) {
            if (result === void 0) { result = null; }
            var result = new Vector3();
            var num2 = v.Length();
            var num = this.Radius / num2;
            if (result == null)
                result = Vector3.New();
            result.X = this.Center.X + (v.X * num);
            result.Y = this.Center.Y + (v.Y * num);
            result.Z = this.Center.Z + (v.Z * num);
            return result;
        };
        BoundingSphere.Transform = function (src, matrix, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = BoundingSphere.New();
            result.Center.SetTransform(src.Center, matrix);
            var num = ((matrix.M11 * matrix.M11) + (matrix.M12 * matrix.M12)) + (matrix.M13 * matrix.M13);
            var num2 = ((matrix.M21 * matrix.M21) + (matrix.M22 * matrix.M22)) + (matrix.M23 * matrix.M23);
            var num3 = ((matrix.M31 * matrix.M31) + (matrix.M32 * matrix.M32)) + (matrix.M33 * matrix.M33);
            var num4 = Math.max(num, Math.max(num2, num3));
            result.Radius = src.Radius * (Math.sqrt(num4));
            return result;
        };
        BoundingSphere.prototype.Transform = function (matrix, result) {
            if (result === void 0) { result = null; }
            this.Center.SetTransform(this.Center, matrix);
            var num = ((matrix.M11 * matrix.M11) + (matrix.M12 * matrix.M12)) + (matrix.M13 * matrix.M13);
            var num2 = ((matrix.M21 * matrix.M21) + (matrix.M22 * matrix.M22)) + (matrix.M23 * matrix.M23);
            var num3 = ((matrix.M31 * matrix.M31) + (matrix.M32 * matrix.M32)) + (matrix.M33 * matrix.M33);
            var num4 = Math.max(num, Math.max(num2, num3));
            this.Radius = this.Radius * (Math.sqrt(num4));
            return result;
        };
        BoundingSphere.New = function () {
            var res = BoundingSphere._cache.New();
            res.Center.Set(0, 0, 0);
            res.Radius = 0;
            return res;
        };
        BoundingSphere.Release = function (v) {
            BoundingSphere._cache.Release(v);
        };
        BoundingSphere.prototype.Release = function () {
            BoundingSphere.Release(this);
        };
        BoundingSphere._cache = new Cache(BoundingSphere);
        return BoundingSphere;
    }());
    U1.BoundingSphere = BoundingSphere;
    var Ray2 = (function () {
        function Ray2(position, direction) {
            if (position === void 0) { position = Vector2.Zero; }
            if (direction === void 0) { direction = Vector2.UnitX; }
            this.Position = position;
            this.Direction = direction;
        }
        Ray2.prototype.Clone = function () {
            var copy = new Ray2();
            copy.Position.CopyFrom(this.Position);
            copy.Direction.CopyFrom(this.Direction);
            return copy;
        };
        Ray2.prototype.ConvertFromStr = function (value) {
            var items = U1.UValueUtil.ConvertNumberArrFromString(value);
            var idx = 0;
            this.Position.X = items.length > idx ? (items[idx++]) : 0;
            this.Position.Y = items.length > idx ? (items[idx++]) : 0;
            this.Direction.X = items.length > idx ? (items[idx++]) : 0;
            this.Direction.Y = items.length > idx ? (items[idx++]) : 0;
        };
        Ray2.prototype.ConvertToStr = function () {
            return U1.UValueUtil.ConvertNumberArrToString(this.Position.X, this.Position.Y, this.Direction.X, this.Direction.Y);
        };
        Ray2.prototype.CopyFrom = function (source) {
            this.Position.CopyFrom(source.Position);
            this.Direction.CopyFrom(source.Direction);
        };
        Ray2.prototype.Equals = function (other) {
            return this.Position.X == other.Position.X
                && this.Position.Y == other.Position.Y
                && this.Direction.X == other.Direction.X
                && this.Direction.Y == other.Direction.Y;
        };
        Ray2.DistanceSquared = function (ray, pt) {
            var dir = ray.Direction;
            dir.Normalize();
            var distSq = Vector2.DistanceSquared(pt, ray.Position);
            var s = Vector2.Dot(Vector2.Subtract(pt, ray.Position), dir);
            if (s <= 0)
                return distSq;
            return distSq - (s * s);
        };
        Ray2.Distance = function (ray, pt) {
            return Math.sqrt(Ray2.DistanceSquared(ray, pt));
        };
        Ray2.New = function () {
            var res = Ray2._cache.New();
            res.Position.Set(0, 0);
            res.Direction.Set(1, 0);
            return res;
        };
        Ray2.Release = function (v) {
            Ray2._cache.Release(v);
        };
        Ray2.prototype.Release = function () {
            Ray2.Release(this);
        };
        Ray2._cache = new Cache(Ray2);
        return Ray2;
    }());
    U1.Ray2 = Ray2;
    var Ray3 = (function () {
        function Ray3(position, direction) {
            if (position === void 0) { position = Vector3.Zero; }
            if (direction === void 0) { direction = Vector3.Zero; }
            this.Position = position;
            this.Direction = direction;
        }
        Ray3.prototype.ConvertFromStr = function (value) {
            this.Position = this.Position == null ? new Vector3() : this.Position;
            this.Direction = this.Direction == null ? new Vector3() : this.Direction;
            var items = U1.UValueUtil.ConvertNumberArrFromString(value);
            this.Position.X = items.length > 0 ? (items[0]) : 0;
            this.Position.Y = items.length > 1 ? (items[1]) : 0;
            this.Position.Z = items.length > 2 ? (items[2]) : 0;
            this.Direction.X = items.length > 3 ? (items[3]) : 0;
            this.Direction.Y = items.length > 4 ? (items[4]) : 0;
            this.Direction.Z = items.length > 5 ? (items[5]) : 0;
        };
        Ray3.prototype.ConvertToStr = function () {
            return U1.UValueUtil.ConvertNumberArrToString(this.Position.X, this.Position.Y, this.Position.Z, this.Direction.X, this.Direction.Y, this.Direction.Z);
        };
        Ray3.prototype.Equals = function (other) {
            if (other == this)
                return true;
            if (other == null)
                return false;
            return this.Position.X == other.Position.X
                && this.Position.Y == other.Position.Y
                && this.Position.Z == other.Position.Z
                && this.Direction.X == other.Direction.X
                && this.Direction.Y == other.Direction.Y
                && this.Direction.Z == other.Direction.Z;
        };
        Ray3.prototype.CopyFrom = function (other) {
            this.Position.CopyFrom(other.Position);
            this.Direction.CopyFrom(other.Direction);
            return this;
        };
        Ray3.prototype.Clone = function () {
            var copy = new Ray3();
            copy.CopyFrom(this);
            return copy;
        };
        Ray3.prototype.IntersectsBoundingBox = function (box) {
            return box.IntersectsRay(this);
        };
        Ray3.prototype.IntersectsBoundingFrustum = function (frustum) {
            if (frustum == null) {
                throw "ArgumentNullException(\"frustum\")";
            }
            return frustum.IntersectsRay(this);
        };
        Ray3.prototype.IntersectsPlane = function (plane) {
            var num2 = ((plane.Normal.X * this.Direction.X) + (plane.Normal.Y * this.Direction.Y)) + (plane.Normal.Z * this.Direction.Z);
            if (Math.abs(num2) < 1E-05) {
                return null;
            }
            var num3 = ((plane.Normal.X * this.Position.X) + (plane.Normal.Y * this.Position.Y)) + (plane.Normal.Z * this.Position.Z);
            var num = (-plane.D - num3) / num2;
            if (num < 0) {
                if (num < -1E-05) {
                    return null;
                }
                num = 0;
            }
            return num;
        };
        Ray3.prototype.IntersectsBoundingSphere = function (sphere) {
            var num5 = sphere.Center.X - this.Position.X;
            var num4 = sphere.Center.Y - this.Position.Y;
            var num3 = sphere.Center.Z - this.Position.Z;
            var num7 = ((num5 * num5) + (num4 * num4)) + (num3 * num3);
            var num2 = sphere.Radius * sphere.Radius;
            if (num7 <= num2) {
                return 0;
            }
            var num = ((num5 * this.Direction.X) + (num4 * this.Direction.Y)) + (num3 * this.Direction.Z);
            if (num < 0) {
                return null;
            }
            var num6 = num7 - (num * num);
            if (num6 > num2) {
                return null;
            }
            var num8 = Math.sqrt((num2 - num6));
            return num - num8;
        };
        Ray3.DistanceSquared = function (ray, point) {
            var dir = ray.Direction;
            dir.Normalize();
            var distSq = Vector3.DistanceSquared(point, ray.Position);
            var s = Vector3.Dot(Vector3.Subtract(point, ray.Position), dir);
            if (s <= 0)
                return distSq;
            return distSq - (s * s);
        };
        Ray3.prototype.Transform = function (matrix) {
            this.Position.Transform(matrix);
            this.Direction.TransformNormal(matrix);
            return this;
        };
        Ray3.New = function () {
            var res = Ray3._cache.New();
            res.Position.Set(0, 0, 0);
            res.Direction.Set(1, 0, 0);
            return res;
        };
        Ray3.Release = function (v) {
            Ray3._cache.Release(v);
        };
        Ray3.prototype.Release = function () {
            Ray3.Release(this);
        };
        Ray3._cache = new Cache(Ray3);
        return Ray3;
    }());
    U1.Ray3 = Ray3;
    var Gjk = (function () {
        function Gjk() {
            this.closestPoint = Vector3.Zero;
            this.det = [
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0] //15
            ];
            this.edgeLengthSquared = [
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0]
            ];
            this.edges = [
                [Vector3.Zero, Vector3.Zero, Vector3.Zero, Vector3.Zero],
                [Vector3.Zero, Vector3.Zero, Vector3.Zero, Vector3.Zero],
                [Vector3.Zero, Vector3.Zero, Vector3.Zero, Vector3.Zero],
                [Vector3.Zero, Vector3.Zero, Vector3.Zero, Vector3.Zero]
            ];
            this.y = [Vector3.Zero, Vector3.Zero, Vector3.Zero, Vector3.Zero];
            this.yLengthSquared = [0, 0, 0, 0];
        }
        Gjk.prototype.AddSupportPoint = function (newPoint) {
            var index = (Gjk.BitsToIndices[this.simplexBits ^ 15] & 7) - 1;
            this.y[index] = newPoint;
            this.yLengthSquared[index] = newPoint.LengthSquareduared();
            for (var i = Gjk.BitsToIndices[this.simplexBits]; i != 0; i = i >> 3) {
                var num2 = (i & 7) - 1;
                var vector = Vector3.Subtract(this.y[num2], newPoint);
                this.edges[num2][index] = vector;
                this.edges[index][num2] = Vector3.Negate(vector);
                this.edgeLengthSquared[index][num2] = this.edgeLengthSquared[num2][index] = vector.LengthSquareduared();
            }
            this.UpdateDeterminant(index);
            return this.UpdateSimplex(index);
        };
        Gjk.prototype.ComputeClosestPoint = function () {
            var num3 = 0;
            var result = Vector3.Zero;
            this.maxLengthSquared = 0;
            for (var i = Gjk.BitsToIndices[this.simplexBits]; i != 0; i = i >> 3) {
                var index = (i & 7) - 1;
                var num4 = this.det[this.simplexBits][index];
                num3 += num4;
                result = Vector3.Add(result, Vector3.Scale(this.y[index], num4));
                this.maxLengthSquared = Math.max(this.maxLengthSquared, this.yLengthSquared[index]);
            }
            result.Scale(1 / num3);
            return result;
        };
        Gjk.Dot = function (a, b) {
            return (((a.X * b.X) + (a.Y * b.Y)) + (a.Z * b.Z));
        };
        Gjk.prototype.IsSatisfiesRule = function (xBits, yBits) {
            for (var i = Gjk.BitsToIndices[yBits]; i != 0; i = i >> 3) {
                var index = (i & 7) - 1;
                var num3 = (1) << index;
                if ((num3 & xBits) != 0) {
                    if (this.det[xBits][index] <= 0) {
                        return false;
                    }
                }
                else if (this.det[xBits | num3][index] > 0) {
                    return false;
                }
            }
            return true;
        };
        Gjk.prototype.Reset = function () {
            this.simplexBits = 0;
            this.maxLengthSquared = 0;
        };
        Gjk.prototype.UpdateDeterminant = function (xmIdx) {
            var index = (1) << xmIdx;
            this.det[index][xmIdx] = 1;
            var num14 = Gjk.BitsToIndices[this.simplexBits];
            var num8 = num14;
            for (var i = 0; num8 != 0; i++) {
                var num = (num8 & 7) - 1;
                var num12 = (1) << num;
                var num6 = num12 | index;
                this.det[num6][num] = Gjk.Dot(this.edges[xmIdx][num], this.y[xmIdx]);
                this.det[num6][xmIdx] = Gjk.Dot(this.edges[num][xmIdx], this.y[num]);
                var num11 = num14;
                for (var j = 0; j < i; j++) {
                    var num3 = (num11 & 7) - 1;
                    var num5 = (1) << num3;
                    var num9 = num6 | num5;
                    var num4 = (this.edgeLengthSquared[num][num3] < this.edgeLengthSquared[xmIdx][num3]) ? num : xmIdx;
                    this.det[num9][num3] = (this.det[num6][num] * Gjk.Dot(this.edges[num4][num3], this.y[num]))
                        + (this.det[num6][xmIdx] * Gjk.Dot(this.edges[num4][num3], this.y[xmIdx]));
                    num4 = (this.edgeLengthSquared[num3][num] < this.edgeLengthSquared[xmIdx][num]) ? num3 : xmIdx;
                    this.det[num9][num] = (this.det[num5 | index][num3] * Gjk.Dot(this.edges[num4][num], this.y[num3]))
                        + (this.det[num5 | index][xmIdx] * Gjk.Dot(this.edges[num4][num], this.y[xmIdx]));
                    num4 = (this.edgeLengthSquared[num][xmIdx] < this.edgeLengthSquared[num3][xmIdx]) ? num : num3;
                    this.det[num9][xmIdx] = (this.det[num12 | num5][num3] * Gjk.Dot(this.edges[num4][xmIdx], this.y[num3]))
                        + (this.det[num12 | num5][num] * Gjk.Dot(this.edges[num4][xmIdx], this.y[num]));
                    num11 = num11 >> 3;
                }
                num8 = num8 >> 3;
            }
            if ((this.simplexBits | index) == 15) {
                var num2 = (this.edgeLengthSquared[1][0] < this.edgeLengthSquared[2][0]) ? ((this.edgeLengthSquared[1][0] < this.edgeLengthSquared[3][0]) ? 1 : 3) : ((this.edgeLengthSquared[2][0] < this.edgeLengthSquared[3][0]) ? 2 : 3);
                this.det[15][0] = ((this.det[14][1] * Gjk.Dot(this.edges[num2][0], this.y[1])) + (this.det[14][2] * Gjk.Dot(this.edges[num2][0], this.y[2]))) + (this.det[14][3] * Gjk.Dot(this.edges[num2][0], this.y[3]));
                num2 = (this.edgeLengthSquared[0][1] < this.edgeLengthSquared[2][1]) ? ((this.edgeLengthSquared[0][1] < this.edgeLengthSquared[3][1]) ? 0 : 3) : ((this.edgeLengthSquared[2][1] < this.edgeLengthSquared[3][1]) ? 2 : 3);
                this.det[15][1] = ((this.det[13][0] * Gjk.Dot(this.edges[num2][1], this.y[0])) + (this.det[13][2] * Gjk.Dot(this.edges[num2][1], this.y[2]))) + (this.det[13][3] * Gjk.Dot(this.edges[num2][1], this.y[3]));
                num2 = (this.edgeLengthSquared[0][2] < this.edgeLengthSquared[1][2]) ? ((this.edgeLengthSquared[0][2] < this.edgeLengthSquared[3][2]) ? 0 : 3) : ((this.edgeLengthSquared[1][2] < this.edgeLengthSquared[3][2]) ? 1 : 3);
                this.det[15][2] = ((this.det[11][0] * Gjk.Dot(this.edges[num2][2], this.y[0])) + (this.det[11][1] * Gjk.Dot(this.edges[num2][2], this.y[1]))) + (this.det[11][3] * Gjk.Dot(this.edges[num2][2], this.y[3]));
                num2 = (this.edgeLengthSquared[0][3] < this.edgeLengthSquared[1][3]) ? ((this.edgeLengthSquared[0][3] < this.edgeLengthSquared[2][3]) ? 0 : 2) : ((this.edgeLengthSquared[1][3] < this.edgeLengthSquared[2][3]) ? 1 : 2);
                this.det[15][3] = ((this.det[7][0] * Gjk.Dot(this.edges[num2][3], this.y[0])) + (this.det[7][1] * Gjk.Dot(this.edges[num2][3], this.y[1]))) + (this.det[7][2] * Gjk.Dot(this.edges[num2][3], this.y[2]));
            }
        };
        Gjk.prototype.UpdateSimplex = function (newIndex) {
            var yBits = this.simplexBits | ((1) << newIndex);
            var xBits = (1) << newIndex;
            for (var i = this.simplexBits; i != 0; i--) {
                if (((i & yBits) == i) && this.IsSatisfiesRule(i | xBits, yBits)) {
                    this.simplexBits = i | xBits;
                    this.closestPoint = this.ComputeClosestPoint();
                    return true;
                }
            }
            var flag = false;
            if (this.IsSatisfiesRule(xBits, yBits)) {
                this.simplexBits = xBits;
                this.closestPoint = this.y[newIndex];
                this.maxLengthSquared = this.yLengthSquared[newIndex];
                flag = true;
            }
            return flag;
        };
        Object.defineProperty(Gjk.prototype, "ClosestPoint", {
            get: function () {
                return this.closestPoint;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Gjk.prototype, "FullSimplex", {
            get: function () {
                return (this.simplexBits == 15);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Gjk.prototype, "MaxLengthSquareduared", {
            get: function () {
                return this.maxLengthSquared;
            },
            enumerable: true,
            configurable: true
        });
        Gjk.BitsToIndices = [0, 1, 2, 0x11, 3, 0x19, 0x1a, 0xd1, 4, 0x21, 0x22, 0x111, 0x23, 0x119, 0x11a, 0x8d1];
        return Gjk;
    }());
    var BoundingFrustum = (function () {
        function BoundingFrustum(value) {
            if (value === void 0) { value = null; }
            this.matrix = Matrix4.Identity;
            this.cornerArray = [
                Vector3.Zero,
                Vector3.Zero,
                Vector3.Zero,
                Vector3.Zero,
                Vector3.Zero,
                Vector3.Zero,
                Vector3.Zero,
                Vector3.Zero //7
            ];
            this.planes = [
                new Plane(),
                new Plane(),
                new Plane(),
                new Plane(),
                new Plane(),
                new Plane(),
            ];
            if (value != null) {
                this.SetMatrix(value);
            }
        }
        BoundingFrustum.prototype.Equals = function (other) {
            if (other == null) {
                return false;
            }
            return (this.matrix.Equals(other.matrix));
        };
        BoundingFrustum.ComputeIntersection = function (plane, ray, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            var num = (-plane.D - Vector3.Dot(plane.Normal, ray.Position)) / Vector3.Dot(plane.Normal, ray.Direction);
            return result.SetScaleAdd(ray.Position, num, ray.Direction);
        };
        BoundingFrustum.ComputeIntersectionLine = function (p1, p2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Ray3.New();
            result.Direction.SetCross(p1.Normal, p2.Normal);
            var num = result.Direction.LengthSquareduared();
            var s1 = Vector3.Scale(p2.Normal, -p1.D);
            var s2 = Vector3.Scale(p1.Normal, p2.D);
            var v1 = Vector3.Add(s1, s2);
            v1.Cross(result.Direction);
            v1.Scale(1 / num);
            result.Position.CopyFrom(v1);
            s1.Release();
            s2.Release();
            v1.Release();
            return result;
        };
        BoundingFrustum.prototype.ContainsBoundingBox = function (box) {
            var flag = false;
            for (var i = 0; i < this.planes.length; i++) {
                var plane = this.planes[i];
                switch (box.IntersectsPlane(plane)) {
                    case PlaneIntersectionTypeEnum.Front:
                        return ContainmentTypeEnum.Disjoint;
                    case PlaneIntersectionTypeEnum.Intersecting:
                        flag = true;
                        break;
                }
            }
            if (!flag) {
                return ContainmentTypeEnum.Contains;
            }
            return ContainmentTypeEnum.Intersects;
        };
        BoundingFrustum.prototype.ContainsBoundingFrustum = function (frustum) {
            if (frustum == null) {
                throw "ArgumentNullException";
            }
            var disjoint = ContainmentTypeEnum.Disjoint;
            if (this.IntersectsBoundingFrustum(frustum)) {
                disjoint = ContainmentTypeEnum.Contains;
                for (var i = 0; i < this.cornerArray.length; i++) {
                    if (this.ContainsPoint(frustum.cornerArray[i]) == ContainmentTypeEnum.Disjoint) {
                        return ContainmentTypeEnum.Intersects;
                    }
                }
            }
            return disjoint;
        };
        BoundingFrustum.prototype.ContainsBoundingSphere = function (sphere) {
            var center = sphere.Center;
            var radius = sphere.Radius;
            var num2 = 0;
            for (var i = 0; i < this.planes.length; i++) {
                var plane = this.planes[i];
                var num5 = ((plane.Normal.X * center.X) + (plane.Normal.Y * center.Y)) + (plane.Normal.Z * center.Z);
                var num3 = num5 + plane.D;
                if (num3 > radius) {
                    return ContainmentTypeEnum.Disjoint;
                }
                if (num3 < -radius) {
                    num2++;
                }
            }
            if (num2 != 6) {
                return ContainmentTypeEnum.Intersects;
            }
            return ContainmentTypeEnum.Contains;
        };
        BoundingFrustum.prototype.ContainsPoint = function (point) {
            for (var i = 0; i < this.planes.length; i++) {
                var plane = this.planes[i];
                var num2 = (((plane.Normal.X * point.X) + (plane.Normal.Y * point.Y)) + (plane.Normal.Z * point.Z)) + plane.D;
                if (num2 > 1E-05) {
                    return ContainmentTypeEnum.Disjoint;
                }
            }
            return ContainmentTypeEnum.Contains;
        };
        Object.defineProperty(BoundingFrustum.prototype, "CornerArray", {
            get: function () {
                return this.cornerArray;
            },
            enumerable: true,
            configurable: true
        });
        BoundingFrustum.prototype.GetCornersCopy = function () {
            return [
                this.cornerArray[0].Clone(),
                this.cornerArray[1].Clone(),
                this.cornerArray[2].Clone(),
                this.cornerArray[3].Clone(),
                this.cornerArray[4].Clone(),
                this.cornerArray[5].Clone(),
                this.cornerArray[6].Clone(),
                this.cornerArray[7].Clone() //7
            ];
        };
        BoundingFrustum.prototype.IntersectsBoundingBox = function (box) {
            var ps = BoundingFrustum.tmp_box_points;
            ps[0].Set(box.Min.X, box.Min.Y, box.Min.Z);
            ps[1].Set(box.Max.X, box.Min.Y, box.Min.Z);
            ps[2].Set(box.Max.X, box.Max.Y, box.Min.Z);
            ps[3].Set(box.Min.X, box.Max.Y, box.Min.Z);
            ps[4].Set(box.Min.X, box.Min.Y, box.Max.Z);
            ps[5].Set(box.Max.X, box.Min.Y, box.Max.Z);
            ps[6].Set(box.Max.X, box.Max.Y, box.Max.Z);
            ps[7].Set(box.Min.X, box.Max.Y, box.Max.Z);
            for (var i = 0; i < ps.length; i++) {
                var p = ps[i];
                var count = 0;
                for (var j = 0; j < this.planes.length; j++) {
                    var d = this.planes[j].DotCoordinate(p);
                    if (d > 0)
                        break;
                    count++;
                }
                if (count == this.planes.length)
                    return true;
            }
            return false;
        };
        BoundingFrustum.prototype.IntersectsBoundingFrustum = function (frustum) {
            var closestPoint;
            if (frustum == null) {
                throw "ArgumentNullException(\"frustum\")";
            }
            var ps = frustum.CornerArray;
            for (var i = 0; i < ps.length; i++) {
                var p = ps[i];
                var count = 0;
                for (var j = 0; j < this.planes.length; j++) {
                    var d = this.planes[j].DotCoordinate(p);
                    if (d > 0)
                        break;
                    count++;
                }
                if (count == this.planes.length)
                    return true;
            }
            return false;
            //if (this.gjk == null)
            //{
            //    this.gjk = new Gjk();
            //}
            //this.gjk.Reset();
            //closestPoint = Vector3.Subtract(this.cornerArray[0], frustum.cornerArray[0]);
            //if (closestPoint.LengthSquareduared() < 1E-05)
            //{
            //    closestPoint = Vector3.Subtract(this.cornerArray[0], frustum.cornerArray[1]);
            //}
            //var maxValue = Number.POSITIVE_INFINITY;
            //var num3 = 0;
            //do
            //{
            //    var vector2 = Vector3.Zero;
            //    var vector3 = Vector3.Zero;
            //    var vector4 = Vector3.Zero;
            //    var vector5 = Vector3.Zero;
            //    vector5.X = -closestPoint.X;
            //    vector5.Y = -closestPoint.Y;
            //    vector5.Z = -closestPoint.Z;
            //    vector4 = this.SupportMapping(vector5);
            //    vector3 = frustum.SupportMapping(closestPoint);
            //    vector2 = Vector3.Subtract(vector4, vector3);
            //    var num4 = ((closestPoint.X * vector2.X) + (closestPoint.Y * vector2.Y)) + (closestPoint.Z * vector2.Z);
            //    if (num4 > 0)
            //    {
            //        return false;
            //    }
            //    this.gjk.AddSupportPoint(vector2);
            //    closestPoint = this.gjk.ClosestPoint;
            //    var num2 = maxValue;
            //    maxValue = closestPoint.LengthSquareduared();
            //    num3 = 4E-05 * this.gjk.MaxLengthSquareduared;
            //    if ((num2 - maxValue) <= (1E-05 * num2))
            //    {
            //        return false;
            //    }
            //}
            //while (!this.gjk.FullSimplex && (maxValue >= num3));
            //return true;
        };
        BoundingFrustum.prototype.IntersectsBoundingSphere = function (sphere) {
            for (var i = 0; i < this.planes.length; i++) {
                var d = this.planes[i].DotCoordinate(sphere.Center);
                if (d > sphere.Radius)
                    return false;
            }
            return true;
            /*
            var unitX = Vector3.UnitX;
            var vector2 = Vector3.Zero;
            var vector3 = Vector3.Zero;
            var vector4 = Vector3.Zero;
            var vector5 = Vector3.Zero;
            if (this.gjk == null)
            {
                this.gjk = new Gjk();
            }
            this.gjk.Reset();
            unitX = Vector3.Subtract(this.cornerArray[0], sphere.Center);

            if (unitX.LengthSquareduared() < 1E-05)
            {
                unitX = Vector3.UnitX;
            }
            var maxValue = Number.POSITIVE_INFINITY;
            var num3 = 0;
            var result = false;
            // Label_005A:
            while (true)
            {
                vector5.X = -unitX.X;
                vector5.Y = -unitX.Y;
                vector5.Z = -unitX.Z;
                vector4 = this.SupportMapping(vector5);
                vector3 = sphere.SupportMapping(unitX);
                vector2 = Vector3.Subtract(vector4, vector3);

                var num4 = ((unitX.X * vector2.X) + (unitX.Y * vector2.Y)) + (unitX.Z * vector2.Z);
                if (num4 <= 0)
                {
                    this.gjk.AddSupportPoint(vector2);
                    unitX = this.gjk.ClosestPoint;
                    var num2 = maxValue;
                    maxValue = unitX.LengthSquareduared();
                    if ((num2 - maxValue) > (1E-05 * num2))
                    {
                        num3 = 4E-05 * this.gjk.MaxLengthSquareduared;
                        if (!this.gjk.FullSimplex && (maxValue >= num3))
                        {
                            //goto Label_005A;
                            continue;
                        }
                        result = true;
                    }
                }
                break;
            }

            return result;
            */
        };
        BoundingFrustum.prototype.IntersectsPlane = function (plane) {
            var num = 0;
            for (var i = 0; i < 8; i++) {
                var num3 = Vector3.Dot(this.cornerArray[i], plane.Normal);
                if ((num3 + plane.D) > 0) {
                    num |= 1;
                }
                else {
                    num |= 2;
                }
                if (num == 3) {
                    return PlaneIntersectionTypeEnum.Intersecting;
                }
            }
            if (num != 1) {
                return PlaneIntersectionTypeEnum.Back;
            }
            return PlaneIntersectionTypeEnum.Front;
        };
        BoundingFrustum.prototype.IntersectsRay = function (ray) {
            var result;
            var type_ = this.ContainsPoint(ray.Position);
            if (type_ == ContainmentTypeEnum.Contains) {
                result = 0;
            }
            else {
                var minValue = Number.NEGATIVE_INFINITY;
                var maxValue = Number.POSITIVE_INFINITY;
                result = 0;
                for (var i = 0; i < this.planes.length; i++) {
                    var plane = this.planes[i];
                    var num3;
                    var num6;
                    var normal = plane.Normal;
                    num6 = Vector3.Dot(ray.Direction, normal);
                    num3 = Vector3.Dot(ray.Position, normal);
                    num3 += plane.D;
                    if (Math.abs(num6) < 1E-05) {
                        if (num3 > 0) {
                            return;
                        }
                    }
                    else {
                        var num = -num3 / num6;
                        if (num6 < 0) {
                            if (num > maxValue) {
                                return;
                            }
                            if (num > minValue) {
                                minValue = num;
                            }
                        }
                        else {
                            if (num < minValue) {
                                return;
                            }
                            if (num < maxValue) {
                                maxValue = num;
                            }
                        }
                    }
                }
                var num7 = (minValue >= 0) ? minValue : maxValue;
                if (num7 >= 0) {
                    result = num7;
                }
            }
            return result;
        };
        BoundingFrustum.prototype.SupportMapping = function (v) {
            var num3 = Vector3.Dot(this.cornerArray[0], v);
            var index = 0;
            for (var i = 1; i < this.cornerArray.length; i++) {
                var num2 = Vector3.Dot(this.cornerArray[i], v);
                if (num2 > num3) {
                    index = i;
                    num3 = num2;
                }
            }
            return this.cornerArray[index];
        };
        BoundingFrustum.prototype.SetMatrix = function (value) {
            this.matrix = value;
            this.planes[2].Normal.X = -value.M14 - value.M11;
            this.planes[2].Normal.Y = -value.M24 - value.M21;
            this.planes[2].Normal.Z = -value.M34 - value.M31;
            this.planes[2].D = -value.M44 - value.M41;
            this.planes[3].Normal.X = -value.M14 + value.M11;
            this.planes[3].Normal.Y = -value.M24 + value.M21;
            this.planes[3].Normal.Z = -value.M34 + value.M31;
            this.planes[3].D = -value.M44 + value.M41;
            this.planes[4].Normal.X = -value.M14 + value.M12;
            this.planes[4].Normal.Y = -value.M24 + value.M22;
            this.planes[4].Normal.Z = -value.M34 + value.M32;
            this.planes[4].D = -value.M44 + value.M42;
            this.planes[5].Normal.X = -value.M14 - value.M12;
            this.planes[5].Normal.Y = -value.M24 - value.M22;
            this.planes[5].Normal.Z = -value.M34 - value.M32;
            this.planes[5].D = -value.M44 - value.M42;
            this.planes[0].Normal.X = -value.M13;
            this.planes[0].Normal.Y = -value.M23;
            this.planes[0].Normal.Z = -value.M33;
            this.planes[0].D = -value.M43;
            this.planes[1].Normal.X = -value.M14 + value.M13;
            this.planes[1].Normal.Y = -value.M24 + value.M23;
            this.planes[1].Normal.Z = -value.M34 + value.M33;
            this.planes[1].D = -value.M44 + value.M43;
            for (var i = 0; i < 6; i++) {
                var num2 = this.planes[i].Normal.Length();
                this.planes[i].Normal.SetScale(this.planes[i].Normal, 1 / num2);
                this.planes[i].D /= num2;
            }
            var ray = Ray3.New();
            ray = BoundingFrustum.ComputeIntersectionLine(this.planes[0], this.planes[2], ray);
            BoundingFrustum.ComputeIntersection(this.planes[4], ray, this.cornerArray[0]);
            BoundingFrustum.ComputeIntersection(this.planes[5], ray, this.cornerArray[3]);
            ray = BoundingFrustum.ComputeIntersectionLine(this.planes[3], this.planes[0], ray);
            BoundingFrustum.ComputeIntersection(this.planes[4], ray, this.cornerArray[1]);
            BoundingFrustum.ComputeIntersection(this.planes[5], ray, this.cornerArray[2]);
            ray = BoundingFrustum.ComputeIntersectionLine(this.planes[2], this.planes[1], ray);
            BoundingFrustum.ComputeIntersection(this.planes[4], ray, this.cornerArray[4]);
            BoundingFrustum.ComputeIntersection(this.planes[5], ray, this.cornerArray[7]);
            ray = BoundingFrustum.ComputeIntersectionLine(this.planes[1], this.planes[3], ray);
            BoundingFrustum.ComputeIntersection(this.planes[4], ray, this.cornerArray[5]);
            BoundingFrustum.ComputeIntersection(this.planes[5], ray, this.cornerArray[6]);
            ray.Release();
        };
        Object.defineProperty(BoundingFrustum.prototype, "Bottom", {
            get: function () {
                return this.planes[5];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoundingFrustum.prototype, "Far", {
            get: function () {
                return this.planes[1];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoundingFrustum.prototype, "Left", {
            get: function () {
                return this.planes[2];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoundingFrustum.prototype, "Near", {
            get: function () {
                return this.planes[0];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoundingFrustum.prototype, "Right", {
            get: function () {
                return this.planes[3];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoundingFrustum.prototype, "Top", {
            get: function () {
                return this.planes[4];
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(BoundingFrustum.prototype, "Matrix", {
            get: function () {
                return this.matrix;
            },
            set: function (value) {
                this.SetMatrix(value);
            },
            enumerable: true,
            configurable: true
        });
        BoundingFrustum.CornerCount = 8;
        BoundingFrustum.NearPlaneIndex = 0;
        BoundingFrustum.FarPlaneIndex = 1;
        BoundingFrustum.LeftPlaneIndex = 2;
        BoundingFrustum.RightPlaneIndex = 3;
        BoundingFrustum.TopPlaneIndex = 4;
        BoundingFrustum.BottomPlaneIndex = 5;
        BoundingFrustum.NumPlanes = 6;
        BoundingFrustum.tmp_v3_0 = Vector3.Zero;
        BoundingFrustum.tmp_v3_1 = Vector3.Zero;
        BoundingFrustum.tmp_v3_2 = Vector3.Zero;
        BoundingFrustum.tmp_v3_3 = Vector3.Zero;
        BoundingFrustum.tmp_box_points = [
            Vector3.Zero, Vector3.Zero, Vector3.Zero, Vector3.Zero,
            Vector3.Zero, Vector3.Zero, Vector3.Zero, Vector3.Zero
        ];
        return BoundingFrustum;
    }());
    U1.BoundingFrustum = BoundingFrustum;
    (function (ProjectionTypeEnum) {
        ProjectionTypeEnum[ProjectionTypeEnum["Perspective"] = 0] = "Perspective";
        ProjectionTypeEnum[ProjectionTypeEnum["Orthographic"] = 1] = "Orthographic";
    })(U1.ProjectionTypeEnum || (U1.ProjectionTypeEnum = {}));
    var ProjectionTypeEnum = U1.ProjectionTypeEnum;
    var OrientedBox3 = (function () {
        function OrientedBox3() {
            this.Axes = [Vector3.UnitX, Vector3.UnitY, Vector3.UnitZ];
            this.Center = new Vector3();
            this.Extents = [0, 0, 0];
        }
        OrientedBox3.prototype.CopyFrom = function (src) {
            this.Center.CopyFrom(src.Center);
            this.Axes[0].CopyFrom(src.Axes[0]);
            this.Axes[1].CopyFrom(src.Axes[1]);
            this.Axes[2].CopyFrom(src.Axes[2]);
            this.Extents[0] = src.Extents[0];
            this.Extents[1] = src.Extents[1];
            this.Extents[2] = src.Extents[2];
        };
        Object.defineProperty(OrientedBox3.prototype, "Radius", {
            get: function () {
                return (Math.sqrt(this.Extents[0] * this.Extents[0] +
                    this.Extents[1] * this.Extents[1] +
                    this.Extents[2] * this.Extents[2]));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OrientedBox3.prototype, "IsEmpty", {
            get: function () {
                return this.Extents[0] == 0 && this.Extents[1] == 0 && this.Extents[2] == 0;
            },
            enumerable: true,
            configurable: true
        });
        OrientedBox3.prototype.Clone = function () {
            var result = OrientedBox3.New();
            result.CopyFrom(this);
            return result;
        };
        Object.defineProperty(OrientedBox3, "Empty", {
            get: function () {
                return OrientedBox3.New();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(OrientedBox3, "Identity", {
            get: function () {
                var box = OrientedBox3.New();
                box.Extents[0] = 0.5;
                box.Extents[1] = 0.5;
                box.Extents[2] = 0.5;
                return box;
            },
            enumerable: true,
            configurable: true
        });
        OrientedBox3.CheckIntersect = function (rkBox0, rkBox1) {
            var akA = rkBox0.Axes;
            var akB = rkBox1.Axes;
            var afEA = rkBox0.Extents;
            var afEB = rkBox1.Extents;
            var kD = Vector3.Subtract(rkBox1.Center, rkBox0.Center);
            var aafC = [
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0]
            ];
            var aafAbsC = [
                [0, 0, 0],
                [0, 0, 0],
                [0, 0, 0]
            ];
            var afAD = [0, 0, 0]; //Dot(A_i, D)
            var fR0 = 0, fR1 = 0, fR = 0; //interval radii and distance between centers
            var fR01 = 0; // = R0 + R1
            // axis C0+t*A0
            aafC[0][0] = Vector3.Dot(akA[0], akB[0]);
            aafC[0][1] = Vector3.Dot(akA[0], akB[1]);
            aafC[0][2] = Vector3.Dot(akA[0], akB[2]);
            afAD[0] = Vector3.Dot(akA[0], kD);
            aafAbsC[0][0] = Math.abs(aafC[0][0]);
            aafAbsC[0][1] = Math.abs(aafC[0][1]);
            aafAbsC[0][2] = Math.abs(aafC[0][2]);
            fR = Math.abs(afAD[0]);
            fR1 = afEB[0] * aafAbsC[0][0] + afEB[1] * aafAbsC[0][1] + afEB[2] * aafAbsC[0][2];
            fR01 = afEA[0] + fR1;
            if (fR > fR01)
                return false;
            // axis C0+t*A1
            aafC[1][0] = Vector3.Dot(akA[1], akB[0]);
            aafC[1][1] = Vector3.Dot(akA[1], akB[1]);
            aafC[1][2] = Vector3.Dot(akA[1], akB[2]);
            afAD[1] = Vector3.Dot(akA[1], kD);
            aafAbsC[1][0] = Math.abs(aafC[1][0]);
            aafAbsC[1][1] = Math.abs(aafC[1][1]);
            aafAbsC[1][2] = Math.abs(aafC[1][2]);
            fR = Math.abs(afAD[1]);
            fR1 = afEB[0] * aafAbsC[1][0] + afEB[1] * aafAbsC[1][1] + afEB[2] * aafAbsC[1][2];
            fR01 = afEA[1] + fR1;
            if (fR > fR01)
                return false;
            // axis C0+t*A2
            aafC[2][0] = Vector3.Dot(akA[2], akB[0]);
            aafC[2][1] = Vector3.Dot(akA[2], akB[1]);
            aafC[2][2] = Vector3.Dot(akA[2], akB[2]);
            afAD[2] = Vector3.Dot(akA[2], kD);
            aafAbsC[2][0] = Math.abs(aafC[2][0]);
            aafAbsC[2][1] = Math.abs(aafC[2][1]);
            aafAbsC[2][2] = Math.abs(aafC[2][2]);
            fR = Math.abs(afAD[2]);
            fR1 = afEB[0] * aafAbsC[2][0] + afEB[1] * aafAbsC[2][1] + afEB[2] * aafAbsC[2][2];
            fR01 = afEA[2] + fR1;
            if (fR > fR01)
                return false;
            // axis C0+t*B0
            fR = Math.abs(Vector3.Dot(akB[0], kD));
            fR0 = afEA[0] * aafAbsC[0][0] + afEA[1] * aafAbsC[1][0] + afEA[2] * aafAbsC[2][0];
            fR01 = fR0 + afEB[0];
            if (fR > fR01)
                return false;
            // axis C0+t*B1
            fR = Math.abs(Vector3.Dot(akB[1], kD));
            fR0 = afEA[0] * aafAbsC[0][1] + afEA[1] * aafAbsC[1][1] + afEA[2] * aafAbsC[2][1];
            fR01 = fR0 + afEB[1];
            if (fR > fR01)
                return false;
            // axis C0+t*B2
            fR = Math.abs(Vector3.Dot(akB[2], kD));
            fR0 = afEA[0] * aafAbsC[0][2] + afEA[1] * aafAbsC[1][2] + afEA[2] * aafAbsC[2][2];
            fR01 = fR0 + afEB[2];
            if (fR > fR01)
                return false;
            // axis C0+t*A0xB0
            fR = Math.abs(afAD[2] * aafC[1][0] - afAD[1] * aafC[2][0]);
            fR0 = afEA[1] * aafAbsC[2][0] + afEA[2] * aafAbsC[1][0];
            fR1 = afEB[1] * aafAbsC[0][2] + afEB[2] * aafAbsC[0][1];
            fR01 = fR0 + fR1;
            if (fR > fR01)
                return false;
            // axis C0+t*A0xB1
            fR = Math.abs(afAD[2] * aafC[1][1] - afAD[1] * aafC[2][1]);
            fR0 = afEA[1] * aafAbsC[2][1] + afEA[2] * aafAbsC[1][1];
            fR1 = afEB[0] * aafAbsC[0][2] + afEB[2] * aafAbsC[0][0];
            fR01 = fR0 + fR1;
            if (fR > fR01)
                return false;
            // axis C0+t*A0xB2
            fR = Math.abs(afAD[2] * aafC[1][2] - afAD[1] * aafC[2][2]);
            fR0 = afEA[1] * aafAbsC[2][2] + afEA[2] * aafAbsC[1][2];
            fR1 = afEB[0] * aafAbsC[0][1] + afEB[1] * aafAbsC[0][0];
            fR01 = fR0 + fR1;
            if (fR > fR01)
                return false;
            // axis C0+t*A1xB0
            fR = Math.abs(afAD[0] * aafC[2][0] - afAD[2] * aafC[0][0]);
            fR0 = afEA[0] * aafAbsC[2][0] + afEA[2] * aafAbsC[0][0];
            fR1 = afEB[1] * aafAbsC[1][2] + afEB[2] * aafAbsC[1][1];
            fR01 = fR0 + fR1;
            if (fR > fR01)
                return false;
            // axis C0+t*A1xB1
            fR = Math.abs(afAD[0] * aafC[2][1] - afAD[2] * aafC[0][1]);
            fR0 = afEA[0] * aafAbsC[2][1] + afEA[2] * aafAbsC[0][1];
            fR1 = afEB[0] * aafAbsC[1][2] + afEB[2] * aafAbsC[1][0];
            fR01 = fR0 + fR1;
            if (fR > fR01)
                return false;
            // axis C0+t*A1xB2
            fR = Math.abs(afAD[0] * aafC[2][2] - afAD[2] * aafC[0][2]);
            fR0 = afEA[0] * aafAbsC[2][2] + afEA[2] * aafAbsC[0][2];
            fR1 = afEB[0] * aafAbsC[1][1] + afEB[1] * aafAbsC[1][0];
            fR01 = fR0 + fR1;
            if (fR > fR01)
                return false;
            // axis C0+t*A2xB0
            fR = Math.abs(afAD[1] * aafC[0][0] - afAD[0] * aafC[1][0]);
            fR0 = afEA[0] * aafAbsC[1][0] + afEA[1] * aafAbsC[0][0];
            fR1 = afEB[1] * aafAbsC[2][2] + afEB[2] * aafAbsC[2][1];
            fR01 = fR0 + fR1;
            if (fR > fR01)
                return false;
            // axis C0+t*A2xB1
            fR = Math.abs(afAD[1] * aafC[0][1] - afAD[0] * aafC[1][1]);
            fR0 = afEA[0] * aafAbsC[1][1] + afEA[1] * aafAbsC[0][1];
            fR1 = afEB[0] * aafAbsC[2][2] + afEB[2] * aafAbsC[2][0];
            fR01 = fR0 + fR1;
            if (fR > fR01)
                return false;
            // axis C0+t*A2xB2
            fR = Math.abs(afAD[1] * aafC[0][2] - afAD[0] * aafC[1][2]);
            fR0 = afEA[0] * aafAbsC[1][2] + afEA[1] * aafAbsC[0][2];
            fR1 = afEB[0] * aafAbsC[2][1] + afEB[1] * aafAbsC[2][0];
            fR01 = fR0 + fR1;
            if (fR > fR01)
                return false;
            return true;
        };
        OrientedBox3.GetOrientMatrix = function (obx, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.Identity;
            else
                result.SetIdentity();
            result.M11 = obx.Axes[0].X;
            result.M12 = obx.Axes[0].Y;
            result.M13 = obx.Axes[0].Z;
            result.M21 = obx.Axes[1].X;
            result.M22 = obx.Axes[1].Y;
            result.M23 = obx.Axes[1].Z;
            result.M31 = obx.Axes[2].X;
            result.M32 = obx.Axes[2].Y;
            result.M33 = obx.Axes[2].Z;
            return result;
        };
        OrientedBox3.GetMatrix = function (obx, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Matrix4.Identity;
            else
                result.SetIdentity();
            var mxScale = Matrix4.New();
            var mxRot = Matrix4.New();
            var mxTrans = Matrix4.New();
            mxScale.SetCreateScaleByFloats(obx.Extents[0] * 2, obx.Extents[1] * 2, obx.Extents[2] * 2);
            this.GetOrientMatrix(obx, mxRot);
            mxTrans.SetCreateTranslation(obx.Center);
            result.SetMultiply(mxScale, mxRot).Multiply(mxTrans);
            mxScale.Release();
            mxRot.Release();
            mxRot.Release();
            return result;
        };
        OrientedBox3.prototype.GetMatrix = function (result) {
            if (result === void 0) { result = null; }
            return OrientedBox3.GetMatrix(this, result);
        };
        OrientedBox3.prototype.GetOrientMatrix = function (result) {
            if (result === void 0) { result = null; }
            return OrientedBox3.GetOrientMatrix(this, result);
        };
        OrientedBox3.prototype.LFB = function (result) {
            if (result === void 0) { result = null; }
            return this.GetVertex(-1, -1, -1, result);
        };
        OrientedBox3.prototype.LKB = function (result) {
            if (result === void 0) { result = null; }
            return this.GetVertex(-1, 1, -1, result);
        };
        OrientedBox3.prototype.LFT = function (result) {
            if (result === void 0) { result = null; }
            return this.GetVertex(-1, -1, 1, result);
        };
        OrientedBox3.prototype.LKT = function (result) {
            if (result === void 0) { result = null; }
            return this.GetVertex(-1, 1, 1, result);
        };
        OrientedBox3.prototype.RFB = function (result) {
            if (result === void 0) { result = null; }
            return this.GetVertex(1, -1, -1, result);
        };
        OrientedBox3.prototype.RKB = function (result) {
            if (result === void 0) { result = null; }
            return this.GetVertex(1, 1, -1, result);
        };
        OrientedBox3.prototype.RFT = function (result) {
            if (result === void 0) { result = null; }
            return this.GetVertex(1, -1, 1, result);
        };
        OrientedBox3.prototype.RKT = function (result) {
            if (result === void 0) { result = null; }
            return this.GetVertex(1, 1, 1, result);
        };
        OrientedBox3.prototype.FrontPlane = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = new Plane();
            var lfb = this.LFB();
            var lkb = this.LKB();
            var norm = Vector3.New().SetSubtract(lfb, lkb);
            result.SetFromPointNormal(lfb, norm);
            lfb.Release();
            lkb.Release();
            norm.Release();
            return result;
        };
        OrientedBox3.prototype.BackPlane = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = new Plane();
            var lfb = this.LFB();
            var lkb = this.LKB();
            var norm = Vector3.Subtract(lkb, lfb);
            result.SetFromPointNormal(lkb, norm);
            lfb.Release();
            lkb.Release();
            norm.Release();
            return result;
        };
        OrientedBox3.prototype.RightPlane = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = new Plane();
            var rkb = this.RKB();
            var lkb = this.LKB();
            var norm = Vector3.Subtract(rkb, lkb);
            result.SetFromPointNormal(rkb, norm);
            rkb.Release();
            lkb.Release();
            norm.Release();
            return result;
        };
        OrientedBox3.prototype.LeftPlane = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = new Plane();
            var rkb = this.RKB();
            var lkb = this.LKB();
            return Plane.FromPointNormal(lkb, Vector3.Subtract(lkb, rkb));
        };
        OrientedBox3.prototype.TopPlane = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = new Plane();
            var lkt = this.LKT();
            var lkb = this.LKB();
            var norm = Vector3.Subtract(lkt, lkb);
            result.SetFromPointNormal(lkt, norm);
            lkt.Release();
            lkb.Release();
            norm.Release();
            return result;
        };
        OrientedBox3.prototype.BottomPlane = function (result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = new Plane();
            var lkt = this.LKT();
            var lkb = this.LKB();
            var norm = Vector3.Subtract(lkb, lkt);
            result.SetFromPointNormal(lkb, norm);
            lkt.Release();
            lkb.Release();
            norm.Release();
            return result;
        };
        OrientedBox3.prototype.GetVs = function (points) {
            if (points == null)
                points = new Array(8);
            points[0] = this.LFB(points[0]);
            points[1] = this.LKB(points[1]);
            points[2] = this.LFT(points[2]);
            points[3] = this.LKT(points[3]);
            points[4] = this.RFB(points[4]);
            points[5] = this.RKB(points[5]);
            points[6] = this.RFT(points[6]);
            points[7] = this.RKT(points[7]);
            return points;
        };
        OrientedBox3.prototype.GetVertex = function (s0, s1, s2, result) {
            if (result === void 0) { result = null; }
            if (result == null)
                result = Vector3.New();
            else
                result.SetZero();
            result.CopyFrom(this.Center);
            result.ScaleAdd(s0 * this.Extents[0], this.Axes[0])
                .ScaleAdd(s1 * this.Extents[1], this.Axes[1])
                .ScaleAdd(s2 * this.Extents[2], this.Axes[2]);
            return result;
        };
        OrientedBox3.Transform = function (source, matrix, result) {
            if (result == null)
                result = OrientedBox3.New();
            var xp = Vector3.ScaleAdd(result.Center, result.Extents[0], result.Axes[0]).Transform(matrix);
            var yp = Vector3.ScaleAdd(result.Center, result.Extents[1], result.Axes[1]).Transform(matrix);
            var zp = Vector3.ScaleAdd(result.Center, result.Extents[2], result.Axes[2]).Transform(matrix);
            var cp = Vector3.Transform(result.Center, matrix);
            result.Center.CopyFrom(cp);
            result.Axes[0].SetSubtract(xp, cp).Normalize();
            result.Axes[1].SetSubtract(yp, cp).Normalize();
            result.Axes[2].SetSubtract(zp, cp).Normalize();
            result.Extents[0] = Vector3.Distance(xp, cp);
            result.Extents[0] = Vector3.Distance(yp, cp);
            result.Extents[0] = Vector3.Distance(zp, cp);
            xp.Release();
            yp.Release();
            zp.Release();
            cp.Release();
            return result;
        };
        OrientedBox3.prototype.Transform = function (matrix) {
            var xp = Vector3.ScaleAdd(this.Center, this.Extents[0], this.Axes[0]).Transform(matrix);
            var yp = Vector3.ScaleAdd(this.Center, this.Extents[1], this.Axes[1]).Transform(matrix);
            var zp = Vector3.ScaleAdd(this.Center, this.Extents[2], this.Axes[2]).Transform(matrix);
            var cp = Vector3.Transform(this.Center, matrix);
            this.Center.CopyFrom(cp);
            this.Axes[0].TransformNormal(matrix).Normalize();
            this.Axes[1].TransformNormal(matrix).Normalize();
            this.Axes[2].TransformNormal(matrix).Normalize();
            this.Extents[0] = Vector3.Distance(xp, cp);
            this.Extents[1] = Vector3.Distance(yp, cp);
            this.Extents[2] = Vector3.Distance(zp, cp);
            xp.Release();
            yp.Release();
            zp.Release();
            cp.Release();
            return this;
        };
        OrientedBox3.prototype.SetTransform = function (source, matrix) {
            var xp = Vector3.ScaleAdd(source.Center, source.Extents[0], source.Axes[0]).Transform(matrix);
            var yp = Vector3.ScaleAdd(source.Center, source.Extents[1], source.Axes[1]).Transform(matrix);
            var zp = Vector3.ScaleAdd(source.Center, source.Extents[2], source.Axes[2]).Transform(matrix);
            var cp = Vector3.Transform(source.Center, matrix);
            this.Center.CopyFrom(cp);
            this.Axes[0].SetSubtract(xp, cp).Normalize();
            this.Axes[1].SetSubtract(yp, cp).Normalize();
            this.Axes[2].SetSubtract(zp, cp).Normalize();
            this.Extents[0] = Vector3.Distance(xp, cp);
            this.Extents[0] = Vector3.Distance(yp, cp);
            this.Extents[0] = Vector3.Distance(zp, cp);
            xp.Release();
            yp.Release();
            zp.Release();
            cp.Release();
            return this;
        };
        OrientedBox3.prototype.ScaleWithTwoPoints = function (cent, p0, p1) {
            return this.SetScaleWithTowPoints(this, cent, p0, p1);
        };
        OrientedBox3.prototype.Scale = function (cent, axisScale) {
            return this.SetScale(this, cent, axisScale);
        };
        OrientedBox3.prototype.SetScale = function (source, cent, axisScale) {
            var cc = Vector3.New();
            cent = cent.Clone();
            cc.SetSubtract(source.Center, cent);
            var cx = Vector3.Dot(source.Axes[0], cc);
            var cy = Vector3.Dot(source.Axes[1], cc);
            var cz = Vector3.Dot(source.Axes[2], cc);
            cent.ScaleAdd((cx * axisScale.X), source.Axes[0]);
            cent.ScaleAdd((cy * axisScale.Y), source.Axes[1]);
            cent.ScaleAdd((cz * axisScale.Z), source.Axes[2]);
            this.Center.CopyFrom(cent);
            this.Extents[0] = source.Extents[0] * axisScale.X;
            this.Extents[1] = source.Extents[1] * axisScale.Y;
            this.Extents[2] = source.Extents[2] * axisScale.Z;
            cc.Release();
            cent.Release();
            return this;
        };
        OrientedBox3.prototype.SetScaleWithTowPoints = function (source, cent, p0, p1) {
            var d0 = Vector3.Subtract(p0, cent);
            var d1 = Vector3.Subtract(p1, cent);
            var dir = Vector3.Subtract(p1, p0).Normalize();
            var a0 = Vector3.Distance(p0, cent);
            var a1 = Vector3.Distance(p1, cent);
            if (a0 < 0.0001) {
                d0.Release();
                d1.Release();
                dir.Release();
                return source;
            }
            var sdt = (a1 - a0) / a0;
            var scale = 1 + sdt;
            var xAxis = source.Axes[0];
            var yAxis = source.Axes[1];
            var zAxis = source.Axes[2];
            var x0 = Vector3.Dot(d0, xAxis);
            var x1 = Vector3.Dot(d1, xAxis);
            var y0 = Vector3.Dot(d0, yAxis);
            var y1 = Vector3.Dot(d1, yAxis);
            var z0 = Vector3.Dot(d0, zAxis);
            var z1 = Vector3.Dot(d1, zAxis);
            var sc = Vector3.New();
            sc.X = 1 + (Math.abs(x0) > 0.001 ? (x1 - x0) / x0 : 0);
            sc.Y = 1 + (Math.abs(y0) > 0.001 ? (y1 - y0) / y0 : 0);
            sc.Z = 1 + (Math.abs(z0) > 0.001 ? (z1 - z0) / z0 : 0);
            this.Scale(cent, sc);
            d0.Release();
            d1.Release();
            dir.Release();
            sc.Release();
            return this;
        };
        OrientedBox3.Rotate = function (source, center, axis, angle) {
            var rm = Matrix4.CreateTranslation(Vector3.Negate(center));
            rm = Matrix4.Multiply(rm, Matrix4.CreateFromAxisAngle(axis, angle));
            rm = Matrix4.Multiply(rm, Matrix4.CreateTranslation(center));
            var cent = Vector3.Transform(source.Center, rm);
            var xAxis = Vector3.Normalize(Vector3.TransformNormal(source.Axes[0], rm));
            var yAxis = Vector3.Normalize(Vector3.TransformNormal(source.Axes[1], rm));
            var zAxis = Vector3.Normalize(Vector3.TransformNormal(source.Axes[2], rm));
            var result = source.Clone();
            result.Center = cent;
            result.Axes[0] = xAxis;
            result.Axes[1] = yAxis;
            result.Axes[2] = zAxis;
            return result;
        };
        OrientedBox3.Translate = function (source, offset) {
            var result = source.Clone();
            result.Center.Add(offset);
            return result;
        };
        OrientedBox3.GetMatrixBetween = function (from, to) {
            for (var i = 0; i < from.Extents.length; i++)
                if (from.Extents[i] == 0)
                    from.Extents[i] = 0.5;
            for (var i = 0; i < to.Extents.length; i++)
                if (to.Extents[i] == 0)
                    to.Extents[i] = 0.5;
            //var sm = Matrix4.CreateScaleByFloats(
            //    to.Extents[0] / from.Extents[0],
            //    to.Extents[1] / from.Extents[1],
            //    to.Extents[2] / from.Extents[2]);
            //var rm = from.GetOrientMatrix().Invert();
            //var rm1 = to.GetOrientMatrix();
            //rm.Multiply(rm1);
            var tm = to.GetMatrix();
            var sm = from.GetMatrix();
            //var v1 = Vector3.Subtract(to.Center, from.Center);
            //var tm = Matrix4.CreateTranslation(v1);
            var result = sm.Invert().Multiply(tm);
            //rm.Release();
            //rm1.Release();
            tm.Release();
            //v1.Release();
            return result;
        };
        OrientedBox3.prototype.Rotate = function (source, center, axis, angle) {
            var rm = Matrix4.CreateTranslation(Vector3.Negate(center));
            rm = Matrix4.Multiply(rm, Matrix4.CreateFromAxisAngle(axis, angle));
            rm = Matrix4.Multiply(rm, Matrix4.CreateTranslation(center));
            var cent = Vector3.Transform(source.Center, rm);
            var xAxis = Vector3.Normalize(Vector3.TransformNormal(source.Axes[0], rm));
            var yAxis = Vector3.Normalize(Vector3.TransformNormal(source.Axes[1], rm));
            var zAxis = Vector3.Normalize(Vector3.TransformNormal(source.Axes[2], rm));
            var result = source.Clone();
            result.Center = cent;
            result.Axes[0] = xAxis;
            result.Axes[1] = yAxis;
            result.Axes[2] = zAxis;
            return result;
        };
        OrientedBox3.prototype.SetRotate = function (source, center, axis, angle) {
            var tv0 = Vector3.Negate(center);
            var m0 = Matrix4.CreateTranslation(tv0);
            var rm = Matrix4.New().SetCreateTranslation(tv0);
            rm = Matrix4.Multiply(rm, Matrix4.CreateFromAxisAngle(axis, angle));
            rm = Matrix4.Multiply(rm, Matrix4.CreateTranslation(center));
            var cent = Vector3.Transform(source.Center, rm);
            var xAxis = Vector3.Normalize(Vector3.TransformNormal(source.Axes[0], rm));
            var yAxis = Vector3.Normalize(Vector3.TransformNormal(source.Axes[1], rm));
            var zAxis = Vector3.Normalize(Vector3.TransformNormal(source.Axes[2], rm));
            this.Center.CopyFrom(cent);
            this.Axes[0] = xAxis;
            this.Axes[1] = yAxis;
            this.Axes[2] = zAxis;
            this.Extents[0] = source.Extents[0];
            this.Extents[1] = source.Extents[1];
            this.Extents[2] = source.Extents[2];
            return this;
        };
        OrientedBox3.New = function () {
            var res = OrientedBox3._cache.New();
            res.Axes[0].Set(1, 0, 0);
            res.Axes[1].Set(0, 1, 0);
            res.Axes[2].Set(0, 0, 1);
            res.Center.Set(0, 0, 0);
            res.Extents[0] = 0;
            res.Extents[1] = 0;
            res.Extents[2] = 0;
            return res;
        };
        OrientedBox3.Release = function (v) {
            OrientedBox3._cache.Release(v);
        };
        OrientedBox3.prototype.Release = function () {
            OrientedBox3.Release(this);
        };
        OrientedBox3._cache = new Cache(OrientedBox3);
        return OrientedBox3;
    }());
    U1.OrientedBox3 = OrientedBox3;
    (function (LightTypeEnum) {
        LightTypeEnum[LightTypeEnum["D3DLIGHT_POINT"] = 1] = "D3DLIGHT_POINT";
        LightTypeEnum[LightTypeEnum["D3DLIGHT_SPOT"] = 2] = "D3DLIGHT_SPOT";
        LightTypeEnum[LightTypeEnum["D3DLIGHT_DIRECTIONAL"] = 3] = "D3DLIGHT_DIRECTIONAL";
        LightTypeEnum[LightTypeEnum["D3DLIGHT_FORCE_DWORD"] = 2147483647] = "D3DLIGHT_FORCE_DWORD";
    })(U1.LightTypeEnum || (U1.LightTypeEnum = {}));
    var LightTypeEnum = U1.LightTypeEnum;
    var Light = (function () {
        function Light() {
            this.Diffuse = new Color(255, 255, 255);
            this.Specular = new Color(255, 255, 255);
            this.Ambient = new Color(0, 0, 0);
            this.Position = new Vector3(0, 0, 0);
            this.Direction = Vector3.Down;
        }
        Light.prototype.Clone = function () {
            var copy = new Light();
            copy.Type = this.Type;
            copy.Diffuse.CopyFrom(this.Diffuse);
            copy.Specular.CopyFrom(this.Specular);
            copy.Ambient.CopyFrom(this.Ambient);
            copy.Position.CopyFrom(this.Position);
            copy.Direction.CopyFrom(this.Direction);
            copy.Range = this.Range;
            copy.Falloff = this.Falloff;
            copy.Attenuation0 = this.Attenuation0;
            copy.Attenuation1 = this.Attenuation1;
            copy.Attenuation2 = this.Attenuation2;
            copy.Theta = this.Theta;
            copy.Phi = this.Phi;
            return copy;
        };
        Light.prototype.ConvertFromStr = function (value) {
            if (value == null)
                return;
            var items = value.split(",");
            var idx = 0;
            this.Type = items.length > idx ? parseInt(items[idx++]) : 0;
            this.Diffuse.R = items.length > idx ? parseInt(items[idx++]) : 0;
            this.Diffuse.G = items.length > idx ? parseInt(items[idx++]) : 0;
            this.Diffuse.B = items.length > idx ? parseInt(items[idx++]) : 0;
            this.Specular.R = items.length > idx ? parseInt(items[idx++]) : 0;
            this.Specular.G = items.length > idx ? parseInt(items[idx++]) : 0;
            this.Specular.B = items.length > idx ? parseInt(items[idx++]) : 0;
            this.Ambient.R = items.length > idx ? parseInt(items[idx++]) : 0;
            this.Ambient.G = items.length > idx ? parseInt(items[idx++]) : 0;
            this.Ambient.B = items.length > idx ? parseInt(items[idx++]) : 0;
            this.Position.X = items.length > idx ? parseFloat(items[idx++]) : 0;
            this.Position.Y = items.length > idx ? parseFloat(items[idx++]) : 0;
            this.Position.Z = items.length > idx ? parseFloat(items[idx++]) : 0;
            this.Direction.X = items.length > idx ? parseFloat(items[idx++]) : 0;
            this.Direction.Y = items.length > idx ? parseFloat(items[idx++]) : 0;
            this.Direction.Z = items.length > idx ? parseFloat(items[idx++]) : 0;
            this.Range = items.length > idx ? parseFloat(items[idx++]) : 0;
            this.Falloff = items.length > idx ? parseFloat(items[idx++]) : 0;
            this.Attenuation0 = items.length > idx ? parseFloat(items[idx++]) : 0;
            this.Attenuation1 = items.length > idx ? parseFloat(items[idx++]) : 0;
            this.Attenuation2 = items.length > idx ? parseFloat(items[idx++]) : 0;
            this.Theta = items.length > idx ? parseFloat(items[idx++]) : 0;
            this.Phi = items.length > idx ? parseFloat(items[idx++]) : 0;
        };
        Light.prototype.ConvertToStr = function () {
            return "" +
                this.Type + "," +
                this.Diffuse.R + "," +
                this.Diffuse.G + "," +
                this.Diffuse.B + "," +
                this.Specular.R + "," +
                this.Specular.G + "," +
                this.Specular.B + "," +
                this.Ambient.R + "," +
                this.Ambient.G + "," +
                this.Ambient.B + "," +
                this.Position.X + "," +
                this.Position.Y + "," +
                this.Position.Z + "," +
                this.Direction.X + "," +
                this.Direction.Y + "," +
                this.Direction.Z + "," +
                this.Range + "," +
                this.Falloff + "," +
                this.Attenuation0 + "," +
                this.Attenuation1 + "," +
                this.Attenuation2 + "," +
                this.Theta + "," +
                this.Phi;
        };
        Light.prototype.CopyFrom = function (source) {
            this.Type = source.Type;
            this.Diffuse.R = source.Diffuse.R;
            this.Diffuse.G = source.Diffuse.G;
            this.Diffuse.B = source.Diffuse.B;
            this.Specular.R = source.Specular.R;
            this.Specular.G = source.Specular.G;
            this.Specular.B = source.Specular.B;
            this.Ambient.R = source.Ambient.R;
            this.Ambient.G = source.Ambient.G;
            this.Ambient.B = source.Ambient.B;
            this.Position.X = source.Position.X;
            this.Position.Y = source.Position.Y;
            this.Position.Z = source.Position.Z;
            this.Direction.X = source.Direction.X;
            this.Direction.Y = source.Direction.Y;
            this.Direction.Z = source.Direction.Z;
            this.Range = source.Range;
            this.Falloff = source.Falloff;
            this.Attenuation0 = source.Attenuation0;
            this.Attenuation1 = source.Attenuation1;
            this.Attenuation2 = source.Attenuation2;
            this.Theta = source.Theta;
            this.Phi = source.Phi;
        };
        Light.prototype.Equals = function (source) {
            if (this === source)
                return true;
            return this.Type == source.Type &&
                this.Diffuse.R == source.Diffuse.R &&
                this.Diffuse.G == source.Diffuse.G &&
                this.Diffuse.B == source.Diffuse.B &&
                this.Specular.R == source.Specular.R &&
                this.Specular.G == source.Specular.G &&
                this.Specular.B == source.Specular.B &&
                this.Ambient.R == source.Ambient.R &&
                this.Ambient.G == source.Ambient.G &&
                this.Ambient.B == source.Ambient.B &&
                this.Position.X == source.Position.X &&
                this.Position.Y == source.Position.Y &&
                this.Position.Z == source.Position.Z &&
                this.Direction.X == source.Direction.X &&
                this.Direction.Y == source.Direction.Y &&
                this.Direction.Z == source.Direction.Z &&
                this.Range == source.Range &&
                this.Falloff == source.Falloff &&
                this.Attenuation0 == source.Attenuation0 &&
                this.Attenuation1 == source.Attenuation1 &&
                this.Attenuation2 == source.Attenuation2 &&
                this.Theta == source.Theta &&
                this.Phi == source.Phi;
        };
        return Light;
    }());
    U1.Light = Light;
    var Color = (function () {
        function Color(r, g, b, a) {
            if (r === void 0) { r = 0; }
            if (g === void 0) { g = 0; }
            if (b === void 0) { b = 0; }
            if (a === void 0) { a = 255; }
            this.A = Math.floor(a);
            this.R = Math.floor(r);
            this.G = Math.floor(g);
            this.B = Math.floor(b);
        }
        Color.prototype.ConvertFromStr = function (value) {
            if (value == null)
                return;
            var items = value.split(",");
            this.A = items.length > 0 ? parseInt(items[0]) : 0;
            this.R = items.length > 1 ? parseInt(items[1]) : 0;
            this.G = items.length > 2 ? parseInt(items[2]) : 0;
            this.B = items.length > 3 ? parseInt(items[3]) : 0;
        };
        Color.prototype.ConvertToStr = function () {
            return "" + this.A + "," + this.R + "," + this.G + "," + this.B;
        };
        Color.prototype.Equals = function (other) {
            if (this === other)
                return true;
            if (this.A == other.A &&
                this.R == other.R &&
                this.G == other.G &&
                this.B == other.B)
                return true;
            return false;
        };
        Color.prototype.CopyFrom = function (other) {
            this.A = other.A;
            this.R = other.R;
            this.G = other.G;
            this.B = other.B;
        };
        Color.prototype.Clone = function () {
            return new Color(this.R, this.G, this.B, this.A);
        };
        Color.FromUInt32 = function (argb) {
            var color = new Color();
            //color.A = ((argb & 0xff000000) >> 0x18);
            color.A = 255;
            color.R = ((argb & 0xff0000) >> 0x10);
            color.G = ((argb & 0xff00) >> 8);
            color.B = (argb & 0xff);
            return color;
        };
        Color.prototype.toString = function () {
            return "rgba(" + this.R + "," + this.G + "," + this.B + "," + this.A + ")";
        };
        Color.New = function () {
            var res = Color._cache.New();
            res.A = res.R = res.G = res.B = 0;
            return res;
        };
        Color.Release = function (v) {
            Color._cache.Release(v);
        };
        Color.prototype.Release = function () {
            Color.Release(this);
        };
        Color._cache = new Cache(Color);
        return Color;
    }());
    U1.Color = Color;
    var Line2 = (function () {
        function Line2(position, direction) {
            if (position === void 0) { position = null; }
            if (direction === void 0) { direction = null; }
            if (position == null)
                position = Vector2.Zero;
            if (direction == null)
                direction = Vector2.Zero;
            this.Position = position;
            this.Direction = direction;
        }
        Line2.prototype.ConvertFromStr = function (value) {
            if (value == null)
                return;
            var items = value.split(",");
            this.Position.X = items.length > 0 ? parseFloat(items[0]) : 0;
            this.Position.Y = items.length > 1 ? parseFloat(items[1]) : 0;
            this.Direction.X = items.length > 2 ? parseFloat(items[2]) : 0;
            this.Direction.Y = items.length > 3 ? parseFloat(items[3]) : 0;
        };
        Line2.prototype.ConvertToStr = function () {
            return "" + this.Position.X + "," + this.Position.Y + "," + this.Direction.X + "," + this.Direction.Y;
        };
        Line2.prototype.Equals = function (other) {
            return this.Position.Equals(other.Position) && this.Direction.Equals(other.Direction);
        };
        Line2.prototype.CopyFrom = function (line2) {
            this.Position = line2.Position;
            this.Direction = line2.Direction;
        };
        Line2.prototype.CopyFromRay = function (ray) {
            this.Position = ray.Position;
            this.Direction = ray.Direction;
        };
        Line2.GetIntersectPoint = function (line0, line1, result) {
            if (result === void 0) { result = null; }
            var p0 = line0.Position, d0 = line0.Direction;
            var p1 = line1.Position, d1 = line1.Direction;
            var d01 = Vector2.Subtract(p0, p1);
            if (result == null)
                result = Vector2.New();
            var a = (d1.X) * (d01.Y) - (d1.Y) * (d01.X);
            var b = (d1.Y) * (d0.X) - (d1.X) * (d0.Y);
            if (Math.abs(b) < U1.PRECISION)
                // 평행라인
                return null;
            var t = a / b;
            result.SetScaleAdd(p0, t, d0);
            d01.Release();
            return result;
        };
        Line2.GetIntersectInfo = function (line0, line1, result) {
            if (result === void 0) { result = null; }
            if (result == null) {
                result = { IsectP: null, s: 0, t: 0 };
            }
            var d0 = line0.Direction;
            var d1 = line1.Direction;
            var diff = Vector2.Subtract(line1.Position, line0.Position);
            // v0 + sd0 = v1 + td1;
            // sd0 = v1 + td1 - v0;
            // s(d0 dot d0) = (v1 + td1 - v0) dot d0
            // s = ((v1- v0  + td1) dot d0) / (d0 dot d0)
            // s = ((v1- v0) dot d0) + (td1 dot d0))/ (d0 dot d0)
            // s = (v1- v0) dot d0) / (d0 dot d0) + (td1 dot d0)/(d0 dot d0)
            // s = (v1- v0) dot d0) / (d0 dot d0) + t(d1 dot d0)/(d0 dot d0)
            var a = Vector2.Dot(diff, d0) / Vector2.Dot(d0, d0);
            var b = Vector2.Dot(d1, d0) / Vector2.Dot(d0, d0);
            var c = Vector2.Dot(Vector2.Negate(diff), d1) / Vector2.Dot(d1, d1);
            var d = Vector2.Dot(d0, d1) / Vector2.Dot(d1, d1);
            diff.Release();
            // s = a + bt; t = c + ds;
            // s = a + b*(c + ds);  s = a + b*c + bds; s - bds = a + b*c; (1-bd)s = a + b*c;
            // bd == 1 평행 
            if (1 - U1.PRECISION < b * d && b * d < 1 + U1.PRECISION) {
                return null;
            }
            else {
                var s = (a + b * c) / (1 - b * d);
                var t = c + d * s;
                if (result.IsectP != null)
                    result.IsectP = new Vector2();
                result.IsectP.SetScaleAdd(line0.Position, s, d0);
                result.s = s;
                result.t = t;
                return result;
            }
        };
        Line2.DistanceSquared = function (line, point) {
            var dir = Vector2.Normalize(line.Direction);
            var p_s = Vector2.Subtract(point, line.Position);
            var l = Vector2.Dot(dir, p_s);
            dir.Release();
            p_s.Release();
            return Vector2.DistanceSquared(line.Position, point) - l * l;
        };
        return Line2;
    }());
    U1.Line2 = Line2;
    var Segment2 = (function () {
        function Segment2(start, end) {
            this.Start = start;
            this.End = end;
        }
        Segment2.prototype.ConvertFromStr = function (value) {
            if (value == null)
                return;
            var items = value.split(",");
            this.Start.X = items.length > 0 ? parseFloat(items[0]) : 0;
            this.Start.Y = items.length > 1 ? parseFloat(items[1]) : 0;
            this.End.X = items.length > 2 ? parseFloat(items[2]) : 0;
            this.End.Y = items.length > 3 ? parseFloat(items[3]) : 0;
        };
        Segment2.prototype.ConvertToStr = function () {
            return "" + this.Start.X + "," + this.Start.Y + "," + this.End.X + "," + this.End.Y;
        };
        Segment2.prototype.Equals = function (other) {
            return this.Start.Equals(other.Start) && this.End.Equals(other.End);
        };
        Segment2.CheckCross = function (seg0, seg1) {
            var s0 = seg0.Start;
            var s1 = seg0.End;
            var t0 = seg1.Start;
            var t1 = seg1.End;
            if ((s0.X < t0.X && s0.X < t1.X && s1.X < t0.X && s1.X < t1.X) ||
                (s0.X > t0.X && s0.X > t1.X && s1.X > t0.X && s1.X > t1.X))
                return null;
            if ((s0.Y < t0.Y && s0.Y < t1.Y && s1.Y < t0.Y && s1.Y < t1.Y) ||
                (s0.Y > t0.Y && s0.Y > t1.Y && s1.Y > t0.Y && s1.Y > t1.Y))
                return null;
            var sd = Vector2.Subtract(s1, s0);
            var td = Vector2.Subtract(t1, t0);
            var isect = GeometryHelper2.CrossLineLine(s0, sd, t0, td);
            if (isect == null) {
                return null;
            }
            if (isect.s < 0 || isect.s > 1 || isect.t < 0 || isect.t > 1)
                return null;
            var o_crossv = Vector2.Add(s0, Vector2.Scale(sd, isect.s));
            return o_crossv;
        };
        Segment2.IsIntersectPolylines = function (source, target) {
            for (var i = 1; i < source.length; i++) {
                var seg0 = new Segment2(source[i - 1], source[i]);
                for (var j = 1; j < target.length; j++) {
                    var seg1 = new Segment2(target[j - 1], target[j]);
                    if (Segment2.CheckCross(seg0, seg1) != null)
                        return true;
                }
            }
            return false;
        };
        Segment2.DistanceSquaredPoint = function (segment, point) {
            var dir = Vector2.Subtract(segment.End, segment.Start);
            dir.Normalize();
            var distSq = Vector2.DistanceSquared(point, segment.Start);
            var s = Vector2.Dot(Vector2.Subtract(point, segment.Start), dir);
            if (s <= 0)
                return distSq;
            var e = Vector2.Dot(Vector2.Subtract(point, segment.End), Vector2.Negate(dir));
            if (e <= 0) {
                distSq = Vector2.DistanceSquared(point, segment.End);
                return distSq;
            }
            return distSq - (s * s);
        };
        Segment2.DistancePoint = function (segment, point) {
            return Math.sqrt(Segment2.DistanceSquaredPoint(segment, point));
        };
        return Segment2;
    }());
    U1.Segment2 = Segment2;
    var Circle2 = (function () {
        function Circle2() {
        }
        Circle2.prototype.Circle2 = function (center, radius) {
            if (center === void 0) { center = Vector2.Zero; }
            if (radius === void 0) { radius = 0; }
            this.Center = center;
            this.Radius = radius;
        };
        Circle2.prototype.Equals = function (other) {
            return this.Center.Equals(other.Center) && (this.Radius == other.Radius);
        };
        Circle2.IsIntersectPolyline = function (center, sqRadius, path) {
            for (var i = 1; i < path.length; i++) {
                var s = path[i - 1];
                //시작점과 거리가 반지름 이내
                var cs2 = Vector2.DistanceSquared(center, s);
                if (cs2 < sqRadius)
                    return true;
                var e = path[i];
                var s_e = Vector2.Subtract(e, s);
                var dir = Vector2.Normalize(s_e);
                var l = Vector2.Dot(dir, Vector2.Subtract(center, s));
                var ll = l * l;
                //선과의 거리가 반지름 이상 
                var sql = cs2 - ll;
                if (sql > sqRadius)
                    continue;
                //시작점 이전 교차
                if (l < 0 && cs2 > sqRadius)
                    continue;
                //끝점 이후 교차
                if (ll > Vector2.Dot(s_e, s_e) && Vector2.DistanceSquared(center, s) > sqRadius)
                    continue;
                // 교차점이 반지름 이내
                return true;
            }
            return false;
        };
        Circle2.IsIntersectPolygon = function (center, sqRadius, path) {
            for (var i = 1; i <= path.length; i++) {
                var s = path[i - 1];
                //시작점과 거리가 반지름 이내
                var cs2 = Vector2.DistanceSquared(center, s);
                if (cs2 < sqRadius)
                    return true;
                var e = i < path.length ? path[i] : path[0];
                var s_e = Vector2.Subtract(e, s);
                var dir = Vector2.Normalize(s_e);
                var l = Vector2.Dot(dir, Vector2.Subtract(center, s));
                var ll = l * l;
                //선과의 거리가 반지름 이상
                var sql = cs2 - ll;
                if (sql > sqRadius)
                    continue;
                //시작점 이전 교차
                if (l < 0 && cs2 > sqRadius)
                    continue;
                //끝점 이후 교차
                if (ll > Vector2.Dot(s_e, s_e) && Vector2.DistanceSquared(center, s) > sqRadius)
                    continue;
                // 교차점이 반지름 이내
                return true;
            }
            return false;
        };
        return Circle2;
    }());
    U1.Circle2 = Circle2;
    var GeometryHelper2 = (function () {
        function GeometryHelper2() {
        }
        GeometryHelper2.AngleBetween = function (start, end) {
            if (start.Equals(end))
                return 0;
            start = start.Clone();
            start.Normalize();
            end = end.Clone();
            end.Normalize();
            if (start.Equals(end))
                return 0;
            var a = Vector2.Dot(start, end);
            a = Clamp(a, -1, 1);
            return (Math.acos(a));
        };
        GeometryHelper2.AngleCCW = function (baseAxis, vector) {
            baseAxis = baseAxis.Clone();
            vector = vector.Clone();
            baseAxis.Normalize();
            vector.Normalize();
            var dotu = Vector2.Dot(baseAxis, vector);
            if (dotu >= 1 - U1.Epsilon)
                return 0;
            var leftSide = new Vector2(-baseAxis.Y, baseAxis.X);
            var dotv = Vector2.Dot(leftSide, vector);
            dotu = Clamp(dotu, -1, 1);
            if (dotv >= 0) {
                return Math.acos(dotu);
            }
            else {
                var pi2 = (Math.PI * 2);
                var a = (Math.acos(dotu));
                return pi2 - a;
            }
        };
        GeometryHelper2.CrossLineLine = function (s0, sd, t0, td) {
            var diff = Vector2.Subtract(t0, s0);
            // s0 + s*sd = t0 + t*td;
            // s*sd = t0 + t*td - s0;
            // s(sd dot sd) = (t0 + t*td - s0) dot sd
            // s = ((t0- s0  + t*td) dot sd) / (sd dot sd)
            // s = ((t0- s0) dot sd) + (t*td dot sd))/ (sd dot sd)
            // s = (t0- s0) dot sd) / (sd dot sd) + (t*td dot sd)/(sd dot sd)
            // s = (t0- s0) dot sd) / (sd dot sd) + t(td dot sd)/(sd dot sd)
            var a = Vector2.Dot(diff, sd) / Vector2.Dot(sd, sd);
            var b = Vector2.Dot(td, sd) / Vector2.Dot(sd, sd);
            var c = Vector2.Dot(Vector2.Negate(diff), td) / Vector2.Dot(td, td);
            var d = Vector2.Dot(sd, td) / Vector2.Dot(td, td);
            // s = a + t*b; 
            // t = c + s*d;
            // s = a + b*(c + d*s); 
            // s = a + b*c + bd*s; 
            // s - bd*s = a + b*c; 
            // (1-bd)s = a + b*c;
            // bd == 1 평행 
            if (1 - U1.PRECISION < b * d && b * d < 1 + U1.PRECISION) {
                return null;
            }
            else {
                var s = (a + b * c) / (1 - b * d);
                var t = c + d * s;
                return { s: s, t: t };
            }
        };
        GeometryHelper2.CrossSegSeg = function (s0, s1, t0, t1, SAME_DIST) {
            if (SAME_DIST === void 0) { SAME_DIST = U1.Epsilon; }
            var ss;
            var ts;
            //max_s.x < min_t.x 
            if (s0.X + SAME_DIST < t0.X &&
                s0.X + SAME_DIST < t1.X &&
                s1.X + SAME_DIST < t0.X &&
                s1.X + SAME_DIST < t1.X)
                return null;
            //min_s.x > max_t.x
            if (s0.X - SAME_DIST > t0.X &&
                s0.X - SAME_DIST > t1.X &&
                s1.X - SAME_DIST > t0.X &&
                s1.X - SAME_DIST > t1.X)
                return null;
            //max_s.y < min_t.y 
            if (s0.Y + SAME_DIST < t0.Y &&
                s0.Y + SAME_DIST < t1.Y &&
                s1.Y + SAME_DIST < t0.Y &&
                s1.Y + SAME_DIST < t1.Y)
                return null;
            //min_s.y > max_t.y
            if (s0.Y - SAME_DIST > t0.Y &&
                s0.Y - SAME_DIST > t1.Y &&
                s1.Y - SAME_DIST > t0.Y &&
                s1.Y - SAME_DIST > t1.Y)
                return null;
            //동일라인 
            if (EpsilonEqualsPointPoint(s0, t0, SAME_DIST) && EpsilonEqualsPointPoint(s1, t1, SAME_DIST)) {
                ss = [0, 1];
                ts = [0, 1];
                return { ss: ss, ts: ts };
            }
            //동일라인 반대방향 
            if (EpsilonEqualsPointPoint(s0, t1, SAME_DIST) && EpsilonEqualsPointPoint(s1, t0, SAME_DIST)) {
                ss = [0, 1];
                ts = [0, 1];
                return { ss: ss, ts: ts };
            }
            var sd = Vector2.Subtract(s1, s0);
            var td = Vector2.Subtract(t1, t0);
            var s, t;
            var isect = GeometryHelper2.CrossLineLine(s0, sd, t0, td);
            if (isect != null) {
                var left = Vector2.Normalize(sd.Left);
                var dt = Math.abs(Vector2.Dot(left, Vector2.Subtract(t0, s0)));
                if (dt > SAME_DIST)
                    return null;
                var s_l = sd.Length();
                var t_l = td.Length();
                sd.Normalize();
                td.Normalize();
                var s_list = new Array();
                var t_list = new Array();
                var vs = new Array();
                //s = 비율아닌 길이
                s = Vector2.Dot(sd, Vector2.Subtract(t0, s0));
                if (s >= 0 && s <= s_l) {
                    if (s < SAME_DIST)
                        s = 0;
                    if (s > s_l - SAME_DIST)
                        s = s_l;
                    s /= s_l; //길이를 비율로
                    s_list.push(s);
                    t_list.push(0);
                }
                s = Vector2.Dot(sd, Vector2.Subtract(t1, s0));
                if (s >= 0 && s <= s_l) {
                    if (s < SAME_DIST)
                        s = 0;
                    if (s > s_l - SAME_DIST)
                        s = s_l;
                    s /= s_l;
                    s_list.push(s);
                    t_list.push(1);
                }
                // t = 비율아닌 길이
                t = Vector2.Dot(td, Vector2.Subtract(s0, t0));
                if (t >= 0 && t <= t_l) {
                    if (t < SAME_DIST)
                        t = 0;
                    if (t > t_l - SAME_DIST)
                        t = t_l;
                    t /= t_l;
                    if (s_list.indexOf(0) < 0)
                        s_list.push(0);
                    if (t_list.indexOf(t) < 0)
                        t_list.push(t);
                }
                t = Vector2.Dot(td, Vector2.Subtract(s1, t0));
                if (t >= 0 && t <= t_l) {
                    if (t < SAME_DIST)
                        t = 0;
                    if (t > t_l - SAME_DIST)
                        t = t_l;
                    t /= t_l;
                    if (s_list.indexOf(1) < 0)
                        s_list.push(1);
                    if (t_list.indexOf(t) < 0)
                        t_list.push(t);
                }
                return { ss: s_list, ts: t_list };
            }
            else {
                if (s < 0 || s > 1 || t < 0 || t > 1)
                    return null;
                return { ss: [s], ts: [t] };
            }
        };
        GeometryHelper2.CrossCircleCircle = function (circle0, circle1) {
            var c = Vector2.Distance(circle0.Center, circle1.Center);
            //중심이 동일한경우 
            if (c < 0.00001)
                return null;
            //두원이 겹치지 않음 
            if (c > circle0.Radius + circle1.Radius)
                return null;
            //Solve[{r^2 - a^2 == s^2 - b^2, a + b == c}, {a, b}]
            //a -> (c^2 + r^2 - s^2)/(2 c) 
            //b -> (c^2 - r^2 + s^2)/(2 c)
            var cc = c * c;
            var rr = circle0.Radius * circle0.Radius;
            var ss = circle1.Radius * circle1.Radius;
            //원과 원의 교차에서 
            var a = (cc + rr - ss) / (2 * c);
            var l = rr - a * a;
            //다른원에 포함된경우 
            if (l < 0)
                return null;
            l = (Math.sqrt(l));
            var d = Vector2.Normalize(Vector2.Subtract(circle1.Center, circle0.Center));
            var rdir = new Vector2(d.Y, -d.X);
            rdir.Normalize();
            var m = Vector2.Add(circle0.Center, Vector2.Scale(d, a));
            var p = Vector2.Add(m, Vector2.Scale(rdir, l));
            var p2 = Vector2.Subtract(m, Vector2.Scale(rdir, l));
            if (l == 0)
                return [p];
            return [p, p2];
        };
        GeometryHelper2.CrossSegmentSegment = function (segment0, segment1) {
            var max0 = Vector2.Max(segment0.Start, segment0.End);
            var min0 = Vector2.Min(segment0.Start, segment0.End);
            var max1 = Vector2.Max(segment1.Start, segment1.End);
            var min1 = Vector2.Min(segment1.Start, segment1.End);
            if (max0.X < min1.X || max0.Y < min1.Y)
                return null;
            if (min0.X > max1.X || min0.Y > max1.Y)
                return null;
            //동일라인 
            if (EpsilonEqualsPointPoint(segment0.Start, segment1.Start) && EpsilonEqualsPointPoint(segment0.End, segment1.End))
                return [segment0.Start, segment0.End];
            //동일라인 반대방향 
            if (EpsilonEqualsPointPoint(segment0.Start, segment1.End) && EpsilonEqualsPointPoint(segment0.End, segment1.Start))
                return [segment0.Start, segment0.End];
            var d0 = Vector2.Subtract(segment0.End, segment0.Start);
            var d1 = Vector2.Subtract(segment1.End, segment1.Start);
            var line0 = new Line2(segment0.Start, d0);
            var line1 = new Line2(segment1.Start, d1);
            var l0 = d0.Length();
            d0.Normalize();
            var l1 = d1.Length();
            d1.Normalize();
            var crossv = Line2.GetIntersectPoint(line0, line1);
            if (crossv == null) {
                //평행한경우 
                if (Line2.DistanceSquared(line0, line1.Position) > U1.PRECISION)
                    return null;
                var vs = new Array();
                var l2 = Vector2.Dot(d0, Vector2.Subtract(segment1.Start, segment0.Start));
                if (l2 >= 0 && l2 <= l0)
                    vs.push(segment1.Start);
                l2 = Vector2.Dot(d0, Vector2.Subtract(segment1.End, segment0.Start));
                if (l2 >= 0 && l2 <= l0) {
                    if (vs.indexOf(segment1.End) < 0)
                        vs.push(segment1.End);
                }
                l2 = Vector2.Dot(d1, Vector2.Subtract(segment0.Start, segment1.Start));
                if (l2 >= 0 && l2 <= l1) {
                    if (vs.indexOf(segment0.Start) < 0)
                        vs.push(segment0.Start);
                }
                l2 = Vector2.Dot(d1, Vector2.Subtract(segment0.End, segment1.Start));
                if (l2 >= 0 && l2 <= l1) {
                    if (vs.indexOf(segment0.End) < 0)
                        vs.push(segment0.End);
                }
                if (vs.length == 0)
                    return null;
                return vs;
            }
            else {
                var s = Vector2.Dot(d0, Vector2.Subtract(crossv, segment0.Start));
                var t = Vector2.Dot(d1, Vector2.Subtract(crossv, segment1.Start));
                if (s < 0 || s > l0 || t < 0 || t > l1)
                    return null;
                if (EpsilonEqualsPointPoint(segment0.Start, segment1.Start) || EpsilonEqualsPointPoint(segment0.Start, segment1.End))
                    return [segment0.Start];
                if (EpsilonEqualsPointPoint(segment0.End, segment1.Start) || EpsilonEqualsPointPoint(segment0.End, segment1.End))
                    return [segment0.End];
                return [crossv];
            }
        };
        GeometryHelper2.CrossLineCircle = function (line, circle) {
            var d = Vector2.Normalize(line.Direction);
            var cp = Vector2.Subtract(circle.Center, line.Position);
            var rr = circle.Radius * circle.Radius;
            var ll = cp.LengthSquareduared();
            var l2 = Vector2.Dot(cp, d);
            var mm = ll - l2 * l2;
            // 교차하지 않을경우 
            if (mm > rr)
                return null;
            var t = (Math.sqrt(rr - mm));
            if (t == 0) {
                return [Vector2.ScaleAdd(line.Position, (l2 - t), d)];
            }
            else {
                return [
                    Vector2.ScaleAdd(line.Position, (l2 - t), d),
                    Vector2.ScaleAdd(line.Position, (l2 + t), d)
                ];
            }
        };
        GeometryHelper2.CrossSegmentCircle = function (segment, circle) {
            var d = Vector2.Subtract(segment.End, segment.Start);
            var ps = GeometryHelper2.CrossLineCircle(new Line2(segment.Start, Vector2.Subtract(segment.End, segment.Start)), circle);
            if (ps == null)
                return null;
            var len = d.Length();
            d.Normalize();
            var vs = new Array();
            for (var i = 0; i < ps.length; i++) {
                var p = Vector2.Subtract(ps[i], segment.Start);
                var l1 = Vector2.Dot(d, p);
                if (l1 >= 0 && l1 <= len) {
                    vs.push(ps[i]);
                }
            }
            if (vs.length > 0) {
                return vs;
            }
            return null;
        };
        return GeometryHelper2;
    }());
    U1.GeometryHelper2 = GeometryHelper2;
    var GeometryHelper3 = (function () {
        function GeometryHelper3() {
        }
        GeometryHelper3.AngleCCW = function (baseVector, planeNormal, vector) {
            if (planeNormal.IsZero)
                return 0;
            vector.Normalize();
            baseVector.Normalize();
            var leftSide = Vector3.Cross(planeNormal, baseVector);
            var dotu = Vector3.Dot(baseVector, vector);
            var dotv = Vector3.Dot(leftSide, vector);
            dotu = Clamp(dotu, -1, 1);
            if (dotv >= 0) {
                return Math.acos(dotu);
            }
            else {
                var pi2 = (Math.PI * 2);
                var a = Math.acos(dotu);
                return pi2 - a;
            }
        };
        GeometryHelper3.PolygonNormal = function (points, start, length, normalize, res_normal) {
            var okPolygon = (start < points.length)
                && (start + length <= points.length)
                && (length > 2);
            if (okPolygon) {
                res_normal.Set(0.0, 0.0, 0.0);
                for (var i = 0; i < length; i++) {
                    var p1 = points[(start + i)];
                    var p2 = points[(start + (i + 1) % length)];
                    res_normal.X += (p1.Y - p2.Y) * (p1.Z + p2.Z);
                    res_normal.Y += (p1.Z - p2.Z) * (p1.X + p2.X);
                    res_normal.Z += (p1.X - p2.X) * (p1.Y + p2.Y);
                }
                if (normalize) {
                    var lengthSqr = res_normal.X * res_normal.X + res_normal.Y * res_normal.Y + res_normal.Z * res_normal.Z;
                    if (lengthSqr > 0.0) {
                        var invLength = 1.0 / Math.sqrt(lengthSqr);
                        res_normal.Scale(invLength);
                    }
                    else {
                        okPolygon = false;
                    }
                }
            }
            return okPolygon;
        };
        GeometryHelper3.GetArbitraryAxis = function (normal, udir, vdir) {
            var unit_y = Vector3.UnitZ;
            var t = 0.015625;
            if ((Math.abs(normal.X) < t) && (Math.abs(normal.Y) < t)) {
                unit_y.SetUnitY();
            }
            udir.SetCross(unit_y, normal).Normalize();
            vdir.SetCross(normal, udir).Normalize();
            unit_y.Release();
        };
        GeometryHelper3.GetRotationM2M = function (src, target) {
            var result = { axis: Vector3.Zero, angle: 0, roll: 0 };
            var srcv = src.Backward;
            var tgtv = target.Backward;
            if (Math.abs(src.Backward.Z - target.Backward.Z) < 0.0001) {
                srcv.Z = tgtv.Z = 0;
                srcv.Normalize();
                tgtv.Normalize();
            }
            result.axis.SetCross(srcv, tgtv).Normalize();
            var dt = Vector3.Dot(srcv, tgtv);
            if (dt > 0.999 || dt < -0.999)
                result.axis.SetUnitZ();
            result.angle = (Math.acos(dt));
            var rm = Matrix4.CreateFromAxisAngle(result.axis, result.angle);
            rm.SetMultiply(src, rm);
            var src_right = rm.Right;
            var tgt_right = target.Right;
            var normal = rm.Backward;
            result.roll = GeometryHelper3.AngleCCW(src_right, normal, tgt_right);
            if (result.roll > Math.PI)
                result.roll = -(Math.PI * 2 - result.roll);
            rm.Release();
            srcv.Release();
            tgtv.Release();
            src_right.Release();
            tgt_right.Release();
            normal.Release();
            return result;
        };
        GeometryHelper3.tmp_v30 = Vector3.Zero;
        GeometryHelper3.tmp_v31 = Vector3.Zero;
        return GeometryHelper3;
    }());
    U1.GeometryHelper3 = GeometryHelper3;
    var Arc2 = (function () {
        function Arc2(start, end, bulge) {
            if (start === void 0) { start = Vector2.Zero; }
            if (end === void 0) { end = Vector2.Zero; }
            if (bulge === void 0) { bulge = 0; }
            this._start = start;
            this._end = end;
            this._bulge = bulge;
            this._center = Vector2.Zero;
            this._isCenterDirty = true;
        }
        Arc2.prototype.CopyFrom = function (src) {
            this._start = src._start;
            this._end = src._end;
            this._bulge = src._bulge;
            this._center = src._center;
            this._isCenterDirty = true;
        };
        Object.defineProperty(Arc2, "Zero", {
            get: function () {
                return new Arc2();
            },
            enumerable: true,
            configurable: true
        });
        return Arc2;
    }());
    U1.Arc2 = Arc2;
    var Line3 = (function () {
        function Line3(position, direction) {
            if (position === void 0) { position = null; }
            if (direction === void 0) { direction = null; }
            this.Position = Vector3.Zero;
            this.Direction = Vector3.Zero;
            if (position != null)
                this.Position.CopyFrom(position);
            if (direction != null)
                this.Direction.CopyFrom(direction);
        }
        Line3.SquardDistance = function (line0, line1, result) {
            var line0_p = line0.Position, line0_dir = line0.Direction, line1_p = line1.Position, line1_dir = line1.Direction;
            var diff = Vector3.Subtract(line0_p, line1_p);
            var a = Vector3.Dot(line0_dir, line0_dir);
            var b = -Vector3.Dot(line0_dir, line1_dir);
            var c = Vector3.Dot(line1_dir, line1_dir);
            var d = Vector3.Dot(line0_dir, diff);
            var f = Vector3.Dot(diff, diff);
            var det = a * c - b * b;
            var s = 0.0, t = 0.0;
            if (det > 0) {
                var e = -Vector3.Dot(line1_dir, diff);
                var invDet = 1 / det;
                result.s = s = (b * e - c * d) * invDet;
                result.t = t = (b * d - a * e) * invDet;
                return s * (a * s + b * t + 2 * d) + t * (b * s + c * t + 2 * e) + f;
            }
            else {
                // 두라인이 평행한경우 
                result.s = s = -d / a;
                result.t = t = 0;
                return d * s + f;
            }
        };
        Line3.SquardDistance1 = function (p0, d0, p1, d1, result) {
            var diff = Vector3.Subtract(p0, p1);
            var a = Vector3.Dot(d0, d0);
            var b = -Vector3.Dot(d0, d1);
            var c = Vector3.Dot(d1, d1);
            var d = Vector3.Dot(d0, diff);
            var f = Vector3.Dot(diff, diff);
            var det = a * c - b * b;
            var s = 0.0, t = 0.0;
            if (det > 0) {
                var e = -Vector3.Dot(d1, diff);
                var invDet = 1 / det;
                result.s = s = (b * e - c * d) * invDet;
                result.t = t = (b * d - a * e) * invDet;
                //var l0 = s * (a * s + b * t + 2 * d) + t * (b * s + c * t + 2 * e) + f;
                return Vector3.DistanceSquared(Vector3.ScaleAdd(p0, s, d0), Vector3.ScaleAdd(p1, t, d1));
            }
            else {
                // 두라인이 평행한경우 
                result.s = s = -d / a;
                result.t = t = 0;
                return d * s + f;
            }
        };
        Line3.prototype.Release = function () {
        };
        Line3.New = function () {
            var res = Line3._cache.New();
            res.Position.Set(0, 0, 0);
            res.Direction.Set(0, 0, 0);
            return res;
        };
        Line3.Release = function (v) {
            Line3._cache.Release(v);
        };
        Line3._cache = new Cache(Line3);
        return Line3;
    }());
    U1.Line3 = Line3;
    var Viewport = (function () {
        function Viewport() {
            //#region Fields
            this.X = 0;
            this.Y = 0;
            this.Width = 100;
            this.Height = 100;
            this.MinDepth = 0;
            this.MaxDepth = 1;
        }
        //#endregion
        //#region Methods
        Viewport.prototype.toString = function () {
            return ("X:" + this.X + " Y:" + this.Y + " Width:" + this.Width + " Height:" + this.Height)
                + (" MinDepth:" + this.MinDepth + " MaxDepth:" + this.MaxDepth);
        };
        Viewport.prototype.Project = function (source, projection, view, world) {
            var matrix = Matrix4.Multiply(Matrix4.Multiply(world, view), projection);
            var vector = Vector3.Transform(source, matrix);
            var a = (((source.X * matrix.M14) + (source.Y * matrix.M24)) + (source.Z * matrix.M34)) + matrix.M44;
            if (!WithinEpsilon(a, 1)) {
                vector.Scale(1 / a);
            }
            vector.X = (((vector.X + 1) * 0.5) * this.Width) + this.X;
            vector.Y = (((-vector.Y + 1) * 0.5) * this.Height) + this.Y;
            vector.Z = (vector.Z * (this.MaxDepth - this.MinDepth)) + this.MinDepth;
            return vector;
        };
        Viewport.prototype.ProjectWVP = function (source, wvp) {
            var vector = Vector3.Transform(source, wvp);
            var a = (((source.X * wvp.M14) + (source.Y * wvp.M24)) + (source.Z * wvp.M34)) + wvp.M44;
            if (!WithinEpsilon(a, 1)) {
                vector.Scale(1 / a);
            }
            vector.X = ((((vector.X + 1) * 0.5) * this.Width) + this.X);
            vector.Y = ((((-vector.Y + 1) * 0.5) * this.Height) + this.Y);
            vector.Z = (vector.Z * (this.MaxDepth - this.MinDepth)) + this.MinDepth;
            return vector;
        };
        Viewport.prototype.Unproject = function (source, projection, view, world) {
            var matrix = Matrix4.Invert(Matrix4.Multiply(Matrix4.Multiply(world, view), projection));
            source.X = (((source.X - this.X) / (this.Width)) * 2) - 1;
            source.Y = -((((source.Y - this.Y) / (this.Height)) * 2) - 1);
            source.Z = (source.Z - this.MinDepth) / (this.MaxDepth - this.MinDepth);
            var vector = Vector3.Transform(source, matrix);
            var a = (((source.X * matrix.M14) + (source.Y * matrix.M24)) + (source.Z * matrix.M34)) + matrix.M44;
            if (!WithinEpsilon(a, 1)) {
                vector.Scale(1 / a);
            }
            return vector;
        };
        Object.defineProperty(Viewport.prototype, "AspectRatio", {
            get: function () {
                if ((this.Height != 0) && (this.Width != 0)) {
                    return ((this.Width) / (this.Height));
                }
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        Viewport.Project = function (source, projection, view, world, minDepth, maxDepth, x, y, width, heiht) {
            var matrix = Matrix4.Multiply(Matrix4.Multiply(world, view), projection);
            var vector = Vector3.Transform(source, matrix);
            var a = (((source.X * matrix.M14) + (source.Y * matrix.M24)) + (source.Z * matrix.M34)) + matrix.M44;
            if (!WithinEpsilon(a, 1)) {
                vector.Scale(1 / a);
            }
            vector.X = (((vector.X + 1) * 0.5) * width) + x;
            vector.Y = (((-vector.Y + 1) * 0.5) * heiht) + y;
            vector.Z = (vector.Z * (maxDepth - minDepth)) + minDepth;
            return vector;
        };
        //#endregion
        // #region IEquatable< Viewport > Members 
        Viewport.prototype.Equals = function (other) {
            return this.X == other.X &&
                this.Y == other.Y &&
                this.MinDepth == other.MinDepth &&
                this.MaxDepth == other.MaxDepth &&
                this.Width == other.Width &&
                this.Height == other.Height;
        };
        Viewport.PRECISION = 0.000001;
        return Viewport;
    }());
    U1.Viewport = Viewport;
    var Camera = (function () {
        function Camera() {
            this.Viewport = new Viewport();
            this._BoundingFrustum = new BoundingFrustum();
        }
        Object.defineProperty(Camera.prototype, "Frustum", {
            get: function () {
                this._BoundingFrustum.SetMatrix(Matrix4.Multiply(this.ViewMatrix, this.ProjMatrix));
                return this._BoundingFrustum;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "Right", {
            get: function () {
                return Vector3.Normalize(Vector3.Cross(this.Direction, this.Up));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "Direction", {
            get: function () {
                return Vector3.Normalize(Vector3.Subtract(this.LookAt, this.Position));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "ProjMatrix", {
            get: function () {
                if (this.ProjectionMode == ProjectionTypeEnum.Perspective)
                    return Matrix4.CreatePerspectiveFieldOfView(this.FOV, this.Aspect, this.Near, this.Far);
                else
                    return Matrix4.CreateOrthographic(this.Aspect * this.OrthoHeight, this.OrthoHeight, this.Near, this.Far);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "ViewMatrix", {
            get: function () {
                return Matrix4.CreateLookAt(this.Position, this.LookAt, this.Up);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera.prototype, "Aspect", {
            get: function () {
                if (this.Viewport.Height <= 0)
                    return 1;
                else
                    return this.Viewport.Width / this.Viewport.Height;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Camera, "Default", {
            get: function () {
                var cam = new Camera();
                cam.Position = Vector3.Zero;
                cam.LookAt = Vector3.UnitY;
                cam.Up = Vector3.UnitZ;
                cam.FOV = (Math.PI / 4);
                cam.Near = 0.1;
                cam.Far = 100000;
                cam.OrthoHeight = 100;
                cam.ProjectionMode = ProjectionTypeEnum.Perspective;
                cam.Viewport.Width = 100;
                cam.Viewport.Height = 100;
                cam.Viewport.MaxDepth = 1;
                cam.Viewport.MinDepth = 0;
                return cam;
            },
            enumerable: true,
            configurable: true
        });
        Camera.prototype.CalPickingRay = function (x, y) {
            var vm = this.ViewMatrix;
            var pm = this.ProjMatrix;
            var p0 = this.Viewport.Unproject(new Vector3(x, y, 0), pm, vm, Matrix4.Identity);
            var p1 = this.Viewport.Unproject(new Vector3(x, y, 1), pm, vm, Matrix4.Identity);
            return new Ray3(p0, Vector3.Normalize(Vector3.Subtract(p1, p0)));
        };
        Camera.prototype.WorldToScreen = function (wp) {
            var result = this.Viewport.Project(wp, this.ProjMatrix, this.ViewMatrix, Matrix4.Identity);
            return result;
        };
        Camera.prototype.ScreenToWorld = function (sp) {
            var result = this.Viewport.Unproject(sp, this.ProjMatrix, this.ViewMatrix, Matrix4.Identity);
            return result;
        };
        Camera.prototype.GetRotation = function (targetCamera) {
            var src = Matrix4.Identity;
            src.Right = this.Right;
            src.Up = this.Up;
            src.Forward = this.Direction;
            var tgt = Matrix4.Identity;
            tgt.Right = targetCamera.Right;
            tgt.Up = targetCamera.Up;
            tgt.Forward = targetCamera.Direction;
            return Camera.GetRotation(src, tgt);
        };
        Camera.GetRotation = function (src, target) {
            var result = { axis: Vector3.Zero, angle: 0, roll: 0 };
            var srcv = src.Backward;
            var tgtv = target.Backward;
            if (Math.abs(src.Backward.Z - target.Backward.Z) < 0.0001) {
                srcv.Z = tgtv.Z = 0;
                srcv.Normalize();
                tgtv.Normalize();
            }
            result.axis = Vector3.Normalize(Vector3.Cross(srcv, tgtv));
            var dt = Vector3.Dot(srcv, tgtv);
            if (dt > 0.999 || dt < -0.999)
                result.axis = Vector3.UnitZ;
            result.angle = (Math.acos(dt));
            src = Matrix4.Multiply(src, Matrix4.CreateFromAxisAngle(result.axis, result.angle));
            var sr = src.Right;
            var tr = target.Right;
            var n = src.Backward;
            result.roll = GeometryHelper3.AngleCCW(sr, n, tr);
            if (result.roll > Math.PI)
                result.roll = -(Math.PI * 2 - result.roll);
            return result;
        };
        Camera.prototype.Roll = function (roll) {
            this.Rotate(this.Position, Vector3.Negate(this.Direction), roll);
        };
        Camera.prototype.Rotate = function (position, axis, ang) {
            axis.Normalize();
            var mat = Matrix4.CreateTranslation(Vector3.Negate(position))
                .Multiply(Matrix4.CreateFromAxisAngle(axis, ang))
                .Multiply(Matrix4.CreateTranslation(position));
            var up = this.Up;
            var pos = this.Position;
            var lookat = this.LookAt;
            pos = Vector3.Transform(pos, mat);
            up = Vector3.TransformNormal(up, mat);
            lookat = Vector3.Transform(lookat, mat);
            this.Position = pos;
            this.LookAt = lookat;
            this.Up = up;
        };
        Camera.prototype.ScreenToPlane = function (pt, plane) {
            var result = null;
            var ray = this.CalPickingRay(pt.X, pt.Y);
            result = plane.IntersectsLine(ray.Position, ray.Direction);
            if (result != null && result >= 0)
                return Vector3.ScaleAdd(ray.Position, result, ray.Direction);
            return null;
        };
        Camera.prototype.Move = function (dir) {
            this.Position.Add(dir);
            this.LookAt.Add(dir);
        };
        Camera.prototype.Clone = function () {
            var camera = new Camera();
            camera.Position = this.Position.Clone();
            camera.LookAt = this.LookAt.Clone();
            camera.Up = this.Up.Clone();
            camera.FOV = this.FOV;
            camera.Near = this.Near;
            camera.Far = this.Far;
            camera.OrthoHeight = this.OrthoHeight,
                camera.ProjectionMode = this.ProjectionMode;
            camera.Viewport.MaxDepth = this.Viewport.MaxDepth;
            camera.Viewport.MinDepth = this.Viewport.MinDepth;
            camera.Viewport.Width = this.Viewport.Width;
            camera.Viewport.Height = this.Viewport.Height;
            camera.Viewport.X = this.Viewport.X;
            camera.Viewport.Y = this.Viewport.Y;
            return camera;
        };
        Camera.prototype.Equals = function (other) {
            return this.Position.Equals(other.Position)
                && this.LookAt.Equals(other.LookAt)
                && this.Up.Equals(other.Up)
                && this.FOV == other.FOV
                && this.Near == other.Near
                && this.Far == other.Far
                && this.OrthoHeight == other.OrthoHeight
                && this.ProjectionMode == other.ProjectionMode
                && this.Viewport.Equals(other.Viewport);
        };
        return Camera;
    }());
    U1.Camera = Camera;
    var Rectangle = (function () {
        function Rectangle(x, y, width, height) {
            if (x === void 0) { x = 0; }
            if (y === void 0) { y = 0; }
            if (width === void 0) { width = 0; }
            if (height === void 0) { height = 0; }
            this.x = x;
            this.y = y;
            this.width = width;
            this.height = height;
        }
        Object.defineProperty(Rectangle.prototype, "X", {
            get: function () {
                return this.x;
            },
            set: function (value) {
                this.x = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "Y", {
            get: function () {
                return this.y;
            },
            set: function (value) {
                this.y = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "Width", {
            get: function () {
                return this.width;
            },
            set: function (value) {
                this.width = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "Height", {
            get: function () {
                return this.height;
            },
            set: function (value) {
                this.height = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "Left", {
            get: function () {
                return this.X;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "Top", {
            get: function () {
                return this.Y;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "Right", {
            get: function () {
                return (this.X + this.Width);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "Bottom", {
            get: function () {
                return (this.Y + this.Height);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Rectangle.prototype, "IsEmpty", {
            get: function () {
                return ((((this.height == 0) && (this.width == 0)) && (this.x == 0)) && (this.y == 0));
            },
            enumerable: true,
            configurable: true
        });
        Rectangle.prototype.Equals = function (obj) {
            if (!(obj instanceof Rectangle)) {
                return false;
            }
            var rectangle = obj;
            return ((((rectangle.X == this.X) && (rectangle.Y == this.Y)) && (rectangle.Width == this.Width)) && (rectangle.Height == this.Height));
        };
        Rectangle.prototype.Contains = function (x, y) {
            return ((((this.X <= x) && (x < (this.X + this.Width))) && (this.Y <= y)) && (y < (this.Y + this.Height)));
        };
        Rectangle.prototype.ContainsRect = function (rect) {
            return ((((this.X <= rect.X) && ((rect.X + rect.Width) <= (this.X + this.Width))) && (this.Y <= rect.Y)) && ((rect.Y + rect.Height) <= (this.Y + this.Height)));
        };
        Rectangle.prototype.GetHashCode = function () {
            return (((this.X ^ ((this.Y << 13) | (this.Y >> 0x13))) ^ ((this.Width << 0x1a) | (this.Width >> 6))) ^ ((this.Height << 7) | (this.Height >> 0x19)));
        };
        Rectangle.prototype.Inflate = function (width, height) {
            this.X -= width;
            this.Y -= height;
            this.Width += 2 * width;
            this.Height += 2 * height;
        };
        Rectangle.Inflate = function (rect, x, y) {
            var rectangle = new Rectangle(rect.x, rect.y, rect.width, rect.height);
            rectangle.Inflate(x, y);
            return rectangle;
        };
        Rectangle.prototype.Intersect = function (rect) {
            var rectangle = Rectangle.Intersect(rect, this);
            this.X = rectangle.X;
            this.Y = rectangle.Y;
            this.Width = rectangle.Width;
            this.Height = rectangle.Height;
        };
        Rectangle.Intersect = function (a, b) {
            var x = Math.max(a.X, b.X);
            var num2 = Math.min((a.X + a.Width), (b.X + b.Width));
            var y = Math.max(a.Y, b.Y);
            var num4 = Math.min((a.Y + a.Height), (b.Y + b.Height));
            if ((num2 >= x) && (num4 >= y)) {
                return new Rectangle(x, y, num2 - x, num4 - y);
            }
            return new Rectangle(0, 0, 0, 0);
        };
        Rectangle.prototype.IntersectsWith = function (rect) {
            return ((((rect.X < (this.X + this.Width)) && (this.X < (rect.X + rect.Width))) && (rect.Y < (this.Y + this.Height))) && (this.Y < (rect.Y + rect.Height)));
        };
        Rectangle.Union = function (a, b) {
            var x = Math.min(a.X, b.X);
            var num2 = Math.max((a.X + a.Width), (b.X + b.Width));
            var y = Math.min(a.Y, b.Y);
            var num4 = Math.max((a.Y + a.Height), (b.Y + b.Height));
            return new Rectangle(x, y, num2 - x, num4 - y);
        };
        Rectangle.prototype.Union = function (b) {
            var a = this;
            var x = Math.min(a.X, b.X);
            var num2 = Math.max((a.X + a.Width), (b.X + b.Width));
            var y = Math.min(a.Y, b.Y);
            var num4 = Math.max((a.Y + a.Height), (b.Y + b.Height));
            this.x = x;
            this.y = y;
            this.width = num2 - x;
            this.height = num4 - y;
        };
        Rectangle.prototype.Offset = function (x, y) {
            this.X += x;
            this.Y += y;
        };
        Rectangle.prototype.toString = function () {
            return this.x + "," + this.y + "," + this.width + "," + this.height;
        };
        return Rectangle;
    }());
    U1.Rectangle = Rectangle;
})(U1 || (U1 = {}));
/// <reference path="../../u1/math/u1math.ts" />
var U1;
(function (U1) {
    (function (UVariantTypes) {
        UVariantTypes[UVariantTypes["Number"] = 0] = "Number";
        UVariantTypes[UVariantTypes["Bool"] = 1] = "Bool";
        UVariantTypes[UVariantTypes["String"] = 2] = "String";
        UVariantTypes[UVariantTypes["Vector"] = 3] = "Vector";
        UVariantTypes[UVariantTypes["Matrix"] = 4] = "Matrix";
    })(U1.UVariantTypes || (U1.UVariantTypes = {}));
    var UVariantTypes = U1.UVariantTypes;
    (function (UOperationType) {
        UOperationType[UOperationType["None"] = 0] = "None";
        UOperationType[UOperationType["Logical_Or"] = 1] = "Logical_Or";
        UOperationType[UOperationType["Logical_And"] = 2] = "Logical_And";
        UOperationType[UOperationType["Equal"] = 3] = "Equal";
        UOperationType[UOperationType["NotEqual"] = 4] = "NotEqual";
        UOperationType[UOperationType["Less"] = 5] = "Less";
        UOperationType[UOperationType["Great"] = 6] = "Great";
        UOperationType[UOperationType["LessEqual"] = 7] = "LessEqual";
        UOperationType[UOperationType["GreatEqual"] = 8] = "GreatEqual";
        UOperationType[UOperationType["Add"] = 9] = "Add";
        UOperationType[UOperationType["Sub"] = 10] = "Sub";
        UOperationType[UOperationType["Multiply"] = 11] = "Multiply";
        UOperationType[UOperationType["Divide"] = 12] = "Divide";
        UOperationType[UOperationType["Parenthesis"] = 13] = "Parenthesis";
        UOperationType[UOperationType["Dot"] = 14] = "Dot";
        UOperationType[UOperationType["Index"] = 15] = "Index";
    })(U1.UOperationType || (U1.UOperationType = {}));
    var UOperationType = U1.UOperationType;
    var UVariant = (function () {
        function UVariant() {
            this.VariantType = UVariantTypes.Number;
            this._value = 0.0;
        }
        Object.defineProperty(UVariant.prototype, "Value", {
            get: function () {
                return this._value;
            },
            set: function (val) {
                this._value = val;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UVariant, "Zero", {
            get: function () {
                var expvar = new UVariant();
                expvar.VariantType = UVariantTypes.Number;
                expvar.Value = 0.0;
                return expvar;
            },
            enumerable: true,
            configurable: true
        });
        UVariant.prototype.SetNumber = function (value) {
            this.VariantType = UVariantTypes.Number;
            this._value = value;
            return this;
        };
        UVariant.prototype.SetBool = function (value) {
            this.VariantType = UVariantTypes.Bool;
            this._value = value;
            return this;
        };
        UVariant.prototype.SetString = function (value) {
            this.VariantType = UVariantTypes.String;
            this._value = value;
            return this;
        };
        UVariant.prototype.SetVector = function (value) {
            this.VariantType = UVariantTypes.Vector;
            this._value = value;
            return this;
        };
        UVariant.prototype.SetMatrix = function (value) {
            this.VariantType = UVariantTypes.Matrix;
            this._value = value;
            return this;
        };
        UVariant.prototype.CopyFrom = function (src) {
            this.VariantType = src.VariantType;
            if (this.VariantType == UVariantTypes.Vector)
                this._value = src.Value.slice();
            else
                this._value = src.Value;
            return this;
        };
        UVariant.prototype.SetColor = function (color) {
            this.VariantType = UVariantTypes.Vector;
            this._value = [
                color.R,
                color.G,
                color.B,
                color.A
            ];
            return this;
        };
        UVariant.prototype.SetVector2 = function (vector) {
            this.VariantType = UVariantTypes.Vector;
            this._value = [
                vector.X,
                vector.Y
            ];
            return this;
        };
        UVariant.prototype.SetVector3 = function (vector) {
            this.VariantType = UVariantTypes.Vector;
            this._value = [
                vector.X,
                vector.Y,
                vector.Z
            ];
            return this;
        };
        UVariant.prototype.SetVector4 = function (vector) {
            this.VariantType = UVariantTypes.Vector;
            this._value = [
                vector.X,
                vector.Y,
                vector.Z,
                vector.W];
            return this;
        };
        Object.defineProperty(UVariant.prototype, "ItemCount", {
            get: function () {
                if (this.VariantType == UVariantTypes.Vector)
                    return this.Value.length;
                return 0;
            },
            enumerable: true,
            configurable: true
        });
        UVariant.prototype.GetNumber = function () {
            if (this.VariantType == UVariantTypes.Number)
                return this.Value;
            if (this.VariantType == UVariantTypes.Bool)
                return this.Value ? 1 : 0;
            if (this.VariantType == UVariantTypes.String)
                return this.Value.length > 0 ? 1 : 0;
            return 0;
        };
        UVariant.prototype.GetBool = function () {
            if (this.VariantType == UVariantTypes.Number)
                return this.Value != 0;
            if (this.VariantType == UVariantTypes.Bool)
                return this.Value;
            if (this.VariantType == UVariantTypes.String)
                return this.Value.length > 0;
            return false;
        };
        UVariant.prototype.GetString = function () {
            if (this.Value == null)
                return "";
            return this.Value.toString();
        };
        UVariant.prototype.GetNumberAt = function (idx) {
            if (this.VariantType == UVariantTypes.Vector) {
                var arr = this.Value;
                if (arr != null && arr.length > idx)
                    return arr[idx];
            }
            return null;
        };
        UVariant.prototype.toString = function () {
            var valueString = "" + this.Value;
            if (this.VariantType == UVariantTypes.String) {
                valueString = "\"" + this.Value + "\"";
            }
            else if (this.VariantType == UVariantTypes.Vector) {
                var values = this.Value;
                var sb = "";
                for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {
                    var val = values_1[_i];
                    if (sb.length != 0)
                        sb += ',';
                    sb += (val.toString());
                }
                valueString = "(" + sb + ")";
            }
            else if (this.VariantType == UVariantTypes.Matrix) {
                var arrarr = this.Value;
                var sb = "";
                for (var _a = 0, arrarr_1 = arrarr; _a < arrarr_1.length; _a++) {
                    var val_1 = arrarr_1[_a];
                    var sbb = "";
                    for (var _b = 0, val_2 = val_1; _b < val_2.length; _b++) {
                        var val1 = val_2[_b];
                        if (sbb.length != 0)
                            sbb += (',');
                        sbb += val1;
                    }
                    sb += "(" + sbb + ")";
                }
                valueString = "(" + sb + ")";
            }
            return valueString;
        };
        UVariant.prototype.GetNumbers = function () {
            if (this.VariantType == UVariantTypes.Vector) {
                return this.Value.slice();
            }
            return [this.GetNumber()];
        };
        UVariant.prototype.GetNumber2 = function () {
            var result = [0, 0];
            if (this.VariantType == UVariantTypes.Vector) {
                var idx = 0;
                var numbers = this.Value;
                for (var _i = 0, numbers_1 = numbers; _i < numbers_1.length; _i++) {
                    var d = numbers_1[_i];
                    if (idx >= 2)
                        break;
                    result[idx++] = d;
                }
            }
            else
                result[0] = result[1] = this.GetNumber();
            return result;
        };
        UVariant.prototype.GetNumber3 = function () {
            var result = [0, 0, 0];
            if (this.VariantType == UVariantTypes.Vector) {
                var idx = 0;
                var numbers = this.Value;
                for (var _i = 0, numbers_2 = numbers; _i < numbers_2.length; _i++) {
                    var d = numbers_2[_i];
                    if (idx >= 3)
                        break;
                    result[idx++] = d;
                }
            }
            else
                result[0] = result[1] = result[2] = this.GetNumber();
            return result;
        };
        UVariant.prototype.GetNumber4 = function () {
            var result = [0, 0, 0, 0];
            if (this.VariantType == UVariantTypes.Vector) {
                var idx = 0;
                var numbers = this.Value;
                for (var _i = 0, numbers_3 = numbers; _i < numbers_3.length; _i++) {
                    var d = numbers_3[_i];
                    if (idx >= 4)
                        break;
                    result[idx++] = d;
                }
            }
            else
                result[0] = result[1] = result[2] = result[3] = this.GetNumber();
            return result;
        };
        /**
        * Return Matrix4x4
        */
        UVariant.prototype.GetMatrix = function () {
            var matrix = [
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0]
            ];
            if (this.VariantType == UVariantTypes.Matrix) {
                var values = this.Value;
                for (var row = 0; row < values.length; row++) {
                    for (var col = 0; col < values[row].length; col++) {
                        matrix[row][col] = values[row][col];
                    }
                }
            }
            else if (this.VariantType == UVariantTypes.Vector) {
                var values_2 = this.Value;
                for (var i = 0; i < values_2.length; i++) {
                    var row = Math.floor(i / 4.0);
                    var col = (i % 4);
                    matrix[row][col] = values_2[i];
                }
            }
            else {
                var val = this.GetNumber();
                for (var i = 0; i < 4; i++) {
                    for (var j = 0; j < 4; j++) {
                        matrix[i][j] = val;
                    }
                }
            }
            return matrix;
        };
        UVariant.prototype.GetVector2 = function () {
            return UVariant.ToVector2(this);
        };
        UVariant.prototype.GetVector3 = function () {
            return UVariant.ToVector3(this);
        };
        UVariant.prototype.GetVector4 = function () {
            return UVariant.ToVector4(this);
        };
        UVariant.prototype.GetColor = function () {
            return UVariant.ToColor(this);
        };
        UVariant.ToString = function (expVar) {
            var valueString = "V:" + expVar.Value;
            var result = "";
            result += "T:" + expVar.VariantType;
            if (expVar.VariantType == UVariantTypes.Vector) {
                var values = expVar.Value;
                var sb = "";
                for (var _i = 0, values_3 = values; _i < values_3.length; _i++) {
                    var val = values_3[_i];
                    if (sb.length != 0)
                        sb += (',');
                    sb += val;
                }
                valueString = "V:{" + sb + "}";
            }
            else if (expVar.VariantType == UVariantTypes.Matrix) {
                var arrarr = expVar.Value;
                var sb = "";
                for (var _a = 0, arrarr_2 = arrarr; _a < arrarr_2.length; _a++) {
                    var val_3 = arrarr_2[_a];
                    var sbb = "";
                    for (var _b = 0, val_4 = val_3; _b < val_4.length; _b++) {
                        var val1 = val_4[_b];
                        if (sbb.length != 0)
                            sbb += (',');
                        sbb += val1;
                    }
                    sb += "{" + sbb + "}";
                }
                valueString = "V:{" + sb + "}";
            }
            result += valueString;
            return result;
        };
        UVariant.FromString = function (variantString) {
            if (variantString == "" || variantString == null) {
                return new UVariant();
            }
            try {
                var typStr = variantString.slice(2, 3);
                var idx = variantString.indexOf("V:");
                var valStr = variantString.slice(idx + 2, variantString.length);
                var valtyp = parseInt(typStr);
                var value = null;
                if (valtyp == UVariantTypes.Bool) {
                    value = (valStr.toLowerCase() == "true");
                }
                else if (valtyp == UVariantTypes.Number) {
                    value = parseFloat(valStr);
                }
                else if (valtyp == UVariantTypes.String) {
                    value = valStr;
                }
                else if (valtyp == UVariantTypes.Vector) {
                    var begin = valStr.indexOf('{') + 1;
                    var end = valStr.lastIndexOf('}');
                    valStr = valStr.slice(begin, end);
                    var dbls = valStr.split(',');
                    var vect = new Array(dbls.length);
                    for (var i = 0; i < dbls.length; i++) {
                        vect[i] = parseFloat(dbls[i]);
                    }
                    value = vect;
                }
                else if (valtyp == UVariantTypes.Matrix) {
                    var begin = valStr.indexOf('{') + 1;
                    var end = valStr.lastIndexOf('}');
                    valStr = valStr.slice(begin, end);
                    var vectStrList = valStr.split('}');
                    var arrVector = new Array(vectStrList.length - 1);
                    for (var i = 0; i < vectStrList.length - 1; i++) {
                        var vectStr = vectStrList[i];
                        idx = vectStr.indexOf('{');
                        vectStr = vectStr.slice(idx + 1, vectStr.length);
                        var dbls = vectStr.split(',');
                        var vect = new Array(dbls.length);
                        for (var j = 0; j < dbls.length; j++) {
                            vect[j] = parseFloat(dbls[j]);
                        }
                        arrVector[i] = vect;
                    }
                    value = arrVector;
                }
                var result = new UVariant();
                result.VariantType = valtyp;
                result.Value = value;
                return result;
            }
            catch (e) {
                return new UVariant();
            }
        };
        UVariant.Negate = function (value) {
            if (value.VariantType == UVariantTypes.Vector) {
                var value2 = new UVariant();
                value2.SetNumber(-1.0);
                return UVariant.VectorOperation(UOperationType.Multiply, value, value2);
            }
            else if (value.VariantType == UVariantTypes.Matrix) {
                var values = value.Value;
                for (var i = 0; i < values.length; i++) {
                    for (var j = 0; j < values[i].length; j++) {
                        values[i][j] *= -1;
                    }
                }
                return new UVariant().SetMatrix(values);
            }
            else {
                return new UVariant().SetNumber(value.GetNumber() * -1.0);
            }
        };
        UVariant.Add = function (value1, value2) {
            if (value1.VariantType == UVariantTypes.Matrix || value2.VariantType == UVariantTypes.Matrix) {
                return UVariant.MatrixOperation(UOperationType.Add, value1, value2);
            }
            else if (value1.VariantType == UVariantTypes.Vector || value2.VariantType == UVariantTypes.Vector) {
                return UVariant.VectorOperation(UOperationType.Add, value1, value2);
            }
            else {
                return new UVariant().SetNumber(value1.GetNumber() + value2.GetNumber());
            }
        };
        UVariant.Sub = function (value1, value2) {
            if (value1.VariantType == UVariantTypes.Matrix || value2.VariantType == UVariantTypes.Matrix) {
                return UVariant.MatrixOperation(UOperationType.Sub, value1, value2);
            }
            else if (value1.VariantType == UVariantTypes.Vector || value2.VariantType == UVariantTypes.Vector) {
                return UVariant.VectorOperation(UOperationType.Sub, value1, value2);
            }
            else {
                return new UVariant().SetNumber(value1.GetNumber() - value2.GetNumber());
            }
        };
        UVariant.Multiply = function (value1, value2) {
            if (value1.VariantType == UVariantTypes.Matrix || value2.VariantType == UVariantTypes.Matrix) {
                return UVariant.MatrixOperation(UOperationType.Multiply, value1, value2);
            }
            else if (value1.VariantType == UVariantTypes.Vector || value2.VariantType == UVariantTypes.Vector) {
                return UVariant.VectorOperation(UOperationType.Multiply, value1, value2);
            }
            else {
                return new UVariant().SetNumber(value1.GetNumber() * value2.GetNumber());
            }
        };
        UVariant.Divide = function (value1, value2) {
            if (value1.VariantType == UVariantTypes.Matrix || value2.VariantType == UVariantTypes.Matrix) {
                return UVariant.MatrixOperation(UOperationType.Divide, value1, value2);
            }
            else if (value1.VariantType == UVariantTypes.Vector || value2.VariantType == UVariantTypes.Vector) {
                return UVariant.VectorOperation(UOperationType.Divide, value1, value2);
            }
            else {
                return new UVariant().SetNumber(value1.GetNumber() / value2.GetNumber());
            }
        };
        UVariant.VectorOperation = function (op, value1, value2) {
            var itemcount = Math.max(value1.ItemCount, value2.ItemCount);
            var arr = new Array(itemcount);
            for (var i = 0; i < itemcount; i++) {
                var num0 = value1.GetNumberAt(i);
                var num1 = value2.GetNumberAt(i);
                if (op == UOperationType.Multiply)
                    arr[i] = num0 * num1;
                else if (op == UOperationType.Sub)
                    arr[i] = num0 - num1;
                else if (op == UOperationType.Add)
                    arr[i] = num0 + num1;
                else if (op == UOperationType.Divide) {
                    if (num1 == 0)
                        num1 = 1;
                    arr[i] = num0 / num1;
                }
            }
            return new UVariant().SetVector(arr);
        };
        UVariant.MatrixOperation = function (op, value1, value2) {
            var m1 = value1.GetMatrix();
            var m2 = value2.GetMatrix();
            var result = [
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0],
                [0, 0, 0, 0]
            ];
            for (var i = 0; i < 4; i++) {
                for (var j = 0; j < 4; j++) {
                    var num0 = m1[i][j];
                    var num1 = m2[i][j];
                    if (op == UOperationType.Multiply)
                        result[i][j] = num0 * num1;
                    else if (op == UOperationType.Sub)
                        result[i][j] = num0 - num1;
                    else if (op == UOperationType.Add)
                        result[i][j] = num0 + num1;
                    else if (op == UOperationType.Divide) {
                        if (num1 == 0)
                            num1 = 1;
                        result[i][j] = num0 / num1;
                    }
                }
            }
            return new UVariant().SetMatrix(result);
        };
        UVariant.Transform = function (expValue, func) {
            if (expValue.VariantType == UVariantTypes.Vector) {
                var arr = new Array(expValue.ItemCount);
                for (var i = 0; i < expValue.ItemCount; i++) {
                    arr[i] = func(expValue.GetNumberAt(i));
                }
                return new UVariant().SetVector(arr);
            }
            else if (expValue.VariantType == UVariantTypes.Matrix) {
                var src = expValue.Value;
                var arrarr = new Array(src.length);
                for (var i = 0; i < arrarr.length; i++) {
                    var arr = new Array(src[i].length);
                    for (var j = 0; j < src[i].length; j++)
                        arr[j] = func(src[i][j]);
                    arrarr[i] = arr;
                }
                return new UVariant().SetMatrix(arrarr);
            }
            else {
                return new UVariant().SetNumber(func(expValue.GetNumber()));
            }
        };
        UVariant.Transform2 = function (expValue1, expValue2, func) {
            if (expValue1.VariantType == UVariantTypes.Vector || expValue2.VariantType == UVariantTypes.Vector) {
                var icount = Math.max(expValue1.ItemCount, expValue2.ItemCount);
                var arr = new Array(icount);
                for (var i = 0; i < icount; i++) {
                    arr[i] = func(expValue1.GetNumberAt(i), expValue2.GetNumberAt(i));
                }
                return new UVariant().SetVector(arr);
            }
            else {
                return new UVariant().SetNumber(func(expValue1.GetNumber(), expValue2.GetNumber()));
            }
        };
        UVariant.ToColor = function (expVariant) {
            if (expVariant.VariantType == UVariantTypes.Vector) {
                var doubles = expVariant.Value;
                var r = doubles.length > 0 ? doubles[0] : 0;
                var g = doubles.length > 1 ? doubles[1] : r;
                var b = doubles.length > 2 ? doubles[2] : g;
                var a = doubles.length > 3 ? doubles[3] : 0;
                var color = new U1.Color();
                color.R = (Math.max(0, Math.min(255, r)));
                color.G = (Math.max(0, Math.min(255, g)));
                color.B = (Math.max(0, Math.min(255, b)));
                color.A = (Math.max(0, Math.min(255, a)));
            }
            return U1.Colors.Black;
        };
        UVariant.ToVector3 = function (expVariant) {
            if (expVariant.VariantType == UVariantTypes.Vector) {
                var doubles = expVariant.Value;
                var x = doubles.length > 0 ? doubles[0] : 0;
                var y = doubles.length > 1 ? doubles[1] : 0;
                var z = doubles.length > 2 ? doubles[2] : 0;
                return new U1.Vector3(x, y, z);
            }
            return U1.Vector3.Zero;
        };
        UVariant.ToVector2 = function (expVariant) {
            if (expVariant.VariantType == UVariantTypes.Vector) {
                var doubles = expVariant.Value;
                var x = doubles.length > 0 ? doubles[0] : 0;
                var y = doubles.length > 1 ? doubles[1] : 0;
                return new U1.Vector2(x, y);
            }
            return U1.Vector2.Zero;
        };
        UVariant.ToVector4 = function (expVariant) {
            if (expVariant.VariantType == UVariantTypes.Vector) {
                var doubles = expVariant.Value;
                var x = doubles.length > 0 ? doubles[0] : 0;
                var y = doubles.length > 1 ? doubles[1] : 0;
                var z = doubles.length > 2 ? doubles[2] : 0;
                var w = doubles.length > 3 ? doubles[3] : 0;
                return new U1.Vector4(x, y, z, w);
            }
            return U1.Vector4.Zero;
        };
        UVariant.prototype.Equals = function (other) {
            if (this.VariantType != other.VariantType)
                return false;
            if (this._value == null && other._value == null)
                return true;
            if (this._value != null && this._value == other._value)
                return true;
            return false;
        };
        return UVariant;
    }());
    U1.UVariant = UVariant;
})(U1 || (U1 = {}));
/// <reference path="../../commons/ucommon.ts" />
var U1;
(function (U1) {
    var UPropertyBase = (function () {
        //#endregion
        function UPropertyBase(arg) {
            if (arg === void 0) { arg = null; }
            this._isVisible = true;
            this._childProps = new Array();
            //#endregion
            //#region INotifyPropertyChanged Members
            this.PropertyChanged = new U1.PropertyChangedEvent();
            this._key = "" + UPropertyBase._key++;
            if (arg != null) {
                if (arg.Source != null)
                    this.Source = arg.Source;
                if (arg.SourceProperty != null)
                    this.SourceProperty = arg.SourceProperty;
                if (arg.Category != null)
                    this.Category = arg.Category;
                if (arg.Group != null)
                    this.Group = arg.Group;
                if (arg.Name != null)
                    this.Name = arg.Name;
                if (arg.Label != null)
                    this.Label = arg.Label;
                if (arg.ValueText != null)
                    this.ValueText = arg.ValueText;
                if (arg.IsEditable != null)
                    this.IsReadOnly = !arg.IsEditable;
                if (arg.DisposingAction != null)
                    this.DisposingAction = arg.DisposingAction;
                if (arg.IsVisible != null)
                    this.IsVisible = arg.IsVisible;
                if (arg.Tag != null)
                    this.Tag = arg.Tag;
                if (arg.Background != null)
                    this.Background = arg.Background;
                if (arg.GetIsVibible != null)
                    this.GetIsVibible = arg.GetIsVibible;
            }
        }
        Object.defineProperty(UPropertyBase.prototype, "Key", {
            get: function () {
                return this._key;
            },
            set: function (value) {
                this._key = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "Source", {
            //#endregion
            //#region Props
            get: function () {
                return this._source;
            },
            set: function (value) {
                if (this._source === value)
                    return;
                this.RemoveDocumentEventHandlers();
                this.RemoveSourceEventHandlers();
                this._source = value;
                this.AddSourceEventHandlers();
                this.AddDocumentEventHandlers();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "IsDisposed", {
            get: function () {
                return this._isDisposed;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "SourceProperty", {
            get: function () {
                return this._sourceProp;
            },
            set: function (value) {
                this._sourceProp = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "Category", {
            get: function () {
                return this._category;
            },
            set: function (value) {
                this._category = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "Group", {
            /**
            * 그룹 이름을 설정하거나 가져온다. null인 경우 카테고리 차일드로 등록된다.
            */
            get: function () {
                return this._group;
            },
            set: function (value) {
                this._group = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "Name", {
            get: function () {
                return this._name;
            },
            set: function (value) {
                this._name = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "Label", {
            get: function () {
                return this._label || this._name;
            },
            set: function (value) {
                if (this._label === value)
                    return;
                this._label = value;
                this.InvokePropertyChanged("Label");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "LabelColon", {
            get: function () {
                return this.Label + ":";
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "ValueText", {
            get: function () {
                return this._valueText;
            },
            set: function (value) {
                this._valueText = value;
                this.InvokePropertyChanged("ValueText");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "IsReadOnly", {
            get: function () {
                return this._isReadOnly;
            },
            set: function (value) {
                if (this._isReadOnly === value)
                    return;
                this._isReadOnly = value;
                this.InvokePropertyChanged("IsReadOnly");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "IsEditable", {
            get: function () {
                return !this.IsReadOnly;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "IsVisible", {
            get: function () {
                if (this.GetIsVibible != null)
                    return this.GetIsVibible(this);
                return this._isVisible;
            },
            set: function (value) {
                if (this._isVisible === value)
                    return;
                this._isVisible = value;
                this.InvokePropertyChanged("IsVisible");
                this.InvokePropertyChanged("Visibility");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "Tag", {
            get: function () {
                return this._tag;
            },
            set: function (value) {
                this._tag = value;
                this.InvokePropertyChanged("Tag");
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "ChildProperties", {
            get: function () {
                return this._childProps;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropertyBase.prototype, "Background", {
            get: function () {
                return this._backGround;
            },
            set: function (value) {
                this._backGround = value;
                this.InvokePropertyChanged("Background");
            },
            enumerable: true,
            configurable: true
        });
        //#endregion
        //#region Methods
        UPropertyBase.prototype.GetSourceAll = function (ctr) {
            var result = [];
            if (this.Source instanceof ctr) {
                result.push(this.Source);
            }
            for (var _i = 0, _a = this._childProps; _i < _a.length; _i++) {
                var ch = _a[_i];
                if (ch.Source instanceof ctr) {
                    result.push(ch.Source);
                }
            }
            return result;
        };
        UPropertyBase.prototype.AddChild = function (other) {
            if (other.constructor != this.constructor)
                return;
            this._childProps.push(other);
        };
        UPropertyBase.prototype.InvokeValueChanged = function () {
            this.InvokePropertyChanged("Value");
            this.InvokePropertyChanged("ValueText");
            this.InvokePropertyChanged("Visibility");
            this.InvokePropertyChanged("IsVisible");
        };
        UPropertyBase.prototype.InvokePropertyChanged = function (name) {
            if (name === void 0) { name = null; }
            if (name === null) {
                this.PropertyChanged.Invoke(this, "Value");
                this.PropertyChanged.Invoke(this, "ValueText");
                this.PropertyChanged.Invoke(this, "Label");
                return;
            }
            if (this.PropertyChanged != null)
                this.PropertyChanged.Invoke(this, name);
        };
        //#endregion
        //#region IDisposable Members
        UPropertyBase.prototype.Dispose = function () {
            if (this._isDisposed)
                return;
            try {
                if (this.DisposingAction != null)
                    this.DisposingAction(this);
            }
            finally {
                this.DisposingAction = null;
            }
            this.RemoveDocumentEventHandlers();
            this.RemoveSourceEventHandlers();
            if (this._childProps != null) {
                for (var _i = 0, _a = this._childProps; _i < _a.length; _i++) {
                    var ch = _a[_i];
                    ch.Dispose();
                }
            }
            try {
                this.OnDisposing();
            }
            catch (ex) {
            }
            finally {
                this._isDisposed = true;
            }
        };
        UPropertyBase.prototype.OnDisposing = function () {
        };
        //#endregion
        //#region Event Handlers
        UPropertyBase.prototype.AddSourceEventHandlers = function () {
            if (this._source instanceof U1.UElement) {
                this._document = this._source.Document;
                this._source.PropertyChanged.Add(this, this.OnPropertyChanged);
                this._source.BeforeDispose.Add(this, this.OnElementDisposing);
            }
            if (this._source != null && this._source.PropertyChanged != null) {
                this._source.PropertyChanged.Add(this, this.OnPropertyChanged);
            }
            if (this._source instanceof U1.UDocument)
                this._document = this._source;
        };
        UPropertyBase.prototype.OnPropertyChanged = function (sender, propName) {
            if (propName == this.Name ||
                propName == this.SourceProperty)
                this.InvokeValueChanged();
        };
        UPropertyBase.prototype.RemoveSourceEventHandlers = function () {
            if (this._source instanceof U1.UElement) {
                this._source.PropertyChanged.Remove(this, this.OnPropertyChanged);
                this._source.BeforeDispose.Remove(this, this.OnElementDisposing);
            }
            else if (this._source != null && this._source.PropertyChanged != null) {
                this._source.PropertyChanged.Remove(this, this.OnPropertyChanged);
            }
        };
        UPropertyBase.prototype.AddDocumentEventHandlers = function () {
            if (this._document != null) {
                this._document.AfterEndTransaction.Add(this, this.OnDocument_AfterEndTransaction);
                this._document.AfterUndoRedo.Add(this, this.OnDocument_AfterUndoRedo);
            }
        };
        UPropertyBase.prototype.RemoveDocumentEventHandlers = function () {
            if (this._document != null) {
                this._document.AfterEndTransaction.Remove(this, this.OnDocument_AfterEndTransaction);
                this._document.AfterUndoRedo.Remove(this, this.OnDocument_AfterUndoRedo);
            }
        };
        UPropertyBase.prototype.OnDocument_AfterUndoRedo = function (arg1, arg2) {
            this.InvokeValueChanged();
        };
        UPropertyBase.prototype.OnDocument_AfterEndTransaction = function (obj) {
            this.InvokeValueChanged();
        };
        UPropertyBase.prototype.OnElementDisposing = function (sender) {
            this.Dispose();
        };
        UPropertyBase._key = 1;
        return UPropertyBase;
    }());
    U1.UPropertyBase = UPropertyBase;
    var UProperty = (function (_super) {
        __extends(UProperty, _super);
        //#endregion
        function UProperty(arg) {
            if (arg === void 0) { arg = null; }
            _super.call(this, arg);
            if (arg != null) {
                if (arg.GetValueFunc != null)
                    this.GetValueFunc = arg.GetValueFunc;
                if (arg.SetValueFunc != null)
                    this.SetValueFunc = arg.SetValueFunc;
                if (arg.BeginChangeFunc != null)
                    this.BeginChangeFunc = arg.BeginChangeFunc;
                if (arg.EndChangeFunc != null)
                    this.EndChangeFunc = arg.EndChangeFunc;
            }
        }
        Object.defineProperty(UProperty.prototype, "ValueText", {
            //#endregion
            //#region Props
            get: function () {
                return this._valueText;
            },
            set: function (value) {
                this.BeginTransaction();
                this._valueText = value;
                this.InvokePropertyChanged("ValueText");
                this.EndTransaction();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UProperty.prototype, "TheValue", {
            get: function () {
                return this.GetValueFunc != null ? this.GetValueFunc(this) : this._value;
            },
            set: function (value) {
                this._value = value;
                if (this.SetValueFunc != null)
                    this.SetValueFunc(this, this._value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UProperty.prototype, "Value", {
            get: function () {
                var value = this.TheValue;
                if (this._children != null)
                    for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var ch = _a[_i];
                        if (ch.TheValue == value)
                            return null;
                    }
                return value;
            },
            set: function (value) {
                this.setValue(value);
            },
            enumerable: true,
            configurable: true
        });
        UProperty.prototype.setValue = function (value) {
            if (this._isDisposed || value == null)
                return;
            this.BeginTransaction();
            if (this._parent == null) {
                if (this.BeginChangeFunc != null)
                    this.BeginChangeFunc(this);
                if (this._children != null)
                    for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var ch = _a[_i];
                        if (ch.BeginChangeFunc != null)
                            ch.BeginChangeFunc(this);
                    }
            }
            this.TheValue = value;
            if (this._children != null)
                for (var _b = 0, _c = this._children; _b < _c.length; _b++) {
                    var ch = _c[_b];
                    ch.TheValue = value;
                }
            if (this._parent == null) {
                if (this.EndChangeFunc != null)
                    this.EndChangeFunc(this);
                if (this._children != null)
                    for (var _d = 0, _e = this._children; _d < _e.length; _d++) {
                        var ch = _e[_d];
                        if (ch.EndChangeFunc != null)
                            ch.EndChangeFunc(this);
                    }
            }
            this.EndTransaction();
            this.InvokeValueChanged();
        };
        Object.defineProperty(UProperty.prototype, "Parent", {
            get: function () {
                return this._parent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UProperty.prototype, "Children", {
            get: function () {
                return this._children;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UProperty.prototype, "IsReadOnly", {
            get: function () {
                if (this.Children != null)
                    for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                        var ch = _a[_i];
                        if (this._isReadOnly != ch.IsReadOnly)
                            return true;
                    }
                return this._isReadOnly;
            },
            set: function (value) {
                this._isReadOnly = value;
                this.InvokePropertyChanged("IsReadOnly");
            },
            enumerable: true,
            configurable: true
        });
        // #endregion
        //#region Methods
        UProperty.prototype.AddChild = function (other) {
            _super.prototype.AddChild.call(this, other);
            if (other.constructor != this.constructor)
                return;
            if (this._children == null)
                this._children = [];
            other._parent = this;
            this._children.push(other);
        };
        UProperty.prototype.InvokeValueChanged = function () {
            _super.prototype.InvokeValueChanged.call(this);
            if (this.Parent != null)
                this.Parent.InvokeValueChanged();
        };
        UProperty.prototype.OnDisposing = function () {
            if (this.Parent != null && this.Parent.Children != null) {
                var idx = this.Parent._children.indexOf(this);
                this.Parent.Children.splice(idx, 1);
                this._parent = null;
            }
            if (this.Children != null) {
                var children = this._children.slice();
                for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {
                    var child = children_1[_i];
                    child.Dispose();
                }
                this._children = [];
            }
        };
        UProperty.prototype.EndTransaction = function () {
            var document = this._document;
            if (this.Parent == null) {
                if (this.Source instanceof U1.UElement)
                    document = this.Source.Document;
                if (document == null)
                    document = this._document;
            }
            if (document != null)
                document.EndTransaction();
        };
        UProperty.prototype.BeginTransaction = function () {
            var document = null;
            if (this.Parent == null) {
                if (this.Source instanceof U1.UElement)
                    document = this.Source.Document;
                if (document == null)
                    document = this._document;
            }
            if (document != null)
                document.BeginTransaction();
        };
        return UProperty;
    }(UPropertyBase));
    U1.UProperty = UProperty;
    var UPropBool = (function (_super) {
        __extends(UPropBool, _super);
        function UPropBool(arg) {
            if (arg === void 0) { arg = null; }
            _super.call(this, arg);
        }
        Object.defineProperty(UPropBool.prototype, "ValueText", {
            get: function () {
                var value = this.Value;
                if (value == null)
                    return "---";
                this._valueText = "" + value;
                return this._valueText;
            },
            set: function (value) {
                if (value == this._valueText)
                    return;
                var val = value.toUpperCase() == "TRUE";
                this.Value = val;
            },
            enumerable: true,
            configurable: true
        });
        return UPropBool;
    }(UProperty));
    U1.UPropBool = UPropBool;
    var UPropString = (function (_super) {
        __extends(UPropString, _super);
        function UPropString(arg) {
            if (arg === void 0) { arg = null; }
            _super.call(this, arg);
            this._acceptsReturn = false;
        }
        Object.defineProperty(UPropString.prototype, "AcceptsReturn", {
            get: function () {
                if (this.Children != null)
                    for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                        var ch = _a[_i];
                        if (this._acceptsReturn != ch.AcceptsReturn)
                            return false;
                    }
                return this._acceptsReturn;
            },
            set: function (value) {
                this._acceptsReturn = value;
                this.InvokePropertyChanged("AcceptsReturn");
            },
            enumerable: true,
            configurable: true
        });
        return UPropString;
    }(UProperty));
    U1.UPropString = UPropString;
    var UPropDouble = (function (_super) {
        __extends(UPropDouble, _super);
        function UPropDouble(arg) {
            if (arg === void 0) { arg = null; }
            _super.call(this, arg);
            this.increment = 1;
            this.formatString = "0.000";
        }
        UPropDouble.prototype.FromDisplay = function (str) {
            var dist = parseFloat(str);
            return dist;
        };
        UPropDouble.prototype.ToDisplay = function (len) {
            if (this.formatString != null)
                return numeral(len).format(this.formatString);
            return numeral(len).format(this.formatString);
        };
        Object.defineProperty(UPropDouble.prototype, "FormatString", {
            get: function () {
                return this.formatString;
            },
            set: function (value) {
                this.formatString = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropDouble.prototype, "Increment", {
            get: function () {
                return this.increment;
            },
            set: function (value) {
                this.increment = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropDouble.prototype, "Value", {
            get: function () {
                var value = this.TheValue;
                var uivalue = this.ToDisplay(value);
                if (this._children != null)
                    for (var _i = 0, _a = this._children; _i < _a.length; _i++) {
                        var ch = _a[_i];
                        if (this.ToDisplay(ch.TheValue) != uivalue)
                            return null;
                    }
                return value;
            },
            set: function (value) {
                this.setValue(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropDouble.prototype, "ValueText", {
            get: function () {
                var value = this.Value;
                if (value == null)
                    return "---";
                this._valueText = this.ToDisplay(value);
                return this._valueText;
            },
            set: function (value) {
                if (this._valueText == value)
                    return;
                var d = this.FromDisplay(value);
                this.Value = d;
            },
            enumerable: true,
            configurable: true
        });
        return UPropDouble;
    }(UProperty));
    U1.UPropDouble = UPropDouble;
    var UPropInt = (function (_super) {
        __extends(UPropInt, _super);
        function UPropInt(arg) {
            if (arg === void 0) { arg = null; }
            _super.call(this, arg);
            this.formatString = "0";
        }
        return UPropInt;
    }(UPropDouble));
    U1.UPropInt = UPropInt;
})(U1 || (U1 = {}));
/// <reference path="uproperty.ts" />
var U1;
(function (U1) {
    var UPropContainer = (function (_super) {
        __extends(UPropContainer, _super);
        function UPropContainer() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(UPropContainer.prototype, "Items", {
            //#endregion
            //#region Props
            get: function () {
                if (this._items == null)
                    this._items = [];
                return this._items;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropContainer.prototype, "Path", {
            get: function () {
                return (this.ParentContainer != null ? this.ParentContainer.Path : "") + "_" + this.Label;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropContainer.prototype, "IsExpanded", {
            get: function () {
                var path = this.Path;
                if (UPropContainer.s_isExpandeds[path] == null)
                    UPropContainer.s_isExpandeds[path] = true;
                return UPropContainer.s_isExpandeds[path];
            },
            set: function (value) {
                UPropContainer.s_isExpandeds[this.Path] = value;
                this.InvokePropertyChanged("IsExpanded");
            },
            enumerable: true,
            configurable: true
        });
        //#endregion
        //#region Methods
        UPropContainer.prototype.InvokePropertyChanged = function (prop) {
            if (prop === void 0) { prop = null; }
            _super.prototype.InvokePropertyChanged.call(this);
            for (var _i = 0, _a = this.Items; _i < _a.length; _i++) {
                var ch = _a[_i];
                if (ch instanceof U1.UPropertyBase) {
                    ch.InvokePropertyChanged();
                }
            }
        };
        UPropContainer.prototype.AddChild = function (other) {
            if (other instanceof UPropContainer) {
                for (var _i = 0, _a = other.Items
                    .map(function (o_) { return o_; }); _i < _a.length; _i++) {
                    var prop = _a[_i];
                    var parent = this.Items
                        .filter(function (o_) { return o_.Label == prop.Label; })
                        .filter(function (o_) { return o_.constructor == prop.constructor; })[0];
                    if (parent != null)
                        parent.AddChild(prop);
                    else
                        this.Items.push(prop);
                }
            }
        };
        UPropContainer.prototype.OnDisposing = function () {
            if (this.Items != null) {
                var items = this.Items.slice();
                for (var _i = 0, items_2 = items; _i < items_2.length; _i++) {
                    var item = items_2[_i];
                    if (item.Dispose != null)
                        item.Dispose();
                }
            }
            if (this.ParentContainer != null) {
                var idx = this.ParentContainer.Items.indexOf(this);
                this.ParentContainer.Items.splice(idx, 1);
            }
            _super.prototype.OnDisposing.call(this);
        };
        //#region Fields
        UPropContainer.s_isExpandeds = {};
        return UPropContainer;
    }(U1.UPropertyBase));
    U1.UPropContainer = UPropContainer;
})(U1 || (U1 = {}));
/// <reference path="upropcontainer.ts" />
var U1;
(function (U1) {
    var UPropCategory = (function (_super) {
        __extends(UPropCategory, _super);
        function UPropCategory() {
            _super.apply(this, arguments);
        }
        UPropCategory.Categorize = function (props) {
            var result = new Array();
            for (var _i = 0, props_1 = props; _i < props_1.length; _i++) {
                var prop = props_1[_i];
                //카테고리 탐색
                var category = result
                    .filter(function (o_) { return o_.Label == prop.Category; })[0];
                if (category == null) {
                    if (prop instanceof UPropCategory)
                        category = prop;
                    else {
                        category = new UPropCategory();
                        category.Label = prop.Category;
                    }
                    result.push(category);
                }
                if (category == prop)
                    continue;
                if (prop instanceof UPropCategory) {
                    category.AddChild(prop);
                    continue;
                }
                if (!(prop instanceof U1.UPropGroup) && (prop.Group == null || prop.Group == "")) {
                    //그룹을 지정하지 않은 경우 카테고리에 추가된다.
                    var parent = category.Items
                        .filter(function (o_) { return o_.Label == prop.Label; })
                        .filter(function (o_) { return o_.constructor == prop.constructor; })[0];
                    if (parent != null)
                        parent.AddChild(prop);
                    else
                        category.Items.push(prop);
                    continue;
                }
                var group = category.Items
                    .filter(function (o_) { return o_ instanceof U1.UPropGroup; })
                    .filter(function (o_) {
                    return o_.Label == prop.Group;
                })[0];
                if (group == null) {
                    if (prop instanceof U1.UPropGroup)
                        group = prop;
                    else {
                        group = new U1.UPropGroup();
                        group.Label = prop.Group;
                    }
                    group.ParentContainer = category;
                    category.Items.push(group);
                }
                if (group == prop)
                    continue;
                if (prop instanceof U1.UPropGroup) {
                    group.AddChild(prop);
                }
                else {
                    var parent = group.Items
                        .filter(function (o_) { return o_.Label == prop.Label; })
                        .filter(function (o_) { return o_.constructor == prop.constructor; })[0];
                    if (parent != null)
                        parent.AddChild(prop);
                    else
                        group.Items.push(prop);
                }
            }
            return result;
        };
        Object.defineProperty(UPropCategory.prototype, "Path", {
            get: function () {
                return (this.CategoryGroup != null ? this.CategoryGroup.Path : "") + "_" + this.Label;
            },
            enumerable: true,
            configurable: true
        });
        return UPropCategory;
    }(U1.UPropContainer));
    U1.UPropCategory = UPropCategory;
})(U1 || (U1 = {}));
/// <reference path="uproperty.ts" />
/// <reference path="upropcategory.ts" />
var U1;
(function (U1) {
    var UPropCategoryGroup = (function (_super) {
        __extends(UPropCategoryGroup, _super);
        function UPropCategoryGroup() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(UPropCategoryGroup.prototype, "Path", {
            get: function () {
                if (this.Label != null && this.Label.indexOf("[") > 0)
                    return this.Label.substring(0, this.Label.indexOf('['));
                return this.Label;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UPropCategoryGroup.prototype, "Categories", {
            get: function () {
                return this.Items
                    .filter(function (o_) { return o_ instanceof U1.UPropCategory; })
                    .map(function (o_) { return o_; });
            },
            set: function (value) {
                this._items = value;
                if (this._items != null) {
                    for (var _i = 0, value_1 = value; _i < value_1.length; _i++) {
                        var cat = value_1[_i];
                        cat.CategoryGroup = this;
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        //#region Methods 
        UPropCategoryGroup.Categorize = function (selection) {
            var groupnames = new Array();
            var objcounts = {};
            var groups = {};
            var hasMany = selection.length > UPropCategoryGroup.MaxCount;
            for (var _i = 0, selection_1 = selection; _i < selection_1.length; _i++) {
                var obj = selection_1[_i];
                if (obj.PropertyCategory === null ||
                    typeof obj.PropertyCategory != "string" ||
                    typeof obj.GetProperties != "function")
                    continue;
                var grpname = obj.PropertyCategory;
                var props = null;
                if (!hasMany)
                    props = obj.GetProperties();
                if (props != null) {
                    for (var i = 0; i < props.length; i++) {
                        if (props[i].Source == null)
                            props[i].Source = obj;
                    }
                }
                if (groups[grpname] == null) {
                    groupnames.push(grpname);
                    groups[grpname] = [];
                    objcounts[grpname] = 0;
                }
                objcounts[grpname] += 1;
                if (props != null)
                    groups[grpname] = groups[grpname].concat(props);
            }
            var result = new Array();
            for (var _a = 0, groupnames_1 = groupnames; _a < groupnames_1.length; _a++) {
                var key = groupnames_1[_a];
                var props = groups[key];
                var count = objcounts[key];
                var group = new UPropCategoryGroup();
                group.Label = key + ((objcounts[key] == 1) ? "" : "[" + count + "]");
                if (props != null && props.length > 0)
                    group.Categories = U1.UPropCategory.Categorize(props);
                result.push(group);
            }
            return result;
        };
        UPropCategoryGroup.MaxCount = 25;
        return UPropCategoryGroup;
    }(U1.UPropContainer));
    U1.UPropCategoryGroup = UPropCategoryGroup;
})(U1 || (U1 = {}));
/// <reference path="uproperty.ts" />
var U1;
(function (U1) {
    var UPropertySelection = (function (_super) {
        __extends(UPropertySelection, _super);
        function UPropertySelection() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(UPropertySelection.prototype, "Items", {
            get: function () {
                return this._items;
            },
            set: function (value) {
                this._items = value;
                this.InvokePropertyChanged("Items");
            },
            enumerable: true,
            configurable: true
        });
        return UPropertySelection;
    }(U1.UProperty));
    U1.UPropertySelection = UPropertySelection;
})(U1 || (U1 = {}));
/// <reference path="upropcontainer.ts" />
var U1;
(function (U1) {
    var UPropGroup = (function (_super) {
        __extends(UPropGroup, _super);
        function UPropGroup() {
            _super.apply(this, arguments);
        }
        return UPropGroup;
    }(U1.UPropContainer));
    U1.UPropGroup = UPropGroup;
})(U1 || (U1 = {}));
///<reference path="./UDocument.ts"/> 
///<reference path="./UElement.ts"/> 
///<reference path="../Math/U1Math.ts"/> 
var U1;
(function (U1) {
    var UValueIntArr = (function () {
        function UValueIntArr() {
            this.values = new Array();
        }
        Object.defineProperty(UValueIntArr.prototype, "Value", {
            get: function () {
                return this.values;
            },
            enumerable: true,
            configurable: true
        });
        UValueIntArr.prototype.ConvertFromStr = function (value) {
            this.values = new Array();
            if (value) {
                var items = value.split(",");
                for (var i = 0; i < items.length; i++) {
                    this.values.push(parseInt(items[i]));
                }
            }
        };
        UValueIntArr.prototype.ConvertToStr = function () {
            return this.values.join(",");
        };
        UValueIntArr.prototype.Equals = function (other) {
            if (this.values == other.values)
                return true;
            if (this.values == null && other.values == null)
                return true;
            if (this.values != null || other.values != null)
                return false;
            if (this.values.length != other.values.length)
                return false;
            for (var i = 0; i < this.values.length; i++) {
                if (this.values[i] != other.values[i])
                    return false;
            }
            return true;
        };
        UValueIntArr.prototype.Clone = function () {
            var clone = new UValueIntArr();
            clone.ConvertFromStr(this.ConvertToStr());
            return clone;
        };
        UValueIntArr.prototype.CopyFrom = function (other) {
            this.values = other.values.slice();
        };
        return UValueIntArr;
    }());
    U1.UValueIntArr = UValueIntArr;
    var UValueNumArr = (function () {
        function UValueNumArr() {
            this.values = new Array();
        }
        UValueNumArr.prototype.ConvertFromStr = function (value) {
            this.values = new Array();
            if (value) {
                var items = value.split(",");
                for (var i = 0; i < items.length; i++) {
                    this.values.push(parseFloat(items[i]));
                }
            }
        };
        UValueNumArr.prototype.ConvertToStr = function () {
            return this.values.join(",");
        };
        UValueNumArr.prototype.Equals = function (other) {
            if (this.values == other.values)
                return true;
            if (this.values == null && other.values == null)
                return true;
            if (this.values != null || other.values != null)
                return false;
            if (this.values.length != other.values.length)
                return false;
            for (var i = 0; i < this.values.length; i++) {
                if (this.values[i] != other.values[i])
                    return false;
            }
            return true;
        };
        UValueNumArr.prototype.Clone = function () {
            var clone = new UValueNumArr();
            clone.ConvertFromStr(this.ConvertToStr());
            return clone;
        };
        UValueNumArr.prototype.CopyFrom = function (other) {
            this.values = other.values.slice();
        };
        return UValueNumArr;
    }());
    U1.UValueNumArr = UValueNumArr;
    var UFieldAny = (function () {
        function UFieldAny(val) {
            if (val === void 0) { val = null; }
            this.m_old = val;
            this.m_cur = val;
        }
        /**
        * 현재값을 가져옴
        */
        UFieldAny.prototype.GetCurrent = function (owner) {
            return this.m_cur;
        };
        /**
        *현재값을 지정
        *@param {U1.UElement} owner = 속성의 소유자
        *@param {string} prop_name = 속성의 이름
        *@param {any} val = 속성에 설정할 값
        */
        UFieldAny.prototype.SetCurrent = function (owner, prop_name, val) {
            if (val === this.m_cur)
                return;
            if (this.m_isChanged != true) {
                var old = this.m_cur;
                this.m_isChanged = true;
            }
            this.m_cur = val;
            this.MarkChanged(owner, prop_name);
        };
        Object.defineProperty(UFieldAny.prototype, "IsChanged", {
            get: function () {
                return this.m_isChanged === true;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UFieldAny.prototype, "CurRawData", {
            get: function () {
                return this.m_cur;
            },
            enumerable: true,
            configurable: true
        });
        /**
        * 변경된 값을 적용
        * 이전값이 현재값과 같도록 변경
        */
        UFieldAny.prototype.AcceptChange = function (owner, prop_name) {
            this.m_old = this.m_cur;
            delete this.m_isChanged;
        };
        /**
        * 변경 취소
        * 현재값이 이전값과 같도록 변경
        */
        UFieldAny.prototype.CancelChange = function (owner, prop_name) {
            this.m_cur = this.m_old;
            delete this.m_isChanged;
        };
        /**
        * 문자열로 변환된 속성을 설정
        */
        UFieldAny.prototype.ConvertFromStr = function (owner, prop, value) {
        };
        /**
        * 파일로 저장된 문자열에서 속성 읽어옴
        */
        UFieldAny.prototype.LoadFromStr = function (owner, prop, value) {
            this.ConvertFromStr(owner, prop, value);
        };
        /**
        * 현재값을 문자열로 변환
        */
        UFieldAny.prototype.ConvertToStr = function () {
            if (this.m_cur != null)
                return "" + this.m_cur;
            return "";
        };
        /**
        * 현재값을 파일로 저장할 문자열 변환
        */
        UFieldAny.prototype.ConvertToStrSave = function () {
            return this.ConvertToStr();
        };
        /**
        * 이전값을 문자열로 변환
        */
        UFieldAny.prototype.ConvertOldTo = function () {
            if (this.m_old != null)
                return this.m_old.toString();
            return "";
        };
        UFieldAny.prototype.MarkChanged = function (owner, prop_name) {
            owner.MarkModified();
            owner.InvokePropertyChanged(prop_name);
        };
        return UFieldAny;
    }());
    U1.UFieldAny = UFieldAny;
    var UFieldBool = (function (_super) {
        __extends(UFieldBool, _super);
        function UFieldBool(val) {
            _super.call(this, val);
        }
        UFieldBool.prototype.GetCurrent = function (owner) {
            return _super.prototype.GetCurrent.call(this, owner);
        };
        UFieldBool.prototype.SetCurrent = function (owner, prop_name, val) {
            _super.prototype.SetCurrent.call(this, owner, prop_name, val);
        };
        UFieldBool.prototype.ConvertFromStr = function (owner, prop_name, value) {
            _super.prototype.SetCurrent.call(this, owner, prop_name, value === "true" || value == "1");
        };
        return UFieldBool;
    }(UFieldAny));
    U1.UFieldBool = UFieldBool;
    var UFieldInt = (function (_super) {
        __extends(UFieldInt, _super);
        function UFieldInt(val) {
            _super.call(this, val);
        }
        UFieldInt.prototype.GetCurrent = function (owner) {
            return _super.prototype.GetCurrent.call(this, owner);
        };
        UFieldInt.prototype.SetCurrent = function (owner, prop_name, val) {
            if (isNaN(val))
                val = 0;
            _super.prototype.SetCurrent.call(this, owner, prop_name, val);
        };
        UFieldInt.prototype.ConvertFromStr = function (owner, prop_name, value) {
            this.SetCurrent(owner, prop_name, parseInt(value));
        };
        UFieldInt.prototype.ConvertToStr = function () {
            if (this.m_cur != null)
                return "" + this.m_cur;
            return "";
        };
        return UFieldInt;
    }(UFieldAny));
    U1.UFieldInt = UFieldInt;
    var UFieldIntArr = (function (_super) {
        __extends(UFieldIntArr, _super);
        function UFieldIntArr(val) {
            if (val == null)
                throw "val can't be null";
            _super.call(this, val);
            this.m_old = new Array();
            for (var i = 0; i < val.length; i++) {
                this.m_old[i] = val[i];
            }
        }
        Object.defineProperty(UFieldIntArr.prototype, "IsChanged", {
            get: function () {
                return this.Equals(this.m_old, this.m_cur);
            },
            enumerable: true,
            configurable: true
        });
        UFieldIntArr.prototype.GetCurrent = function (owner) {
            return _super.prototype.GetCurrent.call(this, owner);
        };
        UFieldIntArr.prototype.SetCurrent = function (owner, prop_name, val) {
            if (val == null)
                throw "val can't be null";
            //super.SetCurrent(owner, prop_name, val);
            var v = this.m_cur;
            if (this.Equals(v, val))
                return;
            this.m_isChanged = true;
            U1.UValueUtil.Fill_A_With_B(v, val);
            this.MarkChanged(owner, prop_name);
        };
        UFieldIntArr.prototype.ConvertFromStr = function (owner, prop, value) {
            this.m_cur = U1.UValueUtil.ConvertNumberArrFromString(value);
            this.MarkChanged(owner, prop);
        };
        UFieldIntArr.prototype.ConvertToStr = function () {
            if (this.m_cur != null)
                return U1.UValueUtil.ConvertNumberArrToString.apply(U1.UValueUtil, (this.m_cur));
            return "";
        };
        UFieldIntArr.prototype.ConvertOldTo = function () {
            if (this.m_old != null)
                return U1.UValueUtil.ConvertNumberArrToString.apply(U1.UValueUtil, (this.m_old));
            return "";
        };
        /**
        * 변경된 값을 적용
        * 이전값이 현재값과 같도록 변경
        */
        UFieldIntArr.prototype.AcceptChange = function (owner, prop_name) {
            U1.UValueUtil.Fill_A_With_B(this.m_old, this.m_cur);
            delete this.m_isChanged;
        };
        /**
        * 변경 취소
        * 현재값이 이전값과 같도록 변경
        */
        UFieldIntArr.prototype.CancelChange = function (owner, prop_name) {
            U1.UValueUtil.Fill_A_With_B(this.m_cur, this.m_old);
            delete this.m_isChanged;
        };
        UFieldIntArr.prototype.Equals = function (a, b) {
            if (a == b)
                return true;
            if (a == null || b == null)
                return false;
            if (a.length != b.length)
                return false;
            for (var i = 0; i < a.length; i++) {
                if (a[i] !== (b[i]))
                    return false;
            }
            return true;
        };
        return UFieldIntArr;
    }(UFieldAny));
    U1.UFieldIntArr = UFieldIntArr;
    var UFieldFloat = (function (_super) {
        __extends(UFieldFloat, _super);
        function UFieldFloat(val) {
            _super.call(this, val);
        }
        UFieldFloat.prototype.GetCurrent = function (owner) {
            return _super.prototype.GetCurrent.call(this, owner);
        };
        UFieldFloat.prototype.SetCurrent = function (owner, prop_name, val) {
            if (isNaN(val))
                val = 0;
            _super.prototype.SetCurrent.call(this, owner, prop_name, val);
        };
        UFieldFloat.prototype.ConvertFromStr = function (owner, prop, value) {
            this.SetCurrent(owner, prop, parseFloat(value));
        };
        return UFieldFloat;
    }(UFieldAny));
    U1.UFieldFloat = UFieldFloat;
    var UFieldFloatArr = (function (_super) {
        __extends(UFieldFloatArr, _super);
        function UFieldFloatArr(val) {
            if (val == null)
                throw "val can't be null";
            _super.call(this, val);
            this.m_old = new Array();
            for (var i = 0; i < val.length; i++) {
                this.m_old[i] = val[i];
            }
        }
        Object.defineProperty(UFieldFloatArr.prototype, "IsChanged", {
            get: function () {
                return this.Equals(this.m_old, this.m_cur);
            },
            enumerable: true,
            configurable: true
        });
        UFieldFloatArr.prototype.GetCurrent = function (owner) {
            return _super.prototype.GetCurrent.call(this, owner);
        };
        UFieldFloatArr.prototype.SetCurrent = function (owner, prop_name, val) {
            if (val == null)
                throw "val can't be null";
            //super.SetCurrent(owner, prop_name, val);
            var v = this.m_cur;
            if (this.Equals(v, val))
                return;
            U1.UValueUtil.Fill_A_With_B(v, val);
            this.MarkChanged(owner, prop_name);
        };
        UFieldFloatArr.prototype.ConvertFromStr = function (owner, prop, value) {
            this.m_cur = U1.UValueUtil.ConvertNumberArrFromString(value);
            this.MarkChanged(owner, prop);
        };
        UFieldFloatArr.prototype.ConvertToStr = function () {
            if (this.m_cur != null)
                return U1.UValueUtil.ConvertNumberArrToString.apply(U1.UValueUtil, (this.m_cur));
            return "";
        };
        UFieldFloatArr.prototype.ConvertOldTo = function () {
            if (this.m_old != null)
                return U1.UValueUtil.ConvertNumberArrToString.apply(U1.UValueUtil, (this.m_old));
            return "";
        };
        /**
        * 변경된 값을 적용
        * 이전값이 현재값과 같도록 변경
        */
        UFieldFloatArr.prototype.AcceptChange = function (owner, prop_name) {
            U1.UValueUtil.Fill_A_With_B(this.m_old, this.m_cur);
            delete this.m_isChanged;
        };
        /**
        * 변경 취소
        * 현재값이 이전값과 같도록 변경
        */
        UFieldFloatArr.prototype.CancelChange = function (owner, prop_name) {
            U1.UValueUtil.Fill_A_With_B(this.m_cur, this.m_old);
            delete this.m_isChanged;
        };
        UFieldFloatArr.prototype.Equals = function (a, b) {
            if (a == b)
                return true;
            if (a == null || b == null)
                return false;
            if (a.length != b.length)
                return false;
            for (var i = 0; i < a.length; i++) {
                if (a[i] !== (b[i]))
                    return false;
            }
            return true;
        };
        return UFieldFloatArr;
    }(UFieldAny));
    U1.UFieldFloatArr = UFieldFloatArr;
    var UFieldStr = (function (_super) {
        __extends(UFieldStr, _super);
        function UFieldStr(val) {
            _super.call(this, val);
        }
        UFieldStr.prototype.GetCurrent = function (owner) {
            return _super.prototype.GetCurrent.call(this, owner);
        };
        UFieldStr.prototype.SetCurrent = function (owner, prop_name, val) {
            _super.prototype.SetCurrent.call(this, owner, prop_name, val);
        };
        UFieldStr.prototype.ConvertFromStr = function (owner, prop, value) {
            _super.prototype.SetCurrent.call(this, owner, prop, value);
        };
        return UFieldStr;
    }(UFieldAny));
    U1.UFieldStr = UFieldStr;
    var UFieldStrArr = (function (_super) {
        __extends(UFieldStrArr, _super);
        function UFieldStrArr(val) {
            if (val == null)
                throw "val can't be null";
            _super.call(this, val);
            this.m_old = new Array();
            for (var i = 0; i < val.length; i++) {
                this.m_old[i] = val[i];
            }
        }
        Object.defineProperty(UFieldStrArr.prototype, "IsChanged", {
            get: function () {
                return this.Equals(this.m_old, this.m_cur);
            },
            enumerable: true,
            configurable: true
        });
        UFieldStrArr.prototype.GetCurrent = function (owner) {
            return _super.prototype.GetCurrent.call(this, owner);
        };
        UFieldStrArr.prototype.SetCurrent = function (owner, prop_name, val) {
            _super.prototype.SetCurrent.call(this, owner, prop_name, val);
        };
        UFieldStrArr.prototype.ConvertFromStr = function (owner, prop, value) {
            this.m_cur = U1.UValueUtil.ConvertStrArrFromString(value);
            this.MarkChanged(owner, prop);
        };
        UFieldStrArr.prototype.ConvertToStr = function () {
            if (this.m_cur != null)
                return U1.UValueUtil.ConvertStrArrToString.apply(U1.UValueUtil, (this.m_cur));
            return "";
        };
        UFieldStrArr.prototype.ConvertOldTo = function () {
            if (this.m_old != null)
                return U1.UValueUtil.ConvertStrArrToString.apply(U1.UValueUtil, (this.m_old));
            return "";
        };
        UFieldStrArr.prototype.Equals = function (a, b) {
            if (a == b)
                return true;
            if (a == null || b == null)
                return false;
            if (a.length != b.length)
                return false;
            for (var i = 0; i < a.length; i++) {
                if (a[i] !== (b[i]))
                    return false;
            }
            return true;
        };
        return UFieldStrArr;
    }(UFieldAny));
    U1.UFieldStrArr = UFieldStrArr;
    /**
    * 긴 문자열
    * 저장시 base64로 저장됨
    */
    var UFieldLStr = (function (_super) {
        __extends(UFieldLStr, _super);
        function UFieldLStr(val) {
            _super.call(this, val);
        }
        UFieldLStr.prototype.LoadFromStr = function (owner, prop, value) {
            value = U1.b64_to_utf8(value);
            this.ConvertFromStr(owner, prop, value);
        };
        UFieldLStr.prototype.ConvertToStrSave = function () {
            var str = this.ConvertToStr();
            str = U1.utf8_to_b64(str);
            return str;
        };
        return UFieldLStr;
    }(UFieldStr));
    U1.UFieldLStr = UFieldLStr;
    /**
    * 이미지등 binary 데이터
    * base64형태로 지님
    */
    var UFieldXData = (function (_super) {
        __extends(UFieldXData, _super);
        function UFieldXData(val) {
            _super.call(this, val);
        }
        return UFieldXData;
    }(UFieldStr));
    U1.UFieldXData = UFieldXData;
    var UField = (function (_super) {
        __extends(UField, _super);
        //constructor(c: { new (): T; }, val: T) {
        //    super(val); 
        //    this.valueCreater = c;
        //}
        function UField(val) {
            if (val == null)
                throw "val can't be null";
            _super.call(this, val);
            this.m_old = val.Clone();
            //this.valueCreater = c;
        }
        Object.defineProperty(UField.prototype, "Creater", {
            //public get IsChanged(): boolean
            //{
            //    return !(<T>this.m_old).Equals(<T>this.m_cur);
            //}
            get: function () {
                return this.m_old.constructor;
            },
            enumerable: true,
            configurable: true
        });
        UField.prototype.GetCurrent = function (owner) {
            return _super.prototype.GetCurrent.call(this, owner);
        };
        UField.prototype.SetCurrent = function (owner, prop_name, val) {
            if (val == null)
                throw "val can't be null";
            //super.SetCurrent(owner, prop_name, val);
            var v = this.m_cur;
            if (v.Equals(val))
                return;
            v.CopyFrom(val);
            this.m_isChanged = true;
            this.MarkChanged(owner, prop_name);
        };
        UField.prototype.ConvertFromStr = function (owner, prop, value) {
            var v = this.m_cur;
            v.ConvertFromStr(value);
            this.MarkChanged(owner, prop);
            //var v: T = new this.valueCreater();
            //v.ConvertFromStr(value);
            //super.SetCurrent(owner,prop, v);
        };
        UField.prototype.ConvertToStr = function () {
            if (this.m_cur != null)
                return this.m_cur.ConvertToStr();
            return "";
        };
        UField.prototype.ConvertOldTo = function () {
            if (this.m_old != null)
                return this.m_old.ConvertToStr();
            return "";
        };
        /**
        * 변경된 값을 적용
        * 이전값이 현재값과 같도록 변경
        */
        UField.prototype.AcceptChange = function (owner, prop_name) {
            this.m_old.CopyFrom(this.m_cur);
            delete this.m_isChanged;
        };
        /**
        * 변경 취소
        * 현재값이 이전값과 같도록 변경
        */
        UField.prototype.CancelChange = function (owner, prop_name) {
            this.m_cur.CopyFrom(this.m_old);
        };
        return UField;
    }(UFieldAny));
    U1.UField = UField;
    var UFieldArr = (function (_super) {
        __extends(UFieldArr, _super);
        function UFieldArr(c, val) {
            if (val == null)
                throw "val can't be null";
            _super.call(this, val);
            this.val_ctor = c;
            this.m_old = new Array();
            for (var i = 0; i < val.length; i++) {
                this.m_old[i] = val[i].Clone();
            }
        }
        //public get IsChanged(): boolean
        //{
        //    return !this.Equals(<T[]>this.m_old, <T[]>this.m_cur);
        //}
        UFieldArr.prototype.GetCurrent = function (owner) {
            return _super.prototype.GetCurrent.call(this, owner);
        };
        UFieldArr.prototype.SetCurrent = function (owner, prop_name, val) {
            if (val == null)
                throw "val can't be null";
            //super.SetCurrent(owner, prop_name, val);
            var v = this.m_cur;
            if (this.Equals(v, val))
                return;
            this.m_isChanged = true;
            U1.UValueUtil.Fill_A_With_B(v, val);
            this.MarkChanged(owner, prop_name);
        };
        UFieldArr.prototype.ConvertFromStr = function (owner, prop, value) {
            this.m_cur = U1.UValueUtil.ConvertArrFromString(this.val_ctor, value);
            this.MarkChanged(owner, prop);
        };
        UFieldArr.prototype.ConvertToStr = function () {
            if (this.m_cur != null)
                return U1.UValueUtil.ConvertArrToString(this.m_cur);
            return "";
        };
        UFieldArr.prototype.ConvertOldTo = function () {
            if (this.m_old != null)
                return U1.UValueUtil.ConvertArrToString(this.m_old);
            return "";
        };
        /**
        * 변경된 값을 적용
        * 이전값이 현재값과 같도록 변경
        */
        UFieldArr.prototype.AcceptChange = function (owner, prop_name) {
            U1.UValueUtil.Fill_A_With_B(this.m_old, this.m_cur);
            delete this.m_isChanged;
        };
        /**
        * 변경 취소
        * 현재값이 이전값과 같도록 변경
        */
        UFieldArr.prototype.CancelChange = function (owner, prop_name) {
            U1.UValueUtil.Fill_A_With_B(this.m_cur, this.m_old);
            delete this.m_isChanged;
        };
        UFieldArr.prototype.Equals = function (a, b) {
            if (a == b)
                return true;
            if (a == null || b == null)
                return false;
            if (a.length != b.length)
                return false;
            for (var i = 0; i < a.length; i++) {
                if (!a[i].Equals(b[i]))
                    return false;
            }
            return true;
        };
        return UFieldArr;
    }(UFieldAny));
    U1.UFieldArr = UFieldArr;
    var UFieldRef = (function (_super) {
        __extends(UFieldRef, _super);
        function UFieldRef(val) {
            if (val === void 0) { val = null; }
            var id = 0;
            if (val != null)
                id = val.ID;
            _super.call(this, id);
        }
        UFieldRef.prototype.GetCurrent = function (owner) {
            var id = _super.prototype.GetCurrent.call(this, owner);
            if (owner.ElementTable == null)
                return this._cur_value;
            //if (this._cur_value == null && owner.Document !=null)
            this._cur_value = owner.Document.GetElement(id);
            return this._cur_value;
        };
        UFieldRef.prototype.SetCurrent = function (owner, prop_name, value) {
            if (value === void 0) { value = null; }
            var id = 0;
            if (value != null) {
                id = value.id;
            }
            else {
                id = 0;
            }
            this._cur_value = null;
            if (owner.ElementTable == null) {
                this._cur_value = value;
            }
            _super.prototype.SetCurrent.call(this, owner, prop_name, id);
            this.UpdateReference(owner, prop_name);
        };
        UFieldRef.prototype.UpdateReference = function (owner, prop_name) {
            var id = _super.prototype.GetCurrent.call(this, owner);
            if (owner.ElementTable != null)
                owner.ElementTable.UpdateReference(owner, prop_name, id);
        };
        UFieldRef.prototype.ConvertFromStr = function (owner, prop, value) {
            var v = parseInt(value);
            if (isNaN(v))
                v = 0;
            _super.prototype.SetCurrent.call(this, owner, prop, v);
            this.UpdateReference(owner, prop);
        };
        UFieldRef.prototype.ConvertToStr = function () {
            if (this.m_cur != null)
                return (this.m_cur).toString();
            return "";
        };
        UFieldRef.prototype.ConvertOldTo = function () {
            if (this.m_old != null)
                return (this.m_old).toString();
            return "";
        };
        UFieldRef.prototype.AcceptChange = function (owner, prop_name) {
            _super.prototype.AcceptChange.call(this, owner, prop_name);
            this.UpdateReference(owner, prop_name);
            delete this.m_isChanged;
        };
        /**
        * 변경 취소
        * 현재값이 이전값과 같도록 변경
        */
        UFieldRef.prototype.CancelChange = function (owner, prop_name) {
            _super.prototype.CancelChange.call(this, owner, prop_name);
            this.UpdateReference(owner, prop_name);
            delete this.m_isChanged;
        };
        UFieldRef.prototype.ReplaceRef = function (owner, prop_name, id_map) {
            var cur_id = this.m_cur;
            if (id_map[cur_id] != null) {
                _super.prototype.SetCurrent.call(this, owner, prop_name, id_map[cur_id]);
                this.UpdateReference(owner, prop_name);
                return true;
            }
            return false;
        };
        return UFieldRef;
    }(UFieldAny));
    U1.UFieldRef = UFieldRef;
    var UFieldRefArr = (function (_super) {
        __extends(UFieldRefArr, _super);
        function UFieldRefArr(val) {
            //if (val == null)
            //    throw "val can't be null";
            if (val === void 0) { val = []; }
            var cur = new Array();
            val.forEach(function (v_) {
                cur.push(v_.ID);
            });
            _super.call(this, cur);
            this.m_old = cur.slice();
        }
        //public get IsChanged(): boolean
        //{
        //    return !this.Equals(<number[]>this.m_old, <number[]>this.m_cur);
        //}
        UFieldRefArr.prototype.GetCurrent = function (owner) {
            var _this = this;
            if (owner.ElementTable == null)
                return this._cur_value;
            if (this._cur_value == null && owner.Document != null) {
                var ids = _super.prototype.GetCurrent.call(this, owner);
                this._cur_value = new Array();
                ids.forEach(function (id_) {
                    _this._cur_value.push(owner.Document.GetElement(id_));
                });
            }
            return this._cur_value;
        };
        UFieldRefArr.prototype.SetCurrent = function (owner, prop_name, val) {
            //if (val == null)
            //    throw "val can't be null"; 
            if (val === void 0) { val = []; }
            var v = this.m_cur;
            var cur = new Array();
            val.forEach(function (v_) {
                cur.push(v_.ID);
            });
            if (this.Equals(v, cur))
                return;
            this._cur_value = null;
            if (owner.ElementTable == null) {
                this._cur_value = val;
            }
            this.m_isChanged = true;
            U1.UValueUtil.Fill_A_With_B(v, cur);
            this.MarkChanged(owner, prop_name);
        };
        UFieldRefArr.prototype.ConvertFromStr = function (owner, prop, value) {
            this.m_cur = U1.UValueUtil.ConvertNumberArrFromString(value);
            this.MarkChanged(owner, prop);
        };
        UFieldRefArr.prototype.ConvertToStr = function () {
            if (this.m_cur != null)
                return U1.UValueUtil.ConvertNumberArrToString.apply(U1.UValueUtil, (this.m_cur));
            return "";
        };
        UFieldRefArr.prototype.ConvertOldTo = function () {
            if (this.m_old != null)
                return U1.UValueUtil.ConvertNumberArrToString.apply(U1.UValueUtil, (this.m_old));
            return "";
        };
        /**
        * 변경된 값을 적용
        * 이전값이 현재값과 같도록 변경
        */
        UFieldRefArr.prototype.AcceptChange = function (owner, prop_name) {
            U1.UValueUtil.Fill_A_With_B(this.m_old, this.m_cur);
            this.UpdateReference(owner, prop_name);
            delete this.m_isChanged;
        };
        /**
        * 변경 취소
        * 현재값이 이전값과 같도록 변경
        */
        UFieldRefArr.prototype.CancelChange = function (owner, prop_name) {
            U1.UValueUtil.Fill_A_With_B(this.m_cur, this.m_old);
            this.UpdateReference(owner, prop_name);
            delete this.m_isChanged;
        };
        UFieldRefArr.prototype.UpdateReference = function (owner, prop_name) {
            var ids = _super.prototype.GetCurrent.call(this, owner);
            if (owner.ElementTable != null)
                owner.ElementTable.UpdateReferences(owner, prop_name, ids);
        };
        UFieldRefArr.prototype.ReplaceRef = function (owner, prop_name, id_map) {
            var cur_ids = this.m_cur;
            var new_ids = cur_ids.slice();
            var isChanged = false;
            for (var i = 0; i < cur_ids.length; i++) {
                var cur_id = cur_ids[i];
                if (id_map[cur_id] != null) {
                    new_ids[i] = id_map[cur_id];
                    isChanged = true;
                }
            }
            if (isChanged) {
                var v = this.m_cur;
                U1.UValueUtil.Fill_A_With_B(v, new_ids);
                this.MarkChanged(owner, prop_name);
            }
            return isChanged;
        };
        UFieldRefArr.prototype.Equals = function (a, b) {
            if (a == b)
                return true;
            if (a == null || b == null)
                return false;
            if (a.length != b.length)
                return false;
            for (var i = 0; i < a.length; i++) {
                if (a[i] !== (b[i]))
                    return false;
            }
            return true;
        };
        return UFieldRefArr;
    }(UFieldAny));
    U1.UFieldRefArr = UFieldRefArr;
})(U1 || (U1 = {}));
///<reference path="./UDocument.ts"/> 
///<reference path="./UElement.ts"/> 
///<reference path="../Math/U1Math.ts"/> 
var U1;
(function (U1) {
    var ElementData = (function () {
        function ElementData(element) {
        }
        return ElementData;
    }());
    U1.ElementData = ElementData;
    var RefLink = (function () {
        function RefLink(src_id, src_prop, tgt_id) {
            this.NextSource = null; // 소스 링크는 단방향
            this.NextTarget = null; // 타겟 링크는 양향방 
            this.PrevTarget = null;
            this.Source = src_id;
            this.SourceProp = src_prop;
            this.Target = tgt_id;
        }
        RefLink.prototype.toString = function () {
            return "" + this.Source + "." + this.SourceProp + "=" + this.Target;
        };
        RefLink.prototype.RemoveTargetLink = function () {
            //양방향 링크 조정
            if (this.PrevTarget)
                this.PrevTarget.NextTarget = this.NextTarget;
            if (this.NextTarget)
                this.NextTarget.PrevTarget = this.PrevTarget;
        };
        RefLink.prototype.AddNextTarget = function (target) {
            //양방향 링크 조정
            if (this.NextTarget != null)
                this.NextTarget.PrevTarget = target;
            target.NextTarget = this.NextTarget;
            target.PrevTarget = this;
            this.NextTarget = target;
        };
        RefLink.prototype.AddNextSource = function (source) {
            source.NextSource = this.NextSource;
            this.NextSource = source;
        };
        RefLink.prototype.Dispose = function () {
            delete this.Source;
            delete this.Target;
            delete this.SourceProp;
            delete this.NextSource;
            delete this.NextTarget;
            delete this.PrevTarget;
        };
        RefLink.prototype.NextSourceAll = function () {
            var result = new Array();
            var cur = this;
            while (cur != null) {
                result[result.length] = cur;
                cur = cur.NextSource;
            }
            return result;
        };
        RefLink.prototype.NextTargetAll = function () {
            var result = new Array();
            var cur = this;
            while (cur != null) {
                result[result.length] = cur;
                cur = cur.NextTarget;
            }
            return result;
        };
        return RefLink;
    }());
    U1.RefLink = RefLink;
    var UElementTable = (function () {
        function UElementTable(doc) {
            this.m_elementsByTypes = {};
            this.m_changedElements = {};
            this.m_refer_table = new Array(UElementTable.key_count);
            this.idArrOne = [0];
            this.document = doc;
            this.m_next_id = 1;
            this.m_elements = {};
            for (var i = 0; i < UElementTable.key_count; i++) {
                this.m_refer_table[i] = new RefLink(0, "", 0);
            }
        }
        UElementTable.Register = function (name, c) {
            if (c === void 0) { c = null; }
            if (typeof name === "string") {
                UElementTable.Creaters[name] = c;
            }
            else {
                var funcNameRegex = /function (.{1,})\(/;
                var results = (funcNameRegex).exec(c.toString());
                var key = (results && results.length > 1) ? results[1] : "";
                UElementTable.Creaters[key] = name;
            }
        };
        Object.defineProperty(UElementTable.prototype, "Document", {
            get: function () {
                return this.document;
            },
            enumerable: true,
            configurable: true
        });
        UElementTable.prototype.SetChanged = function (elem) {
            this.m_changedElements[elem.id] = elem;
        };
        UElementTable.prototype.SetUnChanged = function (elem) {
            this.m_changedElements[elem.id] = null;
        };
        Object.defineProperty(UElementTable.prototype, "ChangedElements", {
            /**
               * 변경된 요소들을 가져옴
            */
            get: function () {
                var result = new Array();
                for (var p in this.m_changedElements) {
                    var elm = this.m_changedElements[p];
                    if (elm == null)
                        continue;
                    if (elm.State == U1.ElementStates.Modified
                        || elm.State == U1.ElementStates.Deleted
                        || elm.State == U1.ElementStates.New) {
                        result.push(elm);
                    }
                }
                return result;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UElementTable.prototype, "HasChangedElements", {
            get: function () {
                for (var p in this.m_changedElements) {
                    var elm = this.m_changedElements[p];
                    if (elm == null)
                        continue;
                    if (elm.State == U1.ElementStates.Modified
                        || elm.State == U1.ElementStates.Deleted
                        || elm.State == U1.ElementStates.New) {
                        return true;
                    }
                }
                return false;
            },
            enumerable: true,
            configurable: true
        });
        UElementTable.prototype.GetElement = function (id) {
            if (this.m_elements[id]) {
                if (this.m_elements[id] == null ||
                    this.m_elements[id].IsDeleted ||
                    this.m_elements[id].IsDisposed)
                    return null;
                return this.m_elements[id];
            }
            return null;
        };
        UElementTable.prototype.GetElements = function () {
            var result = new Array();
            for (var id in this.m_elements) {
                var elm = this.m_elements[id];
                if (elm == null ||
                    elm.IsDeleted ||
                    elm.IsDisposed)
                    continue;
                result.push(elm);
            }
            return result;
        };
        UElementTable.prototype.AddElement = function (c) {
            var elm = new c();
            this.m_next_id++;
            elm.id = this.m_next_id;
            elm.Document = this.Document;
            elm.State = U1.ElementStates.New;
            this.Add(elm);
            if (this.document != null)
                this.document.InvokeElementAdded(elm);
            return elm;
        };
        UElementTable.prototype.AddElementWithData = function (c, data) {
            if (data == null) {
                data = {};
            }
            var elm = new c();
            if (data.id !== undefined) {
                elm.id = data.id;
            }
            else {
                this.m_next_id++;
                elm.id = this.m_next_id;
            }
            elm.Document = this.Document;
            elm.State = U1.ElementStates.New;
            var fields = elm.GetFields();
            if (data != null) {
                for (var idx in data) {
                    if (idx == "id" || (typeof idx) !== "string")
                        continue;
                    var field = fields.Fields.filter(function (o_) { return o_.name === idx; })[0];
                    if (field != null) {
                        field.field.ConvertFromStr(elm, idx, data[idx]);
                    }
                }
            }
            this.Add(elm);
            if (this.document != null)
                this.document.InvokeElementAdded(elm);
            return elm;
        };
        UElementTable.prototype.Remove = function (element) {
            if (this.document != null)
                this.document.InvokeElementRemoving(element);
            if (this.m_elements[element.id])
                delete this.m_elements[element.id];
            if (this.m_changedElements[element.id])
                delete this.m_changedElements[element.id];
            this.UpdateReferences(element, null, null);
        };
        ///Relations
        UElementTable.prototype.GetReferTargets = function (source) {
            var src_key = (source % UElementTable.mask_ref_key);
            var result = new Array();
            var xcRef = this.m_refer_table[src_key];
            while (xcRef != null) {
                if (xcRef.Source == source)
                    result.push(xcRef.Target);
                xcRef = xcRef.NextSource;
            }
            return result;
        };
        UElementTable.prototype.GetReferSources = function (target) {
            var result = new Array();
            var tgt_key = (target % UElementTable.mask_ref_key);
            var xcRef = this.m_refer_table[tgt_key];
            while (xcRef != null) {
                if (xcRef.Target == target) {
                    result.push(xcRef.Source);
                }
                xcRef = xcRef.NextTarget;
            }
            return result;
        };
        UElementTable.prototype.GetReferSourcesBySrcProp = function (target, srcProp) {
            srcProp = srcProp.toUpperCase();
            var result = new Array();
            var tgt_key = (target % UElementTable.mask_ref_key);
            var xcRef = this.m_refer_table[tgt_key];
            while (xcRef != null) {
                if (xcRef.Target == target && xcRef.SourceProp === srcProp) {
                    result.push(xcRef.Source);
                }
                xcRef = xcRef.NextTarget;
            }
            return result;
        };
        UElementTable.prototype.UpdateReference = function (source, sourceProp, targetID) {
            this.idArrOne[0] = targetID;
            this.UpdateReferences(source, sourceProp, this.idArrOne);
        };
        UElementTable.prototype.UpdateReferences = function (source, sourceProp, targetIDs) {
            if (targetIDs === void 0) { targetIDs = null; }
            if (sourceProp != null)
                sourceProp = sourceProp.toUpperCase();
            // sourceProp 가 null인 경우 삭제만 
            var src_id = source.id;
            var src_key = (src_id % UElementTable.mask_ref_key);
            //remove old relations
            //var old_refs = new HashSet<RefLink>();
            var xcPrev = null;
            var xcCur = this.m_refer_table[src_key];
            var xcNext = null;
            while (xcCur != null) {
                xcNext = xcCur.NextSource;
                if (xcCur.Source == src_id &&
                    (sourceProp == null || xcCur.SourceProp == sourceProp)) {
                    xcPrev.NextSource = xcNext;
                    xcCur.RemoveTargetLink();
                    xcCur = xcNext;
                    continue;
                }
                xcPrev = xcCur;
                xcCur = xcNext;
            }
            if (sourceProp == null || targetIDs == null || targetIDs.length == 0)
                return;
            var nReferInfos = new Array();
            for (var i = 0; i < targetIDs.length; i++) {
                if (targetIDs[i] < 0)
                    continue;
                var inst = new RefLink(src_id, sourceProp, targetIDs[i]);
                nReferInfos.push(inst);
            }
            for (var _i = 0, nReferInfos_1 = nReferInfos; _i < nReferInfos_1.length; _i++) {
                var newRef = nReferInfos_1[_i];
                this.m_refer_table[src_key].AddNextSource(newRef);
                var tgt_id = newRef.Target;
                var tgt_key = (tgt_id % UElementTable.mask_ref_key);
                this.m_refer_table[tgt_key].AddNextTarget(newRef);
            }
        };
        UElementTable.prototype.CreateInstance = function (data, isLoading) {
            if (isLoading === void 0) { isLoading = false; }
            var id = parseInt(data["@id"]);
            var elm_type = data["@type"];
            if (UElementTable.Creaters[elm_type]) {
                var inst = new UElementTable.Creaters[elm_type]();
                inst.id = id;
                inst.Document = this.Document;
                inst.SetCurData(data, isLoading);
                inst.State = U1.ElementStates.New;
                this.m_elements[inst.id] = inst;
                this.m_next_id = Math.max(this.m_next_id, inst.id + 1);
                this.Add(inst);
                if (this.document != null && !this.document.IsLoading)
                    this.document.InvokeElementAdded(inst);
                return inst;
            }
            return null;
        };
        UElementTable.prototype.Add = function (instance) {
            var id = instance.ID;
            this.m_next_id = Math.max(this.m_next_id, id + 1);
            if (this.m_elements[id])
                return;
            this.m_elements[id] = instance;
            this.m_changedElements[id] = instance;
            var ctor = instance.constructor;
            if (ctor.U_TYPE_ID == null) {
                ctor.U_TYPE_ID = ++UElementTable.last_type_id;
                UElementTable.m_elementsConstructors[ctor.U_TYPE_ID] = ctor;
            }
            ;
            if (this.m_elementsByTypes[ctor.U_TYPE_ID] == null) {
                this.m_elementsByTypes[ctor.U_TYPE_ID] = [];
            }
            this.m_elementsByTypes[ctor.U_TYPE_ID].push(instance);
        };
        UElementTable.prototype.AbortChange = function () {
            for (var p in this.m_changedElements) {
                var ins = this.m_changedElements[p];
                if (ins != null && ins.State != U1.ElementStates.Old)
                    ins.CancelChange();
                delete this.m_changedElements[p]; // = null;
            }
        };
        UElementTable.prototype.AcceptChange = function () {
            for (var p in this.m_changedElements) {
                var ins = this.m_changedElements[p];
                if (ins != null && ins.State != U1.ElementStates.Old)
                    ins.AcceptChange();
                delete this.m_changedElements[p]; // = null;
            }
        };
        UElementTable.prototype.Clear = function () {
            for (var id in this.m_elements) {
                var elem = this.m_elements[id];
                elem.Document = null;
                elem.Dispose();
            }
            this.m_elements = {};
            this.m_changedElements = {};
            this.m_elementsByTypes = {};
            this.m_next_id = 1;
            for (var i = 0; i < this.m_refer_table.length; i++) {
                this.m_refer_table[i].NextSource = null;
                this.m_refer_table[i].NextTarget = null;
            }
        };
        UElementTable.Creaters = {};
        UElementTable.m_elementsConstructors = {};
        UElementTable.key_count = 0x1000; //4096
        UElementTable.mask_ref_key = 0x1000 - 1; // 4095; 
        UElementTable.last_type_id = 0;
        return UElementTable;
    }());
    U1.UElementTable = UElementTable;
})(U1 || (U1 = {}));
///<reference path="./UDocument.ts"/> 
///<reference path="./UField.ts"/> 
///<reference path="./UElementTable.ts"/> 
///<reference path="../Math/U1Math.ts"/>  
var U1;
(function (U1) {
    (function (ElementStates) {
        ElementStates[ElementStates["Old"] = 0] = "Old";
        ElementStates[ElementStates["New"] = 1] = "New";
        ElementStates[ElementStates["Detached"] = 2] = "Detached";
        ElementStates[ElementStates["Modified"] = 3] = "Modified";
        ElementStates[ElementStates["Deleted"] = 4] = "Deleted";
    })(U1.ElementStates || (U1.ElementStates = {}));
    var ElementStates = U1.ElementStates;
    var FieldSet = (function () {
        function FieldSet(owner) {
            this.Owner = owner;
            this.Fields = new Array();
        }
        FieldSet.prototype.AddField = function (name, field) {
            this.Fields.push({ name: name, field: field });
        };
        FieldSet.prototype.SetCurData = function (data) {
            for (var i = 0; i < this.Fields.length; i++) {
                var f = this.Fields[i];
                if (data[f.name]) {
                    f.field.ConvertFromStr(this.Owner, f.name, data[f.name]);
                }
            }
        };
        return FieldSet;
    }());
    U1.FieldSet = FieldSet;
    var UElement = (function () {
        //End Events 
        function UElement() {
            this.state = ElementStates.Detached;
            this.isDeleted = false;
            this.isDisposed = false;
            this.flag = 0;
            this.Fields = {};
        }
        Object.defineProperty(UElement.prototype, "PropertyChanged", {
            //Events
            get: function () {
                if (this._PropertyChanged == null)
                    this._PropertyChanged = new U1.PropertyChangedEvent();
                return this._PropertyChanged;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UElement.prototype, "BeforeDispose", {
            get: function () {
                if (this._BeforeDispose == null)
                    this._BeforeDispose = new U1.Event1();
                return this._BeforeDispose;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UElement.prototype, "ID", {
            //Props
            get: function () {
                return this.id;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UElement.prototype, "Document", {
            get: function () {
                return this.document;
            },
            set: function (value) {
                this.document = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UElement.prototype, "ElementTable", {
            get: function () {
                if (this.document)
                    return this.document.ElementTable;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UElement.prototype, "State", {
            get: function () {
                return this.state;
            },
            set: function (value) {
                if (this.state == value)
                    return;
                var old = this.state;
                this.state = value;
                this.OnStateChanged();
                if (this.ElementTable != null) {
                    if (this.state == ElementStates.Old)
                        this.ElementTable.SetUnChanged(this);
                    else
                        this.ElementTable.SetChanged(this);
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UElement.prototype, "IsDeleting", {
            get: function () {
                return (this.flag & 0x1) == 0x1;
            },
            set: function (value) {
                if (value)
                    this.flag = (this.flag | 0x1);
                else
                    this.flag = (this.flag & ~0x1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UElement.prototype, "IsDisposed", {
            get: function () {
                return (this.flag & 0x2) == 0x2;
                ;
            },
            set: function (value) {
                if (value)
                    this.flag = (this.flag | 0x2);
                else
                    this.flag = (this.flag & ~0x2);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UElement.prototype, "IsDeleted", {
            //IsDisposed
            get: function () {
                return this.State == ElementStates.Deleted ||
                    this.State == ElementStates.Detached;
            },
            enumerable: true,
            configurable: true
        });
        UElement.prototype.Dispose = function () {
            this.Disposing(true);
        };
        UElement.prototype.OnDisposing = function () {
        };
        UElement.prototype.Disposing = function (isDisposing) {
            if (this.isDisposed)
                return;
            this.isDisposed = true;
            if (isDisposing) {
                try {
                    //this.InvokeDisposing();
                    if (this._BeforeDispose != null) {
                        this._BeforeDispose.Invoke(this);
                    }
                    this.OnDisposing();
                    if (this.ElementTable != null) {
                        this.ElementTable.Remove(this);
                    }
                }
                catch (err) {
                    U1.LogService.WriteException(err);
                }
            }
        };
        UElement.prototype.Delete = function () {
            this.ForceDelete();
        };
        UElement.prototype.ForceDelete = function () {
            if (this.IsDeleted || this.IsDisposed || this.IsDeleting)
                return;
            this.IsDeleting = true;
            try {
                this.OnDeleting();
                if (this.Document == null || !this.Document.IsUndoRedo) {
                    //UndoRedo중인 경우는 고려하지 않는다. 
                    var refSources = this.ElementTable.GetReferSources(this.ID);
                    for (var idx = 0; idx < refSources.length; idx++) {
                        //참조하는 다른 요소들에 알린다. 
                        var refSrcElm = this.ElementTable.GetElement(refSources[idx]);
                        if (refSrcElm != null)
                            refSrcElm.OnRefDeleting(this);
                    }
                }
                if (this.Document != null) {
                    switch (this.state) {
                        case ElementStates.Old:
                        case ElementStates.Modified:
                            this.State = ElementStates.Deleted;
                            break;
                        case ElementStates.New:
                            this.State = ElementStates.Detached;
                            break;
                        default:
                            break;
                    }
                }
                else {
                    this.Dispose();
                }
            }
            catch (err) {
                U1.LogService.WriteException(err);
            }
            this.IsDeleting = false;
        };
        UElement.prototype.AcceptChange = function () {
            if (this.state == ElementStates.Deleted
                || this.state == ElementStates.Detached) {
                this.Dispose();
            }
            else {
                this.state = ElementStates.Detached;
                try {
                    this.OnAcceptChange();
                }
                catch (err) {
                    U1.LogService.WriteException(err);
                }
                this.state = ElementStates.Old;
            }
        };
        UElement.prototype.CancelChange = function () {
            if (this.state == ElementStates.New
                || this.state == ElementStates.Detached) {
                this.Dispose();
            }
            else {
                this.state = ElementStates.Old;
                this.OnCancelChange();
            }
        };
        /**
        * 가상메소드, 상태가 변경되면 호출됨
        */
        UElement.prototype.OnStateChanged = function () {
        };
        UElement.prototype.OnAcceptChange = function () {
            var fieldSet = this.GetFields();
            for (var i = 0; i < fieldSet.Fields.length; i++) {
                var prop = fieldSet.Fields[i].name;
                if (fieldSet.Fields[i].field.IsChanged === true)
                    fieldSet.Fields[i].field.AcceptChange(this, prop);
            }
        };
        UElement.prototype.OnCancelChange = function () {
            var fieldSet = this.GetFields();
            for (var i = 0; i < fieldSet.Fields.length; i++) {
                var prop = fieldSet.Fields[i].name;
                if (fieldSet.Fields[i].field.IsChanged === true)
                    fieldSet.Fields[i].field.CancelChange(this, prop);
            }
        };
        UElement.prototype.GetTypeName = function () {
            var funcNameRegex = /function (.{1,})\(/;
            var results = (funcNameRegex).exec((this).constructor.toString());
            return (results && results.length > 1) ? results[1] : "";
        };
        UElement.prototype.MarkModified = function () {
            if (this.state == ElementStates.Old)
                this.State = ElementStates.Modified;
        };
        ///Field의 이전값을 가져온다.
        UElement.prototype.GetOldData = function (fChangedOnly) {
            if (fChangedOnly === void 0) { fChangedOnly = false; }
            var fieldSet = this.GetFields();
            var data = {};
            for (var i = 0; i < fieldSet.Fields.length; i++) {
                var prop = fieldSet.Fields[i].name;
                if (fChangedOnly == false || fieldSet.Fields[i].field.IsChanged) {
                    var valStr = fieldSet.Fields[i].field.ConvertOldTo();
                    data[prop] = valStr;
                }
            }
            return data;
        };
        UElement.prototype.GetCurData = function (fChangedOnly) {
            if (fChangedOnly === void 0) { fChangedOnly = false; }
            var fieldSet = this.GetFields();
            var data = {};
            for (var i = 0; i < fieldSet.Fields.length; i++) {
                var prop = fieldSet.Fields[i].name;
                if (fChangedOnly == false || fieldSet.Fields[i].field.IsChanged) {
                    var valStr = fieldSet.Fields[i].field.ConvertToStr();
                    data[prop] = valStr;
                }
            }
            return data;
        };
        UElement.prototype.SetCurData = function (data, isLoading) {
            if (isLoading === void 0) { isLoading = false; }
            var fieldSet = this.GetFields();
            for (var i = 0; i < fieldSet.Fields.length; i++) {
                var prop = fieldSet.Fields[i].name;
                if (data[prop] === undefined)
                    continue;
                var valstr = data[prop] || "";
                if (isLoading)
                    fieldSet.Fields[i].field.LoadFromStr(this, prop, valstr);
                else
                    fieldSet.Fields[i].field.ConvertFromStr(this, prop, valstr);
            }
        };
        UElement.prototype.GetFields = function () {
            var fieldSet = new U1.FieldSet(this);
            this.OnGetFields(fieldSet);
            return fieldSet;
        };
        /**
        * 요소의 모든 필드들을 가져옴, 가상메소드
        */
        UElement.prototype.OnGetFields = function (fieldSet) {
        };
        UElement.prototype.OnDeleting = function () {
        };
        UElement.prototype.OnRefDeleting = function (element) {
        };
        UElement.prototype.Field = function (ctr, prop, def) {
            if (def === void 0) { def = null; }
            if (this.__fields == null)
                this.__fields = {};
            if (this.__fields[prop] instanceof ctr) {
                return this.__fields[prop];
            }
            this.__fields[prop] = new ctr(def);
            return this.__fields[prop];
        };
        UElement.prototype.UpdateRefs = function (id_map) {
            var fieldSet = this.GetFields();
            for (var _i = 0, _a = fieldSet.Fields; _i < _a.length; _i++) {
                var f = _a[_i];
                var ufield = f.field;
                if (ufield instanceof U1.UFieldRef) {
                    ufield.ReplaceRef(this, f.name, id_map);
                }
                else if (ufield instanceof U1.UFieldRefArr) {
                    ufield.ReplaceRef(this, f.name, id_map);
                }
            }
        };
        UElement.prototype.InvokePropertyChanged = function (prop) {
            if (this._PropertyChanged != null) {
                this.PropertyChanged.Invoke(this, prop);
            }
            if (this.Document != null)
                this.Document.InvokeElementChanged(this, prop);
        };
        Object.defineProperty(UElement.prototype, "PropertyCategory", {
            //Properties
            get: function () {
                return this.GetTypeName();
            },
            enumerable: true,
            configurable: true
        });
        UElement.prototype.GetProperties = function () {
            return [];
        };
        return UElement;
    }());
    U1.UElement = UElement;
})(U1 || (U1 = {}));
///<reference path="./UDocument.ts"/> 
///<reference path="./UElement.ts"/> 
///<reference path="./UElementTable.ts"/> 
var U1;
(function (U1) {
    var UndoRedoCommand = (function () {
        function UndoRedoCommand(doc) {
            this.isDisposed = false;
            this.document = doc;
        }
        Object.defineProperty(UndoRedoCommand.prototype, "Document", {
            get: function () {
                return this.document;
            },
            enumerable: true,
            configurable: true
        });
        UndoRedoCommand.prototype.Undo = function () {
        };
        UndoRedoCommand.prototype.Redo = function () {
        };
        UndoRedoCommand.prototype.Dispose = function () {
            if (this.isDisposed)
                return;
            this.isDisposed = true;
        };
        return UndoRedoCommand;
    }());
    U1.UndoRedoCommand = UndoRedoCommand;
    var ElementCommand = (function (_super) {
        __extends(ElementCommand, _super);
        function ElementCommand(element) {
            _super.call(this, element.Document);
            this._type = element.GetTypeName();
            this._eid = element.ID;
            this._state = element.State;
            var change_only = true;
            if (this._state == U1.ElementStates.Deleted ||
                this._state == U1.ElementStates.New) {
                change_only = false;
            }
            this._oldData = element.GetOldData(change_only);
            this._curData = element.GetCurData(change_only);
            this._curData["@type"] = element.GetTypeName();
            this._curData["@id"] = element.ID.toString();
            this._oldData["@type"] = element.GetTypeName();
            this._oldData["@id"] = element.ID.toString();
        }
        ElementCommand.prototype.Undo = function () {
            switch (this._state) {
                case U1.ElementStates.New:
                    {
                        this.Do(U1.ElementStates.Deleted, this._curData);
                        break;
                    }
                case U1.ElementStates.Modified:
                    {
                        this.Do(U1.ElementStates.Modified, this._oldData);
                        break;
                    }
                case U1.ElementStates.Deleted:
                    {
                        this.Do(U1.ElementStates.New, this._oldData);
                        break;
                    }
                default:
                    break;
            }
        };
        ElementCommand.prototype.Redo = function () {
            switch (this._state) {
                case U1.ElementStates.New:
                    {
                        this.Do(U1.ElementStates.New, this._curData);
                        break;
                    }
                case U1.ElementStates.Modified:
                    {
                        this.Do(U1.ElementStates.Modified, this._curData);
                        break;
                    }
                case U1.ElementStates.Deleted:
                    {
                        this.Do(U1.ElementStates.Deleted, this._curData);
                        break;
                    }
                default:
                    break;
            }
        };
        ElementCommand.prototype.Do = function (state, data) {
            //Debug.WriteLine("Elm Do " + state + " "+ data);
            switch (state) {
                case U1.ElementStates.New:
                    {
                        var element = this.Document.ElementTable.CreateInstance(data);
                        break;
                    }
                case U1.ElementStates.Modified:
                    {
                        var elem = this.Document.ElementTable.GetElement(this._eid);
                        if (elem != null) {
                            elem.SetCurData(data);
                        }
                        else {
                            var i = 0;
                        }
                        break;
                    }
                case U1.ElementStates.Deleted:
                    {
                        var elem = this.Document.ElementTable.GetElement(this._eid);
                        if (elem != null) {
                            elem.ForceDelete();
                        }
                        break;
                    }
                default:
                    break;
            }
        };
        return ElementCommand;
    }(UndoRedoCommand));
    U1.ElementCommand = ElementCommand;
    var CommandGroup = (function (_super) {
        __extends(CommandGroup, _super);
        function CommandGroup(doc) {
            _super.call(this, doc);
            this._commands = new Array();
        }
        CommandGroup.prototype.Add = function (cmd) {
            this._commands.push(cmd);
        };
        Object.defineProperty(CommandGroup.prototype, "Count", {
            get: function () {
                return this._commands.length;
            },
            enumerable: true,
            configurable: true
        });
        CommandGroup.prototype.AddFront = function (command) {
            this._commands.unshift(command);
        };
        CommandGroup.prototype.Undo = function () {
            for (var i = this._commands.length - 1; i >= 0; i--) {
                var cmd = this._commands[i];
                cmd.Undo();
            }
        };
        CommandGroup.prototype.Redo = function () {
            for (var _i = 0, _a = this._commands; _i < _a.length; _i++) {
                var cmd = _a[_i];
                cmd.Redo();
            }
        };
        return CommandGroup;
    }(UndoRedoCommand));
    U1.CommandGroup = CommandGroup;
    var Transaction = (function () {
        function Transaction() {
        }
        Object.defineProperty(Transaction.prototype, "IsFinished", {
            get: function () {
                return this.isFilished;
            },
            set: function (val) {
                this.isFilished = val;
            },
            enumerable: true,
            configurable: true
        });
        return Transaction;
    }());
    U1.Transaction = Transaction;
    var UHistoryManager = (function () {
        function UHistoryManager(doc) {
            this.m_transactionStack = new Array();
            this.m_undoStack = new Array();
            this.m_redoStack = new Array();
            this.PropertyChangedEvent = new U1.Event2();
            this.document = doc;
        }
        Object.defineProperty(UHistoryManager.prototype, "Document", {
            get: function () {
                return this.document;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UHistoryManager.prototype, "HasChangedData", {
            /**
             * 변경된 데이터가 있는지 여부
            */
            get: function () {
                return this.document.ElementTable.HasChangedElements;
            },
            enumerable: true,
            configurable: true
        });
        UHistoryManager.prototype.ClearTransactionStack = function () {
            this.m_transactionStack = [];
            this.InvokePropertyChanged("UndoStack");
        };
        /**
        * 명령 추가, 다시실행 스택 모두 제거, 실행취소 스택의 맨위에 추가
        */
        UHistoryManager.prototype.AddCommand = function (commands) {
            this.RemoveRedoStack();
            this.m_undoStack.push(commands);
            if (UHistoryManager.MaxStackCount <= this.m_undoStack.length) {
                this.m_undoStack.shift();
            }
        };
        /**
        * 실행취소 스택 비움
        */
        UHistoryManager.prototype.RemoveRedoStack = function () {
            while (this.m_redoStack.length > 0) {
                var cmdGrp = this.m_redoStack.pop();
                cmdGrp.Dispose();
            }
        };
        /**
        * 트렌젝션 시작
        */
        UHistoryManager.prototype.BeginTransaction = function () {
            if (this.HasChangedData) {
                this.SaveChanges();
                this.document.AcceptChanges();
            }
            // 트랜젝션 시작시점을 가리키는 커맨드
            var cmdGroup = new CommandGroup(this.document);
            var transaction = new Transaction();
            transaction.CommandGroup = cmdGroup;
            this.m_transactionStack.push(transaction);
            this.AddCommand(cmdGroup);
            return transaction;
        };
        /**
        * 트렌젝션 종료
        */
        UHistoryManager.prototype.EndTransaction = function (transaction) {
            if (transaction != null && transaction.IsFinished)
                return;
            if (this.HasChangedData) {
                this.SaveChanges();
                this.document.AcceptChanges();
            }
            //트랜젝션을 스텍에서 제거
            if (transaction == null) {
                if (this.m_transactionStack.length > 0)
                    transaction = this.m_transactionStack.pop();
            }
            else {
                //지정된 transaction까지 모든 트랜젝션 무시
                var trans = this.m_transactionStack.pop();
                while (trans != null && trans != transaction) {
                    if (this.m_transactionStack.length > 0) {
                        trans = this.m_transactionStack.pop();
                        trans.IsFinished = true;
                    }
                    else {
                        trans = null;
                    }
                }
            }
            if (transaction != null) {
                //이미 처리 되었음을 표시
                transaction.IsFinished = true;
                //트랜젝션안에 속하는 명령 병합 
                var group = transaction.CommandGroup;
                while (this.m_undoStack.length > 0) {
                    if (group != this.m_undoStack[this.m_undoStack.length - 1]) {
                        group.AddFront(this.m_undoStack.pop());
                    }
                    else {
                        break;
                    }
                }
                this.RemoveRedoStack();
            }
            this.InvokePropertyChanged("UndoStack");
        };
        /**
        * 실행취소
        */
        UHistoryManager.prototype.Undo = function () {
            if (this.CanUndo()) {
                var undoCmd = this.m_undoStack.pop();
                undoCmd.Undo();
                this.m_redoStack.push(undoCmd);
                this.InvokePropertyChanged("UndoStack");
            }
        };
        /**
        * 다시실행
        */
        UHistoryManager.prototype.Redo = function () {
            if (this.CanRedo()) {
                var redoCmd = this.m_redoStack.pop();
                redoCmd.Redo();
                this.m_undoStack.push(redoCmd);
                this.InvokePropertyChanged("UndoStack");
            }
        };
        /**
        * 실행취소스택 제거
        */
        UHistoryManager.prototype.ClearUndoStack = function () {
            this.m_undoStack = [];
            this.m_transactionStack = [];
            this.InvokePropertyChanged("UndoStack");
        };
        /**
        * 변경내용 저장
        */
        UHistoryManager.prototype.SaveChanges = function () {
            var commands = new CommandGroup(this.document);
            var chElements = this.document.ElementTable.ChangedElements;
            for (var _i = 0, chElements_1 = chElements; _i < chElements_1.length; _i++) {
                var elem = chElements_1[_i];
                if (elem.State == U1.ElementStates.Modified
                    || elem.State == U1.ElementStates.Deleted
                    || elem.State == U1.ElementStates.New) {
                    var cmd = new ElementCommand(elem);
                    commands.Add(cmd);
                }
            }
            if (commands.Count > 0) {
                this.AddCommand(commands);
            }
        };
        /**
        * 실행취소 명령, 실행취소 스택의 꼭대기에 위치
        */
        UHistoryManager.prototype.UndoCommand = function () {
            if (this.m_undoStack.length > 0)
                return this.m_undoStack[this.m_undoStack.length - 1];
            return null;
        };
        /**
        * 다시실행 명령, 다시실행 스택의 꼭대기에 위치
        */
        UHistoryManager.prototype.RedoCommand = function () {
            if (this.m_redoStack.length > 0) {
                return this.m_redoStack[this.m_redoStack.length - 1];
            }
            return null;
        };
        /**
         * 명령그룹이 트랜젝션 명령그룹인 경우
         */
        UHistoryManager.prototype.IsCurrentCommandTransaction = function () {
            if (this.m_transactionStack.length == 0)
                return false;
            var last = this.m_transactionStack[this.m_transactionStack.length - 1];
            return last.CommandGroup == this.UndoCommand();
        };
        /**
         * 실행취소 가능한지 여부
         */
        UHistoryManager.prototype.CanUndo = function () {
            return this.m_undoStack.length > 0 &&
                !this.IsCurrentCommandTransaction() &&
                this.UndoCommand() != null;
        };
        /**
         * 다시실행 가능한지 여부
         */
        UHistoryManager.prototype.CanRedo = function () {
            return this.m_redoStack.length > 0 &&
                this.RedoCommand() != null;
        };
        UHistoryManager.prototype.InvokePropertyChanged = function (prop) {
            this.PropertyChangedEvent.Invoke(this, prop);
        };
        UHistoryManager.MaxStackCount = 50;
        return UHistoryManager;
    }());
    U1.UHistoryManager = UHistoryManager;
})(U1 || (U1 = {}));
///<reference path="./UElement.ts"/>
///<reference path="./UElementTable.ts"/>  
///<reference path="./UHistoryManager.ts"/>
///<reference path="../Commons/UCommon.ts"/>
var U1;
(function (U1) {
    var UDocument = (function () {
        function UDocument() {
            this._selection = new USelection(this);
            /*
            * Events
            */
            this.ElementAdded = new U1.Event2();
            this.ElementRemoving = new U1.Event2();
            this.AfterUndoRedo = new U1.Event2();
            this.BeforeEndTransaction = new U1.Event1();
            this.AfterEndTransaction = new U1.Event1();
            this.AfterAbortTransaction = new U1.Event1();
            this.ElementChanged = new U1.Event3();
            this.BeforeClear = new U1.Event1();
            this.AfterClear = new U1.Event1();
            this.BeforeLoading = new U1.Event1();
            this.AfterLoaded = new U1.Event1();
            this.AfterChanged = new U1.Event1();
            this.elementTable = new U1.UElementTable(this);
            this.historyManager = new U1.UHistoryManager(this);
        }
        Object.defineProperty(UDocument.prototype, "IsLoading", {
            get: function () {
                return this.isLoading;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UDocument.prototype, "IsUndoRedo", {
            get: function () {
                return this.isUndoRedo;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UDocument.prototype, "Elements", {
            get: function () {
                return this.ElementTable.GetElements();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UDocument.prototype, "Selection", {
            get: function () {
                return this._selection;
            },
            enumerable: true,
            configurable: true
        });
        UDocument.prototype.GetElement = function (id) {
            return this.elementTable.GetElement(id);
        };
        UDocument.prototype.AddElement = function (c) {
            return this.elementTable.AddElement(c);
        };
        UDocument.prototype.AddElementWithData = function (c, data) {
            return this.elementTable.AddElementWithData(c, data);
        };
        Object.defineProperty(UDocument.prototype, "ElementTable", {
            get: function () {
                return this.elementTable;
            },
            enumerable: true,
            configurable: true
        });
        UDocument.prototype.AcceptChanges = function () {
            this.ElementTable.AcceptChange();
        };
        UDocument.prototype.Undo = function () {
            this.isUndoRedo = true;
            try {
                this.historyManager.Undo();
                this.AcceptChanges();
            }
            catch (err) {
                U1.LogService.WriteException(err);
            }
            this.isUndoRedo = false;
            this.InvokeAfterUndoRedo(true);
        };
        UDocument.prototype.Redo = function () {
            this.isUndoRedo = true;
            try {
                this.historyManager.Redo();
                this.AcceptChanges();
            }
            catch (err) {
                U1.LogService.WriteException(err);
            }
            this.isUndoRedo = false;
            this.InvokeAfterUndoRedo(false);
        };
        UDocument.prototype.BeginTransaction = function () {
            this.historyManager.BeginTransaction();
        };
        UDocument.prototype.EndTransaction = function () {
            try {
                this.InvokeBeforeEndTransaction();
                this.historyManager.EndTransaction(null);
                this.InvokeAfterEndTransaction();
            }
            catch (err) {
                U1.LogService.WriteException(err);
            }
            finally {
            }
        };
        UDocument.prototype.AbortTransaction = function () {
            this.ElementTable.AbortChange();
            this.InvokeAfterAbortTransaction();
            this.historyManager.ClearTransactionStack();
        };
        UDocument.prototype.Clear = function () {
            this.InvokeBeforeClear();
            this.Selection.Clear();
            this.ElementTable.Clear();
            this.historyManager.ClearTransactionStack();
            this.historyManager.ClearUndoStack();
            this.InvokeAfterClear();
        };
        UDocument.prototype.ClearUndoHistory = function () {
            this.historyManager.ClearTransactionStack();
            this.historyManager.ClearUndoStack();
        };
        UDocument.prototype.BeginLoad = function () {
            this.Clear();
            this.isLoading = true;
            this.BeforeLoading.Invoke(this);
        };
        UDocument.prototype.EndLoad = function () {
            this.isLoading = false;
            this.AcceptChanges();
            this.historyManager.ClearUndoStack();
            this.AfterLoaded.Invoke(this);
        };
        UDocument.prototype.Load = function (xDoc) {
            this.BeginLoad();
            this.EndLoad();
        };
        UDocument.formatXml = function (xml) {
            var formatted = '';
            var reg = /(>)(<)(\/*)/g;
            xml = xml.replace(reg, '$1\r\n$2$3');
            var pad = 0;
            jQuery.each(xml.split('\r\n'), function (index, node) {
                var indent = 0;
                if (node.match(/.+<\/\w[^>]*>$/)) {
                    indent = 0;
                }
                else if (node.match(/^<\/\w/)) {
                    if (pad != 0) {
                        pad -= 1;
                    }
                }
                else if (node.match(/^<\w[^>]*[^\/]>.*$/)) {
                    indent = 1;
                }
                else {
                    indent = 0;
                }
                var padding = '';
                for (var i = 0; i < pad; i++) {
                    padding += '  ';
                }
                formatted += padding + node + '\r\n';
                pad += indent;
            });
            return formatted;
        };
        UDocument.prototype.ToXmlString = function () {
            var xmlText = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WinCad></WinCad>";
            var xdoc = new DOMParser().parseFromString(xmlText, "text/xml");
            var xelems = xdoc.createElement("Elements");
            xdoc.documentElement.appendChild(xelems);
            for (var _i = 0, _a = this.Elements; _i < _a.length; _i++) {
                var elm = _a[_i];
                var xelm = xdoc.createElement(elm.GetTypeName());
                var idAttr = xdoc.createAttribute("id");
                idAttr.value = "" + elm.ID;
                xelm.attributes.setNamedItem(idAttr);
                xelems.appendChild(xelm);
                var fields = elm.GetFields();
                for (var i = 0; i < fields.Fields.length; i++) {
                    var field = fields.Fields[i];
                    var valText = field.field.ConvertToStrSave();
                    if (valText != null && valText != "") {
                        var text = xdoc.createTextNode(valText);
                        var xfield = xdoc.createElement(field.name);
                        xfield.appendChild(text);
                        xelm.appendChild(xfield);
                    }
                }
            }
            var result = new XMLSerializer().serializeToString(xdoc);
            result = UDocument.formatXml(result);
            return result;
        };
        UDocument.prototype.getXmlZipStringAsync = function (callback) {
            var xmlText = "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<WinCadZip></WinCadZip>";
            var xdoc = new DOMParser().parseFromString(xmlText, "text/xml");
            var content = this.ToXmlString();
            var opt = {
                type: "base64",
                compression: "DEFLATE"
            };
            var zip = new JSZip();
            zip.file("document.xml", content);
            zip
                .generateAsync(opt)
                .then(function (base64) {
                var text = xdoc.createTextNode(base64);
                var zipContent = xdoc.createElement("Content");
                zipContent.appendChild(text);
                xdoc.documentElement.appendChild(zipContent);
                var result = new XMLSerializer().serializeToString(xdoc);
                result = UDocument.formatXml(result);
                callback(result);
            });
        };
        UDocument.prototype.InvokeElementAdded = function (element) {
            if (this.isLoading)
                return;
            //요소추가 이벤트 발생
            this.ElementAdded.Invoke(this, element);
        };
        UDocument.prototype.InvokeElementRemoving = function (element) {
            if (this.isLoading)
                return;
            this.Selection.Remove(element);
            this.ElementRemoving.Invoke(this, element);
        };
        UDocument.prototype.InvokeAfterUndoRedo = function (isUndo) {
            if (this.isLoading)
                return;
            this.AfterUndoRedo.Invoke(this, isUndo);
            this.InvokeAfterChanged();
        };
        UDocument.prototype.InvokeBeforeEndTransaction = function () {
            if (this.isLoading)
                return;
            this.BeforeEndTransaction.Invoke(this);
        };
        UDocument.prototype.InvokeAfterEndTransaction = function () {
            if (this.isLoading)
                return;
            this.AfterEndTransaction.Invoke(this);
            this.InvokeAfterChanged();
        };
        UDocument.prototype.InvokeAfterAbortTransaction = function () {
            if (this.isLoading)
                return;
            this.AfterAbortTransaction.Invoke(this);
            this.InvokeAfterChanged();
        };
        UDocument.prototype.InvokeElementChanged = function (element, prop) {
            if (this.isLoading)
                return;
            this.ElementChanged.Invoke(this, element, prop);
        };
        UDocument.prototype.InvokeBeforeClear = function () {
            this.BeforeClear.Invoke(this);
        };
        UDocument.prototype.InvokeAfterClear = function () {
            this.AfterClear.Invoke(this);
            this.InvokeAfterChanged();
        };
        UDocument.prototype.InvokeAfterChanged = function () {
            this.AfterChanged.Invoke(this);
        };
        return UDocument;
    }());
    U1.UDocument = UDocument;
    var UEditor = (function () {
        function UEditor() {
        }
        UEditor.prototype.PickPoint = function () {
            return null;
        };
        return UEditor;
    }());
    U1.UEditor = UEditor;
    var USelection = (function () {
        function USelection(doc) {
            this.SelectionChanged = new U1.Event1();
            this._selection = new Array();
            this._document = doc;
        }
        USelection.prototype.InvokeSelectionChanged = function () {
            this.SelectionChanged.Invoke(this);
        };
        Object.defineProperty(USelection.prototype, "Count", {
            get: function () {
                return this._selection.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(USelection.prototype, "SelectedElements", {
            get: function () {
                var _this = this;
                var result = new Array();
                this._selection.forEach(function (eid_) {
                    var elm = _this._document.GetElement(eid_);
                    if (elm != null)
                        result.push(elm);
                });
                return result;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(USelection.prototype, "SelectionFilter", {
            get: function () {
                return this._selectionFilter;
            },
            set: function (value) {
                this._selectionFilter = value;
                if (this._selectionFilter != null) {
                    var selection = new Array();
                    var isChanged = false;
                    for (var _i = 0, _a = this._selection; _i < _a.length; _i++) {
                        var eid = _a[_i];
                        var elm = this._document.GetElement(eid);
                        if (elm == null || !this._selectionFilter(elm)) {
                            isChanged = true;
                            continue;
                        }
                        selection.push(elm.ID);
                    }
                    if (isChanged) {
                        this._selection = selection;
                        this.InvokeSelectionChanged();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        USelection.prototype.Contains = function (element) {
            if (this._selection.indexOf(element.ID) > -1)
                return true;
            return false;
        };
        USelection.prototype.Add = function (element, clear) {
            if (this.SelectionFilter != null && !this.SelectionFilter(element))
                return;
            var isChanged = false;
            if (clear && this._selection.length > 0) {
                if (this._selection.length == 1 && this._selection.indexOf(element.ID) > -1)
                    return;
                isChanged = true;
                this.UnSelect();
            }
            if (this._selection.indexOf(element.ID) == -1) {
                isChanged = true;
                this._selection.push(element.ID);
            }
            if (isChanged) {
                this.InvokeSelectionChanged();
            }
        };
        USelection.prototype.Remove = function (element) {
            var isChanged = false;
            var idx = this._selection.indexOf(element.ID);
            if (idx >= 0) {
                isChanged = true;
                this._selection.splice(idx, 1);
            }
            if (isChanged) {
                this.InvokeSelectionChanged();
            }
        };
        USelection.prototype.AddRange = function (elements, clear) {
            var isChanged = false;
            if (clear) {
                isChanged = this._selection.length > 0;
                this.UnSelect();
            }
            for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {
                var elm = elements_1[_i];
                if (this.SelectionFilter != null && !this.SelectionFilter(elm))
                    continue;
                if (this._selection.indexOf(elm.ID) == -1) {
                    this._selection.push(elm.ID);
                    isChanged = true;
                }
            }
            if (isChanged) {
                this.InvokeSelectionChanged();
            }
        };
        USelection.prototype.Clear = function () {
            if (this._selection.length == 0)
                return;
            this.UnSelect();
            this.InvokeSelectionChanged();
        };
        USelection.prototype.UnSelect = function () {
            this._selection.splice(0, this._selection.length);
        };
        return USelection;
    }());
    U1.USelection = USelection;
})(U1 || (U1 = {}));
/// <reference path="../../u1/documents/udocument.ts" /> 
var U1;
(function (U1) {
    var UNode = (function (_super) {
        __extends(UNode, _super);
        function UNode() {
            _super.apply(this, arguments);
            this.parent = new U1.UFieldRef(null);
            this.name = new U1.UFieldStr("");
            this.order = new U1.UFieldInt(0);
        }
        Object.defineProperty(UNode.prototype, "Parent", {
            get: function () {
                return this.parent.GetCurrent(this);
            },
            set: function (val) {
                this.parent.SetCurrent(this, "Parent", val);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UNode.prototype, "Name", {
            get: function () {
                return this.name.GetCurrent(this);
            },
            set: function (val) {
                this.name.SetCurrent(this, "Name", val);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UNode.prototype, "Order", {
            get: function () {
                return this.order.GetCurrent(this);
            },
            set: function (value) {
                this.order.SetCurrent(this, "Order", value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UNode.prototype, "Children", {
            get: function () {
                var _this = this;
                if (this.ElementTable == null)
                    return [];
                var children = new Array();
                this.ElementTable
                    .GetReferSourcesBySrcProp(this.id, "Parent")
                    .forEach(function (o_) {
                    var elm = _this.Document.GetElement(o_);
                    if (elm instanceof UNode) {
                        if (elm instanceof U1.UParameter)
                            return;
                        children.push(elm);
                    }
                });
                children = children.sort(function (a_, b_) {
                    if (a_.Order == b_.Order)
                        return 0;
                    if (a_.Order < b_.Order)
                        return -1;
                    return 1;
                });
                return children;
            },
            enumerable: true,
            configurable: true
        });
        UNode.prototype.GetChildren = function (type, name) {
            if (name === void 0) { name = null; }
            var list = new Array();
            for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                var ch = _a[_i];
                if (ch instanceof type) {
                    if (name == null || name == ch.Name) {
                        list.push(ch);
                    }
                }
            }
            return list;
        };
        UNode.prototype.GetChildrenByName = function (type, name) {
            var list = new Array();
            for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                var ch = _a[_i];
                if (ch instanceof type) {
                    if (ch.Name !== name)
                        continue;
                    list.push(ch);
                }
            }
            return list;
        };
        Object.defineProperty(UNode.prototype, "Parameters", {
            get: function () {
                var _this = this;
                var params = new Array();
                this.ElementTable
                    .GetReferSourcesBySrcProp(this.id, "Owner")
                    .forEach(function (o_) {
                    var elm = _this.Document.GetElement(o_);
                    if (elm instanceof U1.UParameter) {
                        params.push(elm);
                    }
                });
                return params;
            },
            enumerable: true,
            configurable: true
        });
        UNode.prototype.GetParameter = function (name, traceParent) {
            if (traceParent === void 0) { traceParent = false; }
            name = name.toUpperCase();
            var result = null;
            this.Parameters.forEach(function (o_) {
                if (o_.Name.toUpperCase() == name)
                    result = o_;
            });
            if (result == null && this.Parent != null && traceParent)
                return this.Parent.GetParameter(name, traceParent);
            return result;
        };
        UNode.prototype.AddParameter = function (name) {
            name = name.toUpperCase();
            if (this.GetParameter(name) != null)
                throw "NotSupportedException ";
            var newParam = this.Document.AddElement(U1.UParameter);
            newParam.Name = name;
            newParam.Owner = this;
            return newParam;
        };
        UNode.prototype.SetBuiltinParameter = function (name, value) {
            if (this.IsDeleted || this.IsDisposed)
                throw "NotSupportedException";
            var param = this.GetParameter(name);
            if (param == null) {
                param = this.AddParameter(name);
                param.IsBuiltin = true;
            }
            if (typeof value === "number") {
                param.SetNumber(value);
            }
            else if (typeof value === "boolean") {
                param.SetBool(value);
            }
            else if (typeof value === "string") {
                param.SetString(value);
            }
            else {
                if (value instanceof U1.Vector2) {
                    param.SetVector2(value);
                }
                else if (value instanceof U1.Vector3) {
                    param.SetVector3(value);
                }
                else if (value instanceof U1.Vector4) {
                    param.SetVector4(value);
                }
                else if (value instanceof U1.Color) {
                    param.SetColor(value);
                }
            }
            return param;
        };
        UNode.prototype.SetChild = function (ctor, name) {
            var oldChild = this.GetChild(UNode, name);
            if (oldChild != null) {
                if (oldChild instanceof ctor)
                    return oldChild;
                oldChild.Delete();
            }
            return this.AddChild(ctor, name);
        };
        UNode.prototype.AddChild = function (ctr, name) {
            if (name === void 0) { name = null; }
            var children = this.Children;
            var child = this.Document.ElementTable.AddElement(ctr);
            child.Name = name;
            child.Parent = this;
            if (this.last_order === undefined) {
                this.last_order = -1;
                for (var _i = 0, children_2 = children; _i < children_2.length; _i++) {
                    var ch = children_2[_i];
                    if (this.last_order < ch.Order) {
                        this.last_order = ch.Order;
                    }
                }
            }
            this.last_order++;
            child.Order = this.last_order;
            return child;
        };
        UNode.prototype.GetChild = function (ctor, name) {
            if (name == null || name == "")
                return null;
            name = name.toUpperCase();
            for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                var ch = _a[_i];
                if (ch instanceof ctor) {
                    if (ch.Name == null)
                        continue;
                    if (ch.Name.toUpperCase() == name) {
                        return ch;
                    }
                }
            }
            return null;
        };
        UNode.prototype.OnGetFields = function (fieldSet) {
            _super.prototype.OnGetFields.call(this, fieldSet);
            fieldSet.AddField("Parent", this.parent);
            fieldSet.AddField("Name", this.name);
            fieldSet.AddField("Order", this.order);
        };
        UNode.prototype.CopyTo = function (parent) {
            var id_map = {};
            var new_nodes = new Array();
            var nElement = this.CopyElementTo(parent, new_nodes, id_map);
            for (var _i = 0, new_nodes_1 = new_nodes; _i < new_nodes_1.length; _i++) {
                var nelm = new_nodes_1[_i];
                nelm.UpdateRefs(id_map);
            }
            return nElement;
        };
        UNode.prototype.CopyElementTo = function (parent, clones, id_map) {
            var clone = parent.AddChild(this.constructor);
            var order = clone.Order;
            clones.push(clone);
            var curData = this.GetCurData();
            clone.SetCurData(curData);
            clone.Order = order;
            id_map[this.id] = clone.id;
            for (var _i = 0, _a = this.Parameters; _i < _a.length; _i++) {
                var param = _a[_i];
                var clone_param = clone.AddParameter(param.Name);
                var p_order = clone_param.Order;
                var cur_param_data = param.GetCurData();
                cur_param_data["Owner"] = "" + clone.ID;
                clone_param.SetCurData(cur_param_data);
                clone_param.Order = p_order;
            }
            for (var _b = 0, _c = this.Children; _b < _c.length; _b++) {
                var ch = _c[_b];
                ch.CopyElementTo(clone, clones, id_map);
            }
            return clone;
        };
        UNode.prototype.Delete = function () {
            var children = this.Children;
            var params = this.Parameters;
            for (var _i = 0, children_3 = children; _i < children_3.length; _i++) {
                var ch = children_3[_i];
                ch.Delete();
            }
            for (var _a = 0, params_1 = params; _a < params_1.length; _a++) {
                var param = params_1[_a];
                param.Delete();
            }
            this.ForceDelete();
        };
        return UNode;
    }(U1.UElement));
    U1.UNode = UNode;
})(U1 || (U1 = {}));
/// <reference path="unode.ts" />
var U1;
(function (U1) {
    var UParameter = (function (_super) {
        __extends(UParameter, _super);
        function UParameter() {
            _super.apply(this, arguments);
            this.owner = new U1.UFieldRef(null);
            this.isBuiltin = new U1.UFieldBool(false);
            this.xdata = new U1.UFieldStr(null);
            this.lstring = new U1.UFieldStr(null);
            this.resultstr = new U1.UFieldStr(null);
        }
        Object.defineProperty(UParameter.prototype, "Owner", {
            get: function () {
                return this.owner.GetCurrent(this);
            },
            set: function (val) {
                this.owner.SetCurrent(this, "Owner", val);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UParameter.prototype, "IsBuiltin", {
            get: function () {
                return this.isBuiltin.GetCurrent(this);
            },
            set: function (val) {
                this.isBuiltin.SetCurrent(this, "IsBuiltin", val);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UParameter.prototype, "XData", {
            get: function () {
                return this.xdata.GetCurrent(this);
            },
            set: function (val) {
                this.xdata.SetCurrent(this, "XData", val);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UParameter.prototype, "LString", {
            get: function () {
                return this.lstring.GetCurrent(this);
            },
            set: function (val) {
                this.lstring.SetCurrent(this, "LString", val);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UParameter.prototype, "ResultStr", {
            get: function () {
                return this.resultstr.GetCurrent(this);
            },
            set: function (val) {
                this.resultstr.SetCurrent(this, "ResultStr", val);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(UParameter.prototype, "Result", {
            get: function () {
                if (this._result == null) {
                    this._result = U1.UVariant.FromString(this.ResultStr);
                }
                return this._result;
            },
            set: function (value) {
                if (this._result != null && this._result.Equals(value))
                    return;
                this._result = value;
                this.ResultStr = U1.UVariant.ToString(this._result);
            },
            enumerable: true,
            configurable: true
        });
        UParameter.prototype.OnGetFields = function (fieldSet) {
            _super.prototype.OnGetFields.call(this, fieldSet);
            fieldSet.AddField("Owner", this.owner);
            fieldSet.AddField("IsBuiltin", this.isBuiltin);
            fieldSet.AddField("XData", this.xdata);
            fieldSet.AddField("LString", this.lstring);
            fieldSet.AddField("ResultStr", this.resultstr);
        };
        UParameter.prototype.InvokePropertyChanged = function (prop) {
            if (prop == "ResultStr") {
                this._result = null;
            }
            _super.prototype.InvokePropertyChanged.call(this, prop);
        };
        UParameter.prototype.SetVector2 = function (vect2) {
            this.Result = new U1.UVariant().SetVector2(vect2);
            return this;
        };
        UParameter.prototype.SetVector3 = function (vect3) {
            this.Result = new U1.UVariant().SetVector3(vect3);
            return this;
        };
        UParameter.prototype.SetVector4 = function (vect4) {
            this.Result = new U1.UVariant().SetVector4(vect4);
            return this;
        };
        UParameter.prototype.SetColor = function (color) {
            this.Result = new U1.UVariant().SetColor(color);
            return this;
        };
        UParameter.prototype.SetNumber = function (value) {
            this.Result = new U1.UVariant().SetNumber(value);
            return this;
        };
        UParameter.prototype.SetBool = function (value) {
            this.Result = new U1.UVariant().SetBool(value);
            return this;
        };
        UParameter.prototype.SetVector = function (value) {
            this.Result = new U1.UVariant().SetVector(value);
            return this;
        };
        UParameter.prototype.SetString = function (value) {
            this.Result = new U1.UVariant().SetString(value);
            return this;
        };
        UParameter.prototype.GetVector2 = function () {
            return this.Result.GetVector2();
        };
        UParameter.prototype.GetVector3 = function () {
            return this.Result.GetVector3();
        };
        UParameter.prototype.GetColor = function () {
            return this.Result.GetColor();
        };
        UParameter.prototype.GetString = function () {
            return this.Result.GetString();
        };
        UParameter.prototype.GetNumber = function () {
            return this.Result.GetNumber();
        };
        UParameter.prototype.GetBool = function () {
            return this.Result.GetBool();
        };
        return UParameter;
    }(U1.UNode));
    U1.UParameter = UParameter;
    U1.UElementTable.Register("UParameter", UParameter);
})(U1 || (U1 = {}));
///<reference path="./U1Math.ts"/>
var U1;
(function (U1) {
    var CGAL;
    (function (CGAL) {
        (function (BOUNDED_SIDES) {
            BOUNDED_SIDES[BOUNDED_SIDES["ON_BOUNDED_SIDE"] = 0] = "ON_BOUNDED_SIDE";
            BOUNDED_SIDES[BOUNDED_SIDES["ON_BOUNDARY"] = 1] = "ON_BOUNDARY";
            BOUNDED_SIDES[BOUNDED_SIDES["ON_UNBOUNDED_SIDE"] = 2] = "ON_UNBOUNDED_SIDE";
        })(CGAL.BOUNDED_SIDES || (CGAL.BOUNDED_SIDES = {}));
        var BOUNDED_SIDES = CGAL.BOUNDED_SIDES;
        (function (ORIENTED_SIDES) {
            ORIENTED_SIDES[ORIENTED_SIDES["ON_NEGATIVE_SIDE"] = 0] = "ON_NEGATIVE_SIDE";
            ORIENTED_SIDES[ORIENTED_SIDES["ON_ORIENTED_BOUNDARY"] = 1] = "ON_ORIENTED_BOUNDARY";
            ORIENTED_SIDES[ORIENTED_SIDES["ON_POSITIVE_SIDE"] = 2] = "ON_POSITIVE_SIDE";
        })(CGAL.ORIENTED_SIDES || (CGAL.ORIENTED_SIDES = {}));
        var ORIENTED_SIDES = CGAL.ORIENTED_SIDES;
        var Util = (function () {
            function Util() {
            }
            Util.DoInersect = function (polygon0, polygon1) {
                var min0 = Util.Min(polygon0);
                var max0 = Util.Max(polygon0);
                var min1 = Util.Min(polygon1);
                var max1 = Util.Max(polygon1);
                if ((max0.X < min1.X - U1.PRECISION) ||
                    (max0.Y < min1.Y - U1.PRECISION) ||
                    (min0.X > max1.X + U1.PRECISION) ||
                    (min0.Y > max1.Y + U1.PRECISION))
                    return false;
                var pi = polygon0.length - 1;
                var isect = {};
                for (var i = 0; i < polygon0.length; i++) {
                    var pj = polygon1.length - 1;
                    for (var j = 0; j < polygon1.length; j++) {
                        if (Util.IntersectSegmentSegment(polygon0[pi], polygon0[i], polygon1[pj], polygon1[j], isect)) {
                            return true;
                        }
                        pj = j;
                    }
                    pi = i;
                }
                return false;
            };
            Util.DoInersectLoops = function (loopsA, loopsB) {
                for (var i = 0; i < loopsA.length; i++) {
                    for (var j = 0; j < loopsB.length; j++) {
                        if (Util.DoInersect(loopsA[i], loopsB[j]))
                            return true;
                    }
                }
                return false;
            };
            Util.Min = function (points) {
                var min = points[0].Clone();
                for (var i = 1; i < points.length; i++) {
                    min.X = min.X <= points[i].X ? min.X : points[i].X;
                    min.Y = min.Y <= points[i].Y ? min.Y : points[i].Y;
                }
                return min;
            };
            Util.Max = function (points) {
                var max = points[0].Clone();
                for (var i = 1; i < points.length; i++) {
                    max.X = max.X >= points[i].X ? max.X : points[i].X;
                    max.Y = max.Y >= points[i].Y ? max.Y : points[i].Y;
                }
                return max;
            };
            Util.IntersectSegmentSegment = function (s0, s1, t0, t1, result) {
                result.s = result.t = 0;
                if ((s0.X < t0.X && s0.X < t1.X && s1.X < t0.X && s1.X < t1.X) ||
                    (s0.X > t0.X && s0.X > t1.X && s1.X > t0.X && s1.X > t1.X))
                    return false;
                if ((s0.Y < t0.Y && s0.Y < t1.Y && s1.Y < t0.Y && s1.Y < t1.Y) ||
                    (s0.Y > t0.Y && s0.Y > t1.Y && s1.Y > t0.Y && s1.Y > t1.Y))
                    return false;
                var sd = U1.Vector2.Subtract(s1, s0);
                var td = U1.Vector2.Subtract(t1, t0);
                var isect = U1.GeometryHelper2.CrossLineLine(s0, sd, t0, td);
                if (isect == null) {
                    return false;
                }
                result.s = isect.s;
                result.t = isect.t;
                if (result.s < 0 || result.s > 1 || result.t < 0 || result.t > 1)
                    return false;
                return true;
            };
            Util.IntersectSegmentPoint = function (s0, s1, p, result) {
                if (result == null)
                    result = { s: 0 };
                var slen = U1.Vector2.Distance(s0, s1);
                var dir = U1.Vector2.Normalize(U1.Vector2.Subtract(s1, s0));
                var left = dir.Left;
                var v = U1.Vector2.Subtract(p, s0);
                result.s = 0;
                var l = U1.Vector2.Dot(left, v);
                if (l * l > U1.PRECISION)
                    return false;
                result.s = U1.Vector2.Dot(dir, v);
                if (result.s < -U1.PRECISION)
                    return false;
                result.s = U1.Vector2.Dot(dir.Negate(), U1.Vector2.Subtract(p, s1));
                if (result.s < -U1.PRECISION)
                    return false;
                return true;
            };
            Util.DistanceSquared = function (s0, s1, p) {
                var slen = U1.Vector2.DistanceSquared(s0, s1);
                var dir = U1.Vector2.Normalize(U1.Vector2.Subtract(s1, s0));
                var l = U1.Vector2.Dot(dir, U1.Vector2.Subtract(p, s0));
                var ll = l * l;
                if (l <= 0)
                    return U1.Vector2.DistanceSquared(s0, p);
                if (ll >= slen)
                    return U1.Vector2.DistanceSquared(s1, p);
                return U1.Vector2.DistanceSquared(s0, p) - ll;
            };
            Util.CollectPolygonWithHoles = function (loops, isIntersection) {
                if (isIntersection === void 0) { isIntersection = false; }
                var boundaries = new Array();
                var holes = new Array();
                var result = new Array();
                for (var _i = 0, loops_1 = loops; _i < loops_1.length; _i++) {
                    var loop = loops_1[_i];
                    var pgon = new U1.CGAL.Polygon2(loop);
                    if (pgon.IsCCW()) {
                        var isAdded = false;
                        for (var i = boundaries.length - 1; i >= 0; i--) {
                            var oldpgon = boundaries[i];
                            if (oldpgon == null)
                                continue;
                            var p0 = pgon.Points[0];
                            var p1 = oldpgon.Points[0];
                            if (!isIntersection) {
                                if (oldpgon.BoundedSide(p0) == BOUNDED_SIDES.ON_BOUNDED_SIDE) {
                                    //이전 폴리곤이 포함하는 경우
                                    isAdded = true;
                                    break;
                                }
                                else {
                                    if (pgon.BoundedSide(p1) == BOUNDED_SIDES.ON_BOUNDED_SIDE) {
                                        //이전 폴리곤을 포함하는 경우
                                        //이전 폴리곤 리스트에서 제거
                                        boundaries.splice(i, 1);
                                    }
                                }
                            }
                            else {
                                if (oldpgon.BoundedSide(p0) == BOUNDED_SIDES.ON_BOUNDED_SIDE) {
                                    //이전 폴리곤이 포함하는 경우
                                    //이전 폴리곤 리스트에서 제거
                                    boundaries.splice(i, 1);
                                }
                                else {
                                    if (pgon.BoundedSide(p1) == BOUNDED_SIDES.ON_BOUNDED_SIDE) {
                                        //이전 폴리곤을 포함하는 경우
                                        isAdded = true;
                                        break;
                                    }
                                }
                            }
                        }
                        if (!isAdded)
                            boundaries.push(pgon);
                    }
                    else {
                        holes.push(pgon);
                    }
                }
                for (var ib = 0; ib < boundaries.length; ib++) {
                    if (boundaries[ib] == null)
                        continue;
                    var pwh = new PolygonWithHoles2();
                    pwh.OuterBoundary = boundaries[ib];
                    result.push(pwh);
                }
                for (var ih = 0; ih < holes.length; ih++) {
                    var hole = holes[ih];
                    for (var ir = 0; ir < result.length; ir++) {
                        var pwh = result[ir];
                        if (pwh.OuterBoundary.BoundedSide(hole.Points[0]) == BOUNDED_SIDES.ON_BOUNDED_SIDE) {
                            pwh.AddHole(hole);
                            break;
                        }
                    }
                }
                return result;
            };
            Util.PRECISION = 0.00001;
            return Util;
        }());
        CGAL.Util = Util;
        var Polygon2 = (function () {
            //#endregion
            function Polygon2(arg) {
                if (arg === void 0) { arg = null; }
                if (arg != null && arg instanceof Polygon2) {
                    var src = arg;
                    this.m_points = new Array(src.m_points.length);
                    for (var i = 0; i < this.m_points.length; i++) {
                        this.m_points[i] = src.m_points[i].Clone();
                    }
                }
                else if (arg != null && arg instanceof Array) {
                    var points = arg;
                    this.m_points = new Array(points.length);
                    for (var i = 0; i < this.m_points.length; i++) {
                        this.m_points[i] = points[i].Clone();
                    }
                }
            }
            Object.defineProperty(Polygon2.prototype, "Count", {
                get: function () {
                    return this.m_points == null ? 0 : this.m_points.length;
                },
                enumerable: true,
                configurable: true
            });
            Polygon2.prototype.Add = function (pt) {
                this.m_points.push(pt);
            };
            Polygon2.prototype.AddRange = function (collection) {
                this.m_points.concat(collection);
            };
            Polygon2.prototype.Area = function () {
                var j = this.m_points.length - 1;
                var area = 0.0;
                for (var i = 0; i < this.m_points.length; i++) {
                    area += (this.m_points[j].X + this.m_points[i].X) * (this.m_points[j].Y - this.m_points[i].Y);
                    j = i;
                }
                return Math.abs(area / 2);
            };
            Polygon2.prototype.Length = function () {
                var len = 0.0;
                var j = this.m_points.length - 1;
                for (var i = 0; i < this.m_points.length; i++) {
                    len += U1.Vector2.Distance(this.m_points[j], this.m_points[i]);
                    j = i;
                }
                return len;
            };
            Polygon2.prototype.Clear = function () {
                this.m_points = null;
            };
            Polygon2.prototype.HasOnNegativeSide = function (pt) {
                return this.OrientedSide(pt) == ORIENTED_SIDES.ON_NEGATIVE_SIDE;
            };
            Polygon2.prototype.HasOnPositiveSide = function (pt) {
                return this.OrientedSide(pt) == ORIENTED_SIDES.ON_POSITIVE_SIDE;
            };
            Polygon2.DoIntersect = function (A, B) {
                return A.DoIntersect(B);
            };
            Polygon2.prototype.BoundedSide = function (pt) {
                var left = this.LeftVertex();
                if (pt.X < left.X - Util.PRECISION)
                    return BOUNDED_SIDES.ON_UNBOUNDED_SIDE;
                var right = this.RightVertex();
                if (pt.X > right.X + Util.PRECISION)
                    return BOUNDED_SIDES.ON_UNBOUNDED_SIDE;
                var top = this.TopVertex();
                if (pt.Y > top.Y + Util.PRECISION)
                    return BOUNDED_SIDES.ON_UNBOUNDED_SIDE;
                var bottom = this.BottomVertex();
                if (pt.Y < bottom.Y - Util.PRECISION)
                    return BOUNDED_SIDES.ON_UNBOUNDED_SIDE;
                var rayS = pt;
                var rayE = Polygon2.tmp_v0;
                rayE.Set((right.X - left.X) * 2, 0);
                rayE.Add(pt);
                var start = 0;
                for (var i = 0; i < this.m_points.length; i++) {
                    if (Util.DistanceSquared(rayS, rayE, this.m_points[i]) > Util.PRECISION)
                        break;
                    start = i;
                }
                var rayLeft = Polygon2.tmp_v1;
                rayLeft.SetSubtract(rayE, rayS);
                rayLeft.LeftRef(rayLeft);
                var SV = null;
                var isectCount = 0;
                var out_s_t = {};
                var tv0 = Polygon2.tmp_v2;
                var tv1 = Polygon2.tmp_v3;
                for (var i = 0; i < this.m_points.length; i++) {
                    var ci = (i + start) % this.m_points.length;
                    var ni = (i + 1 + start) % this.m_points.length;
                    var v0 = this.m_points[ci];
                    var v1 = this.m_points[ni];
                    if (Util.DistanceSquared(v0, v1, pt) < Util.PRECISION)
                        return BOUNDED_SIDES.ON_BOUNDARY;
                    //ray와 교차하는 버텍스를 처리
                    while (Util.DistanceSquared(rayS, rayE, v1) < Util.PRECISION) {
                        if (U1.Vector2.EpsilonEquals(rayS, v1))
                            return BOUNDED_SIDES.ON_BOUNDARY;
                        if (SV == null)
                            SV = v0;
                        i++;
                        ci = (i + start) % this.m_points.length;
                        ni = (i + 1 + start) % this.m_points.length;
                        v0 = this.m_points[ci];
                        v1 = this.m_points[ni];
                    }
                    if (SV != null) {
                        tv0.SetSubtract(SV, rayS);
                        tv1.SetSubtract(v1, rayS);
                        if (U1.Vector2.Dot(rayLeft, tv0) *
                            U1.Vector2.Dot(rayLeft, tv1) < 0)
                            isectCount++;
                        SV = null;
                        continue;
                    }
                    if (Util.IntersectSegmentSegment(rayS, rayE, v0, v1, out_s_t) && out_s_t.s > Util.PRECISION) {
                        isectCount++;
                    }
                }
                if (isectCount % 2 == 0)
                    return BOUNDED_SIDES.ON_UNBOUNDED_SIDE;
                return BOUNDED_SIDES.ON_BOUNDED_SIDE;
            };
            Polygon2.prototype.OrientedSide = function (pt) {
                var boundedSide = this.BoundedSide(pt);
                if (boundedSide == BOUNDED_SIDES.ON_BOUNDARY)
                    return ORIENTED_SIDES.ON_ORIENTED_BOUNDARY;
                if (boundedSide == BOUNDED_SIDES.ON_BOUNDED_SIDE)
                    return this.IsCCW() ? ORIENTED_SIDES.ON_POSITIVE_SIDE : ORIENTED_SIDES.ON_NEGATIVE_SIDE;
                return this.IsCCW() ? ORIENTED_SIDES.ON_NEGATIVE_SIDE : ORIENTED_SIDES.ON_POSITIVE_SIDE;
            };
            Polygon2.prototype.HasOnBoundary = function (pt) {
                return this.BoundedSide(pt) == BOUNDED_SIDES.ON_BOUNDARY;
            };
            Polygon2.prototype.HasOnBoundedSide = function (pt) {
                return this.BoundedSide(pt) == BOUNDED_SIDES.ON_BOUNDED_SIDE;
            };
            Polygon2.prototype.HasOnUnboundedSide = function (pt) {
                return this.BoundedSide(pt) == BOUNDED_SIDES.ON_UNBOUNDED_SIDE;
            };
            Polygon2.prototype.IsCCW = function () {
                if (this.IsEmpty())
                    return true;
                var idx = this.LeftVertexIndex();
                var i0 = (idx - 1 + this.m_points.length) % this.m_points.length;
                var i1 = idx;
                var i2 = (idx + 1) % this.m_points.length;
                var v0 = Polygon2.tmp_v0;
                var v1 = Polygon2.tmp_v1;
                v0.SetSubtract(this.m_points[i0], this.m_points[i1]);
                v1.SetSubtract(this.m_points[i2], this.m_points[i1]);
                v1.LeftRef(v1);
                return U1.Vector2.Dot(v1, v0) > 0;
            };
            Polygon2.prototype.IsConvex = function () {
                if (this.IsEmpty())
                    return true;
                //방향 전환이 항상 일정하게 이루어 지는지 검사한다.
                var pi = this.m_points.length - 1;
                var result = 0;
                var v0 = Polygon2.tmp_v0;
                var v1 = Polygon2.tmp_v1;
                for (var i = 0; i < this.m_points.length - 1; pi = i, i++) {
                    var ni = (i + 1) % this.m_points.length;
                    v0.SetSubtract(this.m_points[i], this.m_points[pi]);
                    v1.SetSubtract(this.m_points[ni], this.m_points[i]);
                    v0.LeftRef(v0);
                    var leftDot = U1.Vector2.Dot(v0, v1);
                    if (leftDot > Util.PRECISION) {
                        //좌로 회전 
                        if (result == -1)
                            return false;
                        result = 1;
                    }
                    else if (leftDot < -Util.PRECISION) {
                        //우로 회전 
                        if (result == 1)
                            return false;
                        result = -1;
                    }
                }
                return true;
            };
            Polygon2.prototype.IsCW = function () {
                return !this.IsCCW();
            };
            Polygon2.prototype.IsEmpty = function () {
                return this.m_points == null || this.m_points.length == 0;
            };
            Polygon2.prototype.IsSimple = function () {
                if (this.IsEmpty())
                    return false;
                var out_s_t = {};
                var points = this.m_points;
                var v0 = Polygon2.tmp_v0;
                var v1 = Polygon2.tmp_v1;
                for (var i = 0; i < points.length; i++) {
                    var ni = (i + 1) % points.length;
                    for (var j = i + 1; j < points.length; j++) {
                        var nj = (j + 1) % points.length;
                        if (ni == j || i == nj) {
                            var dot = U1.Vector2.Dot(v0.SetSubtract(points[ni], points[i]).Normalize(), v1.SetSubtract(points[nj], points[j]).Normalize());
                            if (dot < -1 + Util.PRECISION)
                                return false;
                            continue;
                        }
                        if (Util.IntersectSegmentSegment(points[i], points[ni], points[j], points[nj], out_s_t))
                            return false;
                    }
                }
                return true;
            };
            Polygon2.prototype.Reverse = function () {
                if (this.IsEmpty())
                    return;
                var p_len = this.m_points.length;
                var hl = (p_len - 1) / 2;
                for (var i = 1; i <= hl; i++) {
                    var t = this.m_points[i];
                    this.m_points[i] = this.m_points[p_len - i];
                    this.m_points[p_len - i] = t;
                }
            };
            Polygon2.prototype.LeftVertex = function () {
                if (this.IsEmpty())
                    return null;
                return this.m_points[this.LeftVertexIndex()];
            };
            Polygon2.prototype.RightVertex = function () {
                if (this.IsEmpty())
                    return null;
                return this.m_points[this.RightVertexIndex()];
            };
            Polygon2.prototype.TopVertex = function () {
                if (this.IsEmpty())
                    return null;
                return this.m_points[this.TopVertexIndex()];
            };
            Polygon2.prototype.BottomVertex = function () {
                if (this.IsEmpty())
                    return null;
                return this.m_points[this.BottomVertexIndex()];
            };
            Polygon2.prototype.LeftVertexIndex = function () {
                var resultIdx = 0;
                var result = this.m_points[0];
                for (var i = 1; i < this.m_points.length; i++) {
                    if (this.m_points[i].X < result.X) {
                        result = this.m_points[i];
                        resultIdx = i;
                    }
                    else if (this.m_points[i].X == result.X && this.m_points[i].Y < result.Y) {
                        result = this.m_points[i];
                        resultIdx = i;
                    }
                }
                return resultIdx;
            };
            Polygon2.prototype.RightVertexIndex = function () {
                var indx = 0;
                var result = this.m_points[0];
                for (var i = 1; i < this.m_points.length; i++) {
                    if (this.m_points[i].X > result.X) {
                        result = this.m_points[i];
                        indx = i;
                    }
                    else if (this.m_points[i].X == result.X && this.m_points[i].Y > result.Y) {
                        result = this.m_points[i];
                        indx = i;
                    }
                }
                return indx;
            };
            Polygon2.prototype.TopVertexIndex = function () {
                var indx = 0;
                var result = this.m_points[0];
                for (var i = 1; i < this.m_points.length; i++) {
                    if (this.m_points[i].Y > result.Y) {
                        result = this.m_points[i];
                        indx = i;
                    }
                    else if (this.m_points[i].Y == result.Y && this.m_points[i].X > result.X) {
                        result = this.m_points[i];
                        indx = i;
                    }
                }
                return indx;
            };
            Polygon2.prototype.BottomVertexIndex = function () {
                var indx = 0;
                var result = this.m_points[0];
                for (var i = 1; i < this.m_points.length; i++) {
                    if (this.m_points[i].Y < result.Y) {
                        result = this.m_points[i];
                        indx = i;
                    }
                    else if (this.m_points[i].Y == result.Y && this.m_points[i].X < result.X) {
                        result = this.m_points[i];
                        indx = i;
                    }
                }
                return indx;
            };
            Object.defineProperty(Polygon2.prototype, "Points", {
                //#region Props
                get: function () {
                    return this.m_points;
                },
                set: function (points) {
                    {
                        this.m_points = points;
                    }
                },
                enumerable: true,
                configurable: true
            });
            //#endregion
            Polygon2.prototype.DoIntersectEdge = function (pgon) {
                return Util.DoInersect(this.Points, pgon.Points);
            };
            Polygon2.prototype.DoIntersect = function (pgon) {
                if (this.Count < 3)
                    return false;
                if (this.DoIntersectEdge(pgon))
                    return true;
                if (this.HasOnBoundedSide(pgon.m_points[0]))
                    return true;
                if (pgon.HasOnBoundedSide(this.m_points[0]))
                    return true;
                return false;
            };
            Polygon2.prototype.GetPolygonList = function () {
                return new Array(this.Points);
            };
            Polygon2.prototype.GetAllPolygons = function () {
                return new Array(this);
            };
            Polygon2.prototype.GetNotIsectSegs = function (points) {
                var isect_map = {};
                var result = new Array();
                var pc = points.length;
                var out_s_t = { s: 0, t: 0 };
                for (var i = 0; i < pc; i++) {
                    var ni = (i + 1);
                    if (ni == pc)
                        ni = 0;
                    var isIsect = false;
                    for (var k = 0; k < pc; k++) {
                        var j = (k + i) % pc;
                        var nj = (j + 1);
                        if (nj == pc)
                            nj = 0;
                        if (Util.IntersectSegmentSegment(points[i], points[ni], points[j], points[nj], out_s_t)) {
                            if (out_s_t.s > Util.PRECISION &&
                                out_s_t.s < 1 - Util.PRECISION &&
                                out_s_t.t > Util.PRECISION &&
                                out_s_t.t < 1 - Util.PRECISION) {
                                isIsect = true;
                                break;
                            }
                        }
                    }
                    isect_map[i] = isIsect;
                    if (i == 0 && !isIsect)
                        result.push(i);
                    if (i > 0 && isect_map[i - 1] && !isIsect)
                        result.push(i);
                }
                return result;
            };
            Polygon2.GetArea = function (points) {
                var j = points.length - 1;
                var area = 0.0;
                for (var i = 0; i < points.length; i++) {
                    area += (points[j].X + points[i].X) * (points[j].Y - points[i].Y);
                    j = i;
                }
                return Math.abs(area / 2);
            };
            Polygon2.prototype.MakeSimple = function () {
                if (this.Points == null || this.Points.length == 0 || this.IsSimple())
                    return;
                this.Points = VTX2.GetSimplePath(this.Points);
            };
            Polygon2.Reverse = function (m_points) {
                var p_len = m_points.length;
                var hl = (p_len - 1) / 2;
                for (var i = 1; i <= hl; i++) {
                    var t = m_points[i];
                    m_points[i] = m_points[p_len - i];
                    m_points[p_len - i] = t;
                }
            };
            Polygon2.tmp_v0 = U1.Vector2.Zero;
            Polygon2.tmp_v1 = U1.Vector2.Zero;
            Polygon2.tmp_v2 = U1.Vector2.Zero;
            Polygon2.tmp_v3 = U1.Vector2.Zero;
            return Polygon2;
        }());
        CGAL.Polygon2 = Polygon2;
        var PolygonSet2 = (function () {
            function PolygonSet2(param) {
                if (param === void 0) { param = null; }
                this.PolygonsWithHoles = new Array();
                if (param != null && param instanceof Polygon2) {
                    var pgon = param;
                    this.PolygonsWithHoles.push(new PolygonWithHoles2(pgon));
                }
            }
            Object.defineProperty(PolygonSet2.prototype, "NumberOfPolygonsWithHoles", {
                get: function () {
                    return this.PolygonsWithHoles == null ? 0 : this.PolygonsWithHoles.length;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PolygonSet2.prototype, "IsEmpty", {
                get: function () {
                    return this.PolygonsWithHoles == null || this.PolygonsWithHoles.length == 0;
                },
                enumerable: true,
                configurable: true
            });
            PolygonSet2.prototype.HasOnNegativeSide = function (pt) {
                if (this.IsEmpty)
                    return true;
                for (var _i = 0, _a = this.PolygonsWithHoles; _i < _a.length; _i++) {
                    var pwh = _a[_i];
                    if (!pwh.HasOnNegativeSide(pt))
                        return false;
                }
                return true;
            };
            PolygonSet2.prototype.HasOnPositiveSide = function (pt) {
                if (this.IsEmpty)
                    return true;
                for (var _i = 0, _a = this.PolygonsWithHoles; _i < _a.length; _i++) {
                    var pwh = _a[_i];
                    if (pwh.HasOnPositiveSide(pt))
                        return true;
                }
                return false;
            };
            PolygonSet2.prototype.Area = function () {
                var area = 0.0;
                for (var _i = 0, _a = this.PolygonsWithHoles; _i < _a.length; _i++) {
                    var hwp = _a[_i];
                    area += hwp.Area();
                }
                return area;
            };
            PolygonSet2.prototype.Clear = function () {
                this.PolygonsWithHoles = null;
            };
            PolygonSet2.prototype.Insert = function (polygon) {
                if (polygon == null)
                    return;
                if (this.PolygonsWithHoles == null)
                    this.PolygonsWithHoles = new Array();
                if (polygon instanceof Polygon2)
                    this.PolygonsWithHoles.push(new PolygonWithHoles2(polygon));
                else if (polygon instanceof PolygonWithHoles2)
                    this.PolygonsWithHoles.push(polygon);
            };
            //#region DoIntersect
            PolygonSet2.prototype.DoIntersect = function (pgon) {
                if (this.PolygonsWithHoles == null)
                    return false;
                if (pgon instanceof Polygon2) {
                    for (var _i = 0, _a = this.PolygonsWithHoles; _i < _a.length; _i++) {
                        var pwh = _a[_i];
                        if (pwh.DoIntersect(pgon))
                            return true;
                    }
                    var msg = "" + pgon.Points.length + "points";
                }
                else if (pgon instanceof PolygonWithHoles2) {
                    for (var _b = 0, _c = this.PolygonsWithHoles; _b < _c.length; _b++) {
                        var pwh = _c[_b];
                        if (pwh.DoIntersect(pgon))
                            return true;
                    }
                }
                else if (pgon instanceof PolygonSet2) {
                    var pset = pgon;
                    for (var _d = 0, _e = this.PolygonsWithHoles; _d < _e.length; _d++) {
                        var a = _e[_d];
                        for (var _f = 0, _g = pset.PolygonsWithHoles; _f < _g.length; _f++) {
                            var b = _g[_f];
                            if (a.DoIntersect(b))
                                return true;
                        }
                    }
                }
                return false;
            };
            //#endregion
            // #region IneterSection 교집합
            PolygonSet2.prototype.Intersection = function (pgons) {
                var pwhs = this.DoIntersection(pgons.GetPolygonList());
                var npwhs = new Array();
                for (var i = 0; i < pwhs.length; i++) {
                    var pwh = pwhs[i];
                    var p = pwh.OuterBoundary.Points[0];
                    if (pgons.HasOnNegativeSide(p) || this.HasOnNegativeSide(p))
                        continue;
                    npwhs.push(pwh);
                }
                this.PolygonsWithHoles = npwhs;
            };
            PolygonSet2.prototype.DoIntersection = function (b) {
                var loopsA = this.GetPolygonList();
                var loopsB = b;
                var loopsAll = new Array();
                var loopFinder = new CGAL.LoopFinder();
                loopFinder.AddLoops(loopsA, false);
                loopFinder.AddLoops(loopsB, false);
                loopsAll = loopFinder.GetLoops(true);
                return Util.CollectPolygonWithHoles(loopsAll, true);
            };
            //#endregion
            // #region Join 합집합
            PolygonSet2.prototype.Join = function (polygons) {
                this.DoJoin(polygons.GetPolygonList());
            };
            PolygonSet2.prototype.DoJoin = function (b) {
                var loopsA = this.GetPolygonList();
                var loopsB = b;
                var loopsAll = new Array();
                if (Util.DoInersectLoops(loopsA, loopsB)) {
                    var loopFinder = new CGAL.LoopFinder();
                    loopFinder.AddLoops(loopsA, false);
                    loopFinder.AddLoops(loopsB, false);
                    loopsAll = loopFinder.GetLoops(false);
                }
                else {
                    loopsAll = loopsA.concat(loopsB);
                }
                this.PolygonsWithHoles = Util.CollectPolygonWithHoles(loopsAll);
            };
            //#endregion
            //#region Difference 차집합
            PolygonSet2.prototype.Difference = function (polygons) {
                this.DoDifference(polygons.GetPolygonList());
            };
            PolygonSet2.prototype.DoDifference = function (b) {
                var loopsA = this.GetPolygonList();
                var loopsB = b;
                var loopsAll = new Array();
                if (Util.DoInersectLoops(loopsA, loopsB)) {
                    var loopFinder = new CGAL.LoopFinder();
                    loopFinder.AddLoops(loopsA, false);
                    loopFinder.AddLoops(loopsB, true);
                    loopsAll = loopFinder.GetLoops(true);
                }
                else {
                    loopsAll = loopsA;
                    for (var _i = 0, loopsB_1 = loopsB; _i < loopsB_1.length; _i++) {
                        var pgon = loopsB_1[_i];
                        pgon.reverse();
                        loopsAll.push(pgon);
                    }
                }
                this.PolygonsWithHoles = Util.CollectPolygonWithHoles(loopsAll);
            };
            //#endregion
            // #region Slice 면으로 분리
            /// <summary>
            /// 라인과 교차하는지 
            /// </summary>
            /// <param name="line"></param>
            /// <returns></returns>
            PolygonSet2.prototype.IntersectLine = function (line) {
                var loopsA = this.GetPolygonList();
                var xAxis = line.Direction;
                var yAxis = xAxis.Left;
                var side = 0;
                var v = U1.Vector2.Zero;
                for (var _i = 0, loopsA_1 = loopsA; _i < loopsA_1.length; _i++) {
                    var loop = loopsA_1[_i];
                    for (var i = 0; i < loop.length; i++) {
                        v.SetSubtract(loop[i], line.Position);
                        var d = U1.Vector2.Dot(v, yAxis);
                        if (d < 0.00001 && d > -0.00001)
                            continue;
                        var side_i = d > 0 ? 1 : 2;
                        if (side == 0) {
                            side = side_i;
                            continue;
                        }
                        if (side_i != side)
                            return true;
                    }
                }
                return false;
            };
            /// <summary>
            /// 라인으로 폴리곤셋을 2등분함
            /// </summary>
            /// <param name="line"></param>
            /// <returns></returns>
            PolygonSet2.prototype.Slice = function (line, res) {
                res.left = this;
                res.right = null;
                if (!this.IntersectLine(line))
                    return false;
                var loopsA = this.GetPolygonList();
                var xAxis = line.Direction;
                var min = Number.POSITIVE_INFINITY;
                var max = Number.NEGATIVE_INFINITY;
                var v = U1.Vector2.Zero;
                for (var _i = 0, loopsA_2 = loopsA; _i < loopsA_2.length; _i++) {
                    var loop = loopsA_2[_i];
                    for (var i = 0; i < loop.length; i++) {
                        v.SetSubtract(loop[i], line.Position);
                        var d = U1.Vector2.Dot(xAxis, v);
                        min = Math.min(d, min);
                        max = Math.max(d, max);
                    }
                }
                var p0 = U1.Vector2.ScaleAdd(line.Position, (min - 10), xAxis);
                var p1 = U1.Vector2.ScaleAdd(line.Position, (max + 10), xAxis);
                var loopsAll = new Array();
                var loopFinder = new CGAL.LoopFinder();
                loopFinder.AddLoops(loopsA, false);
                loopFinder.AddPath(new Array(p0, p1), false);
                loopsAll = loopFinder.GetLoops(true);
                res.left = new PolygonSet2();
                res.left.PolygonsWithHoles = Util.CollectPolygonWithHoles(loopsAll);
                loopFinder = new CGAL.LoopFinder();
                loopFinder.AddLoops(loopsA, false);
                loopFinder.AddPath(new Array(p0, p1), true);
                loopsAll = loopFinder.GetLoops(true);
                res.right = new PolygonSet2();
                res.right.PolygonsWithHoles = Util.CollectPolygonWithHoles(loopsAll);
                return true;
            };
            //#endregion
            PolygonSet2.prototype.GetPolygonList = function () {
                var result = new Array();
                if (this.IsEmpty)
                    return result;
                for (var _i = 0, _a = this.PolygonsWithHoles; _i < _a.length; _i++) {
                    var pwh = _a[_i];
                    for (var _b = 0, _c = pwh.GetPolygonList(); _b < _c.length; _b++) {
                        var pgon = _c[_b];
                        result.push(pgon);
                    }
                }
                return result;
            };
            PolygonSet2.prototype.GetAllPolygons = function () {
                var result = new Array();
                if (this.IsEmpty)
                    return result;
                for (var _i = 0, _a = this.PolygonsWithHoles; _i < _a.length; _i++) {
                    var pwh = _a[_i];
                    for (var _b = 0, _c = pwh.GetAllPolygons(); _b < _c.length; _b++) {
                        var pgon = _c[_b];
                        result.push(pgon);
                    }
                }
                return result;
            };
            return PolygonSet2;
        }());
        CGAL.PolygonSet2 = PolygonSet2;
        var PolygonWithHoles2 = (function () {
            function PolygonWithHoles2(param) {
                if (param === void 0) { param = null; }
                if (param != null && param instanceof Polygon2) {
                    var pgon = param;
                    this.OuterBoundary = pgon;
                }
            }
            Object.defineProperty(PolygonWithHoles2.prototype, "OuterBoundary", {
                get: function () {
                    return this.m_outerBoundary;
                },
                set: function (value) {
                    this.m_outerBoundary = value;
                    if (this.m_outerBoundary.IsCW())
                        this.m_outerBoundary.Reverse();
                },
                enumerable: true,
                configurable: true
            });
            PolygonWithHoles2.prototype.HasOnNegativeSide = function (pt) {
                if (!this.IsUnbounded)
                    if (this.OuterBoundary.OrientedSide(pt) == ORIENTED_SIDES.ON_NEGATIVE_SIDE)
                        return true;
                if (this.HasHoles) {
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        if (hole.OrientedSide(pt) == ORIENTED_SIDES.ON_NEGATIVE_SIDE)
                            return true;
                    }
                }
                return false;
            };
            PolygonWithHoles2.prototype.HasOnPositiveSide = function (pt) {
                if (!this.IsUnbounded)
                    if (this.OuterBoundary.OrientedSide(pt) != ORIENTED_SIDES.ON_POSITIVE_SIDE)
                        return false;
                if (this.HasHoles) {
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        if (hole.OrientedSide(pt) != ORIENTED_SIDES.ON_POSITIVE_SIDE)
                            return false;
                    }
                }
                return true;
            };
            PolygonWithHoles2.prototype.Area = function () {
                var area = 0.0;
                if (this.OuterBoundary != null)
                    area = this.OuterBoundary.Area();
                if (this.Holes != null) {
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        area -= hole.Area();
                    }
                }
                return area;
            };
            Object.defineProperty(PolygonWithHoles2.prototype, "Holes", {
                get: function () {
                    return this.m_holes;
                },
                set: function (value) {
                    this.m_holes = value;
                    if (this.m_holes != null) {
                        for (var i = 0; i < this.m_holes.length; i++) {
                            if (this.m_holes[i].IsCCW())
                                this.m_holes[i].Reverse();
                        }
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PolygonWithHoles2.prototype, "HasHoles", {
                get: function () {
                    return this.Holes != null && this.Holes.length > 0;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PolygonWithHoles2.prototype, "IsUnbounded", {
                get: function () {
                    return this.OuterBoundary == null;
                },
                enumerable: true,
                configurable: true
            });
            PolygonWithHoles2.prototype.Clear = function () {
                this.OuterBoundary = null;
                this.Holes = null;
            };
            PolygonWithHoles2.prototype.AddHole = function (pgn_hole) {
                if (this.m_holes == null)
                    this.m_holes = new Array();
                if (pgn_hole.IsCCW()) {
                    pgn_hole.Reverse();
                }
                this.m_holes.push(pgn_hole);
            };
            PolygonWithHoles2.prototype.EraseHole = function (pgn_hole) {
                if (this.m_holes == null)
                    return;
                var holes = new Array();
                for (var i = 0; i < this.m_holes.length; i++) {
                    if (this.m_holes[i] == pgn_hole)
                        continue;
                    holes.push(this.m_holes[i]);
                }
                this.m_holes = holes;
            };
            Object.defineProperty(PolygonWithHoles2.prototype, "PolygonsAll", {
                get: function () {
                    var result = new Array();
                    if (this.OuterBoundary != null)
                        result.push(this.OuterBoundary);
                    if (this.HasHoles) {
                        for (var i = 0; i < this.m_holes.length; i++) {
                            result.push(this.m_holes[i]);
                        }
                    }
                    return result;
                },
                enumerable: true,
                configurable: true
            });
            PolygonWithHoles2.prototype.DoIntersect = function (B) {
                var A = this;
                if (this.IsUnbounded)
                    return false;
                if (B instanceof Polygon2) {
                    // B가 A를 포함한 경우 
                    if (B.HasOnBoundedSide(A.OuterBoundary.Points[0]))
                        return true;
                    // A B 에지 교차
                    if (A.OuterBoundary.DoIntersectEdge(B))
                        return true;
                    if (this.HasHoles) {
                        for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                            var hole = _a[_i];
                            if (hole.DoIntersectEdge(B))
                                return true;
                        }
                    }
                    // A 바깥 경계밖
                    if (A.OuterBoundary.HasOnUnboundedSide(B.Points[0]))
                        return false;
                    // 홀 안
                    if (this.HasHoles) {
                        for (var _b = 0, _c = this.Holes; _b < _c.length; _b++) {
                            var hole = _c[_b];
                            if (hole.HasOnBoundedSide(B.Points[0]))
                                return false;
                        }
                    }
                }
                else if (B instanceof PolygonWithHoles2) {
                    // A B 에지 교차
                    for (var _d = 0, _e = this.PolygonsAll; _d < _e.length; _d++) {
                        var a = _e[_d];
                        for (var _f = 0, _g = B.PolygonsAll; _f < _g.length; _f++) {
                            var b = _g[_f];
                            if (a.DoIntersectEdge(b))
                                return true;
                        }
                    }
                    // A 안에 B
                    if (A.OuterBoundary.HasOnBoundedSide(B.OuterBoundary.Points[0])) {
                        if (this.HasHoles) {
                            //A 홀 안에 B
                            for (var _h = 0, _j = this.Holes; _h < _j.length; _h++) {
                                var hole = _j[_h];
                                if (hole.HasOnBoundedSide(B.OuterBoundary.Points[0]))
                                    return false;
                            }
                        }
                        return true;
                    }
                    // B 안에 A
                    if (B.OuterBoundary.HasOnBoundedSide(A.OuterBoundary.Points[0])) {
                        if (B.HasHoles) {
                            //B 홀 안에 A
                            for (var _k = 0, _l = B.Holes; _k < _l.length; _k++) {
                                var hole = _l[_k];
                                if (hole.HasOnBoundedSide(B.OuterBoundary.Points[0]))
                                    return false;
                            }
                        }
                        return true;
                    }
                }
                return true;
            };
            PolygonWithHoles2.prototype.GetPolygonList = function () {
                var result = new Array();
                if (this.OuterBoundary != null)
                    result.push(this.OuterBoundary.Points);
                if (this.HasHoles) {
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        result.push(hole.Points);
                    }
                }
                ;
                return result;
            };
            PolygonWithHoles2.prototype.GetAllPolygons = function () {
                var result = new Array();
                if (!this.IsUnbounded)
                    result.push(this.OuterBoundary);
                if (this.HasHoles) {
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        result.push(hole);
                    }
                }
                return result;
            };
            return PolygonWithHoles2;
        }());
        CGAL.PolygonWithHoles2 = PolygonWithHoles2;
        var VTX2 = (function () {
            function VTX2() {
                this.Next = new Array();
            }
            VTX2.prototype.AddNext = function (next) {
                if (this == next || this.Next.indexOf(next) >= 0)
                    return;
                this.Next.push(next);
            };
            VTX2.prototype.GetNext = function (prev, turnLeft) {
                var _this = this;
                if (this.Next.length == 1)
                    return this.Next[0];
                var backward = U1.Vector2.Subtract(prev.P, this.P);
                var sorted = this.Next.sort(function (a_, b_) {
                    var a_ang = U1.GeometryHelper2.AngleCCW(backward, U1.Vector2.Subtract(a_.P, _this.P));
                    var b_ang = U1.GeometryHelper2.AngleCCW(backward, U1.Vector2.Subtract(b_.P, _this.P));
                    if (turnLeft) {
                        a_ang *= -1;
                        b_ang *= -1;
                    }
                    return a_ang < b_ang ? -1 : (a_ang > b_ang) ? 1 : 0;
                });
                return sorted[0];
            };
            VTX2.prototype.toString = function () {
                return this.P.X + "," + this.P.Y;
            };
            VTX2.GetSimplePath = function (points) {
                var vlist = new Array();
                var pc = points.length;
                for (var i = 0; i < pc; i++) {
                    var ni = (i + 1);
                    if (ni == pc)
                        ni = 0;
                    var isect_locs = new Array();
                    isect_locs.push(0);
                    isect_locs.push(1);
                    var out_s_t = { s: 0, t: 0 };
                    for (var j = 0; j < pc; j++) {
                        var nj = (j + 1);
                        if (nj == pc)
                            nj = 0;
                        if (i == j || ni == j || nj == i)
                            continue;
                        if (Util.IntersectSegmentSegment(points[i], points[ni], points[j], points[nj], out_s_t)) {
                            if (out_s_t.s > Util.PRECISION &&
                                out_s_t.s < 1 - Util.PRECISION &&
                                out_s_t.t > Util.PRECISION &&
                                out_s_t.t < 1 - Util.PRECISION) {
                                isect_locs.push(out_s_t.s);
                            }
                        }
                    }
                    isect_locs.sort();
                    var vtxs = new Array();
                    var prev = vlist[vlist.length - 1];
                    for (var _i = 0, isect_locs_1 = isect_locs; _i < isect_locs_1.length; _i++) {
                        var loc = isect_locs_1[_i];
                        var p = U1.Vector2.ScaleAdd(points[i], loc, U1.Vector2.Subtract(points[ni], points[i]));
                        var vtx = null;
                        for (var _a = 0, vlist_1 = vlist; _a < vlist_1.length; _a++) {
                            var v = vlist_1[_a];
                            if (U1.Vector2.DistanceSquared(p, v.P) < Util.PRECISION) {
                                vtx = v;
                                break;
                            }
                        }
                        if (vtx == null) {
                            vtx = new VTX2();
                            vtx.P = p;
                            vlist.push(vtx);
                        }
                        if (prev != null && prev != vtx)
                            prev.AddNext(vtx);
                        prev = vtx;
                    }
                }
                var last_v = vlist[vlist.length - 1];
                last_v.AddNext(vlist[0]);
                return VTX2.GetPath(vlist);
            };
            VTX2.GetPath = function (vlist) {
                var points = null;
                var area = 0.0;
                for (var _i = 0, vlist_2 = vlist; _i < vlist_2.length; _i++) {
                    var st = vlist_2[_i];
                    if (st.Next.length < 2)
                        continue;
                    //교차점에서 시작 
                    for (var _a = 0, _b = st.Next; _a < _b.length; _a++) {
                        var next = _b[_a];
                        var isLeft = true;
                        for (var i = 0; i < 2; i++) {
                            var t_points = VTX2.GetPathPoints(st, next, isLeft);
                            if (t_points != null) {
                                var t_area = Polygon2.GetArea(t_points);
                                if (area < t_area) {
                                    area = t_area;
                                    points = t_points;
                                }
                            }
                            isLeft = false;
                        }
                    }
                }
                return points;
            };
            VTX2.GetPathPoints = function (start, next, turnLeft) {
                var result = new Array();
                result.push(start.P);
                var visited = new Array();
                visited.push(start);
                var cur = next;
                var prv = start;
                while (cur != start) {
                    if (visited.indexOf(cur) >= 0)
                        return null;
                    visited.push(cur);
                    result.push(cur.P);
                    next = cur.GetNext(prv, turnLeft);
                    prv = cur;
                    cur = next;
                }
                return result;
            };
            return VTX2;
        }());
    })(CGAL = U1.CGAL || (U1.CGAL = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var CGAL;
    (function (CGAL) {
        var Vtx = (function () {
            function Vtx(param) {
                if (param === void 0) { param = null; }
                this.EList = new Array();
                if (param != null) {
                    this.P = param;
                }
            }
            Vtx.prototype.AddEdge = function (edge) {
                this.EList.push(edge);
            };
            Vtx.prototype.RemoveEdge = function (edge) {
                var idx = this.EList.indexOf(edge);
                if (idx >= 0)
                    this.EList = this.EList.slice(idx, 1);
            };
            Vtx.SquaredDistanceSegmentPoint = function (start, end, p, res) {
                if (res == null)
                    res = { s: 0 };
                var es = U1.Vector2.Subtract(end, start);
                var ps = U1.Vector2.Subtract(p, start);
                var es2 = U1.Vector2.Dot(es, es);
                var ps2 = U1.Vector2.Dot(ps, ps);
                var l = U1.Vector2.Dot(es, ps);
                var bb = (l * l) / es2;
                res.s = (Math.sqrt(bb / es2));
                if (U1.Vector2.Dot(es, ps) < 0)
                    res.s = -res.s;
                return ps2 - bb;
            };
            Vtx.IntersectSegmentPoint = function (start, end, p) {
                if (U1.Vector2.DistanceSquared(start, p) < Vtx.SQUARD_DISTANCE)
                    return true;
                if (U1.Vector2.DistanceSquared(end, p) < Vtx.SQUARD_DISTANCE)
                    return true;
                var dist = Vtx.SquaredDistanceSegmentPoint(start, end, p, Vtx.res_s_t);
                if (Vtx.res_s_t.s < 0 || Vtx.res_s_t.s > 1)
                    return false;
                return dist < Vtx.SQUARD_DISTANCE;
            };
            Vtx.prototype.toString = function () {
                return this.P.X + "," + this.P.Y;
            };
            //#region Fields
            Vtx.DISTANCE = 0.01;
            Vtx.SQUARD_DISTANCE = 0.0001;
            Vtx.res_s_t = { s: 0, t: 0 };
            return Vtx;
        }());
        var Edge = (function () {
            function Edge() {
            }
            Object.defineProperty(Edge.prototype, "Start", {
                get: function () {
                    return this.m_start;
                },
                set: function (value) {
                    if (this.m_start == value)
                        return;
                    if (this.m_start != null)
                        this.m_start.RemoveEdge(this);
                    this.m_start = value;
                    if (this.m_start != null)
                        this.m_start.AddEdge(this);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Edge.prototype, "End", {
                get: function () {
                    return this.m_end;
                },
                set: function (value) {
                    if (this.m_end == value)
                        return;
                    this.m_end = value;
                    if (this.m_end == value)
                        return;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Edge.prototype, "Dir", {
                get: function () {
                    return U1.Vector2.Subtract(this.End.P, this.Start.P).Normalize();
                },
                enumerable: true,
                configurable: true
            });
            Edge.prototype.IntersectPoint = function (p) {
                return Vtx.IntersectSegmentPoint(this.m_start.P, this.m_end.P, p);
            };
            Edge.prototype.IntersectSegment = function (start, end, res) {
                if (res == null)
                    res = { p: U1.Vector2.Zero };
                var line0 = Edge.t_line0;
                var line1 = Edge.t_line1;
                line0.Position.CopyFrom(start);
                line0.Direction.SetSubtract(end, start);
                line1.Position.CopyFrom(this.Start.P);
                line1.Direction.SetSubtract(this.End.P, this.Start.P);
                var st = U1.GeometryHelper2.CrossLineLine(line0.Position, line0.Direction, line1.Position, line1.Direction);
                if (st != null) {
                    if (st.s < 0 || st.s > 1 || st.t < 0 || st.t > 1)
                        return false;
                    res.p.SetScaleAdd(line0.Position, st.s, line0.Direction);
                    return true;
                }
                return false;
            };
            Edge.prototype.NextEdge = function (inward) {
                var dir = this.Dir.Negate();
                var edges = new Array();
                for (var _i = 0, _a = this.End.EList; _i < _a.length; _i++) {
                    var e = _a[_i];
                    if (e.End != this.Start) {
                        edges.push(e);
                    }
                }
                if (edges.length == 0)
                    return null;
                edges = edges.sort(function (a_, b_) {
                    var a_ang = U1.GeometryHelper2.AngleCCW(dir, a_.Dir);
                    var b_ang = U1.GeometryHelper2.AngleCCW(dir, b_.Dir);
                    return (a_ang < b_ang) ? -1 : (a_ang > b_ang ? 1 : 0);
                });
                if (inward)
                    return edges[edges.length - 1];
                else
                    return edges[0];
            };
            Edge.prototype.toString = function () {
                return "(" + this.m_start.P.X + "," + this.m_start.P.Y + ")-(" + this.m_end.P.X + "," + this.m_end.P.Y + ") ";
            };
            Edge.res_p = { p: U1.Vector2.Zero };
            Edge.tv0 = U1.Vector2.Zero;
            Edge.t_line0 = new U1.Line2();
            Edge.t_line1 = new U1.Line2();
            Edge.res_s_t = { s: 0, t: 0 };
            return Edge;
        }());
        var LoopFinder = (function () {
            function LoopFinder() {
                this.VLIST = new Array();
                this.ELIST = new Array();
            }
            LoopFinder.prototype.AddVtx = function (p) {
                var v = this.GetVtx(p);
                if (v == null) {
                    var crossEdge = this.GetCrossEdge(p);
                    if (crossEdge != null) {
                        v = this.Split(crossEdge, p, false);
                    }
                    else {
                        v = new Vtx(p);
                        this.VLIST.push(v);
                    }
                }
                return v;
            };
            LoopFinder.prototype.GetVtx = function (p) {
                for (var _i = 0, _a = this.VLIST; _i < _a.length; _i++) {
                    var v = _a[_i];
                    if (U1.Vector2.DistanceSquared(p, v.P) < Vtx.SQUARD_DISTANCE)
                        return v;
                }
                return null;
            };
            LoopFinder.prototype.AddEdge = function (s, e) {
                this.AddVtx(s);
                this.AddVtx(e);
                var elist = this.ELIST.slice();
                var crossp = LoopFinder.res_p.p;
                for (var _i = 0, elist_1 = elist; _i < elist_1.length; _i++) {
                    var edg = elist_1[_i];
                    if (edg.IntersectSegment(s, e, LoopFinder.res_p)) {
                        if (U1.Vector2.DistanceSquared(crossp, edg.Start.P) < Vtx.SQUARD_DISTANCE
                            || U1.Vector2.DistanceSquared(crossp, edg.End.P) < Vtx.SQUARD_DISTANCE)
                            continue;
                        this.Split(edg, crossp, true);
                    }
                }
                var vs = this.GetVTXsOnSement(s, e);
                for (var i = 1; i < vs.length; i++) {
                    this.InsertEdge(vs[i - 1], vs[i]);
                }
            };
            LoopFinder.prototype.GetVTXsOnSement = function (start, end) {
                var result = new Array();
                for (var _i = 0, _a = this.VLIST; _i < _a.length; _i++) {
                    var v = _a[_i];
                    if (!Vtx.IntersectSegmentPoint(start, end, v.P))
                        continue;
                    result.push(v);
                }
                result.sort(function (a_, b_) {
                    var a_l = U1.Vector2.DistanceSquared(start, a_.P);
                    var b_l = U1.Vector2.DistanceSquared(start, b_.P);
                    if (a_l < b_l)
                        return -1;
                    if (a_l > b_l)
                        return 1;
                    return 0;
                });
                return result;
            };
            LoopFinder.prototype.InsertEdge = function (start, end) {
                if (start == end)
                    return null;
                for (var _i = 0, _a = this.ELIST; _i < _a.length; _i++) {
                    var e = _a[_i];
                    if (e.Start === start && e.End === end) {
                        return e;
                    }
                }
                var edg = new Edge();
                edg.Start = start;
                edg.End = end;
                this.ELIST.push(edg);
                return edg;
            };
            LoopFinder.prototype.Split = function (edge, p, newPoint) {
                var v = this.GetVtx(p);
                if (v == null) {
                    v = new Vtx(p.Clone());
                    v.IsNew = newPoint;
                    this.VLIST.push(v);
                }
                var nedg = new Edge();
                nedg.Start = v;
                nedg.End = edge.End;
                nedg.IsNew = true;
                edge.End = v;
                this.ELIST.push(nedg);
                return v;
            };
            LoopFinder.prototype.GetCrossEdge = function (p) {
                for (var _i = 0, _a = this.ELIST; _i < _a.length; _i++) {
                    var edge = _a[_i];
                    if (edge.IntersectPoint(p))
                        return edge;
                }
                return null;
            };
            LoopFinder.prototype.AddLoop = function (path, isReverse) {
                if (isReverse)
                    CGAL.Polygon2.Reverse(path);
                var pi = path.length - 1;
                for (var i = 0; i < path.length; i++) {
                    this.AddEdge(path[pi], path[i]);
                    pi = i;
                }
            };
            LoopFinder.prototype.AddPath = function (path, isReverse) {
                if (isReverse)
                    path.reverse();
                var pi = 0;
                for (var i = 1; i < path.length; i++) {
                    this.AddEdge(path[pi], path[i]);
                    pi = i;
                }
            };
            LoopFinder.prototype.AddLoops = function (loops, isReverse) {
                for (var _i = 0, loops_2 = loops; _i < loops_2.length; _i++) {
                    var loop = loops_2[_i];
                    this.AddLoop(loop, isReverse);
                }
            };
            LoopFinder.prototype.GetLoops = function (inward) {
                var result = new Array();
                while (true) {
                    // A B 상관없이, 방문하지 않았고, 시작점이 새로 추가되지 않은  
                    var startEdge = null;
                    for (var _i = 0, _a = this.ELIST; _i < _a.length; _i++) {
                        var e_ = _a[_i];
                        if (!e_.IsVisited && !e_.Start.IsNew) {
                            startEdge = e_;
                            break;
                        }
                    }
                    if (startEdge == null)
                        break;
                    startEdge.IsVisited = true;
                    var visitedVtxis = new Array(startEdge.Start, startEdge.End);
                    var visitedESet = new Array(startEdge);
                    var strVtx = startEdge.Start;
                    var curVtx = startEdge.End;
                    var curEdg = startEdge;
                    while (true) {
                        var nextEdg = curEdg.NextEdge(inward);
                        if (nextEdg == null) {
                            //연결되지 않은 에지가 있다면..
                            //올수가 없는데? 
                            break;
                        }
                        if (visitedESet.indexOf(nextEdg) >= 0) {
                            //성공
                            //루프 중간에 만난경우 앞부분 잘라냄
                            while (visitedVtxis[0] != nextEdg.Start) {
                                visitedVtxis.splice(0, 1);
                            }
                            //시작점과 동일 하므로 마지막 지점 제거 
                            visitedVtxis.splice(visitedVtxis.length - 1, 1);
                            var loop = new Array();
                            for (var _b = 0, visitedVtxis_1 = visitedVtxis; _b < visitedVtxis_1.length; _b++) {
                                var vt = visitedVtxis_1[_b];
                                loop.push(vt.P);
                            }
                            result.push(loop);
                            break;
                        }
                        else if (nextEdg.IsVisited) {
                            //실패
                            break;
                        }
                        nextEdg.IsVisited = true;
                        visitedVtxis.push(nextEdg.End);
                        visitedESet.push(nextEdg);
                        curEdg = nextEdg;
                    }
                }
                return result;
            };
            LoopFinder.res_p = { p: U1.Vector2.Zero };
            return LoopFinder;
        }());
        CGAL.LoopFinder = LoopFinder;
    })(CGAL = U1.CGAL || (U1.CGAL = {}));
})(U1 || (U1 = {}));
///<reference path="../Math/U1Math.ts"/> 
///<reference path="../Math/CGAL.ts"/> 
var U1;
(function (U1) {
    var Geom;
    (function (Geom) {
        var Face = (function () {
            function Face(boundary) {
                if (boundary === void 0) { boundary = null; }
                this.Handle = ++Face.s_handle;
                this.State = Geom.FaceStates.None;
                this.Normal = U1.Vector3.Zero;
                this.Orign = U1.Vector3.Zero;
                this.BoundingBox = U1.BoundingBox.New();
                if (boundary != null) {
                    this.Boundary = boundary;
                }
            }
            Object.defineProperty(Face.prototype, "IsFlat", {
                get: function () {
                    return (this.State & Geom.FaceStates.Flat) == Geom.FaceStates.Flat;
                },
                set: function (isFlat) {
                    if (isFlat)
                        this.State = this.State | Geom.FaceStates.Flat;
                    else
                        this.State = this.State & ~Geom.FaceStates.Flat;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Face.prototype, "IsCap", {
                get: function () {
                    return (this.State & Geom.FaceStates.Cap) == Geom.FaceStates.Cap;
                },
                set: function (value) {
                    if (value)
                        this.State = this.State | Geom.FaceStates.Cap;
                    else
                        this.State = this.State & ~Geom.FaceStates.Cap;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Face.prototype, "HasHoles", {
                get: function () {
                    return this.Holes != null && this.Holes.length > 0;
                },
                enumerable: true,
                configurable: true
            });
            Face.prototype.GetVertexIndices = function (indics) {
                if (this.Boundary != null) {
                    for (var _i = 0, _a = this.Boundary; _i < _a.length; _i++) {
                        var idx = _a[_i];
                        indics[idx] = idx;
                    }
                }
                if (this.Holes != null) {
                    for (var _b = 0, _c = this.Holes; _b < _c.length; _b++) {
                        var hole = _c[_b];
                        for (var _d = 0, hole_1 = hole; _d < hole_1.length; _d++) {
                            var idx = hole_1[_d];
                            indics[idx] = idx;
                        }
                    }
                }
            };
            Face.prototype.Clone = function (vertex_offset) {
                if (vertex_offset === void 0) { vertex_offset = 0; }
                var result = new Face();
                result.Boundary = this.Boundary.slice();
                result.Normal = this.Normal,
                    result.State = this.State;
                if (this.Holes != null) {
                    result.Holes = new Array();
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        var copy_hole = hole.slice();
                        result.Holes.push(copy_hole);
                    }
                }
                if (vertex_offset != 0) {
                    for (var i = 0; i < result.Boundary.length; i++) {
                        result.Boundary[i] += vertex_offset;
                    }
                    if (result.Holes != null) {
                        for (var i = 0; i < result.Holes.length; i++) {
                            var hole = result.Holes[i];
                            for (var j = 0; j < hole.length; j++) {
                                hole[j] += vertex_offset;
                            }
                        }
                    }
                }
                return result;
            };
            Face.prototype.ReplaceIndics = function (indicsMap) {
                for (var i = 0; i < this.Boundary.length; i++) {
                    this.Boundary[i] = indicsMap[this.Boundary[i]];
                }
                if (this.Holes != null) {
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        for (var i = 0; i < hole.length; i++) {
                            hole[i] = indicsMap[hole[i]];
                        }
                    }
                }
            };
            Face.prototype.Update = function (vertics, force) {
                if (force === void 0) { force = false; }
                if (!force && (this.Normal.X != 0 && this.Normal.Y != 0 && this.Normal.Z != 0))
                    return;
                var points = new Array(this.Boundary.length);
                for (var i = 0; i < this.Boundary.length; i++) {
                    points[i] = vertics[this.Boundary[i]];
                }
                U1.GeometryHelper3.PolygonNormal(points, 0, points.length, true, this.Normal);
                this.Orign.CopyFrom(points[0]);
                this.BoundingBox.SetCreateFromPoints(points);
            };
            Face.prototype.Flip = function () {
                if (this.Boundary != null)
                    this.Boundary.reverse();
                if (this.HasHoles) {
                    this.Holes.forEach(function (o_) { return o_.reverse(); });
                }
            };
            Face.prototype.GetUV = function (u, v) {
                U1.GeometryHelper3.GetArbitraryAxis(this.Normal, u, v);
            };
            Face.Project = function (p, uaxis, vaxis) {
                return new U1.Vector2(U1.Vector3.Dot(p, uaxis), U1.Vector3.Dot(p, vaxis));
            };
            Face.PlaneIntersection = function (polygon, vertics, plane) {
                var num_boundary = polygon.length;
                var sign = 0;
                for (var _i = 0, polygon_1 = polygon; _i < polygon_1.length; _i++) {
                    var pi = polygon_1[_i];
                    var p = vertics[pi];
                    var d = plane.DotCoordinate(p);
                    if (d < -Geom.EPSILON) {
                        if (sign > 0)
                            return U1.PlaneIntersectionTypeEnum.Intersecting;
                        sign = -1;
                    }
                    else if (d > Geom.EPSILON) {
                        if (sign < 0)
                            return U1.PlaneIntersectionTypeEnum.Intersecting;
                        sign = 1;
                    }
                }
                return sign > 0 ? U1.PlaneIntersectionTypeEnum.Front : U1.PlaneIntersectionTypeEnum.Back;
            };
            Face.GetCuttingEdges = function (polygon, vertics, plane, result) {
                var hasCuttingEdge = false;
                var polygon_num = polygon.length;
                for (var ci = 0; ci < polygon_num; ci++) {
                    var ni = (ci + 1) % polygon_num;
                    var cpi = polygon[ci];
                    var npi = polygon[ni];
                    var cp = vertics[cpi];
                    var np = vertics[npi];
                    var d = plane.DotCoordinate(cp);
                    if (d > Geom.EPSILON || d < -Geom.EPSILON)
                        continue;
                    d = plane.DotCoordinate(np);
                    if (d > Geom.EPSILON || d < -Geom.EPSILON)
                        continue;
                    result.push(cpi);
                    result.push(npi);
                    hasCuttingEdge = true;
                }
                return hasCuttingEdge;
            };
            Face.prototype.GetCuttingEdges = function (vertics, plane, result) {
                var hasCuttingEdge = Face.GetCuttingEdges(this.Boundary, vertics, plane, result);
                if (this.Holes != null) {
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        if (Face.GetCuttingEdges(hole, vertics, plane, result))
                            hasCuttingEdge = true;
                    }
                }
                return hasCuttingEdge;
            };
            Face.prototype.GetPolygonWithHoles = function (vertics, vmap, v2map) {
                if (vmap === void 0) { vmap = null; }
                if (v2map === void 0) { v2map = null; }
                var u = U1.Vector3.Zero;
                var v = U1.Vector3.Zero;
                this.GetUV(u, v);
                var vc = 0;
                var project = function (boundary_) {
                    var count = boundary_.length;
                    var result = new Array(count);
                    for (var i = 0; i < count; i++) {
                        var vi_ = boundary_[i];
                        var v3 = vertics[vi_];
                        var x = U1.Vector3.Dot(v3, u);
                        var y = U1.Vector3.Dot(v3, v);
                        if (vmap != null)
                            vmap[vc++] = vi_;
                        var v2 = new U1.Vector2(x, y);
                        if (v2map != null)
                            v2map[v2.toString()] = vi_;
                        result[i] = v2;
                    }
                    return result;
                };
                var boundary2 = project(this.Boundary);
                var pgon = new U1.CGAL.Polygon2();
                pgon.Points = boundary2;
                var pwh = new U1.CGAL.PolygonWithHoles2(pgon);
                if (this.Holes != null) {
                    var holes = new Array();
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        var hole2 = project(hole);
                        pwh.AddHole(new U1.CGAL.Polygon2(hole2));
                    }
                }
                return pwh;
            };
            Face.prototype.Tesselate = function (vertics) {
                if (this.Holes == null && this.Boundary.length == 3) {
                    return this.Boundary.slice();
                }
                var result = new Array();
                if (Face.TesselaterFunc != null) {
                    return Face.TesselaterFunc(this, vertics);
                }
                var vmap = {};
                var pwh = this.GetPolygonWithHoles(vertics, vmap);
                var ptriangulate = new U1.Triangulations.PolygonTriangulation2();
                ptriangulate.FillPWH(pwh);
                var mesh = ptriangulate.GetMesh();
                for (var _i = 0, _a = mesh.FList; _i < _a.length; _i++) {
                    var f = _a[_i];
                    result.push(vmap[f.V0]);
                    result.push(vmap[f.V1]);
                    result.push(vmap[f.V2]);
                }
                return result;
            };
            Face.TestIntersectFast = function (aVertics, aFace, bVertics, bFace) {
                if (!aFace.BoundingBox.IntersectsBoundingBox(bFace.BoundingBox)) {
                    return false;
                }
                var test_plane = U1.Plane.New();
                test_plane.SetFromPointNormal(aFace.Orign, aFace.Normal);
                var nFront = 0;
                var nBack = 0;
                for (var i = 0; i < bFace.Boundary.length; i++) {
                    var vi = bFace.Boundary[i];
                    var d = test_plane.DotCoordinate(bVertics[vi]);
                    if (d == 0) {
                        nFront++;
                        nBack++;
                    }
                    else if (d > 0)
                        nFront++;
                    else
                        nBack++;
                    if (nFront > 0 && nBack > 0)
                        break;
                }
                if (nFront == 0 || nBack == 0) {
                    test_plane.Release();
                    return false;
                }
                test_plane.SetFromPointNormal(bFace.Orign, bFace.Normal);
                nFront = 0;
                nBack = 0;
                for (var i = 0; i < aFace.Boundary.length; i++) {
                    var vi = aFace.Boundary[i];
                    var d = test_plane.DotCoordinate(aVertics[vi]);
                    if (d == 0) {
                        nFront++;
                        nBack++;
                    }
                    else if (d > 0)
                        nFront++;
                    else
                        nBack++;
                    if (nFront > 0 && nBack > 0)
                        break;
                }
                test_plane.Release();
                if (nFront == 0 || nBack == 0) {
                    test_plane.Release();
                    return false;
                }
                return true;
            };
            /// <summary>
            /// 폴리곤과 면의 교차지점에 새로운 포인트 추가
            /// </summary>
            /// <param name="polygon"></param>
            /// <param name="vertics"></param>
            /// <param name="plane">절단평면</param>
            /// <param name="add_point_func">포인트 추가콜백</param>
            /// <param name="isect_points"> 새로추가된 포인트</param>
            /// <param name="new_polygon"></param>
            /// <returns></returns>
            Face.InsertIsectPoints = function (polygon, vertics, plane, add_point_func, isect_points, result) {
                var new_boundary = new Array();
                var insert_list = new Array();
                var num_boundary = polygon.length;
                var is_cutted = false;
                var cur_p = U1.Vector3.Zero;
                var nxt_p = U1.Vector3.Zero;
                var dir = U1.Vector3.Zero;
                var f_num = 0;
                var b_num = 0;
                for (var i = 0; i < num_boundary; i++) {
                    var ci = polygon[i];
                    var ni = (i + 1) < num_boundary ? polygon[i + 1] : polygon[0];
                    new_boundary.push(ci);
                    cur_p = vertics[ci];
                    nxt_p = vertics[ni];
                    dir.Set(nxt_p.X - cur_p.X, nxt_p.Y - cur_p.Y, nxt_p.Z - cur_p.Z);
                    var d0 = plane.DotCoordinate(cur_p);
                    if (d0 <= Geom.EPSILON && d0 >= -Geom.EPSILON)
                        d0 = 0;
                    var d1 = plane.DotCoordinate(nxt_p);
                    if (d1 <= Geom.EPSILON && d1 >= -Geom.EPSILON)
                        d1 = 0;
                    if (d0 * d1 < 0) {
                        //면의 양쪽으로 분리 
                        var t = plane.IntersectsLine(cur_p, dir);
                        var isect;
                        if (t == null)
                            isect = cur_p;
                        else
                            isect = U1.Vector3.ScaleAdd(cur_p, t, dir);
                        if (isect != cur_p) {
                            var vi = add_point_func(isect);
                            isect = vertics[vi];
                            if (isect_points.indexOf(isect) < 0)
                                isect_points.push(isect);
                            if (new_boundary == null)
                                new_boundary = new Array();
                            insert_list.push(new_boundary.length);
                            new_boundary.push(vi);
                            is_cutted = true;
                        }
                    }
                    else if (d0 == 0) {
                        //면과만나는경우 
                        isect_points.push(cur_p);
                    }
                    if (d0 > 0)
                        f_num++;
                    if (d0 < 0)
                        b_num++;
                }
                if (is_cutted) {
                    result.new_polygon = new_boundary;
                    result.insert_indics = insert_list;
                }
                else {
                    result.new_polygon = polygon;
                    result.insert_indics = new Array();
                    if (f_num > 0 && b_num > 0 && isect_points.length > 1)
                        is_cutted = true;
                }
                return is_cutted;
            };
            Face.prototype.Cut = function (vertics, plane, add_point_func, fronts, backs) {
                var isect_points = new Array();
                var out = {
                    new_polygon: new Array(),
                    insert_indics: new Array()
                };
                var is_cutted = Face.InsertIsectPoints(this.Boundary, vertics, plane, add_point_func, isect_points, out);
                var boundary_insert_indics = out.insert_indics;
                if (is_cutted) {
                    var copy = this.Clone();
                    copy.Boundary = out.new_polygon;
                    if (this.Holes != null) {
                        var h_list = new Array();
                        for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                            var h = _a[_i];
                            var hole_insert_indics = new Array();
                            out.insert_indics = hole_insert_indics;
                            if (Face.InsertIsectPoints(h, vertics, plane, add_point_func, isect_points, out)) {
                                h_list.push(out.new_polygon);
                            }
                            else {
                                h_list.push(h);
                            }
                        }
                        copy.Holes = h_list;
                    }
                    if (isect_points.length == 2 && boundary_insert_indics.length == 2) {
                        // 2점에서 교차하는 경우 
                        // 면을 양분함. 
                        var face_boundary1 = new Array();
                        var face_boundary2 = new Array();
                        for (var i = 0; i < copy.Boundary.length; i++) {
                            if (i <= boundary_insert_indics[0] || i >= boundary_insert_indics[1])
                                face_boundary1.push(copy.Boundary[i]);
                            if (i >= boundary_insert_indics[0] && i <= boundary_insert_indics[1])
                                face_boundary2.push(copy.Boundary[i]);
                        }
                        var front_face = new Face(face_boundary1);
                        var back_face = new Face(face_boundary2);
                        front_face.State = Geom.FaceStates.Cutted;
                        back_face.State = Geom.FaceStates.Cutted;
                        var isectType = Face.PlaneIntersection(front_face.Boundary, vertics, plane);
                        if (isectType == U1.PlaneIntersectionTypeEnum.Back) {
                            var tmp = back_face;
                            back_face = front_face;
                            front_face = tmp;
                        }
                        if (copy.Holes != null) {
                            //홀을 면의 앞뒤로 구분하여 면에 반영 
                            var front_holes = new Array();
                            var back_holes = new Array();
                            for (var _b = 0, _c = copy.Holes; _b < _c.length; _b++) {
                                var hole = _c[_b];
                                if (Face.PlaneIntersection(hole, vertics, plane) == U1.PlaneIntersectionTypeEnum.Front) {
                                    front_holes.push(hole);
                                }
                                else {
                                    back_holes.push(hole);
                                }
                            }
                            front_face.Holes = front_holes.length > 0 ? front_holes : null;
                            back_face.Holes = back_holes.length > 0 ? back_holes : null;
                        }
                        fronts.push(front_face);
                        backs.push(back_face);
                        return true;
                    }
                    return FaceCutter.SplitFace(copy, vertics, plane, isect_points, fronts, backs);
                }
                {
                    var isectType = Face.PlaneIntersection(this.Boundary, vertics, plane);
                    if (isectType == U1.PlaneIntersectionTypeEnum.Front)
                        fronts.push(this);
                    else
                        backs.push(this);
                }
                return is_cutted;
            };
            Face.CreateFaces = function (pwhs, v2map, ivmap, state) {
                var faces = new Array();
                for (var _i = 0, pwhs_1 = pwhs; _i < pwhs_1.length; _i++) {
                    var hpw_ = pwhs_1[_i];
                    var face_ = new Face();
                    face_.State = state;
                    face_.Boundary = hpw_
                        .OuterBoundary
                        .Points
                        .map(function (o_) {
                        var key = o_.toString();
                        if (v2map[key] != null)
                            return v2map[key];
                        var min_dist = Number.MAX_VALUE;
                        var nearest = 0;
                        for (var i in ivmap) {
                            var v2 = ivmap[i];
                            var dist = U1.Vector2.DistanceSquared(v2, o_);
                            if (dist < min_dist) {
                                min_dist = dist;
                                nearest = parseInt(i);
                            }
                        }
                        return nearest;
                    });
                    if (hpw_.HasHoles) {
                        var holes = new Array();
                        for (var _a = 0, _b = hpw_.Holes; _a < _b.length; _a++) {
                            var hole = _b[_a];
                            var h_ = hole
                                .Points
                                .map(function (o_) { return v2map[o_.toString()]; });
                            holes.push(h_);
                        }
                        face_.Holes = holes;
                    }
                    faces.push(face_);
                }
                return faces;
            };
            /**
            폴리곤과 평면의 교차
            @cut_normal :절단면의 노멀
            @cut_right  :절단면의 우측 방향
            @res_locs   :cut_right상에서의 위치
            */
            Face.GetPlaneIntersectLocs = function (polygon, vertics, planeNormal, ray, res_locs) {
                var num_boundary = polygon.length;
                var dir = U1.Vector3.New();
                var tv = U1.Vector3.New();
                var plane = U1.Plane.FromPointNormal(ray.Position, planeNormal);
                for (var i = 0; i < num_boundary; i++) {
                    var ci = polygon[i];
                    var ni = (i + 1) < num_boundary ? polygon[i + 1] : polygon[0];
                    var cur_p = vertics[ci];
                    var nxt_p = vertics[ni];
                    dir.SetSubtract(nxt_p, cur_p);
                    var d0 = plane.DotCoordinate(cur_p);
                    if (d0 <= Geom.EPSILON && d0 >= -Geom.EPSILON)
                        d0 = 0;
                    var d1 = plane.DotCoordinate(nxt_p);
                    if (d1 <= Geom.EPSILON && d1 >= -Geom.EPSILON)
                        d1 = 0;
                    if (d0 * d1 <= 0 && (d0 != 0 || d1 != 0)) {
                        if (d0 != 0 && d1 != 0) {
                            //면의 양쪽으로 분리 
                            var t = plane.IntersectsLine(cur_p, dir);
                            var isect;
                            if (t == null)
                                isect = cur_p;
                            else
                                isect = U1.Vector3.ScaleAdd(cur_p, t, dir);
                        }
                        else {
                            isect = cur_p;
                        }
                        t = U1.Vector3.Dot(ray.Direction, tv.SetSubtract(isect, ray.Position));
                        res_locs.push(t);
                    }
                    else {
                        continue;
                    }
                }
                dir.Release();
                tv.Release();
                plane.Release();
            };
            Face.prototype.GetPlaneIntersectLocs = function (vertics, planeNormal, ray, res_locs) {
                Face.GetPlaneIntersectLocs(this.Boundary, vertics, planeNormal, ray, res_locs);
                if (this.HasHoles) {
                    this.Holes.forEach(function (o_) {
                        Face.GetPlaneIntersectLocs(o_, vertics, planeNormal, ray, res_locs);
                    });
                }
                res_locs.sort(function (a, b) { return a > b ? 1 : (a < b ? -1 : 0); });
            };
            Face.prototype.GetIsConvex = function (vertics) {
                if (this.Boundary == null || this.Boundary.length < 4)
                    return true;
                //방향 전환이 항상 일정하게 이루어 지는지 검사한다.
                var pi = vertics.length - 1;
                var result = 0;
                var v0 = U1.Vector3.New();
                var v1 = U1.Vector3.New();
                var nBoundary = this.Boundary.length;
                var cross = U1.Vector3.New();
                var sign = 0;
                for (var i = 0; i < this.Boundary.length - 1; pi = i, i++) {
                    var ci = this.Boundary[i];
                    var ni = this.Boundary[(i + 1) % nBoundary];
                    v0.SetSubtract(vertics[ci], vertics[pi]);
                    v1.SetSubtract(vertics[ni], vertics[ci]);
                    var asign = cross.SetCross(v1, v0).Z;
                    if (asign == 0)
                        continue;
                    if (sign == 0) {
                        sign = asign;
                        continue;
                    }
                    if (sign * asign < 0)
                        return false;
                }
                return true;
            };
            Face.prototype.GetArbitraryInsidePoint = function (vertics) {
                if (this.Boundary.length == 3 && (this.Holes == null || this.Holes.length == 0)) {
                    //구멍이 없는 삼각형
                    return U1.Vector3
                        .Add(vertics[this.Boundary[0]], vertics[this.Boundary[1]])
                        .Add(vertics[this.Boundary[2]])
                        .Scale(1 / 3);
                }
                if (this.Holes == null || this.Holes.length == 0) {
                    //구멍이 없고 
                    //삼각형 또는 Convex인 경우 
                    if (this.Boundary.length == 3 || this.GetIsConvex(vertics)) {
                        return U1.Vector3
                            .Add(vertics[this.Boundary[0]], vertics[this.Boundary[1]])
                            .Add(vertics[this.Boundary[2]])
                            .Scale(1 / 3);
                    }
                }
                var u = U1.Vector3.New();
                var v = U1.Vector3.New();
                var tu = U1.Vector3.New();
                var tv = U1.Vector3.New();
                var tn = U1.Vector3.New();
                var ray = U1.Ray3.New();
                var lm = this.GetLMostPoint(vertics);
                var rm = this.GetRMostPoint(vertics);
                ray.Position
                    .SetAdd(lm, rm)
                    .Scale(0.5);
                var face_normal = this.Normal;
                U1.GeometryHelper3.GetArbitraryAxis(face_normal, u, v);
                var delt = Math.PI / 10;
                var isectLocs = new Array();
                var arb_pos = null;
                for (var i = 0; i <= 20; i++) {
                    var ang = delt * i;
                    tu.SetScale(u, Math.cos(ang));
                    tv.SetScale(v, Math.sin(ang));
                    ray.Direction.SetAdd(tu, tv);
                    tn.SetCross(face_normal, ray.Direction);
                    this.GetPlaneIntersectLocs(vertics, tn, ray, isectLocs);
                    if (isectLocs.length > 0 && isectLocs.length % 2 == 0) {
                        for (var j = 1; j < isectLocs.length; j++) {
                            if (isectLocs[j - 1] != isectLocs[j]) {
                                arb_pos = U1.Vector3.ScaleAdd(ray.Position, (isectLocs[j - 1] + isectLocs[j]) / 2, ray.Direction);
                                break;
                            }
                        }
                        if (arb_pos != null)
                            break;
                    }
                }
                if (arb_pos == null) {
                    arb_pos
                        .SetAdd(lm, rm)
                        .Scale(0.5);
                }
                u.Release();
                v.Release();
                tu.Release();
                tv.Release();
                tn.Release();
                ray.Release();
                return arb_pos;
            };
            Face.prototype.GetLMostBoundaryIndex = function (vertics) {
                var u = U1.Vector3.New();
                var v = U1.Vector3.New();
                U1.GeometryHelper3.GetArbitraryAxis(this.Normal, u, v);
                var result = 0;
                var lmost = vertics[this.Boundary[0]];
                var x = U1.Vector3.Dot(u, lmost);
                var y = U1.Vector3.Dot(v, lmost);
                this.Boundary.forEach(function (item_, idx_) {
                    var p = vertics[item_];
                    var tx = U1.Vector3.Dot(u, p);
                    var ty = U1.Vector3.Dot(v, p);
                    if (tx < x || (tx == x && ty < y)) {
                        x = tx;
                        y = ty;
                        result = idx_;
                    }
                });
                return result;
            };
            Face.prototype.GetRMostBoundaryIndex = function (vertics) {
                var u = U1.Vector3.New();
                var v = U1.Vector3.New();
                U1.GeometryHelper3.GetArbitraryAxis(this.Normal, u, v);
                var result = 0;
                var lmost = vertics[this.Boundary[0]];
                var x = U1.Vector3.Dot(u, lmost);
                var y = U1.Vector3.Dot(v, lmost);
                this.Boundary.forEach(function (item_, idx_) {
                    var p = vertics[item_];
                    var tx = U1.Vector3.Dot(u, p);
                    var ty = U1.Vector3.Dot(v, p);
                    if (tx > x || (tx == x && ty > y)) {
                        x = tx;
                        y = ty;
                        result = idx_;
                    }
                });
                return result;
            };
            Face.prototype.GetLMostPoint = function (vertics) {
                var li = this.GetLMostBoundaryIndex(vertics);
                return vertics[this.Boundary[li]];
            };
            Face.prototype.GetRMostPoint = function (vertics) {
                var ri = this.GetRMostBoundaryIndex(vertics);
                return vertics[this.Boundary[ri]];
            };
            Face.prototype.GetPointIndics = function (indics) {
                for (var _i = 0, _a = this.Boundary; _i < _a.length; _i++) {
                    var idx = _a[_i];
                    indics[idx] = true;
                }
                if (this.Holes != null) {
                    for (var _b = 0, _c = this.Holes; _b < _c.length; _b++) {
                        var hole = _c[_b];
                        for (var _d = 0, hole_2 = hole; _d < hole_2.length; _d++) {
                            var idx = hole_2[_d];
                            indics[idx] = true;
                        }
                    }
                }
            };
            //Begin IUValue
            Face.prototype.ConvertFromStr = function (value) {
                var jsonObj = JSON.parse(value);
                if (jsonObj["Boundary"] && jsonObj["Boundary"] instanceof Array) {
                    this.Boundary = jsonObj["Boundary"].filter(function (o_) { return typeof o_ === "number"; });
                }
                ;
                if (jsonObj["Holes"] && jsonObj["Holes"] instanceof Array) {
                    this.Holes = jsonObj["Holes"]
                        .filter(function (o_) {
                        return o_ instanceof Array;
                    })
                        .map(function (o_) {
                        return o_.filter(function (o_) { return typeof o_ === "number"; });
                    });
                }
                ;
                if (jsonObj["Normal"] && typeof jsonObj["Normal"] === "string") {
                    this.Normal.ConvertFromStr(jsonObj["Normal"]);
                }
                if (jsonObj["State"] && typeof jsonObj["State"] === "number") {
                    this.State = jsonObj["State"];
                }
            };
            Face.prototype.ConvertToStr = function () {
                var jsonObj = {
                    Boundary: this.Boundary,
                    Holes: this.Holes,
                    State: this.State,
                    Normal: this.Normal.ConvertToStr()
                };
                return JSON.stringify(jsonObj);
            };
            Face.prototype.CopyFrom = function (other) {
                if (!(other instanceof Face)) {
                    return;
                }
                var othFace = (other);
                this.Boundary = othFace.Boundary.slice();
                this.Normal.CopyFrom(othFace.Normal),
                    this.State = othFace.State;
                if (othFace.Holes != null) {
                    this.Holes = othFace.Holes.map(function (o_) {
                        return o_.slice();
                    });
                }
                else {
                    this.Holes = null;
                }
            };
            Face.prototype.Equals = function (other) {
                if (!(other instanceof Face)) {
                    return false;
                }
                var othFace = (other);
                if (!this.Normal.Equals(othFace.Normal))
                    return false;
                if (this.State != othFace.State)
                    return false;
                if (!Geom.EqualNumbers(this.Boundary, othFace.Boundary))
                    return false;
                if (this.Holes != othFace.Holes) {
                    if (this.Holes == null || othFace.Holes == null)
                        return false;
                    for (var i = 0; i < this.Holes.length; i++) {
                        if (!Geom.EqualNumbers(this.Holes[i], othFace.Holes[i]))
                            return false;
                    }
                }
                return true;
            };
            Face.s_handle = 0;
            return Face;
        }());
        Geom.Face = Face;
        var FaceCutter = (function () {
            function FaceCutter() {
            }
            FaceCutter.SplitFace = function (face, vertics, plane, insert_points, front_faces, back_faces) {
                if (insert_points.length < 2) {
                    if (this.IsFront(face.Boundary, vertics, plane)) {
                        front_faces.push(face);
                    }
                    else {
                        back_faces.push(face);
                    }
                    return true;
                }
                var dir = U1.Vector3.Cross(plane.Normal, face.Normal);
                dir.Normalize();
                var facemap = function () {
                    var map_ = {
                        keys: new Array(),
                        values: new Array(),
                        getValue: function (this_, key_) {
                            var idx_ = this_.keys.indexOf(key_);
                            if (idx_ >= 0)
                                return this_.values[idx_];
                            return null;
                        },
                        setValue: function (this_, key_, val_) {
                            var idx_ = this_.keys.indexOf(key_);
                            if (idx_ >= 0)
                                this_.values[idx_] = val_;
                            else {
                                this_.keys.push(key_);
                                this_.values.push(val_);
                            }
                        }
                    };
                    return map_;
                };
                var f_faces = new Map();
                var b_faces = new Map();
                var loops = new Array();
                loops.push(V_Link.CreateLoop(face.Boundary, 0));
                var loop = 1;
                if (face.Holes != null) {
                    for (var _i = 0, _a = face.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        loops.push(V_Link.CreateLoop(hole, loop++));
                    }
                }
                var insert_indics = new Array();
                insert_points
                    .sort(function (a_, b_) {
                    var da = U1.Vector3.Dot(dir, a_);
                    var db = U1.Vector3.Dot(dir, b_);
                    if (da == db)
                        return 0;
                    if (da < db)
                        return -1;
                    return 1;
                })
                    .forEach(function (v_, i_, arr) {
                    insert_indics.push(vertics.indexOf(v_));
                });
                for (var i = 0; i < insert_indics.length - 1; i += 2) {
                    var idx0 = insert_indics[i];
                    var idx1 = insert_indics[i + 1];
                    var f_idx = -1;
                    var t_idx = -1;
                    var fr = null;
                    var to = null;
                    for (var j = 0; j < loops.length; j++) {
                        fr = loops[j].Find(idx0);
                        if (fr != null) {
                            f_idx = j;
                            loops[j] = fr;
                            break;
                        }
                    }
                    for (var j = 0; j < loops.length; j++) {
                        to = loops[j].Find(idx1);
                        if (to != null) {
                            t_idx = j;
                            loops[j] = to;
                            break;
                        }
                    }
                    if (fr != to && fr != null && to != null) {
                        var isSameLoop = f_idx == t_idx;
                        V_Link.Connect(fr, to);
                        if (isSameLoop) {
                            //동일 루프인경우 분할
                            loops.push(fr);
                        }
                        else {
                            //서로다른 루프인 경우 병합
                            loops.splice(t_idx, 1);
                        }
                    }
                }
                var faces = new Array();
                for (var _b = 0, loops_3 = loops; _b < loops_3.length; _b++) {
                    var vlink = loops_3[_b];
                    if (!vlink.IsBoundary)
                        continue;
                    var visFace = new Face();
                    visFace.Boundary = vlink.GetIndics(),
                        visFace.State = Geom.FaceStates.Cutted;
                    if (this.IsFront(visFace.Boundary, vertics, plane)) {
                        f_faces.setValue(visFace, this.GetPolygon(visFace.Boundary, vertics, face.Normal));
                    }
                    else {
                        b_faces.setValue(visFace, this.GetPolygon(visFace.Boundary, vertics, face.Normal));
                    }
                }
                for (var _c = 0, loops_4 = loops; _c < loops_4.length; _c++) {
                    var vlink = loops_4[_c];
                    if (vlink.IsBoundary)
                        continue;
                    var h_points = vlink.GetIndics();
                    var out_face = null;
                    if (this.IsFront(h_points, vertics, plane)) {
                        for (var _d = 0, _e = f_faces.KeyValues; _d < _e.length; _d++) {
                            var kv = _e[_d];
                            if (this.Contains(kv.value, h_points, vertics, face.Normal)) {
                                out_face = kv.key;
                                break;
                            }
                        }
                    }
                    else {
                        for (var _f = 0, _g = b_faces.KeyValues; _f < _g.length; _f++) {
                            var key = _g[_f];
                            if (this.Contains(kv.value, h_points, vertics, face.Normal)) {
                                out_face = kv.key;
                                break;
                            }
                        }
                    }
                    if (out_face != null) {
                        var holes = out_face.Holes != null ? out_face.Holes.slice() : new Array();
                        holes.push(h_points);
                        out_face.Holes = holes;
                    }
                }
                if (f_faces.Count > 0 || b_faces.Count > 0) {
                    f_faces.Keys.forEach(function (v_, i_, arr_) { return front_faces.push(v_); });
                    b_faces.Keys.forEach(function (v_, i_, arr_) { return back_faces.push(v_); });
                    return true;
                }
                if (this.IsFront(face.Boundary, vertics, plane)) {
                    front_faces.push(face);
                }
                else {
                    back_faces.push(face);
                }
                return true;
            };
            FaceCutter.IsFront = function (points, vertics, plane) {
                for (var i = 0; i < points.length; i++) {
                    if (plane.DotCoordinate(vertics[points[i]]) > Geom.EPSILON)
                        return true;
                }
                return false;
            };
            FaceCutter.GetPolygon = function (b, vertics, normal) {
                var u = U1.Vector3.Zero;
                var v = U1.Vector3.Zero;
                U1.GeometryHelper3.GetArbitraryAxis(normal, u, v);
                var b2 = new Array();
                b.forEach(function (v_, idx_, arr_) {
                    var p_ = vertics[v_];
                    var x = U1.Vector3.Dot(p_, u);
                    var y = U1.Vector3.Dot(p_, v);
                    b2.push(new U1.Vector2(x, y));
                });
                var pgon = new U1.CGAL.Polygon2(b2);
                if (pgon.IsCW()) {
                    pgon.Reverse();
                }
                return pgon;
            };
            FaceCutter.Contains = function (boundary, hole, vertics, normal) {
                var u = new U1.Vector3();
                var v = new U1.Vector3();
                U1.GeometryHelper3.GetArbitraryAxis(normal, u, v);
                for (var _i = 0, hole_3 = hole; _i < hole_3.length; _i++) {
                    var i = hole_3[_i];
                    var p_ = vertics[i];
                    var x = U1.Vector3.Dot(p_, u);
                    var y = U1.Vector3.Dot(p_, v);
                    var p2 = new U1.Vector2(x, y);
                    if (boundary.HasOnBoundedSide(p2))
                        return true;
                }
                return false;
            };
            return FaceCutter;
        }());
        Geom.FaceCutter = FaceCutter;
        var V_Link = (function () {
            function V_Link() {
            }
            Object.defineProperty(V_Link.prototype, "IsBoundary", {
                get: function () {
                    return this.Loop == 0;
                },
                enumerable: true,
                configurable: true
            });
            V_Link.Connect = function (fr, to) {
                var isSampLoop = fr.IsSampeLoop(to);
                var n_from = fr.Clone();
                var n_to = to.Clone();
                to.Next = n_from;
                fr.Next = n_to;
                if (fr.Loop != to.Loop) {
                    var loop = fr.Loop < to.Loop ? fr.Loop : to.Loop;
                    fr.SetLoop(loop);
                    to.SetLoop(loop);
                }
            };
            V_Link.prototype.Clone = function () {
                var clone = new V_Link();
                clone.Index = this.Index;
                clone.Next = this.Next;
                return clone;
            };
            V_Link.prototype.Find = function (index) {
                if (this.Index == index)
                    return this;
                var cp = this.Next;
                while (cp != this) {
                    if (index == cp.Index)
                        return cp;
                    cp = cp.Next;
                }
                return null;
            };
            V_Link.prototype.SetLoop = function (loopNum) {
                this.Loop = loopNum;
                var cp = this.Next;
                while (cp != this) {
                    cp.Loop = loopNum;
                    cp = cp.Next;
                }
            };
            V_Link.prototype.IsSampeLoop = function (other) {
                if (this == other)
                    return true;
                var cp = this.Next;
                while (cp != this) {
                    if (cp == other)
                        return true;
                    cp = cp.Next;
                }
                return false;
            };
            V_Link.prototype.GetIndics = function () {
                var result = new Array();
                result.push(this.Index);
                var cp = this.Next;
                while (cp != this) {
                    result.push(cp.Index);
                    cp = cp.Next;
                }
                return result;
            };
            V_Link.CreateLoop = function (indics, loop) {
                var start = new V_Link();
                start.Index = indics[0];
                var prev = start;
                for (var i = 1; i < indics.length; i++) {
                    var cur = new V_Link();
                    cur.Index = indics[i];
                    cur.Loop = loop;
                    prev.Next = cur;
                    prev = cur;
                }
                prev.Next = start;
                return start;
            };
            return V_Link;
        }());
        var Map = (function () {
            function Map() {
                this._keys = new Array();
                this._value = new Array();
            }
            Map.prototype.getValue = function (key) {
                var idx = this._keys.indexOf(key);
                if (idx < 0)
                    return null;
                return this._value[idx];
            };
            Map.prototype.setValue = function (key, val) {
                var idx = this._keys.indexOf(key);
                if (idx >= 0) {
                    this._value[idx] = val;
                }
                else {
                    this._keys.push(key);
                    this._value.push(val);
                }
            };
            Object.defineProperty(Map.prototype, "Count", {
                get: function () {
                    return this._keys.length;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Map.prototype, "Keys", {
                get: function () {
                    return this._keys;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Map.prototype, "Values", {
                get: function () {
                    return this._value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Map.prototype, "KeyValues", {
                get: function () {
                    var result = new Array();
                    for (var i = 0; i < this._keys.length; i++) {
                        result.push({ key: this._keys[i], value: this._value[i] });
                    }
                    return result;
                },
                enumerable: true,
                configurable: true
            });
            return Map;
        }());
    })(Geom = U1.Geom || (U1.Geom = {}));
})(U1 || (U1 = {}));
///<reference path="../Math/U1Math.ts"/> 
///<reference path="../Math/CGAL.ts"/> 
var U1;
(function (U1) {
    var Geom;
    (function (Geom) {
        var Polygon2 = U1.CGAL.Polygon2;
        Geom.EPSILON = 0.00001;
        (function (FaceStates) {
            FaceStates[FaceStates["None"] = 0] = "None";
            FaceStates[FaceStates["Cutted"] = 2] = "Cutted";
            FaceStates[FaceStates["Cap"] = 4] = "Cap";
            FaceStates[FaceStates["Flat"] = 8] = "Flat";
        })(Geom.FaceStates || (Geom.FaceStates = {}));
        var FaceStates = Geom.FaceStates;
        function EqualNumbers(a, b) {
            if (a != b) {
                if (a == null || b == null)
                    return false;
                if (a.length != b.length)
                    return false;
                for (var i = 0; i < a.length; i++) {
                    if (a[i] != b[i])
                        return false;
                }
            }
            return true;
        }
        Geom.EqualNumbers = EqualNumbers;
        function EqualValues(a, b) {
            if (a != b) {
                if (a == null || b == null)
                    return false;
                if (a.length != b.length)
                    return false;
                for (var i = 0; i < a.length; i++) {
                    if (!a[i].Equals(b[i]))
                        return false;
                }
            }
            return true;
        }
        Geom.EqualValues = EqualValues;
        function GenKey() {
            var values = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                values[_i - 0] = arguments[_i];
            }
            var result = "";
            values.forEach(function (o_) { return result = result + "-" + o_; });
            return result;
        }
        (function (ShellContainsEnums) {
            ShellContainsEnums[ShellContainsEnums["Outside"] = 0] = "Outside";
            ShellContainsEnums[ShellContainsEnums["Inside"] = 1] = "Inside";
            ShellContainsEnums[ShellContainsEnums["OnSurface"] = 2] = "OnSurface";
        })(Geom.ShellContainsEnums || (Geom.ShellContainsEnums = {}));
        var ShellContainsEnums = Geom.ShellContainsEnums;
        var Shell = (function () {
            function Shell() {
                this._mesh = null;
                this._boundingBox = new U1.BoundingBox();
                this._boudningBoxInvalid = true;
            }
            Object.defineProperty(Shell.prototype, "BoundingBox", {
                //begin Props
                get: function () {
                    if (this._boudningBoxInvalid) {
                        this._boudningBoxInvalid = false;
                        this.UpdateBoundingBox(this._boundingBox);
                    }
                    return this._boundingBox;
                },
                enumerable: true,
                configurable: true
            });
            //end props
            Shell.prototype.CheckInside = function (p) {
                var min = this.BoundingBox.Min;
                var max = this.BoundingBox.Max;
                if (p.X < min.X)
                    return ShellContainsEnums.Outside;
                if (p.Y < min.Y)
                    return ShellContainsEnums.Outside;
                if (p.Z < min.Z)
                    return ShellContainsEnums.Outside;
                if (p.X > max.X)
                    return ShellContainsEnums.Outside;
                if (p.Y > max.Y)
                    return ShellContainsEnums.Outside;
                if (p.Z > max.Z)
                    return ShellContainsEnums.Outside;
                var mesh = this.GetMesh();
                var ray = new U1.Ray3();
                ray.Position.CopyFrom(p);
                var randVects = U1.RandomVector3();
                var isect = { front: 0, back: 0, surface: 0 };
                for (var i = 0; i < randVects.length; i++) {
                    ray.Direction.CopyFrom(randVects[i]);
                    mesh.IntersectCount(ray, isect);
                    if (isect.surface > 0) {
                        return ShellContainsEnums.OnSurface;
                    }
                    isect.front %= 2;
                    isect.back %= 2;
                    if (isect.front == isect.back) {
                        if (isect.front == 1) {
                            return ShellContainsEnums.Inside;
                        }
                    }
                }
                return ShellContainsEnums.Outside;
            };
            Shell.prototype.Refresh = function () {
                for (var _i = 0, _a = this.Faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    face.Update(this.Vertics, true);
                }
            };
            Shell.prototype.UpdateBoundingBox = function (boundingBox) {
                var min = U1.Vector3.MaxValue;
                var max = U1.Vector3.MinValue;
                for (var _i = 0, _a = this.Faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    //face.GetVertexIndices(pIndics);
                    for (var _b = 0, _c = face.Boundary; _b < _c.length; _b++) {
                        var idx = _c[_b];
                        min.Minimize(this.Vertics[idx]);
                        max.Maximize(this.Vertics[idx]);
                    }
                }
                boundingBox.Min = min;
                boundingBox.Max = max;
            };
            Shell.prototype.UpdateEdges = function () {
                var edge_map = {};
                for (var _i = 0, _a = this.Faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    face.Update(this.Vertics);
                    TEdge.InsertEdges(edge_map, face.Boundary, face.Normal);
                    if (face.Holes != null) {
                        for (var _b = 0, _c = face.Holes; _b < _c.length; _b++) {
                            var hole = _c[_b];
                            TEdge.InsertEdges(edge_map, hole, face.Normal);
                        }
                    }
                }
                var interiors = new Array();
                var perimeters = new Array();
                for (var key in edge_map) {
                    var edge = edge_map[key];
                    if (edge.IsInterior) {
                        interiors.push(edge.V0);
                        interiors.push(edge.V1);
                    }
                }
                for (var key in edge_map) {
                    var edge = edge_map[key];
                    if (edge.IsPerimeter) {
                        perimeters.push(edge.V0);
                        perimeters.push(edge.V1);
                    }
                }
                if (this instanceof ShellCutted) {
                    this.GetCuttingEdges()
                        .forEach(function (o_) { return perimeters.push(o_); });
                }
                this._interiorEdges = interiors;
                this._perimeterEdges = perimeters;
            };
            Shell.prototype.CalOutlineEdges = function (look) {
                var used_edges = {};
                var inEdges = this.GetInteriorEdges();
                var peEdges = this.GetPerimeterEdges();
                for (var i = 0; i < inEdges.length; i += 2) {
                    var key = GenKey(inEdges[i], inEdges[i + 1]);
                    used_edges[key] = true;
                }
                for (var i = 0; i < peEdges.length; i += 2) {
                    var key = GenKey(peEdges[i], peEdges[i + 1]);
                    used_edges[key] = true;
                }
                var edge_map = {};
                for (var _i = 0, _a = this.Faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    face.Update(this.Vertics);
                    TEdge.InsertEdges(edge_map, face.Boundary, face.Normal, used_edges);
                    if (face.Holes != null) {
                        for (var _b = 0, _c = face.Holes; _b < _c.length; _b++) {
                            var hole = _c[_b];
                            TEdge.InsertEdges(edge_map, hole, face.Normal, used_edges);
                        }
                    }
                }
                var outlines = new Array();
                for (var k_ in edge_map) {
                    var edge = edge_map[k_];
                    if (edge.IsOutline(look)) {
                        outlines.push(edge.V0);
                        outlines.push(edge.V1);
                    }
                }
                return outlines;
            };
            Shell.prototype.GetInteriorEdges = function () {
                if (this._interiorEdges == null) {
                    this.UpdateEdges();
                }
                return this._interiorEdges;
            };
            Shell.prototype.GetPerimeterEdges = function () {
                if (this._perimeterEdges == null) {
                    this.UpdateEdges();
                }
                return this._perimeterEdges;
            };
            Shell.prototype.GetOutlineEdges = function (look) {
                var key = look.toString();
                if (this._outlineEdges != null && this._outlineEdges[key])
                    return this._outlineEdges[key];
                if (this._outlineEdges == null)
                    this._outlineEdges = {};
                this._outlineEdges[key] = this.CalOutlineEdges(look);
                return this._outlineEdges[key];
            };
            Shell.prototype.IntersectsBoundingBoxPlane = function (plane) {
                return plane.IntersectsBoundingBox(this.BoundingBox);
            };
            Shell.prototype.Intersects = function (plane) {
                var isect_bounding = this.IntersectsBoundingBoxPlane(plane);
                if (isect_bounding == U1.PlaneIntersectionTypeEnum.Back ||
                    isect_bounding == U1.PlaneIntersectionTypeEnum.Front) {
                    return isect_bounding;
                }
                var result = null;
                for (var _i = 0, _a = this.Faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    var isect = Geom.Face.PlaneIntersection(face.Boundary, this.Vertics, plane);
                    if (isect == U1.PlaneIntersectionTypeEnum.Intersecting)
                        return U1.PlaneIntersectionTypeEnum.Intersecting;
                    if (result == null)
                        result = isect;
                    else {
                        if (result != isect)
                            return U1.PlaneIntersectionTypeEnum.Intersecting;
                    }
                }
                if (result == null)
                    return U1.PlaneIntersectionTypeEnum.Front;
                return result;
            };
            Shell.prototype.GetMesh = function () {
                if (this._mesh != null)
                    return this._mesh;
                var hasVertexNormal = this.VertexNormals != null && this.VertexNormals.length == this.Vertics.length;
                var vtxList = new Array();
                var vnomList = hasVertexNormal ? this.VertexNormals.slice() : new Array();
                var fidxList = new Array();
                for (var vi = 0; vi < this.Vertics.length; vi++) {
                    var vtx = new U1.MeshVertex();
                    vtx.Position = this.Vertics[vi];
                    vtx.Normal = this.VertexNormals != null && this.VertexNormals.length > vi ? this.VertexNormals[vi] : U1.Vector3.Zero,
                        vtx.UV = this.UVs != null && this.UVs.length > vi ? this.UVs[vi] : U1.Vector2.Zero;
                    vtxList.push(vtx);
                }
                for (var _i = 0, _a = this.Faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    face.Update(this.Vertics);
                    var useFaceNormal = !hasVertexNormal || face.IsCap || face.IsFlat;
                    var tri_faces = face.Tesselate(this.Vertics);
                    if (useFaceNormal) {
                        var vamp = {};
                        var fnormal = face.Normal;
                        for (var _b = 0, tri_faces_1 = tri_faces; _b < tri_faces_1.length; _b++) {
                            var i = tri_faces_1[_b];
                            if (vamp[i] == null) {
                                var ni = vtxList.length;
                                vamp[i] = ni;
                                fidxList.push(ni);
                                var vtx = new U1.MeshVertex();
                                vtx.Position = this.Vertics[i];
                                vtx.Normal = fnormal;
                                vtx.UV = U1.Vector2.Zero;
                                vtxList.push(vtx);
                            }
                            else {
                                fidxList.push(vamp[i]);
                            }
                        }
                    }
                    else {
                        tri_faces.forEach(function (v_, i_, arr_) { return fidxList.push(v_); });
                    }
                }
                this._mesh = new U1.MeshData();
                this._mesh.Vertices = vtxList;
                this._mesh.Indexes = fidxList;
                return this._mesh;
            };
            Shell.prototype.GetBack = function (plane) {
                var result = this.CutWithPlane(plane);
                return result.back;
            };
            Shell.prototype.GetFront = function (plane) {
                var result = this.CutWithPlane(plane);
                return result.front;
            };
            Shell.prototype.CutWithPlane = function (plane, capFront, capBack) {
                if (capFront === void 0) { capFront = true; }
                if (capBack === void 0) { capBack = true; }
                var front = null;
                var back = null;
                var isect = this.Intersects(plane);
                if (isect == U1.PlaneIntersectionTypeEnum.Front) {
                    return { front: this };
                }
                else if (isect == U1.PlaneIntersectionTypeEnum.Back) {
                    return { back: this };
                }
                var old_points_num = this.Vertics.length;
                var points = this.Vertics.slice();
                var added_points = new Array();
                var add_point = function (p_) {
                    for (var i = 0; i < added_points.length; i++) {
                        if (U1.Vector3.DistanceSquared(p_, added_points[i]) < Geom.EPSILON) {
                            return old_points_num + i;
                        }
                    }
                    added_points.push(p_);
                    points.push(p_);
                    return points.length - 1;
                };
                var fronts = new Array();
                var backs = new Array();
                for (var _i = 0, _a = this.Faces; _i < _a.length; _i++) {
                    var f = _a[_i];
                    f.Update(this.Vertics);
                    f.Cut(points, plane, add_point, fronts, backs);
                }
                if (fronts.length > 0) {
                    front = new ShellCutted();
                    front.Vertics = points.map(function (o_) { return o_.Clone(); });
                    front.Faces = fronts.map(function (o_) { return o_.Clone(); });
                    front.CuttingPlan = plane;
                    front.IsFrontSide = true;
                    if (capFront)
                        front.Cap();
                    ;
                }
                if (backs.length > 0) {
                    back = new ShellCutted();
                    back.Vertics = points.map(function (o_) { return o_.Clone(); });
                    back.Faces = backs.map(function (o_) { return o_.Clone(); });
                    //back.RemoveUnusedPoints();
                    back.CuttingPlan = plane;
                    back.IsFrontSide = false;
                    if (capBack)
                        back.Cap();
                }
                return {
                    front: front,
                    back: back
                };
            };
            Shell.prototype.ConvertFromStr = function (value) {
                var jsonObj = JSON.parse(value);
                if (jsonObj["Vertics"] && jsonObj["Vertics"] instanceof Array) {
                    this.Vertics = jsonObj["Vertics"]
                        .filter(function (o_) { return typeof o_ === "string"; })
                        .map(function (o_) {
                        var v = new U1.Vector3();
                        v.ConvertFromStr(o_);
                        return v;
                    });
                }
                ;
                if (jsonObj["VertexNormals"] && jsonObj["VertexNormals"] instanceof Array) {
                    this.VertexNormals = jsonObj["VertexNormals"]
                        .filter(function (o_) { return typeof o_ === "string"; })
                        .map(function (o_) {
                        var v = new U1.Vector3();
                        v.ConvertFromStr(o_);
                        return v;
                    });
                }
                ;
                if (jsonObj["UVs"] && jsonObj["UVs"] instanceof Array) {
                    this.UVs = jsonObj["UVs"]
                        .filter(function (o_) { return typeof o_ === "string"; })
                        .map(function (o_) {
                        var v = new U1.Vector2();
                        v.ConvertFromStr(o_);
                        return v;
                    });
                }
                ;
                if (jsonObj["Faces"] && jsonObj["Faces"] instanceof Array) {
                    this.Faces = jsonObj["Faces"]
                        .filter(function (o_) { return typeof o_ === "string"; })
                        .map(function (o_) {
                        var f = new Geom.Face();
                        f.ConvertFromStr(o_);
                        return f;
                    });
                }
                ;
            };
            Shell.prototype.ConvertToStr = function () {
                var jsonObj = {
                    Vertics: this.Vertics != null ? this.Vertics.map(function (o_) { return o_.ConvertToStr(); }) : null,
                    VertexNormals: this.VertexNormals != null ? this.VertexNormals.map(function (o_) { return o_.ConvertToStr(); }) : null,
                    UVs: this.UVs != null ? this.UVs.map(function (o_) { return o_.ConvertToStr(); }) : null,
                    Faces: this.Faces != null ? this.Faces.map(function (o_) { return o_.ConvertToStr(); }) : null
                };
                return JSON.stringify(jsonObj);
            };
            Shell.prototype.CopyFrom = function (other) {
                if (!(other instanceof Shell))
                    return;
                var othShell = (other);
                this.Vertics = othShell.Vertics != null ? othShell.Vertics.map(function (o_) { return o_.Clone(); }) : null;
                this.VertexNormals = othShell.VertexNormals != null ? othShell.VertexNormals.map(function (o_) { return o_.Clone(); }) : null;
                this.Colors = othShell.Colors != null ? othShell.Colors.map(function (o_) { return o_.Clone(); }) : null;
                this.UVs = othShell.UVs != null ? othShell.UVs.map(function (o_) { return o_.Clone(); }) : null;
                this.Faces = othShell.Faces != null ? othShell.Faces.map(function (o_) { return o_.Clone(); }) : null;
            };
            Shell.prototype.Equals = function (other) {
                if (this === other)
                    return true;
                if (!(other instanceof Shell))
                    return false;
                var othShell = other;
                if (this.Vertics !== othShell.Vertics) {
                    if (this.Vertics == null || othShell.Vertics == null)
                        return false;
                    if (this.Vertics.length != othShell.Vertics.length)
                        return false;
                    for (var i = 0; i < this.Vertics.length; i++) {
                        if (!this.Vertics[i].Equals(othShell.Vertics[i]))
                            return false;
                    }
                }
                if (this.Colors !== othShell.Colors) {
                    if (this.Colors == null || othShell.Colors == null)
                        return false;
                    if (this.Colors.length != othShell.Colors.length)
                        return false;
                    for (var i = 0; i < this.Colors.length; i++) {
                        if (!this.Colors[i].Equals(othShell.Colors[i]))
                            return false;
                    }
                }
                if (this.UVs !== othShell.UVs) {
                    if (this.UVs == null || othShell.UVs == null)
                        return false;
                    if (this.UVs.length != othShell.UVs.length)
                        return false;
                    for (var i = 0; i < this.UVs.length; i++) {
                        if (!this.UVs[i].Equals(othShell.UVs[i]))
                            return false;
                    }
                }
                if (this.Faces !== othShell.Faces) {
                    if (this.Faces == null || othShell.Faces == null)
                        return false;
                    if (this.Faces.length != othShell.Faces.length)
                        return false;
                    for (var i = 0; i < this.Faces.length; i++) {
                        if (!this.Faces[i].Equals(othShell.Faces[i]))
                            return false;
                    }
                }
                return true;
            };
            Shell.prototype.Clone = function () {
                var result = new Shell();
                result.Vertics = this.Vertics != null ? this.Vertics.map(function (o_) { return o_.Clone(); }) : null;
                result.VertexNormals = this.VertexNormals != null ? this.VertexNormals.map(function (o_) { return o_.Clone(); }) : null;
                result.Colors = this.Colors != null ? this.Colors.map(function (o_) { return o_.Clone(); }) : null;
                result.UVs = this.UVs != null ? this.UVs.map(function (o_) { return o_.Clone(); }) : null;
                result.Faces = this.Faces != null ? this.Faces.map(function (o_) { return o_.Clone(); }) : null;
                return result;
            };
            Shell.prototype.GetAddPointFunc = function (last_) {
                var _this = this;
                if (last_ === void 0) { last_ = 0; }
                var add_point = function (p_) {
                    for (var i = last_; i < _this.Vertics.length; i++) {
                        if (U1.Vector3.DistanceSquared(p_, _this.Vertics[i]) < Geom.EPSILON) {
                            return i;
                        }
                    }
                    _this.Vertics.push(p_);
                    return _this.Vertics.length - 1;
                };
                return add_point;
            };
            /**
            * 현재 셀을 면으로 분할
            */
            Shell.prototype.CutWithShell = function (other) {
                var _this = this;
                var add_point = this.GetAddPointFunc();
                var aShellBB = this.BoundingBox;
                var bFaces = other.Faces;
                var bVertics = other.Vertics;
                var bShellBB = other.BoundingBox;
                var bPlane = U1.Plane.New();
                var cuttedFaces = new Array();
                for (var bi = 0; bi < bFaces.length; bi++) {
                    var bFace = bFaces[bi];
                    if (!bFace.BoundingBox.IntersectsBoundingBox(aShellBB))
                        continue;
                    var nc = this.Faces.length;
                    bPlane.SetFromPointNormal(bFace.Orign, bFace.Normal);
                    for (var ai = nc - 1; ai >= 0; ai--) {
                        var aFace = this.Faces[ai];
                        if (!aFace.BoundingBox.IntersectsBoundingBox(bShellBB))
                            continue;
                        if (Geom.Face.TestIntersectFast(this.Vertics, aFace, bVertics, bFace)) {
                            this.Faces.splice(ai, 1);
                            aFace.Cut(this.Vertics, bPlane, add_point, cuttedFaces, cuttedFaces);
                        }
                    }
                    if (cuttedFaces.length > 0) {
                        cuttedFaces.forEach(function (o_) {
                            o_.Update(_this.Vertics, true);
                            _this.Faces.push(o_);
                        });
                        cuttedFaces.length = 0;
                    }
                }
                bPlane.Release();
            };
            Shell.prototype.Merge = function (other) {
                var _this = this;
                var vi = this.Vertics.length;
                var add_func = this.GetAddPointFunc();
                var vmap = {};
                other.Vertics
                    .forEach(function (o_, i_) {
                    var ni = add_func(o_);
                    vmap[i_] = ni;
                });
                other.Faces.forEach(function (o_) {
                    var nf = o_.Clone();
                    nf.ReplaceIndics(vmap);
                    _this.Faces.push(nf);
                });
            };
            Shell.prototype.RemoveUnusedPoints = function () {
                var pIndics = {};
                for (var _i = 0, _a = this.Faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    face.GetPointIndics(pIndics);
                }
                var imap = {};
                var new_points = new Array();
                var new_uvs = new Array();
                var new_colors = new Array();
                var new_vnormals = new Array();
                for (var i = 0; i < this.Vertics.length; i++) {
                    if (pIndics[i] == true) {
                        imap[i] = new_points.length;
                        new_points.push(this.Vertics[i]);
                        if (this.UVs != null && i < this.UVs.length)
                            new_uvs.push(this.UVs[i]);
                        if (this.VertexNormals != null && i < this.VertexNormals.length)
                            new_vnormals.push(this.VertexNormals[i]);
                    }
                }
                for (var _b = 0, _c = this.Faces; _b < _c.length; _b++) {
                    var face = _c[_b];
                    face.ReplaceIndics(imap);
                }
                this.Vertics = new_points;
                this.UVs = new_uvs.length > 0 ? new_uvs : null;
                this.VertexNormals = new_vnormals.length > 0 ? new_vnormals : null;
            };
            Shell.prototype.GetSubShells = function () {
                var vgroup = {};
                this.Vertics.forEach(function (o_, i_) {
                    vgroup[i_] = -1;
                });
                return null;
            };
            Shell.prototype.Flip = function () {
                this.Faces.forEach(function (o_) { return o_.Flip(); });
            };
            /**
             차집합
            */
            Shell.Difference = function (a, b) {
                var aShell = a.Clone();
                var bShell = b.Clone();
                aShell.CutWithShell(b);
                bShell.CutWithShell(a);
                var aFaces = new Array();
                var bFaces = new Array();
                aShell.Faces.forEach(function (o_) {
                    var tp = o_.GetArbitraryInsidePoint(aShell.Vertics);
                    if (b.CheckInside(tp) != ShellContainsEnums.Inside) {
                        aFaces.push(o_);
                    }
                });
                bShell.Faces.forEach(function (o_) {
                    var tp = o_.GetArbitraryInsidePoint(bShell.Vertics);
                    if (a.CheckInside(tp) == ShellContainsEnums.Inside) {
                        bFaces.push(o_);
                    }
                });
                aShell.Faces = aFaces;
                bShell.Faces = bFaces;
                bShell.Flip();
                aShell.Merge(bShell);
                aShell.RemoveUnusedPoints();
                return [aShell];
            };
            /**
             교집합
            */
            Shell.Intersection = function (a, b) {
                return null;
            };
            /**
             합집합
            */
            Shell.Join = function (a, b) {
                return null;
            };
            Shell.MaxCuttedCache = 5;
            return Shell;
        }());
        Geom.Shell = Shell;
        var ShellCutted = (function (_super) {
            __extends(ShellCutted, _super);
            function ShellCutted() {
                _super.call(this);
            }
            ShellCutted.prototype.GetCuttingEdges = function () {
                var result = new Array();
                for (var _i = 0, _a = this.Faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    if ((face.State & FaceStates.Cutted) == FaceStates.Cutted)
                        face.GetCuttingEdges(this.Vertics, this.CuttingPlan, result);
                }
                return result;
            };
            ShellCutted.prototype.IsCapped = function () {
                return this.CappingFaces != null;
            };
            ShellCutted.prototype.Cap = function () {
                var cuttingSegments = this.GetCuttingEdges();
                if (cuttingSegments.length == 0)
                    return false;
                var loops = ShellCutted.FindLoops(cuttingSegments);
                var normal = this.CuttingPlan.Normal;
                if (this.IsFrontSide)
                    normal.Negate();
                var u = U1.Vector3.Zero;
                var v = U1.Vector3.Zero;
                U1.GeometryHelper3.GetArbitraryAxis(normal, u, v);
                var ivmap = {};
                var vimap = {};
                for (var i = 0; i < cuttingSegments.length; i++) {
                    var pi = cuttingSegments[i];
                    var v2 = Geom.Face.Project(this.Vertics[pi], u, v);
                    vimap[v2.toString()] = pi;
                    ivmap[pi] = v2;
                }
                var loopsAll = loops
                    .map(function (o_) { return o_.map(function (k_) { return ivmap[k_]; }); });
                var pwhs = ShellCutted.CollectPolygonWithHoles(loopsAll);
                if (pwhs.length == 0)
                    return false;
                this.CappingFaces = Geom.Face.CreateFaces(pwhs, vimap, ivmap, FaceStates.Cap);
                var faces = this.Faces;
                this.CappingFaces.forEach(function (o_) { return faces.push(o_); });
                this.Faces = faces;
                return true;
            };
            ShellCutted.CollectPolygonWithHoles = function (loops) {
                var pwhs = loops
                    .map(function (o_) {
                    var pgon_ = new Polygon2(o_);
                    if (pgon_.IsCW())
                        pgon_.Reverse();
                    var pwh_ = new U1.CGAL.PolygonWithHoles2(pgon_);
                    return pwh_;
                });
                for (var i = pwhs.length - 1; i > 0; i--) {
                    var src = pwhs[i];
                    for (var j = 0; j < i; j++) {
                        var tgt = pwhs[j];
                        if (!tgt.OuterBoundary.DoIntersectEdge(src.OuterBoundary)) {
                            //교차하지 않으면서 
                            if (tgt.OuterBoundary.HasOnBoundedSide(src.OuterBoundary.Points[0])) {
                                if (src.HasHoles) {
                                    src.Holes.map(function (pgon) {
                                        pgon.Reverse();
                                        return new U1.CGAL.PolygonWithHoles2(pgon);
                                    })
                                        .forEach(function (pwh_) {
                                        pwhs.push(pwh_);
                                    });
                                }
                                pwhs.splice(i, 1);
                                var hole = src.OuterBoundary;
                                hole.Reverse();
                                var holes = [hole];
                                if (tgt.Holes != null)
                                    tgt.Holes.forEach(function (hole_) { return holes.push(hole_); });
                                tgt.Holes = holes;
                            }
                            else if (src.OuterBoundary.HasOnBoundedSide(tgt.OuterBoundary.Points[0])) {
                                if (tgt.HasHoles) {
                                    tgt.Holes
                                        .map(function (pgon) {
                                        pgon.Reverse();
                                        return new U1.CGAL.PolygonWithHoles2(pgon);
                                    })
                                        .forEach(function (pwh_) { return pwhs.push(pwh_); });
                                }
                                pwhs.splice(i, 1);
                                var hole = tgt.OuterBoundary;
                                hole.Reverse();
                                var holes = [hole];
                                if (src.Holes != null)
                                    src.Holes.forEach(function (hole_) { return holes.push(hole_); });
                                src.Holes = holes;
                                pwhs[j] = src;
                            }
                            else {
                                continue;
                            }
                            break;
                        }
                    }
                }
                return pwhs;
            };
            ShellCutted.FindLoops = function (edges) {
                var loops = new Array();
                for (var i = 0; i < edges.length; i += 2) {
                    var s = edges[i];
                    var e = edges[i + 1];
                    var isAdded = false;
                    for (var j = 0; j < loops.length; j++) {
                        var loop = loops[j];
                        var ts = loop[0];
                        var te = loop[loop.length - 1];
                        if ((ts == s && te == e) ||
                            te == s && ts == e) {
                            isAdded = true;
                            break;
                        }
                        if (ts == s)
                            loop.unshift(e);
                        else if (ts == e)
                            loop.unshift(s);
                        else if (te == s)
                            loop.push(e);
                        else if (te == e)
                            loop.push(s);
                        else
                            continue;
                        isAdded = true;
                        break;
                    }
                    if (!isAdded) {
                        loops.push([s, e]);
                    }
                }
                for (var i = loops.length - 1; i >= 0; i--) {
                    var src = loops[i];
                    var ss = src[0];
                    var se = src[src.length - 1];
                    if (ss == se)
                        continue;
                    for (var j = 0; j < i; j++) {
                        var tgt = loops[j];
                        var ts = tgt[0];
                        var te = tgt[tgt.length - 1];
                        if (ts == te)
                            continue;
                        if (se == ts) {
                            tgt.shift();
                            tgt.forEach(function (o_) { return src.push(o_); });
                            loops[j] = src;
                        }
                        else if (se == te) {
                            tgt.reverse();
                            tgt.shift();
                            src.forEach(function (o_) { return tgt.push(o_); });
                            loops[j] = src;
                        }
                        else if (te == ss) {
                            src.shift();
                            src.forEach(function (o_) { return tgt.push(o_); });
                        }
                        else if (te == se) {
                            src.reverse();
                            src.shift();
                            tgt.forEach(function (o_) { return src.push(o_); });
                        }
                        else {
                            continue;
                        }
                        loops.splice(i, 1);
                        break;
                    }
                }
                for (var i = loops.length - 1; i >= 0; i--) {
                    var loop = loops[i];
                    if (loop[0] == loop[loop.length - 1]) {
                        loop.pop();
                    }
                }
                return loops;
            };
            return ShellCutted;
        }(Shell));
        Geom.ShellCutted = ShellCutted;
        var TEdge = (function () {
            function TEdge() {
                this.FC = 0;
            }
            Object.defineProperty(TEdge.prototype, "IsPerimeter", {
                get: function () {
                    return this.FC == 1;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(TEdge.prototype, "IsInterior", {
                get: function () {
                    if (this.FC == 2) {
                        var d = U1.Vector3.Dot(this.N1, this.N2);
                        if (d < 0.4) {
                            return true;
                        }
                    }
                    return false;
                },
                enumerable: true,
                configurable: true
            });
            TEdge.prototype.IsOutline = function (dir) {
                //인접한 두면이 서로 반대로 있는 경우
                if (this.FC < 2)
                    return false;
                var d1 = U1.Vector3.Dot(dir, this.N1);
                var d2 = U1.Vector3.Dot(dir, this.N2);
                return d1 * d2 <= 0;
            };
            TEdge.InsertEdges = function (edges, polygon, face_normal, usedEdges) {
                if (usedEdges === void 0) { usedEdges = null; }
                var pi = polygon.length - 1;
                for (var i = 0; i < polygon.length; pi = i, i++) {
                    var v0 = polygon[pi];
                    var v1 = polygon[i];
                    if (v0 > v1) {
                        var t = v0;
                        v0 = v1;
                        v1 = t;
                    }
                    var key = GenKey(v0, v1);
                    if (usedEdges != null && usedEdges[key] === true)
                        continue;
                    var edge = edges[key];
                    if (edge == null) {
                        edge = new TEdge();
                        edge.V0 = v0;
                        edge.V1 = v1;
                        edges[key] = edge;
                    }
                    edge.FC++;
                    if (edge.FC == 1)
                        edge.N1 = face_normal;
                    else if (edge.FC == 2)
                        edge.N2 = face_normal;
                }
            };
            return TEdge;
        }());
    })(Geom = U1.Geom || (U1.Geom = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var Graphics;
    (function (Graphics) {
        (function (FontStyleEnum) {
            FontStyleEnum[FontStyleEnum["Normal"] = 0] = "Normal";
            FontStyleEnum[FontStyleEnum["Italic"] = 1] = "Italic";
            FontStyleEnum[FontStyleEnum["Oblique"] = 2] = "Oblique";
        })(Graphics.FontStyleEnum || (Graphics.FontStyleEnum = {}));
        var FontStyleEnum = Graphics.FontStyleEnum;
        (function (FontWeightEnum) {
            FontWeightEnum[FontWeightEnum["Normal"] = 0] = "Normal";
            FontWeightEnum[FontWeightEnum["Black"] = 1] = "Black";
            FontWeightEnum[FontWeightEnum["Bold"] = 2] = "Bold";
            FontWeightEnum[FontWeightEnum["DemiBold"] = 3] = "DemiBold";
            FontWeightEnum[FontWeightEnum["ExtraBlack"] = 4] = "ExtraBlack";
            FontWeightEnum[FontWeightEnum["ExtraBold"] = 5] = "ExtraBold";
            FontWeightEnum[FontWeightEnum["ExtraLight"] = 6] = "ExtraLight";
            FontWeightEnum[FontWeightEnum["Heavy"] = 7] = "Heavy";
            FontWeightEnum[FontWeightEnum["Light"] = 8] = "Light";
            FontWeightEnum[FontWeightEnum["Medium"] = 9] = "Medium";
            FontWeightEnum[FontWeightEnum["Regular"] = 10] = "Regular";
            FontWeightEnum[FontWeightEnum["SemiBold"] = 11] = "SemiBold";
            FontWeightEnum[FontWeightEnum["Thin"] = 12] = "Thin";
            FontWeightEnum[FontWeightEnum["UltraBlack"] = 13] = "UltraBlack";
            FontWeightEnum[FontWeightEnum["UltraBold"] = 14] = "UltraBold";
            FontWeightEnum[FontWeightEnum["UltraLight"] = 15] = "UltraLight";
        })(Graphics.FontWeightEnum || (Graphics.FontWeightEnum = {}));
        var FontWeightEnum = Graphics.FontWeightEnum;
        var MeshChar = (function () {
            function MeshChar() {
            }
            Object.defineProperty(MeshChar.prototype, "Faces", {
                get: function () {
                    if (this._faces == null) {
                        this._faces = this.Tessellate();
                    }
                    return this._faces;
                },
                enumerable: true,
                configurable: true
            });
            MeshChar.prototype.Tessellate = function () {
                if (this.Outlines == null)
                    return;
                var trian = new U1.Triangulations.PolygonTriangulation2();
                for (var i = 0; i < this.Outlines.length; i++) {
                    trian.Fill(this.Outlines[i]);
                }
                var mesh = trian.GetMesh();
                var faces = new Array();
                for (var i = 0; i < mesh.FList.length; i++) {
                    var face = mesh.FList[i];
                    faces.push(mesh.VList[face.V0]);
                    faces.push(mesh.VList[face.V1]);
                    faces.push(mesh.VList[face.V2]);
                }
                return faces;
            };
            MeshChar.prototype.Read = function (data) {
                this.Outlines = new Array();
                var idx = 0;
                this.Width = data[idx++]; // 폰트 폭     //폰트 배치시 사용
                this.Height = data[idx++]; // 폰트 높이
                var min_x = data[idx++]; // 외곽선 최소값 X
                var min_y = data[idx++]; // 외곽선 최소값 Y
                var max_x = data[idx++]; // 외곽선 최대값 X 
                var max_y = data[idx++]; // 외곽선 최대값 Y
                var size_x = max_x - min_x; //외곽선 폭
                var size_y = max_y - min_y; //외곽선 높이 
                var num_polygon = data[idx++];
                for (var i = 0; i < num_polygon; i++) {
                    var pgon = new Array();
                    //저장된 외곽선 좌표는 0~255 범위의 정수값으로 저장되어 있다.
                    while (true) {
                        var bx = data[idx++];
                        var by = data[idx++];
                        if (bx >= 255 && by >= 255) {
                            this.Outlines.push(pgon);
                            break;
                        }
                        var x = (bx / 250 * size_x) + min_x;
                        var y = (by / 250 * size_y) + min_y;
                        pgon.push(new U1.Vector2(x, y));
                    }
                }
            };
            MeshChar.tMin = U1.Vector2.Zero;
            MeshChar.tMax = U1.Vector2.Zero;
            return MeshChar;
        }());
        Graphics.MeshChar = MeshChar;
        var MeshFont = (function () {
            function MeshFont() {
                this.Chars = {};
            }
            MeshFont.prototype.GetChar = function (c) {
                return this.Chars[c];
            };
            MeshFont.prototype.GetMesh = function (text, fontSize, width, height, isMultiline) {
                var trifaces = new Array();
                var ch_num = text.length;
                var x = 0.0;
                var y = 0.0;
                var scale = fontSize / 100; //저장시 폰트크기는 100 이다.
                for (var i = 0; i < ch_num; i++) {
                    var c = text.charCodeAt(i);
                    var mc = this.GetChar(c);
                    if (mc == null)
                        continue;
                    var lt = new U1.Vector2(x, y);
                    var faces = mc.Faces;
                    for (var j = 0; j < faces.length; j++) {
                        var np = U1.Vector2.ScaleAdd(faces[j], scale, lt);
                        trifaces.push(np);
                    }
                    x += mc.Width * scale;
                    if (isMultiline && x > width) {
                        x = 0;
                        y += height;
                    }
                }
                return trifaces;
            };
            MeshFont.prototype.GetOutlines = function (text, fontSize, width, height, isMultiline) {
                var result = new Array();
                var ch_num = text.length;
                var x = 0.0;
                var y = 0.0;
                var scale = fontSize / 100;
                for (var i = 0; i < ch_num; i++) {
                    var c = text.charCodeAt(c);
                    var mc = this.GetChar(c);
                    if (mc == null)
                        continue;
                    var lt = new U1.Vector2(x, y);
                    var polygons = mc.Outlines;
                    for (var j = 0; j < polygons.length; j++) {
                        var polygon = polygons[j];
                        var n_polygon = new Array(polygon.length);
                        for (var k = 0; k < polygon.length; k++) {
                            n_polygon[k] = U1.Vector2.ScaleAdd(polygon[k], scale, lt);
                        }
                        result.push(n_polygon);
                    }
                    x += mc.Width * scale;
                    if (isMultiline && x > width) {
                        x = 0;
                        y += height;
                    }
                }
                return result;
            };
            MeshFont.prototype.Read = function (charsData) {
                for (var i = 0; i <= 65535; i++) {
                    var key = "" + i;
                    var charData = charsData[key];
                    if (charData != null) {
                        var char = new MeshChar();
                        char.Read(charData);
                        this.Chars[i] = char;
                    }
                }
            };
            Object.defineProperty(MeshFont, "Default", {
                get: function () {
                    if (MeshFont._default == null) {
                        MeshFont._default = new MeshFont();
                        MeshFont._default.Read(default_font_data);
                    }
                    return MeshFont._default;
                },
                enumerable: true,
                configurable: true
            });
            return MeshFont;
        }());
        Graphics.MeshFont = MeshFont;
    })(Graphics = U1.Graphics || (U1.Graphics = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var LibTess;
    (function (LibTess) {
        var Debug = (function () {
            function Debug() {
            }
            Debug.Assert = function (isTrue) {
            };
            return Debug;
        }());
        (function (WindingRule) {
            WindingRule[WindingRule["EvenOdd"] = 0] = "EvenOdd";
            WindingRule[WindingRule["NonZero"] = 1] = "NonZero";
            WindingRule[WindingRule["Positive"] = 2] = "Positive";
            WindingRule[WindingRule["Negative"] = 3] = "Negative";
            WindingRule[WindingRule["AbsGeqTwo"] = 4] = "AbsGeqTwo";
        })(LibTess.WindingRule || (LibTess.WindingRule = {}));
        var WindingRule = LibTess.WindingRule;
        (function (ElementType) {
            ElementType[ElementType["Polygons"] = 0] = "Polygons";
            ElementType[ElementType["ConnectedPolygons"] = 1] = "ConnectedPolygons";
            ElementType[ElementType["BoundaryContours"] = 2] = "BoundaryContours";
        })(LibTess.ElementType || (LibTess.ElementType = {}));
        var ElementType = LibTess.ElementType;
        (function (ContourOrientation) {
            ContourOrientation[ContourOrientation["Original"] = 0] = "Original";
            ContourOrientation[ContourOrientation["Clockwise"] = 1] = "Clockwise";
            ContourOrientation[ContourOrientation["CounterClockwise"] = 2] = "CounterClockwise";
        })(LibTess.ContourOrientation || (LibTess.ContourOrientation = {}));
        var ContourOrientation = LibTess.ContourOrientation;
        var PQHandle = (function () {
            function PQHandle(handle) {
                if (handle === void 0) { handle = 0; }
                this._handle = handle;
            }
            PQHandle.Invalid = 0x0fffffff;
            return PQHandle;
        }());
        LibTess.PQHandle = PQHandle;
        var Vec3 = (function () {
            function Vec3(X, Y, Z) {
                if (X === void 0) { X = 0; }
                if (Y === void 0) { Y = 0; }
                if (Z === void 0) { Z = 0; }
                this[0] = X;
                this[1] = Y;
                this[2] = Z;
            }
            Object.defineProperty(Vec3, "Zero", {
                get: function () { return new Vec3(); },
                enumerable: true,
                configurable: true
            });
            Vec3.prototype.SetValues = function (x, y, z) {
                this.X = x;
                this.Y = y;
                this.Z = z;
            };
            Vec3.prototype.CopyFrom = function (source) {
                this.X = source.X;
                this.Y = source.Y;
                this.Z = source.Z;
            };
            Object.defineProperty(Vec3.prototype, "X", {
                get: function () {
                    return this[0];
                },
                set: function (value) {
                    this[0] = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "Y", {
                get: function () {
                    return this[1];
                },
                set: function (value) {
                    this[1] = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Vec3.prototype, "Z", {
                get: function () {
                    return this[2];
                },
                set: function (value) {
                    this[2] = value;
                },
                enumerable: true,
                configurable: true
            });
            Vec3.Sub = function (lhs, rhs, result) {
                result.X = lhs.X - rhs.X;
                result.Y = lhs.Y - rhs.Y;
                result.Z = lhs.Z - rhs.Z;
            };
            Vec3.Neg = function (v) {
                v.X = -v.X;
                v.Y = -v.Y;
                v.Z = -v.Z;
            };
            Vec3.Dot = function (u, v) {
                var dot = u.X * v.X + u.Y * v.Y + u.Z * v.Z;
                return dot;
            };
            Vec3.Normalize = function (v) {
                var len = v.X * v.X + v.Y * v.Y + v.Z * v.Z;
                Debug.Assert(len >= 0.0);
                len = 1.0 / Math.sqrt(len);
                v.X *= len;
                v.Y *= len;
                v.Z *= len;
            };
            Vec3.LongAxis = function (v) {
                var i = 0;
                if (Math.abs(v.Y) > Math.abs(v.X))
                    i = 1;
                if (Math.abs(v.Z) > Math.abs(i == 0 ? v.X : v.Y))
                    i = 2;
                return i;
            };
            Vec3.prototype.toString = function () {
                return this.X + ", " + this.Y + ", " + this.Z;
            };
            return Vec3;
        }());
        LibTess.Vec3 = Vec3;
        var Vertex = (function () {
            function Vertex() {
                this._coords = Vec3.Zero;
                this._pqHandle = new PQHandle();
            }
            return Vertex;
        }());
        LibTess.Vertex = Vertex;
        var Face = (function () {
            function Face() {
            }
            Object.defineProperty(Face.prototype, "VertsCount", {
                get: function () {
                    var n = 0;
                    var eCur = this._anEdge;
                    do {
                        n++;
                        eCur = eCur._Lnext;
                    } while (eCur != this._anEdge);
                    return n;
                },
                enumerable: true,
                configurable: true
            });
            return Face;
        }());
        LibTess.Face = Face;
        var EdgePair = (function () {
            function EdgePair() {
            }
            EdgePair.Create = function () {
                var pair = new EdgePair();
                pair._e = new Edge();
                pair._e._pair = pair;
                pair._eSym = new Edge();
                pair._eSym._pair = pair;
                return pair;
            };
            return EdgePair;
        }());
        LibTess.EdgePair = EdgePair;
        var Edge = (function () {
            function Edge() {
            }
            Object.defineProperty(Edge.prototype, "_Rface", {
                get: function () { return this._Sym._Lface; },
                set: function (value) { this._Sym._Lface = value; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Edge.prototype, "_Dst", {
                get: function () { return this._Sym._Org; },
                set: function (value) { this._Sym._Org = value; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Edge.prototype, "_Oprev", {
                get: function () { return this._Sym._Lnext; },
                set: function (value) { this._Sym._Lnext = value; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Edge.prototype, "_Lprev", {
                get: function () { return this._Onext._Sym; },
                set: function (value) { this._Onext._Sym = value; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Edge.prototype, "_Dprev", {
                get: function () { return this._Lnext._Sym; },
                set: function (value) { this._Lnext._Sym = value; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Edge.prototype, "_Rprev", {
                get: function () { return this._Sym._Onext; },
                set: function (value) { this._Sym._Onext = value; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Edge.prototype, "_Dnext", {
                get: function () { return this._Rprev._Sym; },
                set: function (value) { this._Rprev._Sym = value; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Edge.prototype, "_Rnext", {
                get: function () { return this._Oprev._Sym; },
                set: function (value) { this._Oprev._Sym = value; },
                enumerable: true,
                configurable: true
            });
            Edge.EnsureFirst = function (e) {
                if (e == e._pair._eSym) {
                    return e._Sym;
                }
                return e;
            };
            return Edge;
        }());
        LibTess.Edge = Edge;
        var MeshUtils = (function () {
            function MeshUtils() {
            }
            /// <summary>
            /// MakeEdge creates a new pair of half-edges which form their own loop.
            /// No vertex or face structures are allocated, but these must be assigned
            /// before the current edge operation is completed.
            /// </summary>
            MeshUtils.MakeEdge = function (eNext) {
                //Debug.Assert(eNext != null);
                var pair = EdgePair.Create();
                var e = pair._e;
                var eSym = pair._eSym;
                // Make sure eNext points to the first edge of the edge pair
                eNext = Edge.EnsureFirst(eNext);
                // Insert in circular doubly-linked list before eNext.
                // Note that the prev pointer is stored in Sym->next.
                var ePrev = eNext._Sym._next;
                eSym._next = ePrev;
                ePrev._Sym._next = e;
                e._next = eNext;
                eNext._Sym._next = eSym;
                e._Sym = eSym;
                e._Onext = e;
                e._Lnext = eSym;
                e._Org = null;
                e._Lface = null;
                e._winding = 0;
                e._activeRegion = null;
                eSym._Sym = e;
                eSym._Onext = eSym;
                eSym._Lnext = e;
                eSym._Org = null;
                eSym._Lface = null;
                eSym._winding = 0;
                eSym._activeRegion = null;
                return e;
            };
            /// <summary>
            /// Splice( a, b ) is best described by the Guibas/Stolfi paper or the
            /// CS348a notes (see Mesh.cs). Basically it modifies the mesh so that
            /// a->Onext and b->Onext are exchanged. This can have various effects
            /// depending on whether a and b belong to different face or vertex rings.
            /// For more explanation see Mesh.Splice().
            /// </summary>
            MeshUtils.Splice = function (a, b) {
                var aOnext = a._Onext;
                var bOnext = b._Onext;
                aOnext._Sym._Lnext = b;
                bOnext._Sym._Lnext = a;
                a._Onext = bOnext;
                b._Onext = aOnext;
            };
            /// <summary>
            /// MakeVertex( newVertex, eOrig, vNext ) attaches a new vertex and makes it the
            /// origin of all edges in the vertex loop to which eOrig belongs. "vNext" gives
            /// a place to insert the new vertex in the global vertex list. We insert
            /// the new vertex *before* vNext so that algorithms which walk the vertex
            /// list will not see the newly created vertices.
            /// </summary>
            MeshUtils.MakeVertex = function (vNew, eOrig, vNext) {
                //Debug.Assert(vNew != null);
                // insert in circular doubly-linked list before vNext
                var vPrev = vNext._prev;
                vNew._prev = vPrev;
                vPrev._next = vNew;
                vNew._next = vNext;
                vNext._prev = vNew;
                vNew._anEdge = eOrig;
                // leave coords, s, t undefined
                // fix other edges on this vertex loop
                var e = eOrig;
                do {
                    e._Org = vNew;
                    e = e._Onext;
                } while (e != eOrig);
            };
            /// <summary>
            /// MakeFace( newFace, eOrig, fNext ) attaches a new face and makes it the left
            /// face of all edges in the face loop to which eOrig belongs. "fNext" gives
            /// a place to insert the new face in the global face list. We insert
            /// the new face *before* fNext so that algorithms which walk the face
            /// list will not see the newly created faces.
            /// </summary>
            MeshUtils.MakeFace = function (fNew, eOrig, fNext) {
                //Debug.Assert(fNew != null);
                // insert in circular doubly-linked list before fNext
                var fPrev = fNext._prev;
                fNew._prev = fPrev;
                fPrev._next = fNew;
                fNew._next = fNext;
                fNext._prev = fNew;
                fNew._anEdge = eOrig;
                fNew._trail = null;
                fNew._marked = false;
                // The new face is marked "inside" if the old one was. This is a
                // convenience for the common case where a face has been split in two.
                fNew._inside = fNext._inside;
                // fix other edges on this face loop
                var e = eOrig;
                do {
                    e._Lface = fNew;
                    e = e._Lnext;
                } while (e != eOrig);
            };
            /// <summary>
            /// KillEdge( eDel ) destroys an edge (the half-edges eDel and eDel->Sym),
            /// and removes from the global edge list.
            /// </summary>
            MeshUtils.KillEdge = function (eDel) {
                // Half-edges are allocated in pairs, see EdgePair above
                eDel = Edge.EnsureFirst(eDel);
                // delete from circular doubly-linked list
                var eNext = eDel._next;
                var ePrev = eDel._Sym._next;
                eNext._Sym._next = ePrev;
                ePrev._Sym._next = eNext;
            };
            /// <summary>
            /// KillVertex( vDel ) destroys a vertex and removes it from the global
            /// vertex list. It updates the vertex loop to point to a given new vertex.
            /// </summary>
            MeshUtils.KillVertex = function (vDel, newOrg) {
                var eStart = vDel._anEdge;
                // change the origin of all affected edges
                var e = eStart;
                do {
                    e._Org = newOrg;
                    e = e._Onext;
                } while (e != eStart);
                // delete from circular doubly-linked list
                var vPrev = vDel._prev;
                var vNext = vDel._next;
                vNext._prev = vPrev;
                vPrev._next = vNext;
            };
            /// <summary>
            /// KillFace( fDel ) destroys a face and removes it from the global face
            /// list. It updates the face loop to point to a given new face.
            /// </summary>
            MeshUtils.KillFace = function (fDel, newLFace) {
                var eStart = fDel._anEdge;
                // change the left face of all affected edges
                var e = eStart;
                do {
                    e._Lface = newLFace;
                    e = e._Lnext;
                } while (e != eStart);
                // delete from circular doubly-linked list
                var fPrev = fDel._prev;
                var fNext = fDel._next;
                fNext._prev = fPrev;
                fPrev._next = fNext;
            };
            MeshUtils.Undef = Number.NEGATIVE_INFINITY;
            return MeshUtils;
        }());
        LibTess.MeshUtils = MeshUtils;
        var ContourVertex = (function () {
            function ContourVertex() {
                this.Position = Vec3.Zero;
            }
            ContourVertex.prototype.toString = function () {
                return this.Position.toString() + (this.Data != null) ? this.Data.toString() : "";
            };
            return ContourVertex;
        }());
        LibTess.ContourVertex = ContourVertex;
        var Node = (function () {
            function Node() {
            }
            Object.defineProperty(Node.prototype, "Key", {
                get: function () {
                    return this._key;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "Prev", {
                get: function () {
                    return this._prev;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Node.prototype, "Next", {
                get: function () {
                    return this._next;
                },
                enumerable: true,
                configurable: true
            });
            return Node;
        }());
        LibTess.Node = Node;
        var Dict = (function () {
            function Dict(leq) {
                this._leq = leq;
                this._head = new Node();
                this._head._key = null;
                this._head._prev = this._head;
                this._head._next = this._head;
            }
            Dict.prototype.Insert = function (key) {
                return this.InsertBefore(this._head, key);
            };
            Dict.prototype.InsertBefore = function (node, key) {
                do {
                    node = node.Prev;
                } while (node.Key != null && !this._leq(node.Key, key));
                var newNode = new Node();
                newNode._key = key;
                newNode._next = node._next;
                node._next._prev = newNode;
                newNode._prev = node;
                node._next = newNode;
                return newNode;
            };
            Dict.prototype.Find = function (key) {
                var node = this._head;
                do {
                    node = node._next;
                } while (node._key != null && !this._leq(key, node._key));
                return node;
            };
            Dict.prototype.Min = function () {
                return this._head._next;
            };
            Dict.prototype.Remove = function (node) {
                node._next._prev = node._prev;
                node._prev._next = node._next;
            };
            return Dict;
        }());
        LibTess.Dict = Dict;
        var HandleElem = (function () {
            function HandleElem() {
            }
            return HandleElem;
        }());
        LibTess.HandleElem = HandleElem;
        var PriorityHeap = (function () {
            function PriorityHeap(initialSize, leq) {
                this._size = 0;
                this._leq = leq;
                this._nodes = new Array(initialSize + 1);
                this._handles = new Array(initialSize + 1);
                this._size = 0;
                this._max = initialSize;
                this._freeList = 0;
                this._initialized = false;
                this._nodes[1] = 1;
                this._handles[1] = new HandleElem();
                this._handles[1]._key = null;
            }
            Object.defineProperty(PriorityHeap.prototype, "Empty", {
                get: function () { return this._size == 0; },
                enumerable: true,
                configurable: true
            });
            PriorityHeap.prototype.FloatDown = function (curr) {
                var child;
                var hCurr;
                var hChild;
                hCurr = this._nodes[curr];
                while (true) {
                    child = curr << 1;
                    if (child < this._size && this._leq(this._handles[this._nodes[child + 1]]._key, this._handles[this._nodes[child]]._key)) {
                        ++child;
                    }
                    // Debug.Assert(child <= _max);
                    hChild = this._nodes[child];
                    if (child > this._size || this._leq(this._handles[hCurr]._key, this._handles[hChild]._key)) {
                        this._nodes[curr] = hCurr;
                        this._handles[hCurr]._node = curr;
                        break;
                    }
                    this._nodes[curr] = hChild;
                    this._handles[hChild]._node = curr;
                    curr = child;
                }
            };
            PriorityHeap.prototype.FloatUp = function (curr) {
                var parent;
                var hCurr;
                var hParent;
                hCurr = this._nodes[curr];
                while (true) {
                    parent = curr >> 1;
                    hParent = this._nodes[parent];
                    if (parent == 0 || this._leq(this._handles[hParent]._key, this._handles[hCurr]._key)) {
                        this._nodes[curr] = hCurr;
                        this._handles[hCurr]._node = curr;
                        break;
                    }
                    this._nodes[curr] = hParent;
                    this._handles[hParent]._node = curr;
                    curr = parent;
                }
            };
            PriorityHeap.prototype.Init = function () {
                for (var i = this._size; i >= 1; --i) {
                    this.FloatDown(i);
                }
                this._initialized = true;
            };
            PriorityHeap.prototype.Insert = function (value) {
                var curr = ++this._size;
                if ((curr * 2) > this._max) {
                    this._max <<= 1;
                    var t_nodes = new Array(this._max + 1);
                    var t_handles = new Array(this._max + 1);
                    this._nodes.forEach(function (v_, i_) {
                        t_nodes[i_] = v_;
                    });
                    this._handles.forEach(function (v_, i_) {
                        t_handles[i_] = v_;
                    });
                    this._nodes = t_nodes;
                    this._handles = t_handles;
                }
                var free;
                if (this._freeList == 0) {
                    free = curr;
                }
                else {
                    free = this._freeList;
                    this._freeList = this._handles[free]._node;
                }
                this._nodes[curr] = free;
                if (this._handles[free] == null) {
                    this._handles[free] = new HandleElem();
                    this._handles[free]._key = value;
                    this._handles[free]._node = curr;
                }
                else {
                    this._handles[free]._node = curr;
                    this._handles[free]._key = value;
                }
                if (this._initialized) {
                    this.FloatUp(curr);
                }
                //Debug.Assert(free != PQHandle.Invalid);
                var result = new PQHandle();
                result._handle = free;
                return result;
            };
            PriorityHeap.prototype.ExtractMin = function () {
                // Debug.Assert(_initialized);
                var hMin = this._nodes[1];
                var min = this._handles[hMin]._key;
                if (this._size > 0) {
                    this._nodes[1] = this._nodes[this._size];
                    this._handles[this._nodes[1]]._node = 1;
                    this._handles[hMin]._key = null;
                    this._handles[hMin]._node = this._freeList;
                    this._freeList = hMin;
                    if (--this._size > 0) {
                        this.FloatDown(1);
                    }
                }
                return min;
            };
            PriorityHeap.prototype.Minimum = function () {
                //Debug.Assert(_initialized);
                return this._handles[this._nodes[1]]._key;
            };
            PriorityHeap.prototype.Remove = function (handle) {
                // Debug.Assert(_initialized);
                var hCurr = handle._handle;
                // Debug.Assert(hCurr >= 1 && hCurr <= _max && _handles[hCurr]._key != null);
                var curr = this._handles[hCurr]._node;
                this._nodes[curr] = this._nodes[this._size];
                this._handles[this._nodes[curr]]._node = curr;
                if (curr <= --this._size) {
                    if (curr <= 1 || this._leq(this._handles[this._nodes[curr >> 1]]._key, this._handles[this._nodes[curr]]._key)) {
                        this.FloatDown(curr);
                    }
                    else {
                        this.FloatUp(curr);
                    }
                }
                this._handles[hCurr]._key = null;
                this._handles[hCurr]._node = this._freeList;
                this._freeList = hCurr;
            };
            return PriorityHeap;
        }());
        LibTess.PriorityHeap = PriorityHeap;
        var StackItem = (function () {
            function StackItem(ap, ar) {
                this.p = ap;
                this.r = ar;
            }
            return StackItem;
        }());
        LibTess.StackItem = StackItem;
        ;
        var PriorityQueue = (function () {
            function PriorityQueue(initialSize, leq) {
                this._leq = leq;
                this._heap = new PriorityHeap(initialSize, leq);
                this._keys = new Array(initialSize);
                this._size = 0;
                this._max = initialSize;
                this._initialized = false;
            }
            Object.defineProperty(PriorityQueue.prototype, "Empty", {
                get: function () {
                    return this._size == 0 && this._heap.Empty;
                },
                enumerable: true,
                configurable: true
            });
            PriorityQueue.Swap = function (ab) {
                var tmp = ab.a;
                ab.a = ab.b;
                ab.b = tmp;
            };
            PriorityQueue.prototype.Init = function () {
                var stack = new Array();
                var p, r, i, j, piv;
                var seed = 2016473283;
                p = 0;
                r = this._size - 1;
                this._order = new Array(this._size + 1);
                for (piv = 0, i = p; i <= r; ++piv, ++i) {
                    this._order[i] = piv;
                }
                stack.push(new StackItem(p, r));
                while (stack.length > 0) {
                    var top = stack.pop();
                    p = top.p;
                    r = top.r;
                    while (r > p + 10) {
                        seed = seed * 1539415821 + 1;
                        i = p + Math.floor(seed % (r - p + 1));
                        piv = this._order[i];
                        this._order[i] = this._order[p];
                        this._order[p] = piv;
                        i = p - 1;
                        j = r + 1;
                        do {
                            do {
                                ++i;
                            } while (!this._leq(this._keys[this._order[i]], this._keys[piv]));
                            do {
                                --j;
                            } while (!this._leq(this._keys[piv], this._keys[this._order[j]]));
                            var t = this._order[j];
                            this._order[j] = this._order[i];
                            this._order[i] = t;
                        } while (i < j);
                        var t = this._order[j];
                        this._order[j] = this._order[i];
                        this._order[i] = t;
                        if (i - p < r - j) {
                            stack.push(new StackItem(j + 1, r));
                            r = i - 1;
                        }
                        else {
                            stack.push(new StackItem(p, i - 1));
                            p = j + 1;
                        }
                    }
                    for (i = p + 1; i <= r; ++i) {
                        piv = this._order[i];
                        for (j = i; j > p && !this._leq(this._keys[piv], this._keys[this._order[j - 1]]); --j) {
                            this._order[j] = this._order[j - 1];
                        }
                        this._order[j] = piv;
                    }
                }
                //#if DEBUG
                //    p = 0;
                //r = _size - 1;
                //for (i = p; i < r; ++i)
                //{
                //    Debug.Assert(_leq(_keys[_order[i + 1]], _keys[_order[i]]), "Wrong sort");
                //}
                //#endif
                this._max = this._size;
                this._initialized = true;
                this._heap.Init();
            };
            PriorityQueue.prototype.Insert = function (value) {
                if (this._initialized) {
                    return this._heap.Insert(value);
                }
                var curr = this._size;
                if (++this._size >= this._max) {
                    this._max <<= 1;
                    var nKeys = new Array(this._max);
                    this._keys.forEach(function (v_, i_) {
                        nKeys[i_] = v_;
                    });
                    this._keys = nKeys;
                }
                this._keys[curr] = value;
                return new PQHandle(-(curr + 1));
            };
            PriorityQueue.prototype.ExtractMin = function () {
                //Debug.Assert(_initialized);
                if (this._size == 0) {
                    return this._heap.ExtractMin();
                }
                var sortMin = this._keys[this._order[this._size - 1]];
                if (!this._heap.Empty) {
                    var heapMin = this._heap.Minimum();
                    if (this._leq(heapMin, sortMin))
                        return this._heap.ExtractMin();
                }
                do {
                    --this._size;
                } while (this._size > 0 && this._keys[this._order[this._size - 1]] == null);
                return sortMin;
            };
            PriorityQueue.prototype.Minimum = function () {
                //Debug.Assert(_initialized); 
                if (this._size == 0) {
                    return this._heap.Minimum();
                }
                var sortMin = this._keys[this._order[this._size - 1]];
                if (!this._heap.Empty) {
                    var heapMin = this._heap.Minimum();
                    if (this._leq(heapMin, sortMin))
                        return heapMin;
                }
                return sortMin;
            };
            PriorityQueue.prototype.Remove = function (handle) {
                // Debug.Assert(_initialized);
                var curr = handle._handle;
                if (curr >= 0) {
                    this._heap.Remove(handle);
                    return;
                }
                curr = -(curr + 1);
                //Debug.Assert(curr < this._max && this._keys[curr] != null);
                this._keys[curr] = null;
                while (this._size > 0 && this._keys[this._order[this._size - 1]] == null) {
                    --this._size;
                }
            };
            return PriorityQueue;
        }());
        LibTess.PriorityQueue = PriorityQueue;
        var Geom = (function () {
            function Geom() {
            }
            Geom.IsWindingInside = function (rule, n) {
                "use asm";
                n = n | 0;
                rule = rule | 0;
                switch (rule) {
                    case WindingRule.EvenOdd:
                        return (n & 1) == 1;
                    case WindingRule.NonZero:
                        return n != 0;
                    case WindingRule.Positive:
                        return n > 0;
                    case WindingRule.Negative:
                        return n < 0;
                    case WindingRule.AbsGeqTwo:
                        return n >= 2 || n <= -2;
                }
                throw ("Wrong winding rule");
            };
            Geom.VertCCW = function (u, v, w) {
                return (u._s * (v._t - w._t) + v._s * (w._t - u._t) + w._s * (u._t - v._t)) >= 0.0;
            };
            Geom.VertEq = function (lhs, rhs) {
                return lhs._s == rhs._s && lhs._t == rhs._t;
            };
            Geom.VertLeq = function (lhs, rhs) {
                return (lhs._s < rhs._s) || (lhs._s == rhs._s && lhs._t <= rhs._t);
            };
            /// <summary>
            /// Given three vertices u,v,w such that VertLeq(u,v) && VertLeq(v,w),
            /// evaluates the t-coord of the edge uw at the s-coord of the vertex v.
            /// Returns v->t - (uw)(v->s), ie. the signed distance from uw to v.
            /// If uw is vertical (and thus passes thru v), the result is zero.
            /// 
            /// The calculation is extremely accurate and stable, even when v
            /// is very close to u or w.  In particular if we set v->t = 0 and
            /// let r be the negated result (this evaluates (uw)(v->s)), then
            /// r is guaranteed to satisfy MIN(u->t,w->t) <= r <= MAX(u->t,w->t).
            /// </summary>
            Geom.EdgeEval = function (u, v, w) {
                //Debug.Assert(VertLeq(u, v) && VertLeq(v, w));
                var gapL = v._s - u._s;
                var gapR = w._s - v._s;
                if (gapL + gapR > 0.0) {
                    if (gapL < gapR) {
                        return (v._t - u._t) + (u._t - w._t) * (gapL / (gapL + gapR));
                    }
                    else {
                        return (v._t - w._t) + (w._t - u._t) * (gapR / (gapL + gapR));
                    }
                }
                /* vertical line */
                return 0.0;
            };
            /// <summary>
            /// Returns a number whose sign matches EdgeEval(u,v,w) but which
            /// is cheaper to evaluate. Returns > 0, == 0 , or < 0
            /// as v is above, on, or below the edge uw.
            /// </summary>
            Geom.EdgeSign = function (u, v, w) {
                //Debug.Assert(VertLeq(u, v) && VertLeq(v, w));
                var gapL = v._s - u._s;
                var gapR = w._s - v._s;
                if (gapL + gapR > 0.0) {
                    return (v._t - w._t) * gapL + (v._t - u._t) * gapR;
                }
                /* vertical line */
                return 0.0;
            };
            Geom.TransLeq = function (lhs, rhs) {
                return (lhs._t < rhs._t) || (lhs._t == rhs._t && lhs._s <= rhs._s);
            };
            Geom.TransEval = function (u, v, w) {
                // Debug.Assert(TransLeq(u, v) && TransLeq(v, w));
                var gapL = v._t - u._t;
                var gapR = w._t - v._t;
                if (gapL + gapR > 0.0) {
                    if (gapL < gapR) {
                        return (v._s - u._s) + (u._s - w._s) * (gapL / (gapL + gapR));
                    }
                    else {
                        return (v._s - w._s) + (w._s - u._s) * (gapR / (gapL + gapR));
                    }
                }
                /* vertical line */
                return 0.0;
            };
            Geom.TransSign = function (u, v, w) {
                // Debug.Assert(TransLeq(u, v) && TransLeq(v, w));
                var gapL = v._t - u._t;
                var gapR = w._t - v._t;
                if (gapL + gapR > 0.0) {
                    return (v._s - w._s) * gapL + (v._s - u._s) * gapR;
                }
                /* vertical line */
                return 0.0;
            };
            Geom.EdgeGoesLeft = function (e) {
                return Geom.VertLeq(e._Dst, e._Org);
            };
            Geom.EdgeGoesRight = function (e) {
                return Geom.VertLeq(e._Org, e._Dst);
            };
            Geom.VertL1dist = function (u, v) {
                return Math.abs(u._s - v._s) + Math.abs(u._t - v._t);
            };
            Geom.AddWinding = function (eDst, eSrc) {
                eDst._winding += eSrc._winding;
                eDst._Sym._winding += eSrc._Sym._winding;
            };
            Geom.Interpolate = function (a, x, b, y) {
                a = a < 0.0 ? 0.0 : a;
                b = b < 0.0 ? 0.0 : b;
                return ((a <= b) ? ((b == 0.0) ? ((x + y) / 2.0)
                    : (x + (y - x) * (a / (a + b))))
                    : (y + (x - y) * (b / (a + b))));
            };
            /// <summary>
            /// Given edges (o1,d1) and (o2,d2), compute their point of intersection.
            /// The computed point is guaranteed to lie in the intersection of the
            /// bounding rectangles defined by each edge.
            /// </summary>
            Geom.EdgeIntersect = function (o1, d1, o2, d2, v) {
                var z1;
                var z2;
                // This is certainly not the most efficient way to find the intersection
                // of two line segments, but it is very numerically stable.
                // 
                // Strategy: find the two middle vertices in the VertLeq ordering,
                // and interpolate the intersection s-value from these.  Then repeat
                // using the TransLeq ordering to find the intersection t-value.
                if (!Geom.VertLeq(o1, d1)) {
                    var c = o1;
                    o1 = d1;
                    d1 = c;
                }
                if (!Geom.VertLeq(o2, d2)) {
                    var c = o2;
                    o2 = d2;
                    d2 = c;
                }
                if (!Geom.VertLeq(o1, o2)) {
                    var c = o1;
                    o1 = o2;
                    o2 = c;
                    var c = d1;
                    d1 = d2;
                    d2 = c;
                }
                if (!Geom.VertLeq(o2, d1)) {
                    // Technically, no intersection -- do our best
                    v._s = (o2._s + d1._s) / 2.0;
                }
                else if (Geom.VertLeq(d1, d2)) {
                    // Interpolate between o2 and d1
                    z1 = Geom.EdgeEval(o1, o2, d1);
                    z2 = Geom.EdgeEval(o2, d1, d2);
                    if (z1 + z2 < 0.0) {
                        z1 = -z1;
                        z2 = -z2;
                    }
                    v._s = Geom.Interpolate(z1, o2._s, z2, d1._s);
                }
                else {
                    // Interpolate between o2 and d2
                    z1 = Geom.EdgeSign(o1, o2, d1);
                    z2 = -Geom.EdgeSign(o1, d2, d1);
                    if (z1 + z2 < 0.0) {
                        z1 = -z1;
                        z2 = -z2;
                    }
                    v._s = Geom.Interpolate(z1, o2._s, z2, d2._s);
                }
                // Now repeat the process for t
                if (!Geom.TransLeq(o1, d1)) {
                    var c = o1;
                    o1 = d1;
                    d1 = c;
                }
                if (!Geom.TransLeq(o2, d2)) {
                    var c = o2;
                    o2 = d2;
                    d2 = c;
                }
                if (!Geom.TransLeq(o1, o2)) {
                    var c = o1;
                    o1 = o2;
                    o2 = c;
                    var c = d1;
                    d1 = d2;
                    d2 = c;
                }
                if (!Geom.TransLeq(o2, d1)) {
                    // Technically, no intersection -- do our best
                    v._t = (o2._t + d1._t) / 2.0;
                }
                else if (Geom.TransLeq(d1, d2)) {
                    // Interpolate between o2 and d1
                    z1 = Geom.TransEval(o1, o2, d1);
                    z2 = Geom.TransEval(o2, d1, d2);
                    if (z1 + z2 < 0.0) {
                        z1 = -z1;
                        z2 = -z2;
                    }
                    v._t = Geom.Interpolate(z1, o2._t, z2, d1._t);
                }
                else {
                    // Interpolate between o2 and d2
                    z1 = Geom.TransSign(o1, o2, d1);
                    z2 = -Geom.TransSign(o1, d2, d1);
                    if (z1 + z2 < 0.0) {
                        z1 = -z1;
                        z2 = -z2;
                    }
                    v._t = Geom.Interpolate(z1, o2._t, z2, d2._t);
                }
            };
            return Geom;
        }());
        LibTess.Geom = Geom;
        var Mesh = (function () {
            function Mesh() {
                var v = this._vHead = new Vertex();
                var f = this._fHead = new Face();
                var pair = EdgePair.Create();
                var e = this._eHead = pair._e;
                var eSym = this._eHeadSym = pair._eSym;
                v._next = v._prev = v;
                v._anEdge = null;
                f._next = f._prev = f;
                f._anEdge = null;
                f._trail = null;
                f._marked = false;
                f._inside = false;
                e._next = e;
                e._Sym = eSym;
                e._Onext = null;
                e._Lnext = null;
                e._Org = null;
                e._Lface = null;
                e._winding = 0;
                e._activeRegion = null;
                eSym._next = eSym;
                eSym._Sym = e;
                eSym._Onext = null;
                eSym._Lnext = null;
                eSym._Org = null;
                eSym._Lface = null;
                eSym._winding = 0;
                eSym._activeRegion = null;
            }
            /// <summary>
            /// Creates one edge, two vertices and a loop (face).
            /// The loop consists of the two new half-edges.
            /// </summary>
            Mesh.prototype.MakeEdge = function () {
                var e = MeshUtils.MakeEdge(this._eHead);
                MeshUtils.MakeVertex(new Vertex(), e, this._vHead);
                MeshUtils.MakeVertex(new Vertex(), e._Sym, this._vHead);
                MeshUtils.MakeFace(new Face(), e, this._fHead);
                return e;
            };
            /// <summary>
            /// Splice is the basic operation for changing the
            /// mesh connectivity and topology.  It changes the mesh so that
            ///     eOrg->Onext = OLD( eDst->Onext )
            ///     eDst->Onext = OLD( eOrg->Onext )
            /// where OLD(...) means the value before the meshSplice operation.
            /// 
            /// This can have two effects on the vertex structure:
            ///  - if eOrg->Org != eDst->Org, the two vertices are merged together
            ///  - if eOrg->Org == eDst->Org, the origin is split into two vertices
            /// In both cases, eDst->Org is changed and eOrg->Org is untouched.
            /// 
            /// Similarly (and independently) for the face structure,
            ///  - if eOrg->Lface == eDst->Lface, one loop is split into two
            ///  - if eOrg->Lface != eDst->Lface, two distinct loops are joined into one
            /// In both cases, eDst->Lface is changed and eOrg->Lface is unaffected.
            /// 
            /// Some special cases:
            /// If eDst == eOrg, the operation has no effect.
            /// If eDst == eOrg->Lnext, the new face will have a single edge.
            /// If eDst == eOrg->Lprev, the old face will have a single edge.
            /// If eDst == eOrg->Onext, the new vertex will have a single edge.
            /// If eDst == eOrg->Oprev, the old vertex will have a single edge.
            /// </summary>
            Mesh.prototype.Splice = function (eOrg, eDst) {
                if (eOrg == eDst) {
                    return;
                }
                var joiningVertices = false;
                if (eDst._Org != eOrg._Org) {
                    // We are merging two disjoint vertices -- destroy eDst->Org
                    joiningVertices = true;
                    MeshUtils.KillVertex(eDst._Org, eOrg._Org);
                }
                var joiningLoops = false;
                if (eDst._Lface != eOrg._Lface) {
                    // We are connecting two disjoint loops -- destroy eDst->Lface
                    joiningLoops = true;
                    MeshUtils.KillFace(eDst._Lface, eOrg._Lface);
                }
                // Change the edge structure
                MeshUtils.Splice(eDst, eOrg);
                if (!joiningVertices) {
                    // We split one vertex into two -- the new vertex is eDst->Org.
                    // Make sure the old vertex points to a valid half-edge.
                    MeshUtils.MakeVertex(new Vertex(), eDst, eOrg._Org);
                    eOrg._Org._anEdge = eOrg;
                }
                if (!joiningLoops) {
                    // We split one loop into two -- the new loop is eDst->Lface.
                    // Make sure the old face points to a valid half-edge.
                    MeshUtils.MakeFace(new Face(), eDst, eOrg._Lface);
                    eOrg._Lface._anEdge = eOrg;
                }
            };
            /// <summary>
            /// Removes the edge eDel. There are several cases:
            /// if (eDel->Lface != eDel->Rface), we join two loops into one; the loop
            /// eDel->Lface is deleted. Otherwise, we are splitting one loop into two;
            /// the newly created loop will contain eDel->Dst. If the deletion of eDel
            /// would create isolated vertices, those are deleted as well.
            /// </summary>
            Mesh.prototype.Delete = function (eDel) {
                var eDelSym = eDel._Sym;
                // First step: disconnect the origin vertex eDel->Org.  We make all
                // changes to get a consistent mesh in this "intermediate" state.
                var joiningLoops = false;
                if (eDel._Lface != eDel._Rface) {
                    // We are joining two loops into one -- remove the left face
                    joiningLoops = true;
                    MeshUtils.KillFace(eDel._Lface, eDel._Rface);
                }
                if (eDel._Onext == eDel) {
                    MeshUtils.KillVertex(eDel._Org, null);
                }
                else {
                    // Make sure that eDel->Org and eDel->Rface point to valid half-edges
                    eDel._Rface._anEdge = eDel._Oprev;
                    eDel._Org._anEdge = eDel._Onext;
                    MeshUtils.Splice(eDel, eDel._Oprev);
                    if (!joiningLoops) {
                        // We are splitting one loop into two -- create a new loop for eDel.
                        MeshUtils.MakeFace(new Face(), eDel, eDel._Lface);
                    }
                }
                // Claim: the mesh is now in a consistent state, except that eDel->Org
                // may have been deleted.  Now we disconnect eDel->Dst.
                if (eDelSym._Onext == eDelSym) {
                    MeshUtils.KillVertex(eDelSym._Org, null);
                    MeshUtils.KillFace(eDelSym._Lface, null);
                }
                else {
                    // Make sure that eDel->Dst and eDel->Lface point to valid half-edges
                    eDel._Lface._anEdge = eDelSym._Oprev;
                    eDelSym._Org._anEdge = eDelSym._Onext;
                    MeshUtils.Splice(eDelSym, eDelSym._Oprev);
                }
                // Any isolated vertices or faces have already been freed.
                MeshUtils.KillEdge(eDel);
            };
            /// <summary>
            /// Creates a new edge such that eNew == eOrg.Lnext and eNew.Dst is a newly created vertex.
            /// eOrg and eNew will have the same left face.
            /// </summary>
            Mesh.prototype.AddEdgeVertex = function (eOrg) {
                var eNew = MeshUtils.MakeEdge(eOrg);
                var eNewSym = eNew._Sym;
                // Connect the new edge appropriately
                MeshUtils.Splice(eNew, eOrg._Lnext);
                // Set vertex and face information
                eNew._Org = eOrg._Dst;
                MeshUtils.MakeVertex(new Vertex(), eNewSym, eNew._Org);
                eNew._Lface = eNewSym._Lface = eOrg._Lface;
                return eNew;
            };
            /// <summary>
            /// Splits eOrg into two edges eOrg and eNew such that eNew == eOrg.Lnext.
            /// The new vertex is eOrg.Dst == eNew.Org.
            /// eOrg and eNew will have the same left face.
            /// </summary>
            Mesh.prototype.SplitEdge = function (eOrg) {
                var eTmp = this.AddEdgeVertex(eOrg);
                var eNew = eTmp._Sym;
                // Disconnect eOrg from eOrg->Dst and connect it to eNew->Org
                MeshUtils.Splice(eOrg._Sym, eOrg._Sym._Oprev);
                MeshUtils.Splice(eOrg._Sym, eNew);
                // Set the vertex and face information
                eOrg._Dst = eNew._Org;
                eNew._Dst._anEdge = eNew._Sym; // may have pointed to eOrg->Sym
                eNew._Rface = eOrg._Rface;
                eNew._winding = eOrg._winding; // copy old winding information
                eNew._Sym._winding = eOrg._Sym._winding;
                return eNew;
            };
            /// <summary>
            /// Creates a new edge from eOrg->Dst to eDst->Org, and returns the corresponding half-edge eNew.
            /// If eOrg->Lface == eDst->Lface, this splits one loop into two,
            /// and the newly created loop is eNew->Lface.  Otherwise, two disjoint
            /// loops are merged into one, and the loop eDst->Lface is destroyed.
            /// 
            /// If (eOrg == eDst), the new face will have only two edges.
            /// If (eOrg->Lnext == eDst), the old face is reduced to a single edge.
            /// If (eOrg->Lnext->Lnext == eDst), the old face is reduced to two edges.
            /// </summary>
            Mesh.prototype.Connect = function (eOrg, eDst) {
                var eNew = MeshUtils.MakeEdge(eOrg);
                var eNewSym = eNew._Sym;
                var joiningLoops = false;
                if (eDst._Lface != eOrg._Lface) {
                    // We are connecting two disjoint loops -- destroy eDst->Lface
                    joiningLoops = true;
                    MeshUtils.KillFace(eDst._Lface, eOrg._Lface);
                }
                // Connect the new edge appropriately
                MeshUtils.Splice(eNew, eOrg._Lnext);
                MeshUtils.Splice(eNewSym, eDst);
                // Set the vertex and face information
                eNew._Org = eOrg._Dst;
                eNewSym._Org = eDst._Org;
                eNew._Lface = eNewSym._Lface = eOrg._Lface;
                // Make sure the old face points to a valid half-edge
                eOrg._Lface._anEdge = eNewSym;
                if (!joiningLoops) {
                    MeshUtils.MakeFace(new Face(), eNew, eOrg._Lface);
                }
                return eNew;
            };
            /// <summary>
            /// Destroys a face and removes it from the global face list. All edges of
            /// fZap will have a NULL pointer as their left face. Any edges which
            /// also have a NULL pointer as their right face are deleted entirely
            /// (along with any isolated vertices this produces).
            /// An entire mesh can be deleted by zapping its faces, one at a time,
            /// in any order. Zapped faces cannot be used in further mesh operations!
            /// </summary>
            Mesh.prototype.ZapFace = function (fZap) {
                var eStart = fZap._anEdge;
                // walk around face, deleting edges whose right face is also NULL
                var eNext = eStart._Lnext;
                var e;
                var eSym;
                do {
                    e = eNext;
                    eNext = e._Lnext;
                    e._Lface = null;
                    if (e._Rface == null) {
                        // delete the edge -- see TESSmeshDelete above
                        if (e._Onext == e) {
                            MeshUtils.KillVertex(e._Org, null);
                        }
                        else {
                            // Make sure that e._Org points to a valid half-edge
                            e._Org._anEdge = e._Onext;
                            MeshUtils.Splice(e, e._Oprev);
                        }
                        eSym = e._Sym;
                        if (eSym._Onext == eSym) {
                            MeshUtils.KillVertex(eSym._Org, null);
                        }
                        else {
                            // Make sure that eSym._Org points to a valid half-edge
                            eSym._Org._anEdge = eSym._Onext;
                            MeshUtils.Splice(eSym, eSym._Oprev);
                        }
                        MeshUtils.KillEdge(e);
                    }
                } while (e != eStart);
                /* delete from circular doubly-linked list */
                var fPrev = fZap._prev;
                var fNext = fZap._next;
                fNext._prev = fPrev;
                fPrev._next = fNext;
            };
            Mesh.prototype.MergeConvexFaces = function (maxVertsPerFace) {
                for (var f = this._fHead._next; f != this._fHead; f = f._next) {
                    // Skip faces which are outside the result
                    if (!f._inside) {
                        continue;
                    }
                    var eCur = f._anEdge;
                    var vStart = eCur._Org;
                    while (true) {
                        var eNext = eCur._Lnext;
                        var eSym = eCur._Sym;
                        if (eSym != null && eSym._Lface != null && eSym._Lface._inside) {
                            // Try to merge the neighbour faces if the resulting polygons
                            // does not exceed maximum number of vertices.
                            var curNv = f.VertsCount;
                            var symNv = eSym._Lface.VertsCount;
                            if ((curNv + symNv - 2) <= maxVertsPerFace) {
                                // Merge if the resulting poly is convex.
                                if (Geom.VertCCW(eCur._Lprev._Org, eCur._Org, eSym._Lnext._Lnext._Org) &&
                                    Geom.VertCCW(eSym._Lprev._Org, eSym._Org, eCur._Lnext._Lnext._Org)) {
                                    eNext = eSym._Lnext;
                                    this.Delete(eSym);
                                    eCur = null;
                                }
                            }
                        }
                        if (eCur != null && eCur._Lnext._Org == vStart)
                            break;
                        // Continue to next edge.
                        eCur = eNext;
                    }
                }
            };
            Mesh.prototype.Check = function () {
                var e;
                var fPrev = this._fHead;
                var f;
                for (fPrev = this._fHead; (f = fPrev._next) != this._fHead; fPrev = f) {
                    e = f._anEdge;
                    do {
                        Debug.Assert(e._Sym != e);
                        Debug.Assert(e._Sym._Sym == e);
                        Debug.Assert(e._Lnext._Onext._Sym == e);
                        Debug.Assert(e._Onext._Sym._Lnext == e);
                        Debug.Assert(e._Lface == f);
                        e = e._Lnext;
                    } while (e != f._anEdge);
                }
                Debug.Assert(f._prev == fPrev && f._anEdge == null);
                var vPrev = this._vHead;
                var v;
                for (vPrev = this._vHead; (v = vPrev._next) != this._vHead; vPrev = v) {
                    Debug.Assert(v._prev == vPrev);
                    e = v._anEdge;
                    do {
                        Debug.Assert(e._Sym != e);
                        Debug.Assert(e._Sym._Sym == e);
                        Debug.Assert(e._Lnext._Onext._Sym == e);
                        Debug.Assert(e._Onext._Sym._Lnext == e);
                        Debug.Assert(e._Org == v);
                        e = e._Onext;
                    } while (e != v._anEdge);
                }
                Debug.Assert(v._prev == vPrev && v._anEdge == null);
                var ePrev = this._eHead;
                for (ePrev = this._eHead; (e = ePrev._next) != this._eHead; ePrev = e) {
                    Debug.Assert(e._Sym._next == ePrev._Sym);
                    Debug.Assert(e._Sym != e);
                    Debug.Assert(e._Sym._Sym == e);
                    Debug.Assert(e._Org != null);
                    Debug.Assert(e._Dst != null);
                    Debug.Assert(e._Lnext._Onext._Sym == e);
                    Debug.Assert(e._Onext._Sym._Lnext == e);
                }
                Debug.Assert(e._Sym._next == ePrev._Sym
                    && e._Sym == this._eHeadSym
                    && e._Sym._Sym == e
                    && e._Org == null && e._Dst == null
                    && e._Lface == null && e._Rface == null);
            };
            return Mesh;
        }());
        LibTess.Mesh = Mesh;
        var ActiveRegion = (function () {
            function ActiveRegion() {
            }
            return ActiveRegion;
        }());
        LibTess.ActiveRegion = ActiveRegion;
        var Tess = (function () {
            function Tess() {
                this._normal = new Vec3();
                this._sUnit = new Vec3();
                this._tUnit = new Vec3();
                this.SUnitX = 1.0;
                this.SUnitY = 0.0;
                this.SentinelCoord = 4e30;
                this._normal = Vec3.Zero;
                this._bminX = this._bminY = this._bmaxX = this._bmaxY = 0.0;
                this._windingRule = WindingRule.EvenOdd;
                this._mesh = null;
                this._vertices = null;
                this._vertexCount = 0;
                this._elements = null;
                this._elementCount = 0;
            }
            Object.defineProperty(Tess.prototype, "Normal", {
                get: function () { return this._normal; },
                set: function (value) { this._normal = value; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Tess.prototype, "Vertices", {
                get: function () { return this._vertices; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Tess.prototype, "VertexCount", {
                get: function () { return this._vertexCount; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Tess.prototype, "Elements", {
                get: function () { return this._elements; },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Tess.prototype, "ElementCount", {
                get: function () { return this._elementCount; },
                enumerable: true,
                configurable: true
            });
            Tess.prototype.ComputeNormal = function (norm) {
                var v = this._mesh._vHead._next;
                var minVal = [v._coords.X, v._coords.Y, v._coords.Z];
                var minVert = [v, v, v];
                var maxVal = [v._coords.X, v._coords.Y, v._coords.Z];
                var maxVert = [v, v, v];
                for (; v != this._mesh._vHead; v = v._next) {
                    if (v._coords.X < minVal[0]) {
                        minVal[0] = v._coords.X;
                        minVert[0] = v;
                    }
                    if (v._coords.Y < minVal[1]) {
                        minVal[1] = v._coords.Y;
                        minVert[1] = v;
                    }
                    if (v._coords.Z < minVal[2]) {
                        minVal[2] = v._coords.Z;
                        minVert[2] = v;
                    }
                    if (v._coords.X > maxVal[0]) {
                        maxVal[0] = v._coords.X;
                        maxVert[0] = v;
                    }
                    if (v._coords.Y > maxVal[1]) {
                        maxVal[1] = v._coords.Y;
                        maxVert[1] = v;
                    }
                    if (v._coords.Z > maxVal[2]) {
                        maxVal[2] = v._coords.Z;
                        maxVert[2] = v;
                    }
                }
                // Find two vertices separated by at least 1/sqrt(3) of the maximum
                // distance between any two vertices
                var i = 0;
                if (maxVal[1] - minVal[1] > maxVal[0] - minVal[0]) {
                    i = 1;
                }
                if (maxVal[2] - minVal[2] > maxVal[i] - minVal[i]) {
                    i = 2;
                }
                if (minVal[i] >= maxVal[i]) {
                    // All vertices are the same -- normal doesn't matter
                    norm.SetValues(0.0, 0.0, 1.0);
                    return;
                }
                // Look for a third vertex which forms the triangle with maximum area
                // (Length of normal == twice the triangle area)
                var maxLen2 = 0.0, tLen2;
                var v1 = minVert[i];
                var v2 = maxVert[i];
                var d1 = Vec3.Zero;
                var d2 = Vec3.Zero;
                var tNorm = Vec3.Zero;
                Vec3.Sub(v1._coords, v2._coords, d1);
                for (v = this._mesh._vHead._next; v != this._mesh._vHead; v = v._next) {
                    Vec3.Sub(v._coords, v2._coords, d2);
                    tNorm.X = d1.Y * d2.Z - d1.Z * d2.Y;
                    tNorm.Y = d1.Z * d2.X - d1.X * d2.Z;
                    tNorm.Z = d1.X * d2.Y - d1.Y * d2.X;
                    tLen2 = tNorm.X * tNorm.X + tNorm.Y * tNorm.Y + tNorm.Z * tNorm.Z;
                    if (tLen2 > maxLen2) {
                        maxLen2 = tLen2;
                        norm.CopyFrom(tNorm);
                    }
                }
                if (maxLen2 <= 0.0) {
                    // All points lie on a single line -- any decent normal will do
                    norm.SetValues(0, 0, 0);
                    i = Vec3.LongAxis(d1);
                    norm[i] = 1.0;
                }
            };
            Tess.prototype.CheckOrientation = function () {
                // When we compute the normal automatically, we choose the orientation
                // so that the the sum of the signed areas of all contours is non-negative.
                var area = 0.0;
                for (var f = this._mesh._fHead._next; f != this._mesh._fHead; f = f._next) {
                    var e = f._anEdge;
                    if (e._winding <= 0) {
                        continue;
                    }
                    do {
                        area += (e._Org._s - e._Dst._s) * (e._Org._t + e._Dst._t);
                        e = e._Lnext;
                    } while (e != f._anEdge);
                }
                if (area < 0.0) {
                    // Reverse the orientation by flipping all the t-coordinates
                    for (var v = this._mesh._vHead._next; v != this._mesh._vHead; v = v._next) {
                        v._t = -v._t;
                    }
                    Vec3.Neg(this._tUnit);
                }
            };
            Tess.prototype.ProjectPolygon = function () {
                var norm = this._normal;
                var computedNormal = false;
                if (norm.X == 0.0 && norm.Y == 0.0 && norm.Z == 0.0) {
                    this.ComputeNormal(norm);
                    computedNormal = true;
                }
                var i = Vec3.LongAxis(norm);
                this._sUnit[i] = 0.0;
                this._sUnit[(i + 1) % 3] = this.SUnitX;
                this._sUnit[(i + 2) % 3] = this.SUnitY;
                this._tUnit[i] = 0.0;
                this._tUnit[(i + 1) % 3] = norm[i] > 0.0 ? -this.SUnitY : this.SUnitY;
                this._tUnit[(i + 2) % 3] = norm[i] > 0.0 ? this.SUnitX : -this.SUnitX;
                // Project the vertices onto the sweep plane
                for (var v = this._mesh._vHead._next; v != this._mesh._vHead; v = v._next) {
                    v._s = Vec3.Dot(v._coords, this._sUnit);
                    v._t = Vec3.Dot(v._coords, this._tUnit);
                }
                if (computedNormal) {
                    this.CheckOrientation();
                }
                // Compute ST bounds.
                var first = true;
                for (var v = this._mesh._vHead._next; v != this._mesh._vHead; v = v._next) {
                    if (first) {
                        this._bminX = this._bmaxX = v._s;
                        this._bminY = this._bmaxY = v._t;
                        first = false;
                    }
                    else {
                        if (v._s < this._bminX)
                            this._bminX = v._s;
                        if (v._s > this._bmaxX)
                            this._bmaxX = v._s;
                        if (v._t < this._bminY)
                            this._bminY = v._t;
                        if (v._t > this._bmaxY)
                            this._bmaxY = v._t;
                    }
                }
            };
            /// <summary>
            /// TessellateMonoRegion( face ) tessellates a monotone region
            /// (what else would it do??)  The region must consist of a single
            /// loop of half-edges (see mesh.h) oriented CCW.  "Monotone" in this
            /// case means that any vertical line intersects the interior of the
            /// region in a single interval.  
            /// 
            /// Tessellation consists of adding interior edges (actually pairs of
            /// half-edges), to split the region into non-overlapping triangles.
            /// 
            /// The basic idea is explained in Preparata and Shamos (which I don't
            /// have handy right now), although their implementation is more
            /// complicated than this one.  The are two edge chains, an upper chain
            /// and a lower chain.  We process all vertices from both chains in order,
            /// from right to left.
            /// 
            /// The algorithm ensures that the following invariant holds after each
            /// vertex is processed: the untessellated region consists of two
            /// chains, where one chain (say the upper) is a single edge, and
            /// the other chain is concave.  The left vertex of the single edge
            /// is always to the left of all vertices in the concave chain.
            /// 
            /// Each step consists of adding the rightmost unprocessed vertex to one
            /// of the two chains, and forming a fan of triangles from the rightmost
            /// of two chain endpoints.  Determining whether we can add each triangle
            /// to the fan is a simple orientation test.  By making the fan as large
            /// as possible, we restore the invariant (check it yourself).
            /// </summary>
            Tess.prototype.TessellateMonoRegion = function (face) {
                // All edges are oriented CCW around the boundary of the region.
                // First, find the half-edge whose origin vertex is rightmost.
                // Since the sweep goes from left to right, face->anEdge should
                // be close to the edge we want.
                var up = face._anEdge;
                Debug.Assert(up._Lnext != up && up._Lnext._Lnext != up);
                for (; Geom.VertLeq(up._Dst, up._Org); up = up._Lprev)
                    ;
                for (; Geom.VertLeq(up._Org, up._Dst); up = up._Lnext)
                    ;
                var lo = up._Lprev;
                while (up._Lnext != lo) {
                    if (Geom.VertLeq(up._Dst, lo._Org)) {
                        // up.Dst is on the left. It is safe to form triangles from lo.Org.
                        // The EdgeGoesLeft test guarantees progress even when some triangles
                        // are CW, given that the upper and lower chains are truly monotone.
                        while (lo._Lnext != up && (Geom.EdgeGoesLeft(lo._Lnext)
                            || Geom.EdgeSign(lo._Org, lo._Dst, lo._Lnext._Dst) <= 0.0)) {
                            lo = this._mesh.Connect(lo._Lnext, lo)._Sym;
                        }
                        lo = lo._Lprev;
                    }
                    else {
                        // lo.Org is on the left.  We can make CCW triangles from up.Dst.
                        while (lo._Lnext != up && (Geom.EdgeGoesRight(up._Lprev)
                            || Geom.EdgeSign(up._Dst, up._Org, up._Lprev._Org) >= 0.0)) {
                            up = this._mesh.Connect(up, up._Lprev)._Sym;
                        }
                        up = up._Lnext;
                    }
                }
                // Now lo.Org == up.Dst == the leftmost vertex.  The remaining region
                // can be tessellated in a fan from this leftmost vertex.
                Debug.Assert(lo._Lnext != up);
                while (lo._Lnext._Lnext != up) {
                    lo = this._mesh.Connect(lo._Lnext, lo)._Sym;
                }
            };
            /// <summary>
            /// TessellateInterior( mesh ) tessellates each region of
            /// the mesh which is marked "inside" the polygon. Each such region
            /// must be monotone.
            /// </summary>
            Tess.prototype.TessellateInterior = function () {
                var f;
                var next;
                for (f = this._mesh._fHead._next; f != this._mesh._fHead; f = next) {
                    // Make sure we don't try to tessellate the new triangles.
                    next = f._next;
                    if (f._inside) {
                        this.TessellateMonoRegion(f);
                    }
                }
            };
            /// <summary>
            /// DiscardExterior zaps (ie. sets to null) all faces
            /// which are not marked "inside" the polygon.  Since further mesh operations
            /// on NULL faces are not allowed, the main purpose is to clean up the
            /// mesh so that exterior loops are not represented in the data structure.
            /// </summary>
            Tess.prototype.DiscardExterior = function () {
                var f;
                var next;
                for (f = this._mesh._fHead._next; f != this._mesh._fHead; f = next) {
                    // Since f will be destroyed, save its next pointer.
                    next = f._next;
                    if (!f._inside) {
                        this._mesh.ZapFace(f);
                    }
                }
            };
            /// <summary>
            /// SetWindingNumber( value, keepOnlyBoundary ) resets the
            /// winding numbers on all edges so that regions marked "inside" the
            /// polygon have a winding number of "value", and regions outside
            /// have a winding number of 0.
            /// 
            /// If keepOnlyBoundary is TRUE, it also deletes all edges which do not
            /// separate an interior region from an exterior one.
            /// </summary>
            Tess.prototype.SetWindingNumber = function (value, keepOnlyBoundary) {
                var e;
                var eNext;
                for (e = this._mesh._eHead._next; e != this._mesh._eHead; e = eNext) {
                    eNext = e._next;
                    if (e._Rface._inside != e._Lface._inside) {
                        /* This is a boundary edge (one side is interior, one is exterior). */
                        e._winding = (e._Lface._inside) ? value : -value;
                    }
                    else {
                        /* Both regions are interior, or both are exterior. */
                        if (!keepOnlyBoundary) {
                            e._winding = 0;
                        }
                        else {
                            this._mesh.Delete(e);
                        }
                    }
                }
            };
            Tess.prototype.GetNeighbourFace = function (edge) {
                if (edge._Rface == null)
                    return MeshUtils.Undef;
                if (!edge._Rface._inside)
                    return MeshUtils.Undef;
                return edge._Rface._n;
            };
            Tess.prototype.OutputPolymesh = function (elementType, polySize) {
                var v;
                var f;
                var edge;
                var maxFaceCount = 0;
                var maxVertexCount = 0;
                var faceVerts;
                var i;
                if (polySize < 3) {
                    polySize = 3;
                }
                // Assume that the input data is triangles now.
                // Try to merge as many polygons as possible
                if (polySize > 3) {
                    this._mesh.MergeConvexFaces(polySize);
                }
                // Mark unused
                for (v = this._mesh._vHead._next; v != this._mesh._vHead; v = v._next)
                    v._n = MeshUtils.Undef;
                // Create unique IDs for all vertices and faces.
                for (f = this._mesh._fHead._next; f != this._mesh._fHead; f = f._next) {
                    f._n = MeshUtils.Undef;
                    if (!f._inside)
                        continue;
                    edge = f._anEdge;
                    faceVerts = 0;
                    do {
                        v = edge._Org;
                        if (v._n == MeshUtils.Undef) {
                            v._n = maxVertexCount;
                            maxVertexCount++;
                        }
                        faceVerts++;
                        edge = edge._Lnext;
                    } while (edge != f._anEdge);
                    Debug.Assert(faceVerts <= polySize);
                    f._n = maxFaceCount;
                    ++maxFaceCount;
                }
                this._elementCount = maxFaceCount;
                if (elementType == ElementType.ConnectedPolygons)
                    maxFaceCount *= 2;
                this._elements = new Array(maxFaceCount * polySize);
                this._vertexCount = maxVertexCount;
                this._vertices = new Array(this._vertexCount);
                for (var i = 0; i < this._vertexCount; i++) {
                    this._vertices[i] = new ContourVertex();
                }
                ;
                // Output vertices.
                for (v = this._mesh._vHead._next; v != this._mesh._vHead; v = v._next) {
                    if (v._n != MeshUtils.Undef) {
                        // Store coordinate
                        var n = v._n;
                        this._vertices[v._n].Position.CopyFrom(v._coords);
                        this._vertices[v._n].Data = v._data;
                    }
                }
                // Output indices.
                var elementIndex = 0;
                for (f = this._mesh._fHead._next; f != this._mesh._fHead; f = f._next) {
                    if (!f._inside)
                        continue;
                    // Store polygon
                    edge = f._anEdge;
                    faceVerts = 0;
                    do {
                        v = edge._Org;
                        this._elements[elementIndex++] = v._n;
                        faceVerts++;
                        edge = edge._Lnext;
                    } while (edge != f._anEdge);
                    // Fill unused.
                    for (i = faceVerts; i < polySize; ++i) {
                        this._elements[elementIndex++] = MeshUtils.Undef;
                    }
                    // Store polygon connectivity
                    if (elementType == ElementType.ConnectedPolygons) {
                        edge = f._anEdge;
                        do {
                            this._elements[elementIndex++] = this.GetNeighbourFace(edge);
                            edge = edge._Lnext;
                        } while (edge != f._anEdge);
                        // Fill unused.
                        for (i = faceVerts; i < polySize; ++i) {
                            this._elements[elementIndex++] = MeshUtils.Undef;
                        }
                    }
                }
            };
            Tess.prototype.OutputContours = function () {
                var f;
                var edge;
                var start;
                var startVert = 0;
                var vertCount = 0;
                this._vertexCount = 0;
                this._elementCount = 0;
                for (f = this._mesh._fHead._next; f != this._mesh._fHead; f = f._next) {
                    if (!f._inside)
                        continue;
                    start = edge = f._anEdge;
                    do {
                        ++this._vertexCount;
                        edge = edge._Lnext;
                    } while (edge != start);
                    ++this._elementCount;
                }
                this._elements = new Array(this._elementCount * 2);
                this._vertices = new Array(this._vertexCount);
                for (var i = 0; i < this._vertexCount; i++) {
                    this._vertices[i] = new ContourVertex();
                }
                ;
                var vertIndex = 0;
                var elementIndex = 0;
                startVert = 0;
                for (f = this._mesh._fHead._next; f != this._mesh._fHead; f = f._next) {
                    if (!f._inside)
                        continue;
                    vertCount = 0;
                    start = edge = f._anEdge;
                    do {
                        this._vertices[vertIndex].Position.CopyFrom(edge._Org._coords);
                        this._vertices[vertIndex].Data = edge._Org._data;
                        ++vertIndex;
                        ++vertCount;
                        edge = edge._Lnext;
                    } while (edge != start);
                    this._elements[elementIndex++] = startVert;
                    this._elements[elementIndex++] = vertCount;
                    startVert += vertCount;
                }
            };
            Tess.prototype.SignedArea = function (vertices) {
                var area = 0.0;
                for (var i = 0; i < vertices.length; i++) {
                    var v0 = vertices[i];
                    var v1 = vertices[(i + 1) % vertices.length];
                    area += v0.Position.X * v1.Position.Y;
                    area -= v0.Position.Y * v1.Position.X;
                }
                return area * 0.5;
            };
            Tess.prototype.AddContour = function (vertices, forceOrientation) {
                if (forceOrientation === void 0) { forceOrientation = ContourOrientation.Original; }
                if (this._mesh == null) {
                    this._mesh = new Mesh();
                }
                var reverse = false;
                if (forceOrientation != ContourOrientation.Original) {
                    var area = this.SignedArea(vertices);
                    reverse = (forceOrientation == ContourOrientation.Clockwise && area < 0.0) || (forceOrientation == ContourOrientation.CounterClockwise && area > 0.0);
                }
                var e = null;
                for (var i = 0; i < vertices.length; ++i) {
                    if (e == null) {
                        e = this._mesh.MakeEdge();
                        this._mesh.Splice(e, e._Sym);
                    }
                    else {
                        // Create a new vertex and edge which immediately follow e
                        // in the ordering around the left face.
                        this._mesh.SplitEdge(e);
                        e = e._Lnext;
                    }
                    var index = reverse ? vertices.length - 1 - i : i;
                    // The new vertex is now e._Org.
                    e._Org._coords.CopyFrom(vertices[index].Position);
                    e._Org._data = vertices[index].Data;
                    // The winding of an edge says how the winding number changes as we
                    // cross from the edge's right face to its left face.  We add the
                    // vertices in such an order that a CCW contour will add +1 to
                    // the winding number of the region inside the contour.
                    e._winding = 1;
                    e._Sym._winding = -1;
                }
            };
            Tess.prototype.Tessellate = function (windingRule, elementType, polySize, combineCallback) {
                this._vertices = null;
                this._elements = null;
                this._windingRule = windingRule;
                this._combineCallback = combineCallback;
                if (this._mesh == null) {
                    return;
                }
                // Determine the polygon normal and project vertices onto the plane
                // of the polygon.
                this.ProjectPolygon();
                // ComputeInterior computes the planar arrangement specified
                // by the given contours, and further subdivides this arrangement
                // into regions.  Each region is marked "inside" if it belongs
                // to the polygon, according to the rule given by windingRule.
                // Each interior region is guaranteed be monotone.
                this.ComputeInterior();
                // If the user wants only the boundary contours, we throw away all edges
                // except those which separate the interior from the exterior.
                // Otherwise we tessellate all the regions marked "inside".
                if (elementType == ElementType.BoundaryContours) {
                    this.SetWindingNumber(1, true);
                }
                else {
                    this.TessellateInterior();
                }
                this._mesh.Check();
                if (elementType == ElementType.BoundaryContours) {
                    this.OutputContours();
                }
                else {
                    this.OutputPolymesh(elementType, polySize);
                }
                this._mesh = null;
            };
            Tess.prototype.RegionBelow = function (reg) {
                return reg._nodeUp._prev._key;
            };
            Tess.prototype.RegionAbove = function (reg) {
                return reg._nodeUp._next._key;
            };
            /// <summary>
            /// Both edges must be directed from right to left (this is the canonical
            /// direction for the upper edge of each region).
            /// 
            /// The strategy is to evaluate a "t" value for each edge at the
            /// current sweep line position, given by tess->event. The calculations
            /// are designed to be very stable, but of course they are not perfect.
            /// 
            /// Special case: if both edge destinations are at the sweep event,
            /// we sort the edges by slope (they would otherwise compare equally).
            /// </summary>
            Tess.prototype.EdgeLeq = function () {
                var _this = this;
                return function (reg1, reg2) {
                    var e1 = reg1._eUp;
                    var e2 = reg2._eUp;
                    if (e1._Dst == _this._event) {
                        if (e2._Dst == _this._event) {
                            // Two edges right of the sweep line which meet at the sweep event.
                            // Sort them by slope.
                            if (Geom.VertLeq(e1._Org, e2._Org)) {
                                return Geom.EdgeSign(e2._Dst, e1._Org, e2._Org) <= 0.0;
                            }
                            return Geom.EdgeSign(e1._Dst, e2._Org, e1._Org) >= 0.0;
                        }
                        return Geom.EdgeSign(e2._Dst, _this._event, e2._Org) <= 0.0;
                    }
                    if (e2._Dst == _this._event) {
                        return Geom.EdgeSign(e1._Dst, _this._event, e1._Org) >= 0.0;
                    }
                    // General case - compute signed distance *from* e1, e2 to event
                    var t1 = Geom.EdgeEval(e1._Dst, _this._event, e1._Org);
                    var t2 = Geom.EdgeEval(e2._Dst, _this._event, e2._Org);
                    return (t1 >= t2);
                };
            };
            Tess.prototype.DeleteRegion = function (reg) {
                if (reg._fixUpperEdge) {
                    // It was created with zero winding number, so it better be
                    // deleted with zero winding number (ie. it better not get merged
                    // with a real edge).
                    Debug.Assert(reg._eUp._winding == 0);
                }
                reg._eUp._activeRegion = null;
                this._dict.Remove(reg._nodeUp);
            };
            /// <summary>
            /// Replace an upper edge which needs fixing (see ConnectRightVertex).
            /// </summary>
            Tess.prototype.FixUpperEdge = function (reg, newEdge) {
                Debug.Assert(reg._fixUpperEdge);
                this._mesh.Delete(reg._eUp);
                reg._fixUpperEdge = false;
                reg._eUp = newEdge;
                newEdge._activeRegion = reg;
            };
            Tess.prototype.TopLeftRegion = function (reg) {
                var org = reg._eUp._Org;
                // Find the region above the uppermost edge with the same origin
                do {
                    reg = this.RegionAbove(reg);
                } while (reg._eUp._Org == org);
                // If the edge above was a temporary edge introduced by ConnectRightVertex,
                // now is the time to fix it.
                if (reg._fixUpperEdge) {
                    var e = this._mesh.Connect(this.RegionBelow(reg)._eUp._Sym, reg._eUp._Lnext);
                    this.FixUpperEdge(reg, e);
                    reg = this.RegionAbove(reg);
                }
                return reg;
            };
            Tess.prototype.TopRightRegion = function (reg) {
                var dst = reg._eUp._Dst;
                // Find the region above the uppermost edge with the same destination
                do {
                    reg = this.RegionAbove(reg);
                } while (reg._eUp._Dst == dst);
                return reg;
            };
            /// <summary>
            /// Add a new active region to the sweep line, *somewhere* below "regAbove"
            /// (according to where the new edge belongs in the sweep-line dictionary).
            /// The upper edge of the new region will be "eNewUp".
            /// Winding number and "inside" flag are not updated.
            /// </summary>
            Tess.prototype.AddRegionBelow = function (regAbove, eNewUp) {
                var regNew = new ActiveRegion();
                regNew._eUp = eNewUp;
                regNew._nodeUp = this._dict.InsertBefore(regAbove._nodeUp, regNew);
                regNew._fixUpperEdge = false;
                regNew._sentinel = false;
                regNew._dirty = false;
                eNewUp._activeRegion = regNew;
                return regNew;
            };
            Tess.prototype.ComputeWinding = function (reg) {
                reg._windingNumber = this.RegionAbove(reg)._windingNumber + reg._eUp._winding;
                reg._inside = Geom.IsWindingInside(this._windingRule, reg._windingNumber);
            };
            /// <summary>
            /// Delete a region from the sweep line. This happens when the upper
            /// and lower chains of a region meet (at a vertex on the sweep line).
            /// The "inside" flag is copied to the appropriate mesh face (we could
            /// not do this before -- since the structure of the mesh is always
            /// changing, this face may not have even existed until now).
            /// </summary>
            Tess.prototype.FinishRegion = function (reg) {
                var e = reg._eUp;
                var f = e._Lface;
                f._inside = reg._inside;
                f._anEdge = e;
                this.DeleteRegion(reg);
            };
            /// <summary>
            /// We are given a vertex with one or more left-going edges.  All affected
            /// edges should be in the edge dictionary.  Starting at regFirst->eUp,
            /// we walk down deleting all regions where both edges have the same
            /// origin vOrg.  At the same time we copy the "inside" flag from the
            /// active region to the face, since at this point each face will belong
            /// to at most one region (this was not necessarily true until this point
            /// in the sweep).  The walk stops at the region above regLast; if regLast
            /// is null we walk as far as possible.  At the same time we relink the
            /// mesh if necessary, so that the ordering of edges around vOrg is the
            /// same as in the dictionary.
            /// </summary>
            Tess.prototype.FinishLeftRegions = function (regFirst, regLast) {
                var regPrev = regFirst;
                var ePrev = regFirst._eUp;
                while (regPrev != regLast) {
                    regPrev._fixUpperEdge = false; // placement was OK
                    var reg = this.RegionBelow(regPrev);
                    var e = reg._eUp;
                    if (e._Org != ePrev._Org) {
                        if (!reg._fixUpperEdge) {
                            // Remove the last left-going edge.  Even though there are no further
                            // edges in the dictionary with this origin, there may be further
                            // such edges in the mesh (if we are adding left edges to a vertex
                            // that has already been processed).  Thus it is important to call
                            // FinishRegion rather than just DeleteRegion.
                            this.FinishRegion(regPrev);
                            break;
                        }
                        // If the edge below was a temporary edge introduced by
                        // ConnectRightVertex, now is the time to fix it.
                        e = this._mesh.Connect(ePrev._Lprev, e._Sym);
                        this.FixUpperEdge(reg, e);
                    }
                    // Relink edges so that ePrev.Onext == e
                    if (ePrev._Onext != e) {
                        this._mesh.Splice(e._Oprev, e);
                        this._mesh.Splice(ePrev, e);
                    }
                    this.FinishRegion(regPrev); // may change reg.eUp
                    ePrev = reg._eUp;
                    regPrev = reg;
                }
                return ePrev;
            };
            /// <summary>
            /// Purpose: insert right-going edges into the edge dictionary, and update
            /// winding numbers and mesh connectivity appropriately.  All right-going
            /// edges share a common origin vOrg.  Edges are inserted CCW starting at
            /// eFirst; the last edge inserted is eLast.Oprev.  If vOrg has any
            /// left-going edges already processed, then eTopLeft must be the edge
            /// such that an imaginary upward vertical segment from vOrg would be
            /// contained between eTopLeft.Oprev and eTopLeft; otherwise eTopLeft
            /// should be null.
            /// </summary>
            Tess.prototype.AddRightEdges = function (regUp, eFirst, eLast, eTopLeft, cleanUp) {
                var firstTime = true;
                var e = eFirst;
                do {
                    Debug.Assert(Geom.VertLeq(e._Org, e._Dst));
                    this.AddRegionBelow(regUp, e._Sym);
                    e = e._Onext;
                } while (e != eLast);
                // Walk *all* right-going edges from e.Org, in the dictionary order,
                // updating the winding numbers of each region, and re-linking the mesh
                // edges to match the dictionary ordering (if necessary).
                if (eTopLeft == null) {
                    eTopLeft = this.RegionBelow(regUp)._eUp._Rprev;
                }
                var regPrev = regUp;
                var reg;
                var ePrev = eTopLeft;
                while (true) {
                    reg = this.RegionBelow(regPrev);
                    e = reg._eUp._Sym;
                    if (e._Org != ePrev._Org)
                        break;
                    if (e._Onext != ePrev) {
                        // Unlink e from its current position, and relink below ePrev
                        this._mesh.Splice(e._Oprev, e);
                        this._mesh.Splice(ePrev._Oprev, e);
                    }
                    // Compute the winding number and "inside" flag for the new regions
                    reg._windingNumber = regPrev._windingNumber - e._winding;
                    reg._inside = Geom.IsWindingInside(this._windingRule, reg._windingNumber);
                    // Check for two outgoing edges with same slope -- process these
                    // before any intersection tests (see example in tessComputeInterior).
                    regPrev._dirty = true;
                    if (!firstTime && this.CheckForRightSplice(regPrev)) {
                        Geom.AddWinding(e, ePrev);
                        this.DeleteRegion(regPrev);
                        this._mesh.Delete(ePrev);
                    }
                    firstTime = false;
                    regPrev = reg;
                    ePrev = e;
                }
                regPrev._dirty = true;
                Debug.Assert(regPrev._windingNumber - e._winding == reg._windingNumber);
                if (cleanUp) {
                    // Check for intersections between newly adjacent edges.
                    this.WalkDirtyRegions(regPrev);
                }
            };
            /// <summary>
            /// Two vertices with idential coordinates are combined into one.
            /// e1.Org is kept, while e2.Org is discarded.
            /// </summary>
            Tess.prototype.SpliceMergeVertices = function (e1, e2) {
                this._mesh.Splice(e1, e2);
            };
            /// <summary>
            /// Find some weights which describe how the intersection vertex is
            /// a linear combination of "org" and "dest".  Each of the two edges
            /// which generated "isect" is allocated 50% of the weight; each edge
            /// splits the weight between its org and dst according to the
            /// relative distance to "isect".
            /// </summary>
            Tess.prototype.VertexWeights = function (isect, org, dst, out) {
                var t1 = Geom.VertL1dist(org, isect);
                var t2 = Geom.VertL1dist(dst, isect);
                out.w0 = 0.5 * t2 / (t1 + t2);
                out.w1 = 0.5 * t1 / (t1 + t2);
                isect._coords.X += out.w0 * org._coords.X + out.w1 * dst._coords.X;
                isect._coords.Y += out.w0 * org._coords.Y + out.w1 * dst._coords.Y;
                isect._coords.Z += out.w0 * org._coords.Z + out.w1 * dst._coords.Z;
            };
            /// <summary>
            /// We've computed a new intersection point, now we need a "data" pointer
            /// from the user so that we can refer to this new vertex in the
            /// rendering callbacks.
            /// </summary>
            Tess.prototype.GetIntersectData = function (isect, orgUp, dstUp, orgLo, dstLo) {
                isect._coords = Vec3.Zero;
                var out1 = { w0: 0, w1: 0 };
                var out2 = { w0: 0, w1: 0 };
                this.VertexWeights(isect, orgUp, dstUp, out1);
                this.VertexWeights(isect, orgLo, dstLo, out2);
                if (this._combineCallback != null) {
                    isect._data = this._combineCallback(isect._coords, [orgUp._data, dstUp._data, orgLo._data, dstLo._data], [out1.w0, out1.w1, out2.w0, out2.w1]);
                }
            };
            /// <summary>
            /// Check the upper and lower edge of "regUp", to make sure that the
            /// eUp->Org is above eLo, or eLo->Org is below eUp (depending on which
            /// origin is leftmost).
            /// 
            /// The main purpose is to splice right-going edges with the same
            /// dest vertex and nearly identical slopes (ie. we can't distinguish
            /// the slopes numerically).  However the splicing can also help us
            /// to recover from numerical errors.  For example, suppose at one
            /// point we checked eUp and eLo, and decided that eUp->Org is barely
            /// above eLo.  Then later, we split eLo into two edges (eg. from
            /// a splice operation like this one).  This can change the result of
            /// our test so that now eUp->Org is incident to eLo, or barely below it.
            /// We must correct this condition to maintain the dictionary invariants.
            /// 
            /// One possibility is to check these edges for intersection again
            /// (ie. CheckForIntersect).  This is what we do if possible.  However
            /// CheckForIntersect requires that tess->event lies between eUp and eLo,
            /// so that it has something to fall back on when the intersection
            /// calculation gives us an unusable answer.  So, for those cases where
            /// we can't check for intersection, this routine fixes the problem
            /// by just splicing the offending vertex into the other edge.
            /// This is a guaranteed solution, no matter how degenerate things get.
            /// Basically this is a combinatorial solution to a numerical problem.
            /// </summary>
            Tess.prototype.CheckForRightSplice = function (regUp) {
                var regLo = this.RegionBelow(regUp);
                var eUp = regUp._eUp;
                var eLo = regLo._eUp;
                if (Geom.VertLeq(eUp._Org, eLo._Org)) {
                    if (Geom.EdgeSign(eLo._Dst, eUp._Org, eLo._Org) > 0.0) {
                        return false;
                    }
                    // eUp.Org appears to be below eLo
                    if (!Geom.VertEq(eUp._Org, eLo._Org)) {
                        // Splice eUp._Org into eLo
                        this._mesh.SplitEdge(eLo._Sym);
                        this._mesh.Splice(eUp, eLo._Oprev);
                        regUp._dirty = regLo._dirty = true;
                    }
                    else if (eUp._Org != eLo._Org) {
                        // merge the two vertices, discarding eUp.Org
                        this._pq.Remove(eUp._Org._pqHandle);
                        this.SpliceMergeVertices(eLo._Oprev, eUp);
                    }
                }
                else {
                    if (Geom.EdgeSign(eUp._Dst, eLo._Org, eUp._Org) < 0.0) {
                        return false;
                    }
                    // eLo.Org appears to be above eUp, so splice eLo.Org into eUp
                    this.RegionAbove(regUp)._dirty = regUp._dirty = true;
                    this._mesh.SplitEdge(eUp._Sym);
                    this._mesh.Splice(eLo._Oprev, eUp);
                }
                return true;
            };
            /// <summary>
            /// Check the upper and lower edge of "regUp", to make sure that the
            /// eUp->Dst is above eLo, or eLo->Dst is below eUp (depending on which
            /// destination is rightmost).
            /// 
            /// Theoretically, this should always be true.  However, splitting an edge
            /// into two pieces can change the results of previous tests.  For example,
            /// suppose at one point we checked eUp and eLo, and decided that eUp->Dst
            /// is barely above eLo.  Then later, we split eLo into two edges (eg. from
            /// a splice operation like this one).  This can change the result of
            /// the test so that now eUp->Dst is incident to eLo, or barely below it.
            /// We must correct this condition to maintain the dictionary invariants
            /// (otherwise new edges might get inserted in the wrong place in the
            /// dictionary, and bad stuff will happen).
            /// 
            /// We fix the problem by just splicing the offending vertex into the
            /// other edge.
            /// </summary>
            Tess.prototype.CheckForLeftSplice = function (regUp) {
                var regLo = this.RegionBelow(regUp);
                var eUp = regUp._eUp;
                var eLo = regLo._eUp;
                Debug.Assert(!Geom.VertEq(eUp._Dst, eLo._Dst));
                if (Geom.VertLeq(eUp._Dst, eLo._Dst)) {
                    if (Geom.EdgeSign(eUp._Dst, eLo._Dst, eUp._Org) < 0.0) {
                        return false;
                    }
                    // eLo.Dst is above eUp, so splice eLo.Dst into eUp
                    this.RegionAbove(regUp)._dirty = regUp._dirty = true;
                    var e = this._mesh.SplitEdge(eUp);
                    this._mesh.Splice(eLo._Sym, e);
                    e._Lface._inside = regUp._inside;
                }
                else {
                    if (Geom.EdgeSign(eLo._Dst, eUp._Dst, eLo._Org) > 0.0) {
                        return false;
                    }
                    // eUp.Dst is below eLo, so splice eUp.Dst into eLo
                    regUp._dirty = regLo._dirty = true;
                    var e = this._mesh.SplitEdge(eLo);
                    this._mesh.Splice(eUp._Lnext, eLo._Sym);
                    e._Rface._inside = regUp._inside;
                }
                return true;
            };
            /// <summary>
            /// Check the upper and lower edges of the given region to see if
            /// they intersect.  If so, create the intersection and add it
            /// to the data structures.
            /// 
            /// Returns TRUE if adding the new intersection resulted in a recursive
            /// call to AddRightEdges(); in this case all "dirty" regions have been
            /// checked for intersections, and possibly regUp has been deleted.
            /// </summary>
            Tess.prototype.CheckForIntersect = function (regUp) {
                var regLo = this.RegionBelow(regUp);
                var eUp = regUp._eUp;
                var eLo = regLo._eUp;
                var orgUp = eUp._Org;
                var orgLo = eLo._Org;
                var dstUp = eUp._Dst;
                var dstLo = eLo._Dst;
                Debug.Assert(!Geom.VertEq(dstLo, dstUp));
                Debug.Assert(Geom.EdgeSign(dstUp, this._event, orgUp) <= 0.0);
                Debug.Assert(Geom.EdgeSign(dstLo, this._event, orgLo) >= 0.0);
                Debug.Assert(orgUp != this._event && orgLo != this._event);
                Debug.Assert(!regUp._fixUpperEdge && !regLo._fixUpperEdge);
                if (orgUp == orgLo) {
                    // right endpoints are the same
                    return false;
                }
                var tMinUp = Math.min(orgUp._t, dstUp._t);
                var tMaxLo = Math.max(orgLo._t, dstLo._t);
                if (tMinUp > tMaxLo) {
                    // t ranges do not overlap
                    return false;
                }
                if (Geom.VertLeq(orgUp, orgLo)) {
                    if (Geom.EdgeSign(dstLo, orgUp, orgLo) > 0.0) {
                        return false;
                    }
                }
                else {
                    if (Geom.EdgeSign(dstUp, orgLo, orgUp) < 0.0) {
                        return false;
                    }
                }
                // At this point the edges intersect, at least marginally
                var isect = new Vertex();
                Geom.EdgeIntersect(dstUp, orgUp, dstLo, orgLo, isect);
                // The following properties are guaranteed:
                Debug.Assert(Math.min(orgUp._t, dstUp._t) <= isect._t);
                Debug.Assert(isect._t <= Math.max(orgLo._t, dstLo._t));
                Debug.Assert(Math.min(dstLo._s, dstUp._s) <= isect._s);
                Debug.Assert(isect._s <= Math.max(orgLo._s, orgUp._s));
                if (Geom.VertLeq(isect, this._event)) {
                    // The intersection point lies slightly to the left of the sweep line,
                    // so move it until it''s slightly to the right of the sweep line.
                    // (If we had perfect numerical precision, this would never happen
                    // in the first place). The easiest and safest thing to do is
                    // replace the intersection by tess._event.
                    isect._s = this._event._s;
                    isect._t = this._event._t;
                }
                // Similarly, if the computed intersection lies to the right of the
                // rightmost origin (which should rarely happen), it can cause
                // unbelievable inefficiency on sufficiently degenerate inputs.
                // (If you have the test program, try running test54.d with the
                // "X zoom" option turned on).
                var orgMin = Geom.VertLeq(orgUp, orgLo) ? orgUp : orgLo;
                if (Geom.VertLeq(orgMin, isect)) {
                    isect._s = orgMin._s;
                    isect._t = orgMin._t;
                }
                if (Geom.VertEq(isect, orgUp) || Geom.VertEq(isect, orgLo)) {
                    // Easy case -- intersection at one of the right endpoints
                    this.CheckForRightSplice(regUp);
                    return false;
                }
                if ((!Geom.VertEq(dstUp, this._event)
                    && Geom.EdgeSign(dstUp, this._event, isect) >= 0.0)
                    || (!Geom.VertEq(dstLo, this._event)
                        && Geom.EdgeSign(dstLo, this._event, isect) <= 0.0)) {
                    // Very unusual -- the new upper or lower edge would pass on the
                    // wrong side of the sweep event, or through it. This can happen
                    // due to very small numerical errors in the intersection calculation.
                    if (dstLo == this._event) {
                        // Splice dstLo into eUp, and process the new region(s)
                        this._mesh.SplitEdge(eUp._Sym);
                        this._mesh.Splice(eLo._Sym, eUp);
                        regUp = this.TopLeftRegion(regUp);
                        eUp = this.RegionBelow(regUp)._eUp;
                        this.FinishLeftRegions(this.RegionBelow(regUp), regLo);
                        this.AddRightEdges(regUp, eUp._Oprev, eUp, eUp, true);
                        return true;
                    }
                    if (dstUp == this._event) {
                        /* Splice dstUp into eLo, and process the new region(s) */
                        this._mesh.SplitEdge(eLo._Sym);
                        this._mesh.Splice(eUp._Lnext, eLo._Oprev);
                        regLo = regUp;
                        regUp = this.TopRightRegion(regUp);
                        var e = this.RegionBelow(regUp)._eUp._Rprev;
                        regLo._eUp = eLo._Oprev;
                        eLo = this.FinishLeftRegions(regLo, null);
                        this.AddRightEdges(regUp, eLo._Onext, eUp._Rprev, e, true);
                        return true;
                    }
                    // Special case: called from ConnectRightVertex. If either
                    // edge passes on the wrong side of tess._event, split it
                    // (and wait for ConnectRightVertex to splice it appropriately).
                    if (Geom.EdgeSign(dstUp, this._event, isect) >= 0.0) {
                        this.RegionAbove(regUp)._dirty = regUp._dirty = true;
                        this._mesh.SplitEdge(eUp._Sym);
                        eUp._Org._s = this._event._s;
                        eUp._Org._t = this._event._t;
                    }
                    if (Geom.EdgeSign(dstLo, this._event, isect) <= 0.0) {
                        regUp._dirty = regLo._dirty = true;
                        this._mesh.SplitEdge(eLo._Sym);
                        eLo._Org._s = this._event._s;
                        eLo._Org._t = this._event._t;
                    }
                    // leave the rest for ConnectRightVertex
                    return false;
                }
                // General case -- split both edges, splice into new vertex.
                // When we do the splice operation, the order of the arguments is
                // arbitrary as far as correctness goes. However, when the operation
                // creates a new face, the work done is proportional to the size of
                // the new face.  We expect the faces in the processed part of
                // the mesh (ie. eUp._Lface) to be smaller than the faces in the
                // unprocessed original contours (which will be eLo._Oprev._Lface).
                this._mesh.SplitEdge(eUp._Sym);
                this._mesh.SplitEdge(eLo._Sym);
                this._mesh.Splice(eLo._Oprev, eUp);
                eUp._Org._s = isect._s;
                eUp._Org._t = isect._t;
                eUp._Org._pqHandle = this._pq.Insert(eUp._Org);
                if (eUp._Org._pqHandle._handle == PQHandle.Invalid) {
                    throw "PQHandle should not be invalid";
                }
                this.GetIntersectData(eUp._Org, orgUp, dstUp, orgLo, dstLo);
                this.RegionAbove(regUp)._dirty = regUp._dirty = regLo._dirty = true;
                return false;
            };
            /// <summary>
            /// When the upper or lower edge of any region changes, the region is
            /// marked "dirty".  This routine walks through all the dirty regions
            /// and makes sure that the dictionary invariants are satisfied
            /// (see the comments at the beginning of this file).  Of course
            /// new dirty regions can be created as we make changes to restore
            /// the invariants.
            /// </summary>
            Tess.prototype.WalkDirtyRegions = function (regUp) {
                var regLo = this.RegionBelow(regUp);
                var eUp;
                var eLo;
                while (true) {
                    // Find the lowest dirty region (we walk from the bottom up).
                    while (regLo._dirty) {
                        regUp = regLo;
                        regLo = this.RegionBelow(regLo);
                    }
                    if (!regUp._dirty) {
                        regLo = regUp;
                        regUp = this.RegionAbove(regUp);
                        if (regUp == null || !regUp._dirty) {
                            // We've walked all the dirty regions
                            return;
                        }
                    }
                    regUp._dirty = false;
                    eUp = regUp._eUp;
                    eLo = regLo._eUp;
                    if (eUp._Dst != eLo._Dst) {
                        // Check that the edge ordering is obeyed at the Dst vertices.
                        if (this.CheckForLeftSplice(regUp)) {
                            // If the upper or lower edge was marked fixUpperEdge, then
                            // we no longer need it (since these edges are needed only for
                            // vertices which otherwise have no right-going edges).
                            if (regLo._fixUpperEdge) {
                                this.DeleteRegion(regLo);
                                this._mesh.Delete(eLo);
                                regLo = this.RegionBelow(regUp);
                                eLo = regLo._eUp;
                            }
                            else if (regUp._fixUpperEdge) {
                                this.DeleteRegion(regUp);
                                this._mesh.Delete(eUp);
                                regUp = this.RegionAbove(regLo);
                                eUp = regUp._eUp;
                            }
                        }
                    }
                    if (eUp._Org != eLo._Org) {
                        if (eUp._Dst != eLo._Dst
                            && !regUp._fixUpperEdge && !regLo._fixUpperEdge
                            && (eUp._Dst == this._event || eLo._Dst == this._event)) {
                            // When all else fails in CheckForIntersect(), it uses tess._event
                            // as the intersection location. To make this possible, it requires
                            // that tess._event lie between the upper and lower edges, and also
                            // that neither of these is marked fixUpperEdge (since in the worst
                            // case it might splice one of these edges into tess.event, and
                            // violate the invariant that fixable edges are the only right-going
                            // edge from their associated vertex).
                            if (this.CheckForIntersect(regUp)) {
                                // WalkDirtyRegions() was called recursively; we're done
                                return;
                            }
                        }
                        else {
                            // Even though we can't use CheckForIntersect(), the Org vertices
                            // may violate the dictionary edge ordering. Check and correct this.
                            this.CheckForRightSplice(regUp);
                        }
                    }
                    if (eUp._Org == eLo._Org && eUp._Dst == eLo._Dst) {
                        // A degenerate loop consisting of only two edges -- delete it.
                        Geom.AddWinding(eLo, eUp);
                        this.DeleteRegion(regUp);
                        this._mesh.Delete(eUp);
                        regUp = this.RegionAbove(regLo);
                    }
                }
            };
            /// <summary>
            /// Purpose: connect a "right" vertex vEvent (one where all edges go left)
            /// to the unprocessed portion of the mesh.  Since there are no right-going
            /// edges, two regions (one above vEvent and one below) are being merged
            /// into one.  "regUp" is the upper of these two regions.
            /// 
            /// There are two reasons for doing this (adding a right-going edge):
            ///  - if the two regions being merged are "inside", we must add an edge
            ///    to keep them separated (the combined region would not be monotone).
            ///  - in any case, we must leave some record of vEvent in the dictionary,
            ///    so that we can merge vEvent with features that we have not seen yet.
            ///    For example, maybe there is a vertical edge which passes just to
            ///    the right of vEvent; we would like to splice vEvent into this edge.
            /// 
            /// However, we don't want to connect vEvent to just any vertex.  We don''t
            /// want the new edge to cross any other edges; otherwise we will create
            /// intersection vertices even when the input data had no self-intersections.
            /// (This is a bad thing; if the user's input data has no intersections,
            /// we don't want to generate any false intersections ourselves.)
            /// 
            /// Our eventual goal is to connect vEvent to the leftmost unprocessed
            /// vertex of the combined region (the union of regUp and regLo).
            /// But because of unseen vertices with all right-going edges, and also
            /// new vertices which may be created by edge intersections, we don''t
            /// know where that leftmost unprocessed vertex is.  In the meantime, we
            /// connect vEvent to the closest vertex of either chain, and mark the region
            /// as "fixUpperEdge".  This flag says to delete and reconnect this edge
            /// to the next processed vertex on the boundary of the combined region.
            /// Quite possibly the vertex we connected to will turn out to be the
            /// closest one, in which case we won''t need to make any changes.
            /// </summary>
            Tess.prototype.ConnectRightVertex = function (regUp, eBottomLeft) {
                var eTopLeft = eBottomLeft._Onext;
                var regLo = this.RegionBelow(regUp);
                var eUp = regUp._eUp;
                var eLo = regLo._eUp;
                var degenerate = false;
                if (eUp._Dst != eLo._Dst) {
                    this.CheckForIntersect(regUp);
                }
                // Possible new degeneracies: upper or lower edge of regUp may pass
                // through vEvent, or may coincide with new intersection vertex
                if (Geom.VertEq(eUp._Org, this._event)) {
                    this._mesh.Splice(eTopLeft._Oprev, eUp);
                    regUp = this.TopLeftRegion(regUp);
                    eTopLeft = this.RegionBelow(regUp)._eUp;
                    this.FinishLeftRegions(this.RegionBelow(regUp), regLo);
                    degenerate = true;
                }
                if (Geom.VertEq(eLo._Org, this._event)) {
                    this._mesh.Splice(eBottomLeft, eLo._Oprev);
                    eBottomLeft = this.FinishLeftRegions(regLo, null);
                    degenerate = true;
                }
                if (degenerate) {
                    this.AddRightEdges(regUp, eBottomLeft._Onext, eTopLeft, eTopLeft, true);
                    return;
                }
                // Non-degenerate situation -- need to add a temporary, fixable edge.
                // Connect to the closer of eLo.Org, eUp.Org.
                var eNew;
                if (Geom.VertLeq(eLo._Org, eUp._Org)) {
                    eNew = eLo._Oprev;
                }
                else {
                    eNew = eUp;
                }
                eNew = this._mesh.Connect(eBottomLeft._Lprev, eNew);
                // Prevent cleanup, otherwise eNew might disappear before we've even
                // had a chance to mark it as a temporary edge.
                this.AddRightEdges(regUp, eNew, eNew._Onext, eNew._Onext, false);
                eNew._Sym._activeRegion._fixUpperEdge = true;
                this.WalkDirtyRegions(regUp);
            };
            /// <summary>
            /// The event vertex lies exacty on an already-processed edge or vertex.
            /// Adding the new vertex involves splicing it into the already-processed
            /// part of the mesh.
            /// </summary>
            Tess.prototype.ConnectLeftDegenerate = function (regUp, vEvent) {
                var e = regUp._eUp;
                if (Geom.VertEq(e._Org, vEvent)) {
                    // e.Org is an unprocessed vertex - just combine them, and wait
                    // for e.Org to be pulled from the queue
                    // C# : in the C version, there is a flag but it was never implemented
                    // the vertices are before beginning the tesselation
                    throw ("Vertices should have been merged before");
                }
                if (!Geom.VertEq(e._Dst, vEvent)) {
                    // General case -- splice vEvent into edge e which passes through it
                    this._mesh.SplitEdge(e._Sym);
                    if (regUp._fixUpperEdge) {
                        // This edge was fixable -- delete unused portion of original edge
                        this._mesh.Delete(e._Onext);
                        regUp._fixUpperEdge = false;
                    }
                    this._mesh.Splice(vEvent._anEdge, e);
                    this.SweepEvent(vEvent); // recurse
                    return;
                }
                // See above
                throw ("Vertices should have been merged before");
            };
            /// <summary>
            /// Purpose: connect a "left" vertex (one where both edges go right)
            /// to the processed portion of the mesh.  Let R be the active region
            /// containing vEvent, and let U and L be the upper and lower edge
            /// chains of R.  There are two possibilities:
            /// 
            /// - the normal case: split R into two regions, by connecting vEvent to
            ///   the rightmost vertex of U or L lying to the left of the sweep line
            /// 
            /// - the degenerate case: if vEvent is close enough to U or L, we
            ///   merge vEvent into that edge chain.  The subcases are:
            ///     - merging with the rightmost vertex of U or L
            ///     - merging with the active edge of U or L
            ///     - merging with an already-processed portion of U or L
            /// </summary>
            Tess.prototype.ConnectLeftVertex = function (vEvent) {
                var tmp = new ActiveRegion();
                // Get a pointer to the active region containing vEvent
                tmp._eUp = vEvent._anEdge._Sym;
                var regUp = this._dict.Find(tmp).Key;
                var regLo = this.RegionBelow(regUp);
                if (regLo == null) {
                    // This may happen if the input polygon is coplanar.
                    return;
                }
                var eUp = regUp._eUp;
                var eLo = regLo._eUp;
                // Try merging with U or L first
                if (Geom.EdgeSign(eUp._Dst, vEvent, eUp._Org) == 0.0) {
                    this.ConnectLeftDegenerate(regUp, vEvent);
                    return;
                }
                // Connect vEvent to rightmost processed vertex of either chain.
                // e._Dst is the vertex that we will connect to vEvent.
                var reg = Geom.VertLeq(eLo._Dst, eUp._Dst) ? regUp : regLo;
                if (regUp._inside || reg._fixUpperEdge) {
                    var eNew;
                    if (reg == regUp) {
                        eNew = this._mesh.Connect(vEvent._anEdge._Sym, eUp._Lnext);
                    }
                    else {
                        eNew = this._mesh.Connect(eLo._Dnext, vEvent._anEdge)._Sym;
                    }
                    if (reg._fixUpperEdge) {
                        this.FixUpperEdge(reg, eNew);
                    }
                    else {
                        this.ComputeWinding(this.AddRegionBelow(regUp, eNew));
                    }
                    this.SweepEvent(vEvent);
                }
                else {
                    // The new vertex is in a region which does not belong to the polygon.
                    // We don't need to connect this vertex to the rest of the mesh.
                    this.AddRightEdges(regUp, vEvent._anEdge, vEvent._anEdge, null, true);
                }
            };
            /// <summary>
            /// Does everything necessary when the sweep line crosses a vertex.
            /// Updates the mesh and the edge dictionary.
            /// </summary>
            Tess.prototype.SweepEvent = function (vEvent) {
                this._event = vEvent;
                // Check if this vertex is the right endpoint of an edge that is
                // already in the dictionary. In this case we don't need to waste
                // time searching for the location to insert new edges.
                var e = vEvent._anEdge;
                while (e._activeRegion == null) {
                    e = e._Onext;
                    if (e == vEvent._anEdge) {
                        // All edges go right -- not incident to any processed edges
                        this.ConnectLeftVertex(vEvent);
                        return;
                    }
                }
                // Processing consists of two phases: first we "finish" all the
                // active regions where both the upper and lower edges terminate
                // at vEvent (ie. vEvent is closing off these regions).
                // We mark these faces "inside" or "outside" the polygon according
                // to their winding number, and delete the edges from the dictionary.
                // This takes care of all the left-going edges from vEvent.
                var regUp = this.TopLeftRegion(e._activeRegion);
                var reg = this.RegionBelow(regUp);
                var eTopLeft = reg._eUp;
                var eBottomLeft = this.FinishLeftRegions(reg, null);
                // Next we process all the right-going edges from vEvent. This
                // involves adding the edges to the dictionary, and creating the
                // associated "active regions" which record information about the
                // regions between adjacent dictionary edges.
                if (eBottomLeft._Onext == eTopLeft) {
                    // No right-going edges -- add a temporary "fixable" edge
                    this.ConnectRightVertex(regUp, eBottomLeft);
                }
                else {
                    this.AddRightEdges(regUp, eBottomLeft._Onext, eTopLeft, eTopLeft, true);
                }
            };
            /// <summary>
            /// Make the sentinel coordinates big enough that they will never be
            /// merged with real input features.
            /// 
            /// We add two sentinel edges above and below all other edges,
            /// to avoid special cases at the top and bottom.
            /// </summary>
            Tess.prototype.AddSentinel = function (smin, smax, t) {
                var e = this._mesh.MakeEdge();
                e._Org._s = smax;
                e._Org._t = t;
                e._Dst._s = smin;
                e._Dst._t = t;
                this._event = e._Dst; // initialize it
                var reg = new ActiveRegion();
                reg._eUp = e;
                reg._windingNumber = 0;
                reg._inside = false;
                reg._fixUpperEdge = false;
                reg._sentinel = true;
                reg._dirty = false;
                reg._nodeUp = this._dict.Insert(reg);
            };
            /// <summary>
            /// We maintain an ordering of edge intersections with the sweep line.
            /// This order is maintained in a dynamic dictionary.
            /// </summary>
            Tess.prototype.InitEdgeDict = function () {
                this._dict = new Dict(this.EdgeLeq());
                this.AddSentinel(-this.SentinelCoord, this.SentinelCoord, -this.SentinelCoord);
                this.AddSentinel(-this.SentinelCoord, this.SentinelCoord, +this.SentinelCoord);
            };
            Tess.prototype.DoneEdgeDict = function () {
                var fixedEdges = 0;
                var reg;
                while ((reg = this._dict.Min().Key) != null) {
                    // At the end of all processing, the dictionary should contain
                    // only the two sentinel edges, plus at most one "fixable" edge
                    // created by ConnectRightVertex().
                    if (!reg._sentinel) {
                        Debug.Assert(reg._fixUpperEdge);
                        Debug.Assert(++fixedEdges == 1);
                    }
                    Debug.Assert(reg._windingNumber == 0);
                    this.DeleteRegion(reg);
                }
                this._dict = null;
            };
            /// <summary>
            /// Remove zero-length edges, and contours with fewer than 3 vertices.
            /// </summary>
            Tess.prototype.RemoveDegenerateEdges = function () {
                var eHead = this._mesh._eHead;
                var e;
                var eNext;
                var eLnext;
                for (e = eHead._next; e != eHead; e = eNext) {
                    eNext = e._next;
                    eLnext = e._Lnext;
                    if (Geom.VertEq(e._Org, e._Dst) && e._Lnext._Lnext != e) {
                        // Zero-length edge, contour has at least 3 edges
                        this.SpliceMergeVertices(eLnext, e); // deletes e.Org
                        this._mesh.Delete(e); // e is a self-loop
                        e = eLnext;
                        eLnext = e._Lnext;
                    }
                    if (eLnext._Lnext == e) {
                        // Degenerate contour (one or two edges)
                        if (eLnext != e) {
                            if (eLnext == eNext || eLnext == eNext._Sym) {
                                eNext = eNext._next;
                            }
                            this._mesh.Delete(eLnext);
                        }
                        if (e == eNext || e == eNext._Sym) {
                            eNext = eNext._next;
                        }
                        this._mesh.Delete(e);
                    }
                }
            };
            /// <summary>
            /// Insert all vertices into the priority queue which determines the
            /// order in which vertices cross the sweep line.
            /// </summary>
            Tess.prototype.InitPriorityQ = function () {
                var vHead = this._mesh._vHead;
                var v;
                var vertexCount = 0;
                for (v = vHead._next; v != vHead; v = v._next) {
                    vertexCount++;
                }
                // Make sure there is enough space for sentinels.
                vertexCount += 8;
                this._pq = new PriorityQueue(vertexCount, Geom.VertLeq);
                vHead = this._mesh._vHead;
                for (v = vHead._next; v != vHead; v = v._next) {
                    v._pqHandle = this._pq.Insert(v);
                    if (v._pqHandle._handle == PQHandle.Invalid) {
                        throw ("PQHandle should not be invalid");
                    }
                }
                this._pq.Init();
            };
            Tess.prototype.DonePriorityQ = function () {
                this._pq = null;
            };
            /// <summary>
            /// Delete any degenerate faces with only two edges.  WalkDirtyRegions()
            /// will catch almost all of these, but it won't catch degenerate faces
            /// produced by splice operations on already-processed edges.
            /// The two places this can happen are in FinishLeftRegions(), when
            /// we splice in a "temporary" edge produced by ConnectRightVertex(),
            /// and in CheckForLeftSplice(), where we splice already-processed
            /// edges to ensure that our dictionary invariants are not violated
            /// by numerical errors.
            /// 
            /// In both these cases it is *very* dangerous to delete the offending
            /// edge at the time, since one of the routines further up the stack
            /// will sometimes be keeping a pointer to that edge.
            /// </summary>
            Tess.prototype.RemoveDegenerateFaces = function () {
                var f;
                var fNext;
                var e;
                for (f = this._mesh._fHead._next; f != this._mesh._fHead; f = fNext) {
                    fNext = f._next;
                    e = f._anEdge;
                    Debug.Assert(e._Lnext != e);
                    if (e._Lnext._Lnext == e) {
                        // A face with only two edges
                        Geom.AddWinding(e._Onext, e);
                        this._mesh.Delete(e);
                    }
                }
            };
            /// <summary>
            /// ComputeInterior computes the planar arrangement specified
            /// by the given contours, and further subdivides this arrangement
            /// into regions.  Each region is marked "inside" if it belongs
            /// to the polygon, according to the rule given by windingRule.
            /// Each interior region is guaranteed to be monotone.
            /// </summary>
            Tess.prototype.ComputeInterior = function () {
                // Each vertex defines an event for our sweep line. Start by inserting
                // all the vertices in a priority queue. Events are processed in
                // lexicographic order, ie.
                // 
                // e1 < e2  iff  e1.x < e2.x || (e1.x == e2.x && e1.y < e2.y)
                this.RemoveDegenerateEdges();
                this.InitPriorityQ();
                this.RemoveDegenerateFaces();
                this.InitEdgeDict();
                var v;
                var vNext;
                while ((v = this._pq.ExtractMin()) != null) {
                    while (true) {
                        vNext = this._pq.Minimum();
                        if (vNext == null || !Geom.VertEq(vNext, v)) {
                            break;
                        }
                        // Merge together all vertices at exactly the same location.
                        // This is more efficient than processing them one at a time,
                        // simplifies the code (see ConnectLeftDegenerate), and is also
                        // important for correct handling of certain degenerate cases.
                        // For example, suppose there are two identical edges A and B
                        // that belong to different contours (so without this code they would
                        // be processed by separate sweep events). Suppose another edge C
                        // crosses A and B from above. When A is processed, we split it
                        // at its intersection point with C. However this also splits C,
                        // so when we insert B we may compute a slightly different
                        // intersection point. This might leave two edges with a small
                        // gap between them. This kind of error is especially obvious
                        // when using boundary extraction (BoundaryOnly).
                        vNext = this._pq.ExtractMin();
                        this.SpliceMergeVertices(v._anEdge, vNext._anEdge);
                    }
                    this.SweepEvent(v);
                }
                this.DoneEdgeDict();
                this.DonePriorityQ();
                this.RemoveDegenerateFaces();
                this._mesh.Check();
            };
            return Tess;
        }());
        LibTess.Tess = Tess;
    })(LibTess = U1.LibTess || (U1.LibTess = {}));
})(U1 || (U1 = {}));
/// <reference path="u1math.ts" />
var U1;
(function (U1) {
    var Colors = (function () {
        function Colors() {
        }
        Object.defineProperty(Colors, "AliceBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xfff0f8ff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "AntiqueWhite", {
            get: function () {
                return U1.Color.FromUInt32(0xfffaebd7);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Aqua", {
            get: function () {
                return U1.Color.FromUInt32(0xff00ffff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Aquamarine", {
            get: function () {
                return U1.Color.FromUInt32(0xff7fffd4);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Azure", {
            get: function () {
                return U1.Color.FromUInt32(0xfff0ffff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Beige", {
            get: function () {
                return U1.Color.FromUInt32(0xfff5f5dc);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Bisque", {
            get: function () {
                return U1.Color.FromUInt32(0xffffe4c4);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Black", {
            get: function () {
                return U1.Color.FromUInt32(0xff000000);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "BlanchedAlmond", {
            get: function () {
                return U1.Color.FromUInt32(0xffffebcd);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Blue", {
            get: function () {
                return U1.Color.FromUInt32(0xff0000ff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "BlueViolet", {
            get: function () {
                return U1.Color.FromUInt32(0xff8a2be2);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Brown", {
            get: function () {
                return U1.Color.FromUInt32(0xffa52a2a);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "BurlyWood", {
            get: function () {
                return U1.Color.FromUInt32(0xffdeb887);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "CadetBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff5f9ea0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Chartreuse", {
            get: function () {
                return U1.Color.FromUInt32(0xff7fff00);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Chocolate", {
            get: function () {
                return U1.Color.FromUInt32(0xffd2691e);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Coral", {
            get: function () {
                return U1.Color.FromUInt32(0xffff7f50);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "CornflowerBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff6495ed);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Cornsilk", {
            get: function () {
                return U1.Color.FromUInt32(0xfffff8dc);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Crimson", {
            get: function () {
                return U1.Color.FromUInt32(0xffdc143c);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Cyan", {
            get: function () {
                return U1.Color.FromUInt32(0xff00ffff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff00008b);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkCyan", {
            get: function () {
                return U1.Color.FromUInt32(0xff008b8b);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkGoldenrod", {
            get: function () {
                return U1.Color.FromUInt32(0xffb8860b);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkGray", {
            get: function () {
                return U1.Color.FromUInt32(0xffa9a9a9);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff006400);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkKhaki", {
            get: function () {
                return U1.Color.FromUInt32(0xffbdb76b);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkMagenta", {
            get: function () {
                return U1.Color.FromUInt32(0xff8b008b);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkOliveGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff556b2f);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkOrange", {
            get: function () {
                return U1.Color.FromUInt32(0xffff8c00);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkOrchid", {
            get: function () {
                return U1.Color.FromUInt32(0xff9932cc);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkRed", {
            get: function () {
                return U1.Color.FromUInt32(0xff8b0000);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkSalmon", {
            get: function () {
                return U1.Color.FromUInt32(0xffe9967a);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkSeaGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff8fbc8f);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkSlateBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff483d8b);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkSlateGray", {
            get: function () {
                return U1.Color.FromUInt32(0xff2f4f4f);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkTurquoise", {
            get: function () {
                return U1.Color.FromUInt32(0xff00ced1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DarkViolet", {
            get: function () {
                return U1.Color.FromUInt32(0xff9400d3);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DeepPink", {
            get: function () {
                return U1.Color.FromUInt32(0xffff1493);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DeepSkyBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff00bfff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DimGray", {
            get: function () {
                return U1.Color.FromUInt32(0xff696969);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "DodgerBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff1e90ff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Firebrick", {
            get: function () {
                return U1.Color.FromUInt32(0xffb22222);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "FloralWhite", {
            get: function () {
                return U1.Color.FromUInt32(0xfffffaf0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "ForestGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff228b22);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Fuchsia", {
            get: function () {
                return U1.Color.FromUInt32(0xffff00ff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Gainsboro", {
            get: function () {
                return U1.Color.FromUInt32(0xffdcdcdc);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "GhostWhite", {
            get: function () {
                return U1.Color.FromUInt32(0xfff8f8ff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Gold", {
            get: function () {
                return U1.Color.FromUInt32(0xffffd700);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Goldenrod", {
            get: function () {
                return U1.Color.FromUInt32(0xffdaa520);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Gray", {
            get: function () {
                return U1.Color.FromUInt32(0xff808080);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Green", {
            get: function () {
                return U1.Color.FromUInt32(0xff008000);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "GreenYellow", {
            get: function () {
                return U1.Color.FromUInt32(0xffadff2f);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Honeydew", {
            get: function () {
                return U1.Color.FromUInt32(0xfff0fff0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "HotPink", {
            get: function () {
                return U1.Color.FromUInt32(0xffff69b4);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "IndianRed", {
            get: function () {
                return U1.Color.FromUInt32(0xffcd5c5c);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Indigo", {
            get: function () {
                return U1.Color.FromUInt32(0xff4b0082);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Ivory", {
            get: function () {
                return U1.Color.FromUInt32(0xfffffff0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Khaki", {
            get: function () {
                return U1.Color.FromUInt32(0xfff0e68c);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Lavender", {
            get: function () {
                return U1.Color.FromUInt32(0xffe6e6fa);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LavenderBlush", {
            get: function () {
                return U1.Color.FromUInt32(0xfffff0f5);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LawnGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff7cfc00);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LemonChiffon", {
            get: function () {
                return U1.Color.FromUInt32(0xfffffacd);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xffadd8e6);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightCoral", {
            get: function () {
                return U1.Color.FromUInt32(0xfff08080);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightCyan", {
            get: function () {
                return U1.Color.FromUInt32(0xffe0ffff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightGoldenrodYellow", {
            get: function () {
                return U1.Color.FromUInt32(0xfffafad2);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightGray", {
            get: function () {
                return U1.Color.FromUInt32(0xffd3d3d3);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff90ee90);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightPink", {
            get: function () {
                return U1.Color.FromUInt32(0xffffb6c1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightSalmon", {
            get: function () {
                return U1.Color.FromUInt32(0xffffa07a);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightSeaGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff20b2aa);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightSkyBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff87cefa);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightSlateGray", {
            get: function () {
                return U1.Color.FromUInt32(0xff778899);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightSteelBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xffb0c4de);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LightYellow", {
            get: function () {
                return U1.Color.FromUInt32(0xffffffe0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Lime", {
            get: function () {
                return U1.Color.FromUInt32(0xff00ff00);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "LimeGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff32cd32);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Linen", {
            get: function () {
                return U1.Color.FromUInt32(0xfffaf0e6);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Magenta", {
            get: function () {
                return U1.Color.FromUInt32(0xffff00ff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Maroon", {
            get: function () {
                return U1.Color.FromUInt32(0xff800000);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "MediumAquamarine", {
            get: function () {
                return U1.Color.FromUInt32(0xff66cdaa);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "MediumBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff0000cd);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "MediumOrchid", {
            get: function () {
                return U1.Color.FromUInt32(0xffba55d3);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "MediumPurple", {
            get: function () {
                return U1.Color.FromUInt32(0xff9370db);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "MediumSeaGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff3cb371);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "MediumSlateBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff7b68ee);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "MediumSpringGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff00fa9a);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "MediumTurquoise", {
            get: function () {
                return U1.Color.FromUInt32(0xff48d1cc);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "MediumVioletRed", {
            get: function () {
                return U1.Color.FromUInt32(0xffc71585);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "MidnightBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff191970);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "MintCream", {
            get: function () {
                return U1.Color.FromUInt32(0xfff5fffa);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "MistyRose", {
            get: function () {
                return U1.Color.FromUInt32(0xffffe4e1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Moccasin", {
            get: function () {
                return U1.Color.FromUInt32(0xffffe4b5);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "NavajoWhite", {
            get: function () {
                return U1.Color.FromUInt32(0xffffdead);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Navy", {
            get: function () {
                return U1.Color.FromUInt32(0xff000080);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "OldLace", {
            get: function () {
                return U1.Color.FromUInt32(0xfffdf5e6);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Olive", {
            get: function () {
                return U1.Color.FromUInt32(0xff808000);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "OliveDrab", {
            get: function () {
                return U1.Color.FromUInt32(0xff6b8e23);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Orange", {
            get: function () {
                return U1.Color.FromUInt32(0xffffa500);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "OrangeRed", {
            get: function () {
                return U1.Color.FromUInt32(0xffff4500);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Orchid", {
            get: function () {
                return U1.Color.FromUInt32(0xffda70d6);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "PaleGoldenrod", {
            get: function () {
                return U1.Color.FromUInt32(0xffeee8aa);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "PaleGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff98fb98);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "PaleTurquoise", {
            get: function () {
                return U1.Color.FromUInt32(0xffafeeee);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "PaleVioletRed", {
            get: function () {
                return U1.Color.FromUInt32(0xffdb7093);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "PapayaWhip", {
            get: function () {
                return U1.Color.FromUInt32(0xffffefd5);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "PeachPuff", {
            get: function () {
                return U1.Color.FromUInt32(0xffffdab9);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Peru", {
            get: function () {
                return U1.Color.FromUInt32(0xffcd853f);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Pink", {
            get: function () {
                return U1.Color.FromUInt32(0xffffc0cb);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Plum", {
            get: function () {
                return U1.Color.FromUInt32(0xffdda0dd);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "PowderBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xffb0e0e6);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Purple", {
            get: function () {
                return U1.Color.FromUInt32(0xff800080);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Red", {
            get: function () {
                return U1.Color.FromUInt32(0xffff0000);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "RosyBrown", {
            get: function () {
                return U1.Color.FromUInt32(0xffbc8f8f);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "RoyalBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff4169e1);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "SaddleBrown", {
            get: function () {
                return U1.Color.FromUInt32(0xff8b4513);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Salmon", {
            get: function () {
                return U1.Color.FromUInt32(0xfffa8072);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "SandyBrown", {
            get: function () {
                return U1.Color.FromUInt32(0xfff4a460);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "SeaGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff2e8b57);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "SeaShell", {
            get: function () {
                return U1.Color.FromUInt32(0xfffff5ee);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Sienna", {
            get: function () {
                return U1.Color.FromUInt32(0xffa0522d);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Silver", {
            get: function () {
                return U1.Color.FromUInt32(0xffc0c0c0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "SkyBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff87ceeb);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "SlateBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff6a5acd);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "SlateGray", {
            get: function () {
                return U1.Color.FromUInt32(0xff708090);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Snow", {
            get: function () {
                return U1.Color.FromUInt32(0xfffffafa);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "SpringGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff00ff7f);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "SteelBlue", {
            get: function () {
                return U1.Color.FromUInt32(0xff4682b4);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Tan", {
            get: function () {
                return U1.Color.FromUInt32(0xffd2b48c);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Teal", {
            get: function () {
                return U1.Color.FromUInt32(0xff008080);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Thistle", {
            get: function () {
                return U1.Color.FromUInt32(0xffd8bfd8);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Tomato", {
            get: function () {
                return U1.Color.FromUInt32(0xffff6347);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Transparent", {
            get: function () {
                return U1.Color.FromUInt32(0xffffff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Turquoise", {
            get: function () {
                return U1.Color.FromUInt32(0xff40e0d0);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Violet", {
            get: function () {
                return U1.Color.FromUInt32(0xffee82ee);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Wheat", {
            get: function () {
                return U1.Color.FromUInt32(0xfff5deb3);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "White", {
            get: function () {
                return new U1.Color(255, 255, 255, 255);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "WhiteSmoke", {
            get: function () {
                return U1.Color.FromUInt32(0xffffffff);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "Yellow", {
            get: function () {
                return U1.Color.FromUInt32(0xffffff00);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(Colors, "YellowGreen", {
            get: function () {
                return U1.Color.FromUInt32(0xff9acd32);
            },
            enumerable: true,
            configurable: true
        });
        return Colors;
    }());
    U1.Colors = Colors;
})(U1 || (U1 = {}));
///<reference path="../Commons/UCommon.ts"/>
///<reference path="U1Math.ts"/>
///<reference path="Colors.ts"/>
var U1;
(function (U1) {
    (function (CullModeEnum) {
        CullModeEnum[CullModeEnum["NONE"] = 0] = "NONE";
        CullModeEnum[CullModeEnum["CW"] = 1] = "CW";
        CullModeEnum[CullModeEnum["CCW"] = 2] = "CCW";
    })(U1.CullModeEnum || (U1.CullModeEnum = {}));
    var CullModeEnum = U1.CullModeEnum;
    (function (TextureAddressModeEnum) {
        TextureAddressModeEnum[TextureAddressModeEnum["Wrap"] = 0] = "Wrap";
        TextureAddressModeEnum[TextureAddressModeEnum["Clamp"] = 1] = "Clamp";
        TextureAddressModeEnum[TextureAddressModeEnum["Mirror"] = 2] = "Mirror";
    })(U1.TextureAddressModeEnum || (U1.TextureAddressModeEnum = {}));
    var TextureAddressModeEnum = U1.TextureAddressModeEnum;
    (function (SnapTypeEnum) {
        SnapTypeEnum[SnapTypeEnum["None"] = 0] = "None";
        SnapTypeEnum[SnapTypeEnum["Point"] = 1] = "Point";
        SnapTypeEnum[SnapTypeEnum["Edge"] = 2] = "Edge";
        SnapTypeEnum[SnapTypeEnum["MidEdge"] = 4] = "MidEdge";
        SnapTypeEnum[SnapTypeEnum["Face"] = 8] = "Face";
        SnapTypeEnum[SnapTypeEnum["Grid"] = 16] = "Grid";
        SnapTypeEnum[SnapTypeEnum["Angle"] = 32] = "Angle";
    })(U1.SnapTypeEnum || (U1.SnapTypeEnum = {}));
    var SnapTypeEnum = U1.SnapTypeEnum;
    (function (SnapTargetEnum) {
        SnapTargetEnum[SnapTargetEnum["None"] = 0] = "None";
        SnapTargetEnum[SnapTargetEnum["Curve"] = 1] = "Curve";
        SnapTargetEnum[SnapTargetEnum["Surface"] = 2] = "Surface";
        SnapTargetEnum[SnapTargetEnum["Grid"] = 4] = "Grid";
    })(U1.SnapTargetEnum || (U1.SnapTargetEnum = {}));
    var SnapTargetEnum = U1.SnapTargetEnum;
    (function (MappingTypeEnum) {
        MappingTypeEnum[MappingTypeEnum["RealWorldSize"] = 0] = "RealWorldSize";
        MappingTypeEnum[MappingTypeEnum["SurfaceSize"] = 1] = "SurfaceSize";
    })(U1.MappingTypeEnum || (U1.MappingTypeEnum = {}));
    var MappingTypeEnum = U1.MappingTypeEnum;
    ;
    var ISectInfo = (function () {
        function ISectInfo() {
            this._isectPosition = U1.Vector3.Zero;
            this._iscetNormal = U1.Vector3.Zero;
            this._uv = U1.Vector2.Zero;
        }
        Object.defineProperty(ISectInfo.prototype, "IsectPosition", {
            // a vector representing the world space position of the point of intersection
            get: function () {
                return this._isectPosition;
            },
            set: function (value) {
                this._isectPosition.CopyFrom(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ISectInfo.prototype, "IsectNormal", {
            // the world space normal vector to the mesh at the point of intersection
            get: function () {
                return this._iscetNormal;
            },
            set: function (value) {
                this._iscetNormal.CopyFrom(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ISectInfo.prototype, "UV", {
            // a vector representing the world space position of the point of intersection
            get: function () {
                return this._uv;
            },
            set: function (value) {
                this._uv.CopyFrom(value);
            },
            enumerable: true,
            configurable: true
        });
        ISectInfo.prototype.Clone = function () {
            var clone = new ISectInfo();
            clone.Source = this.Source;
            clone.OriginalSource = this.OriginalSource;
            clone.Distance = this.Distance;
            clone.IsectPosition.CopyFrom(this.IsectPosition);
            clone.IsectNormal.CopyFrom(this.IsectNormal);
            clone.Snap = this.Snap;
            clone.FaceID = this.FaceID;
            clone.Attr = this.Attr;
            clone.UV.CopyFrom(this.UV);
            clone.Tag = this.Tag;
            if (this.Vertices != null) {
                clone.Vertices = new Array(this.Vertices.length);
                this.Vertices.forEach(function (e_, i_) {
                    clone.Vertices[i_] = e_.Clone();
                });
            }
            if (this.UVs != null) {
                clone.UVs = new Array(this.UVs.length);
                this.UVs.forEach(function (e_, i_) {
                    clone.UVs[i_] = e_.Clone();
                });
            }
            return clone;
        };
        ISectInfo.prototype.CompareTo = function (other) {
            if (this.Distance == other.Distance)
                return 0;
            if (this.Distance < other.Distance)
                return -1;
            return 1;
        };
        ISectInfo.New = function () {
            var res = ISectInfo._cache.New();
            res.Vertices = null;
            res.IsectPosition.Set(0, 0, 0);
            res.IsectNormal.Set(0, 0, 0);
            res.Distance = 0;
            res.UV.Set(0, 0);
            res.Tag = null;
            res.Source = null;
            res.Snap = SnapTypeEnum.None;
            res.FaceID = -1;
            res.Attr = -1;
            return res;
        };
        ISectInfo.Release = function (v) {
            ISectInfo._cache.Release(v);
        };
        ISectInfo.prototype.Release = function () {
            ISectInfo.Release(this);
        };
        ISectInfo._cache = new U1.Cache(ISectInfo);
        return ISectInfo;
    }());
    U1.ISectInfo = ISectInfo;
    var SnapConfig = (function () {
        function SnapConfig() {
        }
        SnapConfig.AddListener = function (listener) {
            if (SnapConfig.s_listeners.indexOf(listener) < 0)
                SnapConfig.AddListener(listener);
        };
        SnapConfig.RemoveListener = function (listener) {
            var idx = SnapConfig.s_listeners.indexOf(listener);
            if (idx >= 0)
                SnapConfig.s_listeners.splice(idx, 1);
        };
        SnapConfig.UseSnapChanged = function () {
            SnapConfig.s_listeners.forEach(function (e_) {
                if (e_.OnUseSnapChanged != null)
                    e_.OnUseSnapChanged();
            });
        };
        SnapConfig.SnapChanged = function () {
            SnapConfig.s_listeners.forEach(function (e_) {
                if (e_.OnSnapChanged != null)
                    e_.OnSnapChanged();
            });
        };
        SnapConfig.AngleSnapChanged = function () {
            SnapConfig.s_listeners.forEach(function (e_) {
                if (e_.OnAngleSnapChanged != null)
                    e_.OnAngleSnapChanged();
            });
        };
        SnapConfig.GridSnapChanged = function () {
            SnapConfig.s_listeners.forEach(function (e_) {
                if (e_.OnGridSnapChanged != null)
                    e_.OnGridSnapChanged();
            });
        };
        SnapConfig.DistSnapChanged = function () {
            SnapConfig.s_listeners.forEach(function (e_) {
                if (e_.OnDistSnapChanged != null)
                    e_.OnDistSnapChanged();
            });
        };
        SnapConfig.SnapTargetChanged = function () {
            SnapConfig.s_listeners.forEach(function (e_) {
                if (e_.OnSnapTargetChanged != null)
                    e_.OnSnapTargetChanged();
            });
        };
        Object.defineProperty(SnapConfig, "UseSnap", {
            get: function () {
                return SnapConfig.m_useSnap;
            },
            set: function (value) {
                if (SnapConfig.m_useSnap == value)
                    return;
                SnapConfig.m_useSnap = value;
                SnapConfig.UseSnapChanged();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnapConfig, "Snap", {
            get: function () {
                return SnapConfig.m_snap;
            },
            set: function (value) {
                if (SnapConfig.m_snap == value)
                    return;
                SnapConfig.m_snap = value;
                SnapConfig.SnapChanged();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnapConfig, "SnapTarget", {
            get: function () {
                return SnapConfig.m_snapTarget;
            },
            set: function (value) {
                if (SnapConfig.m_snapTarget == value)
                    return;
                SnapConfig.m_snapTarget = value;
                SnapConfig.SnapTargetChanged();
            },
            enumerable: true,
            configurable: true
        });
        SnapConfig.GetSnap = function (snap) {
            return SnapConfig.UseSnap && (SnapConfig.Snap & snap) == snap;
        };
        SnapConfig.GetSnapTarget = function (target) {
            return (SnapConfig.m_snapTarget & target) == target;
        };
        SnapConfig.SetSnap = function (snap, state) {
            if (state)
                SnapConfig.Snap = SnapConfig.Snap | snap;
            else
                SnapConfig.Snap = SnapConfig.Snap & (~snap);
        };
        SnapConfig.SetSnapTarget = function (target, state) {
            if (state)
                SnapConfig.SnapTarget = SnapConfig.SnapTarget | target;
            else
                SnapConfig.SnapTarget = SnapConfig.SnapTarget & (~target);
        };
        Object.defineProperty(SnapConfig, "AngelSnap", {
            get: function () {
                return SnapConfig.m_angleSnap;
            },
            set: function (value) {
                if (SnapConfig.m_angleSnap == value)
                    return;
                SnapConfig.m_angleSnap = value;
                SnapConfig.AngleSnapChanged();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnapConfig, "GridSnap", {
            get: function () {
                return SnapConfig.m_gridSnap;
            },
            set: function (value) {
                if (SnapConfig.m_gridSnap == value)
                    return;
                SnapConfig.m_gridSnap = value;
                SnapConfig.GridSnapChanged();
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnapConfig, "SnapPixel", {
            get: function () {
                return SnapConfig.m_snapPixel;
            },
            set: function (value) {
                SnapConfig.m_snapPixel = value;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(SnapConfig, "DistSnap", {
            get: function () {
                return SnapConfig.m_distSnap;
            },
            set: function (value) {
                if (SnapConfig.m_distSnap == value)
                    return;
                SnapConfig.m_distSnap = value;
                SnapConfig.DistSnapChanged();
            },
            enumerable: true,
            configurable: true
        });
        SnapConfig.WithinSnapPixel = function (mouse, px, py) {
            var num2 = mouse.X - px;
            var num = mouse.Y - py;
            return ((num2 * num2) + (num * num)) <= SnapConfig.SnapPixel * SnapConfig.SnapPixel;
        };
        SnapConfig.GetSnapedDist = function (dist) {
            if (!SnapConfig.UseSnap || !SnapConfig.GetSnap(SnapTypeEnum.Grid))
                return;
            dist = Math.round(dist / SnapConfig.DistSnap) * SnapConfig.DistSnap;
        };
        SnapConfig.GetGridSnapedPoint = function (plane, point) {
            if (!SnapConfig.UseSnap || !SnapConfig.GetSnap(SnapTypeEnum.Grid))
                return;
            var orign = plane.Normal.Clone().Scale(-plane.D); //plane.Normal * -plane.D 
            var xdir = U1.Vector3.Zero, ydir = U1.Vector3.Zero;
            U1.GeometryHelper3.GetArbitraryAxis(plane.Normal, xdir, ydir);
            SnapConfig.GetGridSnapedPointGrid(orign, xdir, ydir, point);
        };
        SnapConfig.GetGridSnapedPointGrid = function (grdOrign, grdX, grdY, point) {
            if (!SnapConfig.UseSnap || !SnapConfig.GetSnap(SnapTypeEnum.Grid))
                return;
            var v = U1.Vector3.Subtract(point, grdOrign);
            var x = U1.Vector3.Dot(v, grdX);
            var y = U1.Vector3.Dot(v, grdY);
            x = Math.round(x / SnapConfig.GridSnap) * SnapConfig.GridSnap;
            y = Math.round(y / SnapConfig.GridSnap) * SnapConfig.GridSnap;
            point.CopyFrom(grdOrign)
                .Add(U1.Vector3.Scale(grdX, x))
                .Add(U1.Vector3.Scale(grdY, y));
            // point = grdOrign + grdX * x + grdY * y;
        };
        //events
        SnapConfig.s_listeners = new Array();
        SnapConfig.m_snap = SnapTypeEnum.Grid | SnapTypeEnum.Point | SnapTypeEnum.Angle;
        SnapConfig.m_snapTarget = SnapTargetEnum.Grid | SnapTargetEnum.Curve | SnapTargetEnum.Surface;
        SnapConfig.m_useSnap = true;
        SnapConfig.m_angleSnap = 5;
        SnapConfig.m_gridSnap = 0.1;
        SnapConfig.m_distSnap = 0.01;
        SnapConfig.m_snapPixel = 10;
        return SnapConfig;
    }());
    U1.SnapConfig = SnapConfig;
    var MeshMaterial = (function () {
        function MeshMaterial() {
            this.Ambient = new U1.Color(50, 50, 50),
                this.Diffuse = U1.Colors.LightGray,
                this.Specular = U1.Colors.LightGray,
                this.SpecularPower = 200,
                this.Cull = CullModeEnum.CW,
                this.TexOffset = U1.Vector2.Zero,
                this.TexScale = U1.Vector2.One,
                this.Opacity = 1,
                this.AddressU = TextureAddressModeEnum.Wrap,
                this.AddressV = TextureAddressModeEnum.Wrap,
                this.AddressW = TextureAddressModeEnum.Wrap,
                this.Pickable = true;
        }
        Object.defineProperty(MeshMaterial.prototype, "Pickable", {
            get: function () {
                return (this.Flag & 1) != 1;
            },
            set: function (value) {
                if (value)
                    this.Flag = this.Flag & ~1;
                else
                    this.Flag = this.Flag | 1;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MeshMaterial.prototype, "AlwaysZWrite", {
            get: function () {
                return (this.Flag & 2) == 2;
            },
            set: function (value) {
                if (value)
                    this.Flag = this.Flag & ~2;
                else
                    this.Flag = this.Flag | 2;
            },
            enumerable: true,
            configurable: true
        });
        return MeshMaterial;
    }());
    U1.MeshMaterial = MeshMaterial;
    var GeomData = (function () {
        function GeomData() {
            this._isBoundingInvalid = true;
            this._boundingBox = new U1.BoundingBox();
            this._boundingSphere = new U1.BoundingSphere();
        }
        Object.defineProperty(GeomData.prototype, "BoundingBox", {
            get: function () {
                if (this._isBoundingInvalid) {
                    this.UpdateBounding(this._boundingBox, this._boundingSphere);
                    this._isBoundingInvalid = false;
                }
                return this._boundingBox;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(GeomData.prototype, "BoundingSphere", {
            get: function () {
                if (this._isBoundingInvalid) {
                    this.UpdateBounding(this._boundingBox, this._boundingSphere);
                    this._isBoundingInvalid = false;
                }
                return this._boundingSphere;
            },
            enumerable: true,
            configurable: true
        });
        GeomData.prototype.UpdateBounding = function (boundingBox, boundingSphere) {
        };
        GeomData.prototype.MarkChanged = function () {
            this._isBoundingInvalid = true;
        };
        GeomData.prototype.IntersectTriangle = function (ray) {
            return null;
        };
        GeomData.prototype.GetSnapedPoint = function (mouse, transform, camera) {
            return null;
        };
        GeomData.prototype.IsInside = function (planes, checkCross) {
            return false;
        };
        GeomData.prototype.IntersectW = function (ray, worldM) {
            return null;
        };
        GeomData.prototype.Intersect = function (ray) {
            return null;
        };
        return GeomData;
    }());
    U1.GeomData = GeomData;
    var MeshData = (function (_super) {
        __extends(MeshData, _super);
        function MeshData() {
            _super.apply(this, arguments);
        }
        MeshData.prototype.UpdateBounding = function (boundingBox, boundingSphere) {
            var min = U1.Vector3.MaxValue;
            var max = U1.Vector3.MinValue;
            this.Vertices.forEach(function (v_, i_, arr_) {
                min.Minimize(v_.Position);
                max.Maximize(v_.Position);
            });
            boundingBox.Min = min;
            boundingBox.Max = max;
            boundingSphere.Center = U1.Vector3.Add(min, max).Scale(0.5);
            boundingSphere.Radius = U1.Vector3.Distance(min, max) / 2;
        };
        Object.defineProperty(MeshData.prototype, "VertexCount", {
            get: function () {
                return this.Vertices != null ? this.Vertices.length : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MeshData.prototype, "IndexCount", {
            get: function () {
                return this.Indexes != null ? this.Indexes.length : 0;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(MeshData.prototype, "FaceCount", {
            get: function () {
                return this.Indexes == null ? 0 : this.Indexes.length / 3;
            },
            enumerable: true,
            configurable: true
        });
        MeshData.prototype.Copy = function () {
            if (this.Vertices == null || this.Indexes == null)
                return new MeshData();
            var result = new MeshData();
            result.Vertices = new Array(this.VertexCount);
            result.Indexes = new Array(this.IndexCount);
            this.Vertices.forEach(function (v_, i_, arr_) {
                result.Vertices[i_] = v_.Clone();
            });
            this.Indexes.forEach(function (fi, i_, arr_) {
                result.Indexes[i_] = fi;
            });
            return result;
        };
        MeshData.prototype.Merge = function (mesh, transform) {
            if (transform === void 0) { transform = null; }
            var vlist = this.Vertices == null ? new Array() : this.Vertices;
            var ilist = this.Indexes == null ? new Array() : this.Indexes;
            var last_i = vlist.length;
            var attr = 0;
            if (transform != null) {
                mesh.Vertices.forEach(function (v_, i_, arr_) {
                    var nv = v_.Clone();
                    nv.Transform(transform);
                    vlist.push(nv);
                });
            }
            else {
                mesh.Vertices.forEach(function (v_, i_, arr_) {
                    var nv = v_.Clone();
                    vlist.push(nv);
                });
            }
            mesh.Indexes.forEach(function (v_, i_, arr_) {
                ilist.push(v_ + last_i);
            });
            this.Vertices = vlist;
            this.Indexes = ilist;
        };
        MeshData.prototype.Transform = function (matrix) {
            this.Vertices.forEach(function (v_, i_, arr_) {
                v_.Transform(matrix);
            });
        };
        MeshData.IntersectTriangle = function (ray, v0, v1, v2, dirCheck) {
            if (dirCheck === void 0) { dirCheck = true; }
            var res = { r: 0, u: 0, v: 0 };
            var isectp = MeshUtil.Intersect_RayTriangle(ray, v0.Position, v1.Position, v2.Position, dirCheck, res);
            if (isectp == null)
                return null;
            var d0 = MeshData.tmp_v3_0;
            var d1 = MeshData.tmp_v3_1;
            var isectNormal = MeshData.tmp_v3_2;
            var uv0 = MeshData.tmp_v2_0;
            var uv1 = MeshData.tmp_v2_1;
            var uv2 = MeshData.tmp_v2_2;
            d0.SetSubtract(v1.Position, v0.Position);
            d1.SetSubtract(v2.Position, v0.Position);
            var isectNormal = U1.Vector3.Cross(d0, d1).Normalize();
            uv0.SetScale(v0.UV, (1 - res.u - res.v));
            uv1.SetSubtract(v1.UV, v0.UV).Scale(res.u);
            uv2.SetSubtract(v2.UV, v0.UV).Scale(res.v);
            var isect = ISectInfo.New();
            isect.IsectPosition.CopyFrom(isectp);
            isect.Distance = U1.Vector3.Distance(ray.Position, isectp),
                isect.IsectNormal.CopyFrom(isectNormal);
            isect.UV.SetAdd(uv0, uv1).Add(uv2);
            isect.UVs = new Array(v0.UV, v1.UV, v2.UV);
            isect.Vertices = new Array(v0.Position, v1.Position, v2.Position);
            return isect;
        };
        MeshData.prototype.Intersect = function (ray) {
            if (this.BoundingSphere == null || ray.IntersectsBoundingSphere(this.BoundingSphere) == null)
                return null;
            var result = null;
            for (var i = 0, f = 0; i < this.Indexes.length; i += 3, f++) {
                var v0 = this.Indexes[i];
                var v1 = this.Indexes[i + 1];
                var v2 = this.Indexes[i + 2];
                var isect = MeshData.IntersectTriangle(ray, this.Vertices[v0], this.Vertices[v1], this.Vertices[v2]);
                if (isect == null)
                    continue;
                if (result == null || isect.Distance < result.Distance) {
                    isect.FaceID = f;
                    isect.Attr = this.Attribute;
                    result = isect;
                }
            }
            result = result != null ? result.Clone() : null;
            return result;
        };
        MeshData.prototype.IntersectCount = function (ray, result) {
            result.front = 0;
            result.back = 0;
            result.surface = 0;
            if (this.BoundingSphere == null || ray.IntersectsBoundingSphere(this.BoundingSphere) == null)
                return;
            var res = { r: 0, u: 0, v: 0 };
            for (var i = 0, f = 0; i < this.Indexes.length; i += 3, f++) {
                var v0 = this.Indexes[i];
                var v1 = this.Indexes[i + 1];
                var v2 = this.Indexes[i + 2];
                var p0 = this.Vertices[v0].Position;
                var p1 = this.Vertices[v1].Position;
                var p2 = this.Vertices[v2].Position;
                var isectp = MeshUtil.Intersect_RayTriangle(ray, p0, p1, p2, false, res);
                if (isectp == null)
                    continue;
                isectp.Release();
                if (Math.abs(res.r) < U1.Epsilon) {
                    result.surface++;
                }
                else {
                    if (res.r < 0)
                        result.back++;
                    if (res.r > 0)
                        result.front++;
                }
            }
        };
        MeshData.prototype.IntersectW = function (wray, worldM) {
            var ray = wray.Clone().Transform(U1.Matrix4.Invert(worldM));
            ray.Direction.Normalize();
            var bbx = this.BoundingBox;
            if (bbx.IntersectsRay(ray) == null)
                return null;
            var result = this.Intersect(ray);
            if (result != null) {
                result.Snap = SnapTypeEnum.Face;
                result.IsectPosition.Transform(worldM);
                result.IsectNormal.TransformNormal(worldM);
                result.Distance = U1.Vector3.Distance(result.IsectPosition, wray.Position);
                return result;
            }
            return null;
        };
        MeshData.prototype.GetSnapedPoint = function (mouse, worldM, camera) {
            var ray = camera.CalPickingRay(mouse.X, mouse.Y);
            var wray = ray;
            ray.Transform(U1.Matrix4.Invert(worldM));
            ray.Direction.Normalize();
            var bbx = this.BoundingBox;
            if (bbx.IntersectsRay(ray) == null)
                return null;
            var result = this.Intersect(ray);
            if (result != null) {
                var isect = result;
                var fid = isect.FaceID;
                isect.Snap = SnapTypeEnum.Face;
                isect.IsectPosition.SetTransform(isect.IsectPosition, worldM);
                isect.IsectNormal.SetTransformNormal(isect.IsectNormal, worldM);
                for (var i = 0; i < isect.Vertices.length; i++) {
                    isect.Vertices[i].Transform(worldM);
                }
                if (SnapConfig.GetSnap(SnapTypeEnum.Point)) {
                    var vs = [this.Indexes[fid * 3], this.Indexes[fid * 3 + 1], this.Indexes[fid * 3 + 2]];
                    var minLen = Number.POSITIVE_INFINITY;
                    for (var i = 0; i < 3; i++) {
                        var vtx = this.Vertices[vs[i]];
                        var wp = U1.Vector3.Transform(vtx.Position, worldM);
                        var sp = camera.ScreenToWorld(wp);
                        var len = U1.Vector2.DistanceSquared(sp.XY(), mouse);
                        if (len < minLen) {
                            minLen = len;
                            if (SnapConfig.WithinSnapPixel(mouse, sp.X, sp.Y)) {
                                isect.Snap = SnapTypeEnum.Point;
                                isect.UV = vtx.UV;
                                isect.IsectPosition.CopyFrom(wp);
                                isect.IsectNormal.SetTransformNormal(vtx.Normal, worldM).Normalize();
                            }
                        }
                    }
                }
                isect.Distance = U1.Vector3.Distance(camera.Position, isect.IsectPosition);
                return isect;
            }
            return null;
        };
        /**
        면의 노멀이 바깥을 향함
        */
        MeshData.prototype.IsInside = function (planes, checkCross) {
            var bsphere = this.BoundingSphere;
            var c_In = 0;
            for (var i = 0; i < planes.length; i++) {
                var len = planes[i].DotCoordinate(bsphere.Center);
                if (len < -bsphere.Radius)
                    ++c_In;
                else if (len > bsphere.Radius)
                    return false;
            }
            if (c_In == planes.length)
                return true; // 바운딩영역이 완전히 포함된경우 
            try {
                for (var vi = 0; vi < this.Vertices.length; vi++) {
                    c_In = 0;
                    for (var i = 0; i < planes.length; i++) {
                        var len = planes[i].DotCoordinate(this.Vertices[vi].Position);
                        if (len <= 0)
                            c_In++;
                    }
                    if (checkCross && c_In == planes.length)
                        return true;
                    if (!checkCross && c_In < planes.length)
                        return false;
                }
                if (checkCross) {
                    try {
                        for (var i = 0; i < this.Indexes.length; i += 3) {
                            var f0 = this.Indexes[i];
                            var f1 = this.Indexes[i + 1];
                            var f2 = this.Indexes[i + 2];
                            if (MeshUtil.CheckEdgeCross(planes, this.Vertices[f0].Position, this.Vertices[f1].Position) ||
                                MeshUtil.CheckEdgeCross(planes, this.Vertices[f1].Position, this.Vertices[f2].Position) ||
                                MeshUtil.CheckEdgeCross(planes, this.Vertices[f2].Position, this.Vertices[f0].Position)) {
                                return true;
                            }
                        }
                    }
                    catch (ex) {
                    }
                    return false;
                }
            }
            catch (ex) {
            }
            return true;
        };
        MeshData.prototype.SmoothNormal = function () {
            var _this = this;
            var normals = new Array(this.Vertices.length);
            var f_count = new Array(this.Vertices.length);
            this.Vertices.forEach(function (e_, i_) {
                normals[i_] = U1.Vector3.Zero;
                f_count[i_] = 0;
            });
            var fcount = this.FaceCount;
            var dir0 = U1.Vector3.Zero;
            var dir1 = U1.Vector3.Zero;
            var norm = U1.Vector3.Zero;
            var set_normal = function (i0_, i1_, i2_) {
                var v0 = _this.Vertices[i0_];
                var v1 = _this.Vertices[i1_];
                var v2 = _this.Vertices[i2_];
                dir0.SetSubtract(v1.Position, v0.Position).Normalize();
                dir1.SetSubtract(v2.Position, v0.Position).Normalize();
                norm.SetCross(dir0, dir1).Normalize();
                if (i0_ == 0) {
                    i0_ = 0;
                }
                var a = U1.Vector3.Dot(dir0, dir1);
                a = Math.acos(a);
                norm.Scale(a); // 각도가 클수록 많이 작용 
                normals[i0_].Add(norm);
                f_count[i0_]++;
            };
            for (var i = 0; i < fcount; i++) {
                var i0 = this.Indexes[i * 3];
                var i1 = this.Indexes[i * 3 + 1];
                var i2 = this.Indexes[i * 3 + 2];
                set_normal(i0, i1, i2);
                set_normal(i1, i2, i0);
                set_normal(i2, i0, i1);
            }
            for (var vi = 0; vi < this.Vertices.length; vi++) {
                normals[vi].Normalize();
                this.Vertices[vi].Normal.CopyFrom(normals[vi]);
            }
        };
        MeshData.prototype.MakeFlatFaceMesh = function () {
            var vList = new Array();
            var iList = new Array();
            var num_face = this.FaceCount;
            var dir0 = U1.Vector3.Zero;
            var dir1 = U1.Vector3.Zero;
            var norm = U1.Vector3.Zero;
            for (var i = 0; i < num_face; i++) {
                var i0 = this.Indexes[i * 3];
                var i1 = this.Indexes[i0 + 1];
                var i2 = this.Indexes[i1 + 1];
                var v0 = this.Vertices[i0].Clone();
                var v1 = this.Vertices[i1].Clone();
                var v2 = this.Vertices[i2].Clone();
                dir0.SetSubtract(v1.Position, v0.Position).Normalize();
                dir1.SetSubtract(v2.Position, v0.Position).Normalize();
                norm.SetCross(dir0, dir1).Normalize();
                v0.Normal.CopyFrom(norm);
                v1.Normal.CopyFrom(norm);
                v2.Normal.CopyFrom(norm);
                var fi = vList.length;
                iList.push(fi);
                iList.push(fi + 1);
                iList.push(fi + 2);
                vList.push(v0);
                vList.push(v1);
                vList.push(v2);
            }
            var mesh = new MeshData();
            mesh.Vertices = vList;
            mesh.Indexes = iList;
            return mesh;
        };
        MeshData.CreateRectangle = function (points) {
            var normal = U1.Vector3.Cross(U1.Vector3.Subtract(points[1], points[0]), U1.Vector3.Subtract(points[2], points[0]))
                .Normalize();
            var result = new MeshData();
            result.Vertices = new Array(4);
            result.Indexes = new Array(0, 1, 2, 0, 2, 3);
            points.forEach(function (v_, i_, arr_) {
                result.Vertices[i_] = new MeshVertex(v_, normal);
            });
            result.Vertices[0].UV = new U1.Vector2(0, 1);
            result.Vertices[1].UV = new U1.Vector2(1, 1);
            result.Vertices[2].UV = new U1.Vector2(1, 0);
            result.Vertices[3].UV = new U1.Vector2(0, 0);
            return result;
        };
        MeshData.CreateBox = function () {
            if (MeshData.s_box == null) {
                var ps = [
                    new U1.Vector3(0, 0, 0),
                    new U1.Vector3(1, 0, 0),
                    new U1.Vector3(1, 1, 0),
                    new U1.Vector3(0, 1, 0),
                    new U1.Vector3(0, 0, 1),
                    new U1.Vector3(1, 0, 1),
                    new U1.Vector3(1, 1, 1),
                    new U1.Vector3(0, 1, 1)
                ];
                var front = MeshData.CreateRectangle([ps[0], ps[1], ps[5], ps[4]]);
                var right = MeshData.CreateRectangle([ps[1], ps[2], ps[6], ps[5]]);
                var back = MeshData.CreateRectangle([ps[2], ps[3], ps[7], ps[6]]);
                var left = MeshData.CreateRectangle([ps[3], ps[0], ps[4], ps[7]]);
                var top = MeshData.CreateRectangle([ps[4], ps[5], ps[6], ps[7]]);
                var bottom = MeshData.CreateRectangle([ps[2], ps[1], ps[0], ps[3]]);
                var trans = U1.Matrix4.CreateTranslation(new U1.Vector3(-0.5, -0.5, -0.5));
                MeshData.s_box = new MeshData();
                MeshData.s_box.Merge(front, trans);
                MeshData.s_box.Merge(right, trans);
                MeshData.s_box.Merge(back, trans);
                MeshData.s_box.Merge(left, trans);
                MeshData.s_box.Merge(top, trans);
                MeshData.s_box.Merge(bottom, trans);
            }
            return MeshData.s_box.Copy();
        };
        MeshData.tmp_v2_0 = U1.Vector2.Zero;
        MeshData.tmp_v2_1 = U1.Vector2.Zero;
        MeshData.tmp_v2_2 = U1.Vector2.Zero;
        MeshData.tmp_v2_3 = U1.Vector2.Zero;
        MeshData.tmp_v3_0 = U1.Vector3.Zero;
        MeshData.tmp_v3_1 = U1.Vector3.Zero;
        MeshData.tmp_v3_2 = U1.Vector3.Zero;
        MeshData.tmp_v3_3 = U1.Vector3.Zero;
        return MeshData;
    }(GeomData));
    U1.MeshData = MeshData;
    var MeshVertex = (function () {
        function MeshVertex(pos, normal, uv) {
            if (pos === void 0) { pos = null; }
            if (normal === void 0) { normal = null; }
            if (uv === void 0) { uv = null; }
            this.Position = U1.Vector3.Zero;
            this.Normal = U1.Vector3.Zero;
            this.UV = U1.Vector2.Zero;
            if (pos != null)
                this.Position.CopyFrom(pos);
            if (normal != null)
                this.Normal.CopyFrom(normal);
            if (uv != null)
                this.UV.CopyFrom(uv);
        }
        MeshVertex.prototype.Clone = function () {
            var clone = new MeshVertex();
            clone.Position.CopyFrom(this.Position);
            clone.Normal.CopyFrom(this.Normal);
            clone.UV.CopyFrom(this.UV);
            return clone;
        };
        MeshVertex.prototype.Transform = function (matrix) {
            this.Position.Transform(matrix);
            this.Normal.TransformNormal(matrix);
        };
        return MeshVertex;
    }());
    U1.MeshVertex = MeshVertex;
    var LineData = (function (_super) {
        __extends(LineData, _super);
        function LineData() {
            _super.apply(this, arguments);
        }
        Object.defineProperty(LineData.prototype, "PointCount", {
            get: function () {
                return this.Points == null ? 0 : this.Points.length;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(LineData.prototype, "IndexCount", {
            get: function () {
                if (this.Indexes == null)
                    return 0;
                return this.Indexes.length;
            },
            enumerable: true,
            configurable: true
        });
        LineData.prototype.SetColor = function (color) {
            if (this.Points == null)
                return;
            for (var i = 0; i < this.Points.length; i++) {
                this.Points[i].Color.CopyFrom(color);
            }
        };
        LineData.prototype.UpdateBounding = function (boundingBox, boundingSphere) {
            if (this.Points == null || this.Points.length == 0)
                return;
            var min = U1.Vector3.MaxValue;
            var max = U1.Vector3.MinValue;
            this.Points.forEach(function (v_, i_, arr_) {
                min.Minimize(v_.Position);
                max.Maximize(v_.Position);
            });
            boundingBox.Min = min;
            boundingBox.Max = max;
            boundingSphere.Center = U1.Vector3.Add(min, max).Scale(0.5);
            boundingSphere.Radius = U1.Vector3.Distance(min, max) / 2;
        };
        LineData.prototype.IsInside = function (planes, fCross) {
            var c_In = 0;
            if (this.PointCount == 0 || this.IndexCount == 0)
                return false;
            var bsphere = this.BoundingSphere;
            for (var i = 0; i < planes.length; i++) {
                var len = planes[i].DotCoordinate(bsphere.Center);
                if (len <= -bsphere.Radius)
                    ++c_In;
                else if (len > bsphere.Radius)
                    return false;
            }
            if (c_In == planes.length)
                return true;
            for (var j = 0; j < this.Points.length; j++) {
                c_In = 0;
                for (var pi = 0; pi < planes.length; pi++) {
                    var len = planes[pi].DotCoordinate(this.Points[j].Position);
                    if (len <= 0)
                        c_In++;
                }
                if (fCross && c_In == planes.length)
                    return true;
                if (!fCross && c_In < planes.length)
                    return false;
            }
            if (fCross) {
                for (var i = 0; i < this.Indexes.length; i += 2) {
                    var v0 = this.Indexes[i];
                    var v1 = this.Indexes[i + 1];
                    if (MeshUtil.CheckEdgeCross(planes, this.Points[v0].Position, this.Points[v1].Position))
                        return true;
                }
                return false;
            }
            return true;
        };
        LineData.prototype.GetSnapedPoint = function (mouse, transform, camera) {
            var ray = camera.CalPickingRay(mouse.X, mouse.Y);
            var wray = ray.Clone();
            ray.Transform(U1.Matrix4.Invert(transform));
            ray.Direction.Normalize();
            var bbx = this.BoundingBox.Clone();
            var size = U1.Vector3.Subtract(bbx.Max, bbx.Min);
            bbx.Max.Add(U1.Vector3.Scale(size, 0.1));
            bbx.Min.Subtract(U1.Vector3.Scale(size, 0.1));
            if (bbx.IntersectsRay(ray) == null)
                return null;
            var isectP = U1.Vector3.Zero;
            var minDist = SnapConfig.SnapPixel * SnapConfig.SnapPixel;
            var minDepth = Number.MAX_VALUE;
            var tE = 0.0;
            var fid = 0;
            var v0 = 0, v1 = 0;
            var s, t;
            var dir = U1.Vector3.Zero;
            var res = { s: 0, t: 0 };
            var wp = U1.Vector3.Zero;
            for (var i = 0; i < this.Indexes.length - 1; i += 2) {
                var pos = this.Points[this.Indexes[i]].Position;
                dir.SetSubtract(this.Points[this.Indexes[i + 1]].Position, pos);
                U1.Line3.SquardDistance1(ray.Position, ray.Direction, pos, dir, res);
                //intersect with local ray
                if (s < minDepth && t >= -0.001 && t <= 1.001) {
                    wp.SetScaleAdd(pos, t, dir);
                    wp.Transform(transform);
                    var scn = camera.WorldToScreen(wp);
                    var dist = U1.Vector2.DistanceSquared(scn.XY(), mouse);
                    //within screen snap region
                    if (dist <= minDist) {
                        minDepth = s;
                        minDist = dist;
                        isectP = wp;
                        fid = (i / 2);
                        v0 = this.Indexes[i];
                        v1 = this.Indexes[i + 1];
                        tE = t;
                    }
                }
            }
            if (v0 != v1) {
                var isect = ISectInfo.New();
                isect.Distance = U1.Vector3.Distance(isectP, wray.Position);
                isect.Snap = SnapTypeEnum.Edge;
                isect.IsectNormal.SetUnitZ();
                isect.IsectPosition.CopyFrom(isectP);
                isect.FaceID = (fid);
                if (SnapConfig.GetSnap(SnapTypeEnum.MidEdge)) {
                    var cp = U1.Vector3.Add(this.Points[v0].Position, this.Points[v1].Position).Scale(1 / 2);
                    wp = U1.Vector3.Transform(cp, transform);
                    cp = camera.WorldToScreen(wp);
                    if (SnapConfig.WithinSnapPixel(mouse, cp.X, cp.Y)) {
                        isect.IsectPosition = wp;
                        isect.Snap = SnapTypeEnum.MidEdge;
                    }
                }
                if (SnapConfig.GetSnap(SnapTypeEnum.Point)) {
                    for (var _i = 0, _a = [this.Points[v0].Position, this.Points[v1].Position]; _i < _a.length; _i++) {
                        var p = _a[_i];
                        var wp = U1.Vector3.Transform(p, transform);
                        var sp = camera.WorldToScreen(wp);
                        if (SnapConfig.WithinSnapPixel(mouse, sp.X, sp.Y)) {
                            isect.IsectPosition = wp;
                            isect.Snap = SnapTypeEnum.Point;
                        }
                    }
                }
                if (isect.Snap == SnapTypeEnum.Edge && (tE < 0 || tE > 1))
                    return null;
                isect.Distance = U1.Vector3.Distance(camera.Position, isect.IsectPosition);
                return isect;
            }
            return null;
        };
        return LineData;
    }(GeomData));
    U1.LineData = LineData;
    var LineVertex = (function () {
        function LineVertex(pos, color) {
            if (pos === void 0) { pos = null; }
            if (color === void 0) { color = null; }
            this.Position = U1.Vector3.Zero;
            this.Color = U1.Colors.Black;
            if (pos != null)
                this.Position = pos;
            if (color != null)
                this.Color = color;
        }
        LineVertex.prototype.Transform = function (matrix) {
            this.Position.Transform(matrix);
        };
        LineVertex.prototype.Clone = function () {
            var clone = new LineVertex();
            clone.Position.CopyFrom(this.Position);
            clone.Color.CopyFrom(this.Color);
            return clone;
        };
        return LineVertex;
    }());
    U1.LineVertex = LineVertex;
    var MeshUtil = (function () {
        function MeshUtil() {
        }
        MeshUtil.Intersect_RayTriangle = function (ray, v0, v1, v2, dirCheck, res) {
            var u = MeshUtil.tmp_v0;
            var v = MeshUtil.tmp_v1;
            var n = MeshUtil.tmp_v2;
            var w0 = MeshUtil.tmp_v3;
            var w = MeshUtil.tmp_v4;
            u.SetSubtract(v1, v0);
            v.SetSubtract(v2, v0);
            n.SetCross(u, v);
            if (n.IsZero)
                return null;
            var dir = ray.Direction;
            w0.SetSubtract(ray.Position, v0);
            var a = U1.Vector3.Dot(n, w0);
            a *= -1;
            var b = U1.Vector3.Dot(n, dir);
            if (Math.abs(b) < 0.00001)
                return null;
            // get interesect point of ray with trangle plane
            var r = a / b;
            res.r = r;
            if (dirCheck && r < 0)
                return null;
            var isectp = U1.Vector3.ScaleAdd(ray.Position, r, dir); //intersect point of ray and plane
            //is isectp insede trangle? 
            var uu = U1.Vector3.Dot(u, u);
            var uv = U1.Vector3.Dot(u, v);
            var vv = U1.Vector3.Dot(v, v);
            w.SetSubtract(isectp, v0);
            var wu = U1.Vector3.Dot(w, u);
            var wv = U1.Vector3.Dot(w, v);
            var d = uv * uv - uu * vv;
            var s, t;
            res.u = s = (uv * wv - vv * wu) / d;
            if (s < 0.0 || s > 1.0)
                return null;
            res.v = t = (uv * wu - uu * wv) / d;
            if (t < 0.0 || (s + t) > 1.0)
                return null;
            return isectp;
        };
        /**
        면의 노멀이 바깥을 향함
        */
        MeshUtil.CheckEdgeCross = function (planes, sv, ev) {
            var c_in = 0;
            for (var pi = 0; pi < planes.length; pi++) {
                var ls = planes[pi].DotCoordinate(sv);
                var le = planes[pi].DotCoordinate(ev);
                if (ls > 0 && le > 0)
                    return false; // 두점모드 면의 뒤에 있는 경우 
                if (ls <= 0 && le <= 0) {
                    c_in++;
                }
            }
            if (c_in == planes.length)
                return true;
            var dir = U1.Vector3.Zero;
            for (var pi = 0; pi < planes.length; pi++) {
                var ls = planes[pi].DotCoordinate(sv);
                var le = planes[pi].DotCoordinate(ev);
                if (ls * le < 0.0000001) {
                    dir.SetSubtract(ev, sv);
                    var t = planes[pi].IntersectsLine(sv, dir);
                    if (t == null)
                        continue;
                    var isect = U1.Vector3.ScaleAdd(sv, t, dir);
                    c_in = 0;
                    for (var i = 0; i < planes.length; i++) {
                        if (i == pi)
                            continue;
                        if (planes[i].DotCoordinate(isect) < 0)
                            c_in++;
                        else
                            break;
                    }
                    if (c_in == planes.length - 1)
                        return true;
                }
            }
            return false;
        };
        MeshUtil.tmp_v0 = new U1.Vector3();
        MeshUtil.tmp_v1 = new U1.Vector3();
        MeshUtil.tmp_v2 = new U1.Vector3();
        MeshUtil.tmp_v3 = new U1.Vector3();
        MeshUtil.tmp_v4 = new U1.Vector3();
        return MeshUtil;
    }());
    U1.MeshUtil = MeshUtil;
})(U1 || (U1 = {}));
///<reference path="./U1Math.ts"/> 
///<reference path="./CGAL.ts"/> 
var U1;
(function (U1) {
    var Triangulations;
    (function (Triangulations) {
        var Polygon2 = U1.CGAL.Polygon2;
        var Vtx = (function () {
            function Vtx() {
                this.ELsit = new Array();
                this.Left0 = new U1.Vector2();
                this.Left1 = new U1.Vector2();
                this.BiSect = new U1.Vector2();
            }
            Vtx.prototype.Init = function () {
                var v = Vtx.tmp;
                v.SetSubtract(this.P, this.Prev.P).Normalize().LeftRef(this.Left0);
                v.SetSubtract(this.Next.P, this.P).Normalize().LeftRef(this.Left1);
                this.BiSect.SetAdd(this.Left0, this.Left1).Normalize();
            };
            Vtx.prototype.IsBoundedSide = function (pt) {
                var v = Vtx.tmp;
                v.SetSubtract(pt, this.P);
                if (U1.Vector2.Dot(this.Left0, v) > 0 && U1.Vector2.Dot(this.BiSect.Left, v) >= 0)
                    return true;
                if (U1.Vector2.Dot(this.Left1, v) > 0 && U1.Vector2.Dot(this.BiSect.Right, v) >= 0)
                    return true;
                return false;
            };
            Vtx.prototype.toString = function () {
                return "#" + this.ID + "(" + this.P.X + "," + this.P.Y + ")";
            };
            Vtx.tmp = U1.Vector2.Zero;
            return Vtx;
        }());
        Triangulations.Vtx = Vtx;
        var Edge = (function () {
            function Edge() {
            }
            Edge.prototype.IntersectSegment = function (p0, p1) {
                if (this.V0 == p0 || this.V0 == p1 || this.V1 == p0 || this.V1 == p1)
                    return true;
                var s = 0.0;
                var t = 0.0;
                var t0 = p0.P;
                var t1 = p1.P;
                var s0 = this.V0.P;
                var s1 = this.V1.P;
                var a = (t1.X - t0.X) * (s0.Y - t0.Y) - (t1.Y - t0.Y) * (s0.X - t0.X);
                var b = (t1.Y - t0.Y) * (s1.X - s0.X) - (t1.X - t0.X) * (s1.Y - s0.Y);
                if (Math.abs(b) < U1.PRECISION)
                    // 평행라인
                    return false;
                var c = (s1.X - s0.X) * (s0.Y - t0.Y) - (s1.Y - s0.Y) * (s0.X - t0.X);
                t = a / b;
                s = c / b;
                //끝점을 지나는 경우도 성공  
                if (s < -U1.PRECISION || s >= 1 + U1.PRECISION)
                    return false;
                if (t < -U1.PRECISION || t >= 1 + U1.PRECISION)
                    return false;
                return true;
            };
            Edge.prototype.IntersectLine = function (t0, td) {
                var sd = Edge.tmp;
                var s0 = this.V0.P;
                sd.SetSubtract(this.V1.P, this.V0.P);
                var st = U1.GeometryHelper2.CrossLineLine(s0, sd, t0, td);
                if (st != null) {
                    if (st.s < 0 || st.s > 1)
                        return null;
                    return st.s;
                }
                return null;
            };
            Edge.prototype.toString = function () {
                return "[" + this.V0.toString() + "," + this.V1.toString() + "]";
            };
            Edge.tmp = U1.Vector2.Zero;
            return Edge;
        }());
        Triangulations.Edge = Edge;
        var Face = (function () {
            function Face() {
            }
            Face.prototype.Area = function () {
                Face.tripoints[0] = this.V0.P;
                Face.tripoints[1] = this.V1.P;
                Face.tripoints[2] = this.V2.P;
                return Polygon2.GetArea(Face.tripoints);
            };
            Face.prototype.toString = function () {
                return "(" + this.V0.ID + "," + this.V1.ID + "," + this.V2.ID + ")";
            };
            Face.tripoints = new Array(3);
            return Face;
        }());
        Triangulations.Face = Face;
        var TDS = (function () {
            function TDS() {
                this.VList = new Array();
                this.EList = new Array();
                this.FList = new Array();
                this.v_id = 0;
            }
            TDS.prototype.AddPolygon = function (polygon) {
                var vertics = new Array();
                var points;
                if (polygon instanceof Polygon2) {
                    points = polygon.Points;
                }
                else if (polygon instanceof Array) {
                    points = polygon;
                }
                var cp;
                var pp;
                for (var i = 0; i < points.length; i++) {
                    cp = polygon[i];
                    if (i > 0) {
                        if (U1.EpsilonEqualsPointPoint(cp, pp)) {
                            continue;
                        }
                    }
                    var vtx = new Vtx();
                    vtx.P = cp;
                    vtx.ID = this.v_id++;
                    vertics.push(vtx);
                    pp = cp;
                }
                this.AddPolygonVtx(vertics);
            };
            TDS.prototype.AddPolygonVtx = function (polygon) {
                for (var i = 0; i < polygon.length; i++) {
                    var pi = (i - 1 + polygon.length) % polygon.length;
                    var ni = (i + 1) % polygon.length;
                    var pv = polygon[pi];
                    var cv = polygon[i];
                    var nv = polygon[ni];
                    pv.Next = cv;
                    cv.Next = nv;
                    nv.Prev = cv;
                    cv.Prev = pv;
                    var edg = new Edge();
                    edg.V0 = cv;
                    edg.V1 = nv;
                    cv.ELsit.push(edg);
                    nv.ELsit.push(edg);
                    cv.Index = this.VList.length;
                    cv.Init();
                    this.VList.push(cv);
                    this.EList.push(edg);
                }
            };
            TDS.prototype.CalculateEdges = function () {
                var YMonoTone = function (a, b) {
                    if (a.P.Y > b.P.Y + U1.PRECISION)
                        return -1;
                    if (a.P.Y < b.P.Y - U1.PRECISION)
                        return 1;
                    if (a.P.X > b.P.X + U1.PRECISION)
                        return -1;
                    if (a.P.X < b.P.X - U1.PRECISION)
                        return 1;
                    return 0;
                };
                var EegeSorter = function (a, b) {
                    var y0 = a.V0.P.Y >= a.V1.P.Y + U1.PRECISION ? a.V0.P.Y : a.V1.P.Y;
                    var y1 = b.V0.P.Y >= b.V1.P.Y + U1.PRECISION ? b.V0.P.Y : b.V1.P.Y;
                    if (y0 > y1 + U1.PRECISION)
                        return -1;
                    if (y0 < y1 + U1.PRECISION)
                        return 1;
                    return 0;
                };
                var sortedVs = new Array();
                sortedVs = sortedVs.concat(this.VList);
                sortedVs.sort(YMonoTone);
                this.EList.sort(EegeSorter);
                var d = new U1.Vector2();
                var mp = new U1.Vector2();
                var neg = new U1.Vector2();
                var d0 = new U1.Vector2();
                var d1 = new U1.Vector2();
                for (var i = 0; i < sortedVs.length; i++) {
                    var v0 = sortedVs[i];
                    for (var j = 0; j < i; j++) {
                        var v1 = sortedVs[j];
                        if (!v0.IsBoundedSide(v1.P))
                            continue;
                        var isecEdge = false;
                        d.SetSubtract(v1.P, v0.P).Normalize();
                        for (var vi = j + 1; vi < i; vi++) {
                            var tv = sortedVs[vi];
                            d0.SetSubtract(tv.P, v0.P);
                            if (U1.Vector2.Dot(d0, d) < 0)
                                continue;
                            d1.SetSubtract(tv.P, v1.P);
                            if (U1.Vector2.Dot(d1, neg.SetNegate(d)) < 0)
                                continue;
                            mp.SetAdd(v0.P, d.Scale(U1.Vector2.Dot(d0, d)));
                            if (U1.Vector2.DistanceSquared(mp, tv.P) < U1.PRECISION) {
                                //버텍스와 교차
                                isecEdge = true;
                                break;
                            }
                        }
                        if (isecEdge)
                            continue;
                        for (var ei = 0; ei < this.EList.length; ei++) {
                            var tedge = this.EList[ei];
                            // 현재 버텍스보다 아래에 있는 에지를 만나면 종료
                            if (tedge.V0.P.Y < v0.P.Y && tedge.V1.P.Y < v0.P.Y)
                                break;
                            //이미 에지가 있다.
                            isecEdge = (tedge.V0 === v0 && tedge.V1 === v1) ||
                                (tedge.V0 === v1 && tedge.V1 === v0);
                            if (isecEdge)
                                break;
                            //연결하고자 하는 지점의 에지이므로 검사 불필요
                            if (tedge.V0 === v0 || tedge.V0 === v1)
                                continue;
                            if (tedge.V1 === v0 || tedge.V1 === v1)
                                continue;
                            //스치기만 해도 교차
                            isecEdge = tedge.IntersectSegment(v0, v1);
                            if (isecEdge)
                                break;
                        }
                        if (isecEdge)
                            continue;
                        var edge = new Edge();
                        edge.V0 = v1;
                        edge.V1 = v0;
                        edge.IsNew = true;
                        v0.ELsit.push(edge);
                        v1.ELsit.push(edge);
                        this.EList.unshift(edge);
                    }
                }
            };
            TDS.prototype.CalculateFaces = function () {
                var visitedVtx = new Array();
                var left = U1.Vector2.Zero;
                var unitX = U1.Vector2.UnitX;
                var dir = U1.Vector2.Zero;
                var sub = U1.Vector2.Zero;
                var inDir = U1.Vector2.Zero;
                for (var vi = 0; vi < this.VList.length; vi++) {
                    var v0 = this.VList[vi];
                    var neiVList = new Array();
                    for (var ei = 0; ei < v0.ELsit.length; ei++) {
                        var edg = v0.ELsit[ei];
                        if (edg.V1 == v0)
                            neiVList.push(edg.V0);
                        else
                            neiVList.push(edg.V1);
                    }
                    neiVList.sort(function (a_, b_) {
                        var a0 = U1.GeometryHelper2.AngleCCW(unitX, dir.SetSubtract(a_.P, v0.P));
                        var b0 = U1.GeometryHelper2.AngleCCW(unitX, dir.SetSubtract(b_.P, v0.P));
                        return a0 < b0 ? -1 : (a0 > b0) ? 1 : 0;
                    });
                    visitedVtx.push(v0);
                    var pi = neiVList.length - 1;
                    for (var nvi = 0; nvi < neiVList.length; pi = nvi, nvi++) {
                        var v1 = neiVList[pi];
                        var v2 = neiVList[nvi];
                        dir.SetSubtract(v1.P, v0.P).LeftRef(inDir);
                        if (U1.Vector2.Dot(inDir, sub.SetSubtract(v2.P, v0.P)) < 0)
                            continue;
                        if (visitedVtx.indexOf(v1) >= 0 || visitedVtx.indexOf(v2) >= 0)
                            continue;
                        if (v1 == v0.Next) {
                            left.SetSubtract(v1.P, v0.P).LeftRef(left);
                            if (U1.Vector2.Dot(left, sub.SetSubtract(v2.P, v0.P)) < 0)
                                continue;
                        }
                        if (v1 == v0.Prev) {
                            left = left.SetSubtract(v0.P, v1.P).LeftRef(left);
                            if (U1.Vector2.Dot(left, sub.SetSubtract(v2.P, v1.P)) < 0)
                                continue;
                        }
                        if (v2 == v0.Next) {
                            left = left.SetSubtract(v2.P, v0.P).LeftRef(left);
                            if (U1.Vector2.Dot(left, sub.SetSubtract(v1.P, v0.P)) < 0)
                                continue;
                        }
                        if (v2 == v0.Prev) {
                            left = left.SetSubtract(v0.P, v2.P).LeftRef(left);
                            if (U1.Vector2.Dot(left, sub.SetSubtract(v1.P, v2.P)) < 0)
                                continue;
                        }
                        var isOk = false;
                        for (var ei = 0; ei < v1.ELsit.length; ei++) {
                            var e = v1.ELsit[ei];
                            if (e.V0 == v2 || e.V1 == v2) {
                                isOk = true;
                                break;
                            }
                        }
                        if (isOk) {
                            var f = new Face();
                            f.V0 = v0;
                            f.V1 = v1;
                            f.V2 = v2;
                            this.FList.push(f);
                        }
                        ;
                    }
                }
            };
            TDS.prototype.IsInside = function (p) {
                var dir = new U1.Vector2(1, 0);
                for (var a = 0.01; a < Math.PI; a += 0.1) {
                    var front_cross = 0;
                    var back_cross = 0;
                    for (var ei = 0; ei < this.EList.length; ei++) {
                        var e = this.EList[ei];
                        if (e.IsNew)
                            continue;
                        var t = e.IntersectLine(p, dir);
                        if (t != null) {
                            if (t > 0)
                                front_cross++;
                            else if (t < 0)
                                back_cross++;
                        }
                    }
                    if (front_cross % 2 == back_cross % 2) {
                        return (front_cross % 2) == 1;
                    }
                    dir.Set(Math.cos(a), Math.sin(a));
                }
                return false;
            };
            TDS.prototype.GetMesh = function () {
                this.CalculateEdges();
                this.CalculateFaces();
                var result = new Mesh2();
                var vlist = new Array();
                var flist = new Array();
                this.VList.forEach(function (v_, i_, vs_) {
                    vlist.push(v_.P);
                });
                this.FList.forEach(function (f_, i_, fs_) {
                    if (f_.Area() >= TDS.MIN_FACE_AREA)
                        flist.push(new Face2(f_.V0.Index, f_.V1.Index, f_.V2.Index));
                });
                result.VList = vlist;
                result.FList = flist;
                return result;
            };
            TDS.MIN_FACE_AREA = 0.001;
            return TDS;
        }());
        Triangulations.TDS = TDS;
        var Face2 = (function () {
            function Face2(v0, v1, v2) {
                this.V0 = v0;
                this.V1 = v1;
                this.V2 = v2;
            }
            Face2.prototype.toString = function () {
                return "[" + this.V0.toString() + "," + this.V1.toString() + "," + this.V2.toString() + "]";
            };
            return Face2;
        }());
        Triangulations.Face2 = Face2;
        var Mesh2 = (function () {
            function Mesh2() {
                this.FList = new Array();
                this.VList = new Array();
            }
            Mesh2.prototype.Area = function () {
                var area = 0.0;
                var points = new Array(U1.Vector2.Zero, U1.Vector2.Zero, U1.Vector2.Zero);
                for (var _i = 0, _a = this.FList; _i < _a.length; _i++) {
                    var face = _a[_i];
                    points[0] = (this.VList[face.V0]);
                    points[1] = (this.VList[face.V1]);
                    points[2] = (this.VList[face.V2]);
                    area += Polygon2.GetArea(points);
                }
                return area;
            };
            return Mesh2;
        }());
        Triangulations.Mesh2 = Mesh2;
        var PolygonTriangulation2 = (function () {
            function PolygonTriangulation2() {
                this.m_TDS = new TDS();
            }
            PolygonTriangulation2.prototype.Fill = function (pgon) {
                this.m_TDS.AddPolygon(pgon);
            };
            PolygonTriangulation2.prototype.FillPWH = function (pwh) {
                for (var _i = 0, _a = pwh.GetPolygonList(); _i < _a.length; _i++) {
                    var path = _a[_i];
                    this.m_TDS.AddPolygon(path);
                }
            };
            PolygonTriangulation2.prototype.FillPSet = function (pgonSet) {
                for (var _i = 0, _a = pgonSet.GetPolygonList(); _i < _a.length; _i++) {
                    var path = _a[_i];
                    this.m_TDS.AddPolygon(path);
                }
            };
            PolygonTriangulation2.prototype.GetMesh = function () {
                return this.m_TDS.GetMesh();
            };
            return PolygonTriangulation2;
        }());
        Triangulations.PolygonTriangulation2 = PolygonTriangulation2;
    })(Triangulations = U1.Triangulations || (U1.Triangulations = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var DialogBase = (function () {
            function DialogBase() {
                this._isActive = true;
                this.binders = {};
                this.commands = {};
                this.AfterClosed = new U1.Event1();
            }
            DialogBase.prototype.Init = function () {
                var _this = this;
                if (this._isInit || this._isIniting)
                    return;
                if (this._root == null) {
                    this._isIniting = true;
                    this._root = document.createElement("div");
                    $(this._root).load(this.HtmlPage, "", function (txt_, state_) {
                        if (state_ != "success")
                            return;
                        _this._isIniting = false;
                        _this._isInit = true;
                        _this.InitBinders();
                        _this.UpdateBinders();
                        _this.OnLoaded();
                    });
                }
            };
            DialogBase.prototype.InitBinders = function () {
            };
            DialogBase.prototype.UnBinde = function () {
                for (var idx in this.binders) {
                    this.binders[idx].UnBind();
                }
                for (var idx in this.commands) {
                    this.commands[idx].Dispose();
                }
                this.binders = {};
                this.commands = {};
            };
            DialogBase.prototype.UpdateBinders = function () {
                for (var key in this.binders) {
                    this.binders[key].Update();
                }
            };
            DialogBase.prototype.Accept = function () {
            };
            DialogBase.prototype.ShowDialog = function () {
                this.Init();
            };
            DialogBase.prototype.OnClose = function (ev) {
                this.UnBinde();
                if (this._root != null) {
                    $("body").get(0).removeChild(this._root);
                }
                this._root = null;
                if (this.AfterClosed != null) {
                    this.AfterClosed.Invoke(this);
                    this.AfterClosed.Clear();
                    this.AfterClosed = null;
                }
            };
            DialogBase.prototype.OnLoaded = function () {
                var _this = this;
                $("body").get(0).appendChild(this._root);
                $(this._root.firstElementChild)
                    .modal()
                    .on('hidden.bs.modal', function (ev) { return _this.OnClose(ev); });
            };
            return DialogBase;
        }());
        UIControls.DialogBase = DialogBase;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var UIControls;
    (function (UIControls) {
        var PanelBase = (function () {
            function PanelBase() {
                this._isActive = true;
                this.binders = {};
                this.PropertyChanged = new U1.PropertyChangedEvent();
            }
            PanelBase.prototype.Init = function () {
                var _this = this;
                if (this._isInit || this._isIniting)
                    return;
                if (this._root == null) {
                    this._isIniting = true;
                    this._root = document.createElement("div");
                    $(this._root).load(this.HtmlPage, "", function (txt_, state_) {
                        if (state_ != "success")
                            return;
                        _this._isIniting = false;
                        _this._isInit = true;
                        _this.InitBinders();
                        _this.UpdateBinders();
                    });
                }
            };
            Object.defineProperty(PanelBase.prototype, "Root", {
                get: function () {
                    return this._root;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(PanelBase.prototype, "IsActive", {
                get: function () {
                    return this._isActive;
                },
                set: function (value) {
                    this._isActive = value;
                },
                enumerable: true,
                configurable: true
            });
            PanelBase.prototype.InitBinders = function () {
            };
            PanelBase.prototype.UpdateBinders = function () {
                for (var key in this.binders) {
                    this.binders[key].Update();
                }
            };
            PanelBase.prototype.PauseBinders = function () {
                for (var key in this.binders) {
                    this.binders[key].Pause();
                }
            };
            PanelBase.prototype.ResumeBinders = function () {
                for (var key in this.binders) {
                    this.binders[key].Resume();
                }
            };
            PanelBase.prototype.ClearBinders = function () {
                for (var key in this.binders) {
                    this.binders[key].UnBind();
                }
                this.binders = {};
            };
            PanelBase.prototype.ClearChildren = function (parent) {
                while (parent.hasChildNodes()) {
                    parent.removeChild(parent.lastChild);
                }
            };
            PanelBase.prototype.InvokePropertyChanged = function (prop) {
                if (this.PropertyChanged != null) {
                    this.PropertyChanged.Invoke(this, prop);
                }
            };
            return PanelBase;
        }());
        UIControls.PanelBase = PanelBase;
    })(UIControls = U1.UIControls || (U1.UIControls = {}));
})(U1 || (U1 = {}));
var System;
(function (System) {
    var Collections;
    (function (Collections) {
        var IList = (function () {
            function IList() {
            }
            return IList;
        }());
        Collections.IList = IList;
    })(Collections = System.Collections || (System.Collections = {}));
})(System || (System = {}));
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var GScripts;
        (function (GScripts) {
            var GScriptFormula = (function () {
                function GScriptFormula() {
                    var _this = this;
                    this._gformula = new GScripts.GFormula();
                    this._gformula.GetValue = function (o) { return _this.ScriptEngine.GetVariable(o); };
                }
                Object.defineProperty(GScriptFormula.prototype, "Formula", {
                    get: function () {
                        return this._gformula.Formula;
                    },
                    set: function (value) {
                        this._gformula.Formula = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GScriptFormula.prototype, "Result", {
                    get: function () {
                        return this._gformula.Result;
                    },
                    enumerable: true,
                    configurable: true
                });
                GScriptFormula.prototype.Update = function () {
                    var propinfo = this.TargetObject[this.TargetProperty];
                    if (propinfo !== undefined) {
                        var dbl = this.Result != null ? this.Result : 0.0;
                        this.TargetObject[this.TargetProperty] = dbl;
                    }
                };
                return GScriptFormula;
            }());
            GScripts.GScriptFormula = GScriptFormula;
        })(GScripts = WinCad.GScripts || (WinCad.GScripts = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var GScripts;
        (function (GScripts) {
            var GFormula = (function () {
                function GFormula() {
                }
                Object.defineProperty(GFormula.prototype, "Result", {
                    get: function () {
                        if (this._invalid)
                            this.Evaluate();
                        return this._result;
                    },
                    set: function (value) {
                        if (this._result === value)
                            return;
                        this._result = value;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GFormula.prototype, "Formula", {
                    get: function () {
                        return this._formula;
                    },
                    set: function (value) {
                        if (this._formula === value)
                            return;
                        this._formula = value;
                        this._invalid = true;
                    },
                    enumerable: true,
                    configurable: true
                });
                GFormula.prototype.Invalidate = function () {
                    this._invalid = true;
                };
                GFormula.prototype.Evaluate = function () {
                    if (this._formula == null || this._formula == "")
                        return;
                    var formula = this._formula.toUpperCase();
                    // 참조관계 
                    // 수식계산 결과 
                    var pos = { pos: 0 };
                    this._result = this.EvalExpression(formula, pos);
                };
                GFormula.prototype.ReadFunction = function (str, pos, token) {
                    var result = null;
                    ++pos.pos;
                    var items = new Array();
                    while (pos.pos < str.length) {
                        var item = this.EvalExpression(str, pos);
                        if (item == null)
                            break;
                        items.push(item);
                        GFormula.SkipWhiteSpace(str, pos);
                        if (pos.pos < str.length && str[pos.pos] == ',') {
                            pos.pos++;
                            continue;
                        }
                        break;
                    }
                    if (pos.pos < str.length && str[pos.pos] == ')') {
                        var func = token;
                        func = func.toUpperCase();
                        if (GFormula._functions[func]) {
                            result = GFormula._functions[func](items);
                        }
                    }
                    ++pos.pos;
                    return result;
                };
                /**
                * 수식계산
                */
                GFormula.prototype.EvalExpression = function (str, pos) {
                    var result = null;
                    try {
                        result = this.EvalTerm(str, pos);
                        while (pos.pos < str.length) {
                            var op = str[pos.pos];
                            if (op != '+' && op != '-')
                                return result;
                            ++pos.pos;
                            var term = this.EvalTerm(str, pos);
                            if (term == null) {
                                result = null;
                                break;
                            }
                            if (op == '+')
                                result = result + term;
                            else
                                result = result - term;
                            if (result == null)
                                break;
                        }
                    }
                    catch (ex) {
                        U1.LogService.WriteException(ex);
                        result = null;
                    }
                    return result;
                };
                /**
                *   곱셈, 나눗셈  계산
                */
                GFormula.prototype.EvalTerm = function (str, pos) {
                    var result = this.EvalFactor(str, pos);
                    while (pos.pos < str.length) {
                        var op = str[pos.pos];
                        if (op != '*' && op != '/')
                            return result;
                        ++pos.pos;
                        var factor = this.EvalFactor(str, pos);
                        if (factor == null) {
                            result = null;
                            break;
                        }
                        if (op == '*')
                            result = result * factor;
                        else
                            result = result / factor;
                        if (result == null)
                            break;
                    }
                    return result;
                };
                /**
                * 부호, (), 숫자, $참조 계산
                */
                GFormula.prototype.EvalFactor = function (str, pos) {
                    var result = null;
                    GFormula.SkipWhiteSpace(str, pos);
                    if (pos.pos >= str.length)
                        return result;
                    var negative = false;
                    if (str[pos.pos] == '-') {
                        negative = true;
                        ++pos.pos;
                        GFormula.SkipWhiteSpace(str, pos);
                    }
                    if (pos.pos >= str.length)
                        return result;
                    if (str[pos.pos] == '(') {
                        ++pos.pos;
                        result = this.EvalExpression(str, pos);
                        if (str[pos.pos] != ')')
                            result = null;
                        ++pos.pos;
                    }
                    else if (GFormula.IsDigit(str, pos.pos)) {
                        //숫자
                        result = GFormula.ReadNumber(str, pos);
                    }
                    else {
                        var token = "";
                        while (pos.pos < str.length &&
                            (GFormula.IsLetterOrDigit(str, pos.pos)
                                || str[pos.pos] == '_'
                                || str[pos.pos] == '.'
                                || str[pos.pos] == '!'
                                || str[pos.pos] == '['
                                || str[pos.pos] == ']')) {
                            token += str[pos.pos];
                            ++pos.pos;
                        }
                        GFormula.SkipWhiteSpace(str, pos);
                        if (pos.pos < str.length && str[pos.pos] == '(') {
                            //함수
                            result = this.ReadFunction(str, pos, token);
                        }
                        else {
                            var strBool = token;
                            if (strBool == "TRUE")
                                result = 1;
                            else if (strBool == "FALSE")
                                result = 0;
                            else {
                                if (this.GetValue != null)
                                    result = this.GetValue(token);
                                else
                                    result = null;
                            }
                        }
                    }
                    if (result != null) {
                        if (negative)
                            result *= -1;
                        GFormula.SkipWhiteSpace(str, pos);
                    }
                    return result;
                };
                GFormula.IsDigit = function (str, index) {
                    return U1.StringUtil.IsDigit(str[index]);
                };
                GFormula.IsLetterOrDigit = function (str, index) {
                    return U1.StringUtil.IsLetterOrDigit(str[index]);
                };
                GFormula.ReadNumber = function (str, pos) {
                    var result = null;
                    var token = "";
                    //숫자를 읽어냄
                    while (pos.pos < str.length &&
                        (GFormula.IsDigit(str, pos.pos)
                            || str[pos.pos] == '.'
                            || str[pos.pos] == 'e'
                            || str[pos.pos] == 'E')) {
                        token += (str[pos.pos]);
                        if ((pos.pos + 1 < str.length)
                            && (str[pos.pos + 1] == '-' || str[pos.pos + 1] == '+')
                            && (str[pos.pos] == 'e' || str[pos.pos] == 'E')) {
                            //123e-12 || 124e+12
                            ++pos.pos;
                            token += (str[pos.pos]);
                        }
                        ++pos.pos;
                    }
                    try {
                        var value = parseFloat(token);
                        result = value;
                    }
                    catch (ex) {
                        U1.LogService.WriteException(ex);
                        result = null;
                    }
                    return result;
                };
                /**
                * 공백 무시
                */
                GFormula.SkipWhiteSpace = function (str, pos) {
                    //공백무시
                    while (pos.pos < str.length
                        && (' \t\n\r\v'.indexOf(str[pos.pos]) > -1
                            || str[pos.pos] == ';')) {
                        ++pos.pos;
                    }
                };
                // #region Default Functions
                GFormula._functions = {
                    ABS: function (args) {
                        if (args.length != 1)
                            return null;
                        return Math.abs(args[0]);
                    },
                    ACOS: function (args) {
                        if (args.length != 1)
                            return null;
                        return Math.acos(args[0]);
                    },
                    AND: function (args) {
                        if (args.length < 1)
                            return null;
                        else {
                            for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {
                                var v = args_1[_i];
                                if (v == 0)
                                    return 0;
                            }
                            return 1;
                        }
                    },
                    ASIN: function (args) {
                        if (args.length != 1)
                            return null;
                        return Math.asin(args[0]);
                    },
                    ATAN: function (args) {
                        if (args.length != 1)
                            return null;
                        return Math.atan(args[0]);
                    },
                    ATAN2: function (args) {
                        if (args.length != 2)
                            return null;
                        return Math.atan2(args[0], args[1]);
                    },
                    CEILING: function (args) {
                        if (args.length != 1)
                            return null;
                        return Math.ceil(args[0]);
                    },
                    COS: function (args) {
                        if (args.length != 1)
                            return null;
                        return Math.cos(args[0]);
                    },
                    COSH: function (args) {
                        if (args.length != 1)
                            return null;
                        var x = args[0];
                        var y = Math.exp(x);
                        return (y + 1 / y) / 2;
                    },
                    DEG: function (args) {
                        if (args.length != 1)
                            return null;
                        return args[0] * 180 / Math.PI;
                    },
                    FLOOR: function (args) {
                        if (args.length != 1)
                            return null;
                        return Math.floor(args[0]);
                    },
                    IF: function (args) {
                        if (args.length < 2 || args.length > 3)
                            return null;
                        if (args[0] != 0)
                            return args[1];
                        if (args.length > 2)
                            return args[2];
                        else
                            return 0;
                    },
                    MAX: function (args) {
                        if (args.length == 0)
                            return null;
                        var result = args[0];
                        for (var i = 1; i < args.length; i++) {
                            result = Math.max(result, args[i]);
                        }
                        return result;
                    },
                    MIN: function (args) {
                        if (args.length == 0)
                            return null;
                        var result = args[0];
                        for (var i = 1; i < args.length; i++) {
                            result = Math.min(result, args[i]);
                        }
                        return result;
                    },
                    RAD: function (args) {
                        if (args.length != 1)
                            return null;
                        return args[0] / 180 * Math.PI;
                    },
                    POW: function (args) {
                        if (args.length != 2)
                            return null;
                        return Math.pow(args[0], args[1]);
                    },
                    RAND: function (args) {
                        //if (args.length != 0)
                        //    return null;
                        return Math.random();
                    },
                    ROUND: function (args) {
                        if (args.length != 2)
                            return null;
                        return Math.round(args[0]); //, args[1]);
                    },
                    SIN: function (args) {
                        if (args.length != 1)
                            return null;
                        return Math.sin(args[0]);
                    },
                    SINH: function (args) {
                        if (args.length != 1)
                            return null;
                        var y = Math.exp(args[0]);
                        return (y - 1 / y) / 2;
                    },
                    SQRT: function (args) {
                        if (args.length != 1)
                            return null;
                        return Math.sqrt(args[0]);
                    },
                    SUM: function (args) {
                        if (args.length != 0)
                            return null;
                        var result = 0;
                        for (var _i = 0, args_2 = args; _i < args_2.length; _i++) {
                            var v = args_2[_i];
                            result += v;
                        }
                        return result;
                    },
                    TAN: function (args) {
                        if (args.length != 1)
                            return null;
                        return Math.tan(args[0]);
                    },
                    TANH: function (args) {
                        if (args.length != 1)
                            return null;
                        var x = args[0];
                        if (x === Infinity) {
                            return 1;
                        }
                        else if (x === -Infinity) {
                            return -1;
                        }
                        else {
                            var y = Math.exp(2 * x);
                            return (y - 1) / (y + 1);
                        }
                    },
                    PI: function (args) {
                        return Math.PI;
                    }
                };
                return GFormula;
            }());
            GScripts.GFormula = GFormula;
        })(GScripts = WinCad.GScripts || (WinCad.GScripts = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var GScripts;
        (function (GScripts) {
            var GScriptCharIndex = (function () {
                function GScriptCharIndex() {
                    this.LineNumber = 0;
                    this.CharNumber = 0;
                    this.CharIndex = 0;
                }
                GScriptCharIndex.prototype.MoveNext = function () {
                    if (this.CharIndex >= this.Script.length)
                        throw "new GScriptException(\"End of line\", " + this.LineNumber + ", " + this.CharNumber + ")";
                    var c = this.Script[this.CharIndex];
                    if (c == '\r') {
                        this.LineNumber++;
                        this.CharNumber = 0;
                    }
                    this.CharIndex++;
                    return c;
                };
                GScriptCharIndex.prototype.MoveNStep = function (step) {
                    for (var i = 0; i < step; i++) {
                        this.MoveNext();
                    }
                };
                Object.defineProperty(GScriptCharIndex.prototype, "Current", {
                    get: function () {
                        return this.Script[this.CharIndex];
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GScriptCharIndex.prototype, "HasNext", {
                    get: function () {
                        return this.CharIndex + 1 < this.Script.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GScriptCharIndex.prototype, "HasPrev", {
                    get: function () {
                        return this.CharIndex - 1 >= 0;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GScriptCharIndex.prototype, "Next", {
                    get: function () {
                        return this.Script[this.CharIndex + 1];
                    },
                    enumerable: true,
                    configurable: true
                });
                GScriptCharIndex.prototype.HasNthNext = function (nth) {
                    return this.CharIndex + nth < this.Script.length;
                };
                GScriptCharIndex.prototype.NthNext = function (idx) {
                    return this.Script[this.CharIndex + idx];
                };
                Object.defineProperty(GScriptCharIndex.prototype, "IsEnd", {
                    get: function () {
                        return this.CharIndex >= this.Script.length;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(GScriptCharIndex.prototype, "Prev", {
                    get: function () {
                        return this.Script[this.CharIndex - 1];
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                * 공백을 건무시하고 공백의 다음 지점에 위치 시킨다.
                */
                GScriptCharIndex.prototype.SkipWhiteSpace = function () {
                    while (U1.StringUtil.IsWhiteSpace(this.Current)) {
                        this.MoveNext();
                    }
                    if (this.Current == '/' && this.NthNext(1) == '/') {
                        while (this.Current != '\r') {
                            this.MoveNext();
                        }
                    }
                    return this.Current;
                };
                GScriptCharIndex.prototype.Copy = function () {
                    var result = new GScriptCharIndex();
                    result.Script = this.Script;
                    result.LineNumber = this.LineNumber;
                    result.CharNumber = this.CharNumber;
                    result.CharIndex = this.CharIndex;
                    return result;
                };
                GScriptCharIndex.prototype.ThrowException = function (message) {
                    U1.LogService.WriteException(message + "  Line:" + this.LineNumber + " CharNumber:" + this.CharNumber);
                };
                GScriptCharIndex.prototype.Alert = function (condition, message) {
                    if (condition)
                        this.ThrowException(message);
                };
                return GScriptCharIndex;
            }());
            GScripts.GScriptCharIndex = GScriptCharIndex;
        })(GScripts = WinCad.GScripts || (WinCad.GScripts = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="gscriptformula.ts" />
/// <reference path="gformula.ts" />
/// <reference path="gscriptcharindex.ts" />
/// <reference path="../../u1/math/u1math.ts" />
/// <reference path="../../u1/math/colors.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var GScripts;
        (function (GScripts) {
            var GScriptEngine = (function () {
                function GScriptEngine() {
                    this._properties = {};
                    this.CharIndex = new GScripts.GScriptCharIndex();
                    this.BuiltinVariables = {};
                }
                GScriptEngine.RegisterType = function (name, ctr) {
                    GScriptEngine.Types[name] = ctr;
                };
                GScriptEngine.prototype.GetVariable = function (varname) {
                    varname = varname.toUpperCase();
                    var obj = null;
                    if (this.BuiltinVariables[varname]) {
                        obj = this.BuiltinVariables[varname];
                    }
                    else if (this._properties[varname]) {
                        obj = this._properties[varname];
                    }
                    if (obj != null) {
                        if (typeof (obj) === "number")
                            return obj;
                        if (typeof (obj) === "boolean")
                            return obj ? 1.0 : 0.0;
                    }
                    return null;
                };
                GScriptEngine.prototype.GetPropertyObject = function (objname) {
                    objname = objname.trim();
                    var tkns = objname.split('.');
                    if (tkns.length == 2) {
                        tkns[0] = tkns[0].trim();
                        tkns[1] = tkns[1].trim();
                        if (tkns[0] == "Colors") {
                            return U1.Colors[tkns[1]];
                        }
                        else if (tkns[0] == "Brushes") {
                            return System.Windows.Media.SolidColorBrush[tkns[1]];
                        }
                        else {
                            var typ = this.GetType(tkns[0]);
                            if (typ != null) {
                                return typ[tkns[1]];
                            }
                        }
                    }
                    objname = objname.toUpperCase();
                    if (this.BuiltinVariables[objname] != null)
                        return this.BuiltinVariables[objname];
                    if (this._properties[objname] != null)
                        return this._properties[objname];
                    return null;
                };
                GScriptEngine.prototype.SetPropertyObject = function (objname, value) {
                    objname = objname.toUpperCase();
                    this._properties[objname] = value;
                };
                GScriptEngine.prototype.Parse = function (script) {
                    this._properties = {};
                    this.CharIndex = new GScripts.GScriptCharIndex();
                    this.CharIndex.Script = script;
                    try {
                        while (this.CharIndex.HasNext) {
                            this.CharIndex.SkipWhiteSpace();
                            if (this.CharIndex.Current == 'v' &&
                                this.CharIndex.NthNext(1) == 'a' &&
                                this.CharIndex.NthNext(2) == 'r') {
                                this.CharIndex.MoveNStep(3);
                            }
                            this.ParseSetPropExp(null);
                            if (this.CharIndex.IsEnd)
                                break;
                            this.CharIndex.SkipWhiteSpace();
                            if (this.CharIndex.Current != ',' && this.CharIndex.Current != ';')
                                break;
                            if (!this.CharIndex.HasNext)
                                break;
                            this.CharIndex.MoveNext();
                        }
                    }
                    catch (ex) {
                        U1.LogService.WriteException(ex);
                    }
                };
                GScriptEngine.prototype.ParseIdentityExp = function () {
                    this.CharIndex.SkipWhiteSpace();
                    if (!U1.StringUtil.IsLetter(this.CharIndex.Current)) {
                        return "";
                    }
                    var sb = "";
                    sb += (this.CharIndex.MoveNext());
                    while (U1.StringUtil.IsLetterOrDigit(this.CharIndex.Current)) {
                        sb += (this.CharIndex.MoveNext());
                    }
                    return sb;
                };
                GScriptEngine.prototype.ParseSetPropExp = function (obj) {
                    var prop = this.ParseIdentityExp();
                    if (prop == "")
                        return false;
                    if (prop.toUpperCase() == "BOTTOM") {
                        var brk = 0;
                    }
                    var propInfo = null;
                    if (obj != null) {
                        var msg = obj.constructor + "\uC5D0 " + prop + "\uC5D0 \uB300\uD55C \uC815\uC758\uAC00 \uC5C6\uC2B5\uB2C8\uB2E4.";
                        this.CharIndex.Alert(obj[prop] === undefined, msg);
                        propInfo =
                            {
                                GetValue: function (obj_, indexes) {
                                    if (indexes === void 0) { indexes = null; }
                                    return obj_[prop];
                                },
                                SetValue: function (obj_, val_, indexes) {
                                    if (indexes === void 0) { indexes = null; }
                                    obj_[prop] = val_;
                                }
                            };
                    }
                    this.CharIndex.SkipWhiteSpace();
                    this.CharIndex.Alert(this.CharIndex.Current != '=', "asignment error");
                    this.CharIndex.MoveNext();
                    this.CharIndex.SkipWhiteSpace();
                    var collection = new Array();
                    var newObj;
                    var str;
                    var formula;
                    var out = {
                        newObject: null,
                        str: null,
                        formula: null
                    };
                    if (this.ParseCollection(collection)) {
                        if (propInfo != null) {
                            var propObj = propInfo.GetValue(obj, null);
                            if (propObj instanceof System.Collections.IList) {
                                var list = propObj;
                                for (var _i = 0, collection_1 = collection; _i < collection_1.length; _i++) {
                                    var item = collection_1[_i];
                                    list.Add(item);
                                }
                            }
                        }
                        else {
                            this.SetPropertyObject(prop, collection);
                        }
                    }
                    else if (this.ParseNewExpression(out)) {
                        newObj = out.newObject;
                        if (propInfo != null) {
                            propInfo.SetValue(obj, newObj, null);
                        }
                        else {
                            this.SetPropertyObject(prop, newObj);
                        }
                    }
                    else if (this.ParseStringExpression(out)) {
                        str = out.str;
                        if (propInfo != null) {
                            propInfo.SetValue(obj, str, null);
                        }
                        else {
                            this.SetPropertyObject(prop, str);
                        }
                    }
                    else if (this.ParseFormulaExpression(out)) {
                        formula = out.formula;
                        var preDefObj = this.GetPropertyObject(formula.Formula);
                        if (preDefObj != null) {
                            if (propInfo != null) {
                                propInfo.SetValue(obj, preDefObj, null);
                            }
                            else {
                                this.SetPropertyObject(prop, preDefObj);
                            }
                        }
                        else {
                            if (propInfo != null) {
                                if (formula.Result != null) {
                                    propInfo.SetValue(obj, formula.Result != 0 ? formula.Result : 0);
                                }
                            }
                            else {
                                if (formula.Result != null) {
                                    this.SetPropertyObject(prop, formula.Result != 0 ? formula.Result : 0);
                                }
                            }
                        }
                    }
                    return true;
                };
                GScriptEngine.prototype.ParseArguments = function (out) {
                    out.args = null;
                    var result = new Array();
                    this.CharIndex.MoveNext();
                    var c = this.CharIndex.Current;
                    var nObj;
                    var str;
                    var formula;
                    var tout = {
                        newObject: null,
                        str: null,
                        formula: GScripts.GScriptFormula
                    };
                    while (this.CharIndex.HasNext) {
                        if (this.ParseNewExpression(tout)) {
                            nObj = tout.newObject;
                            result.push(nObj);
                        }
                        else if (this.ParseStringExpression(tout)) {
                            result.push(tout.str);
                        }
                        else if (this.ParseFormulaExpression(out)) {
                            var preDefObj = this.GetPropertyObject(formula.Formula);
                            if (preDefObj != null) {
                                result.push(preDefObj);
                            }
                            else {
                                result.push(formula.Result != null ? formula.Result : 0);
                            }
                        }
                        else
                            this.CharIndex.Alert(true, "파라메터 형식이 맞지 않습니다.");
                        this.CharIndex.SkipWhiteSpace();
                        if (this.CharIndex.Current == ')')
                            break;
                        this.CharIndex.Alert(this.CharIndex.Current != ',', ",가 필요합니다.");
                    }
                    out.args = result;
                    return true;
                };
                GScriptEngine.prototype.ParseStringExpression = function (out) {
                    out.str = "";
                    this.CharIndex.SkipWhiteSpace();
                    if (this.CharIndex.Current != '"')
                        return false;
                    var sb = "";
                    this.CharIndex.MoveNext();
                    while (this.CharIndex.HasNext) {
                        if (this.CharIndex.Current == '\\') {
                            this.CharIndex.MoveNext();
                            switch (this.CharIndex.Current) {
                                case '\'':
                                    sb += ('\'');
                                    break;
                                case '\\':
                                    sb += ('\\');
                                    break;
                                case '"':
                                    sb += ('"');
                                    break;
                                case 'n':
                                    sb += '\n';
                                    break;
                                case 't':
                                    sb += '\t';
                                    break;
                                case 'b':
                                    sb += '\b';
                                    break;
                            }
                        }
                        else {
                            sb += (this.CharIndex.Current);
                        }
                        this.CharIndex.MoveNext();
                        if (this.CharIndex.Current == '"')
                            break;
                    }
                    this.CharIndex.Alert(this.CharIndex.Current != '"', "문자열 오류입니다");
                    this.CharIndex.MoveNext();
                    out.str = sb;
                    return true;
                };
                GScriptEngine.prototype.ParseFormulaExpression = function (out) {
                    this.CharIndex.SkipWhiteSpace();
                    var sb = "";
                    while (this.CharIndex.Current != '\r' &&
                        this.CharIndex.Current != ',' &&
                        this.CharIndex.Current != ';' &&
                        this.CharIndex.Current != '}' &&
                        this.CharIndex.Current != '{') {
                        var c = this.CharIndex.Current;
                        if (c == '(') {
                            while ((c != ')' && c != ';' && c != '\r')) {
                                sb += (this.CharIndex.Current);
                                c = this.CharIndex.MoveNext();
                            }
                        }
                        else if (this.CharIndex.Current != ',') {
                            sb += (this.CharIndex.Current);
                            this.CharIndex.MoveNext();
                        }
                    }
                    if (sb.length == 0)
                        return false;
                    out.formula = new GScripts.GScriptFormula();
                    out.formula.ScriptEngine = this;
                    out.formula.Formula = sb.trim();
                    return true;
                };
                GScriptEngine.prototype.HasType = function (objType) {
                    return this.GetType(objType) != null;
                    //return false;
                    //return _types.ContainsKey(objType);
                };
                GScriptEngine.prototype.GetType = function (objType) {
                    if (GScriptEngine.Types[objType] != null)
                        return GScriptEngine.Types[objType];
                    return null;
                };
                GScriptEngine.prototype.ParseNewExpression = function (out) {
                    out.newObject = null;
                    this.CharIndex.SkipWhiteSpace();
                    var old = this.CharIndex.Copy();
                    if (!(this.CharIndex.MoveNext() == 'n'
                        && this.CharIndex.MoveNext() == 'e'
                        && this.CharIndex.MoveNext() == 'w')) {
                        this.CharIndex = old;
                        return false;
                    }
                    var objType = this.ParseIdentityExp();
                    var msg = objType + "\uD615\uC2DD \uC774\uB984\uC744 \uCC3E\uC744\uC218 \uC5C6\uC2B5\uB2C8\uB2E4";
                    this.CharIndex.Alert(!this.HasType(objType), msg);
                    var tout = { args: null };
                    this.CharIndex.SkipWhiteSpace();
                    if (this.CharIndex.Current == '(') {
                        this.ParseArguments(tout);
                        if (this.CharIndex.Current == ')')
                            this.CharIndex.MoveNext();
                    }
                    var ctype = this.GetType(objType);
                    var args = tout.args;
                    var newObject = out.newObject = new ctype();
                    if (args != null && args.length > 0)
                        newObject.setArgs(args);
                    this.CharIndex.SkipWhiteSpace();
                    if (args != null && this.CharIndex.Current != '{')
                        return true;
                    this.CharIndex.SkipWhiteSpace();
                    if (newObject instanceof System.Collections.IList) {
                        var items = new Array();
                        if (this.ParseCollection(items)) {
                            var newListObj = newObject;
                            for (var _i = 0, items_3 = items; _i < items_3.length; _i++) {
                                var item = items_3[_i];
                                newListObj.Add(item);
                            }
                        }
                        return true;
                    }
                    msg = "new 식은 형식 뒤에{}가 필요합니다";
                    this.CharIndex.Alert(this.CharIndex.Current != '{', msg);
                    this.CharIndex.MoveNext();
                    while (true) {
                        this.ParseSetPropExp(newObject);
                        this.CharIndex.SkipWhiteSpace();
                        if (this.CharIndex.Current != ',')
                            break;
                        this.CharIndex.MoveNext();
                    }
                    msg = "구문 오류입니다. ',' 가 필요합니다";
                    this.CharIndex.Alert(this.CharIndex.Current != '}', msg);
                    this.CharIndex.MoveNext();
                    return true;
                };
                GScriptEngine.prototype.ParseCollection = function (collection) {
                    this.CharIndex.SkipWhiteSpace();
                    if (this.CharIndex.Current != '{')
                        return false;
                    this.CharIndex.MoveNext();
                    var objValue;
                    var strValue;
                    var formula;
                    var out = {
                        newObject: null,
                        str: null,
                        formula: null
                    };
                    while (true) {
                        if (this.ParseNewExpression(out)) {
                            objValue = out.newObject;
                            collection.push(objValue);
                        }
                        else if (this.ParseStringExpression(out)) {
                            strValue = out.str;
                            collection.push(strValue);
                        }
                        else if (this.ParseFormulaExpression(out)) {
                            formula = out.formula;
                            var preDefObj = this.GetPropertyObject(formula.Formula);
                            if (preDefObj != null) {
                                collection.push(preDefObj);
                            }
                            else {
                                if (formula.Result != null)
                                    collection.push(formula.Result);
                            }
                        }
                        this.CharIndex.SkipWhiteSpace();
                        if (this.CharIndex.Current != ',')
                            break;
                        this.CharIndex.MoveNext();
                    }
                    this.CharIndex.SkipWhiteSpace();
                    this.CharIndex.Alert(this.CharIndex.Current != '}', "}가 필요합니다");
                    this.CharIndex.MoveNext();
                    return true;
                };
                GScriptEngine.Types = {
                    "Color": U1.Color
                };
                return GScriptEngine;
            }());
            GScripts.GScriptEngine = GScriptEngine;
        })(GScripts = WinCad.GScripts || (WinCad.GScripts = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="../../u1/math/colors.ts" /> 
/// <reference path="collections.ts" />
/// <reference path="../../u1/math/u1math.ts" />
/// <reference path="../../wincad/gscripts/gscriptengine.ts" />
var System;
(function (System) {
    var Windows;
    (function (Windows) {
        var Media;
        (function (Media) {
            var SolidColorBrush = (function () {
                function SolidColorBrush(color) {
                    if (color === void 0) { color = null; }
                    this.Color = U1.Colors.Black;
                    if (color == null)
                        color = U1.Colors.Black;
                    this.Color = color;
                }
                SolidColorBrush.SolidColorBrushFromUint = function (argb) {
                    return new SolidColorBrush(U1.Color.FromUInt32(argb));
                };
                SolidColorBrush.AliceBlue = new SolidColorBrush(U1.Colors.AliceBlue);
                SolidColorBrush.AntiqueWhite = new SolidColorBrush(U1.Colors.AntiqueWhite);
                SolidColorBrush.Aqua = new SolidColorBrush(U1.Colors.Aqua);
                SolidColorBrush.Aquamarine = new SolidColorBrush(U1.Colors.Aquamarine);
                SolidColorBrush.Azure = new SolidColorBrush(U1.Colors.Azure);
                SolidColorBrush.Beige = new SolidColorBrush(U1.Colors.Beige);
                SolidColorBrush.Bisque = new SolidColorBrush(U1.Colors.Bisque);
                SolidColorBrush.Black = new SolidColorBrush(U1.Colors.Black);
                SolidColorBrush.BlanchedAlmond = new SolidColorBrush(U1.Colors.Black);
                SolidColorBrush.Blue = new SolidColorBrush(U1.Colors.Blue);
                SolidColorBrush.BlueViolet = new SolidColorBrush(U1.Colors.BlueViolet);
                SolidColorBrush.Brown = new SolidColorBrush(U1.Colors.Brown);
                SolidColorBrush.BurlyWood = new SolidColorBrush(U1.Colors.BurlyWood);
                SolidColorBrush.CadetBlue = new SolidColorBrush(U1.Colors.CadetBlue);
                SolidColorBrush.Chartreuse = new SolidColorBrush(U1.Colors.Chartreuse);
                SolidColorBrush.Chocolate = new SolidColorBrush(U1.Colors.Chocolate);
                SolidColorBrush.Coral = new SolidColorBrush(U1.Colors.Coral);
                SolidColorBrush.CornflowerBlue = new SolidColorBrush(U1.Colors.CornflowerBlue);
                SolidColorBrush.Cornsilk = new SolidColorBrush(U1.Colors.Cornsilk);
                SolidColorBrush.Crimson = new SolidColorBrush(U1.Colors.Crimson);
                SolidColorBrush.Cyan = new SolidColorBrush(U1.Colors.Cyan);
                SolidColorBrush.DarkBlue = new SolidColorBrush(U1.Colors.DarkBlue);
                SolidColorBrush.DarkCyan = new SolidColorBrush(U1.Colors.DarkCyan);
                SolidColorBrush.DarkGoldenrod = new SolidColorBrush(U1.Colors.DarkGoldenrod);
                SolidColorBrush.DarkGray = new SolidColorBrush(U1.Colors.DarkGray);
                SolidColorBrush.DarkGreen = new SolidColorBrush(U1.Colors.DarkGreen);
                SolidColorBrush.DarkKhaki = new SolidColorBrush(U1.Colors.DarkKhaki);
                SolidColorBrush.DarkMagenta = new SolidColorBrush(U1.Colors.DarkMagenta);
                SolidColorBrush.DarkOliveGreen = new SolidColorBrush(U1.Colors.DarkOliveGreen);
                SolidColorBrush.DarkOrange = new SolidColorBrush(U1.Colors.DarkOrange);
                SolidColorBrush.DarkOrchid = new SolidColorBrush(U1.Colors.DarkOrchid);
                SolidColorBrush.DarkRed = new SolidColorBrush(U1.Colors.DarkRed);
                SolidColorBrush.DarkSalmon = new SolidColorBrush(U1.Colors.DarkSalmon);
                SolidColorBrush.DarkSeaGreen = new SolidColorBrush(U1.Colors.DarkSeaGreen);
                SolidColorBrush.DarkSlateBlue = new SolidColorBrush(U1.Colors.DarkSlateBlue);
                SolidColorBrush.DarkSlateGray = new SolidColorBrush(U1.Colors.DarkSlateGray);
                SolidColorBrush.DarkTurquoise = new SolidColorBrush(U1.Colors.DarkTurquoise);
                SolidColorBrush.DarkViolet = new SolidColorBrush(U1.Colors.DarkViolet);
                SolidColorBrush.DeepPink = new SolidColorBrush(U1.Colors.DeepPink);
                SolidColorBrush.DeepSkyBlue = new SolidColorBrush(U1.Colors.DeepSkyBlue);
                SolidColorBrush.DimGray = new SolidColorBrush(U1.Colors.DimGray);
                SolidColorBrush.DodgerBlue = new SolidColorBrush(U1.Colors.DodgerBlue);
                SolidColorBrush.Firebrick = new SolidColorBrush(U1.Colors.Firebrick);
                SolidColorBrush.FloralWhite = new SolidColorBrush(U1.Colors.FloralWhite);
                SolidColorBrush.ForestGreen = new SolidColorBrush(U1.Colors.ForestGreen);
                SolidColorBrush.Fuchsia = new SolidColorBrush(U1.Colors.Fuchsia);
                SolidColorBrush.Gainsboro = new SolidColorBrush(U1.Colors.Gainsboro);
                SolidColorBrush.GhostWhite = new SolidColorBrush(U1.Colors.GhostWhite);
                SolidColorBrush.Gold = new SolidColorBrush(U1.Colors.Gold);
                SolidColorBrush.Goldenrod = new SolidColorBrush(U1.Colors.Goldenrod);
                SolidColorBrush.Gray = new SolidColorBrush(U1.Colors.Gray);
                SolidColorBrush.Green = new SolidColorBrush(U1.Colors.Green);
                SolidColorBrush.GreenYellow = new SolidColorBrush(U1.Colors.GreenYellow);
                SolidColorBrush.Honeydew = new SolidColorBrush(U1.Colors.Honeydew);
                SolidColorBrush.HotPink = new SolidColorBrush(U1.Colors.HotPink);
                SolidColorBrush.IndianRed = new SolidColorBrush(U1.Colors.IndianRed);
                SolidColorBrush.Indigo = new SolidColorBrush(U1.Colors.Indigo);
                SolidColorBrush.Ivory = new SolidColorBrush(U1.Colors.Ivory);
                SolidColorBrush.Khaki = new SolidColorBrush(U1.Colors.Khaki);
                SolidColorBrush.Lavender = new SolidColorBrush(U1.Colors.Lavender);
                SolidColorBrush.LavenderBlush = new SolidColorBrush(U1.Colors.LavenderBlush);
                SolidColorBrush.LawnGreen = new SolidColorBrush(U1.Colors.LawnGreen);
                SolidColorBrush.LemonChiffon = new SolidColorBrush(U1.Colors.LemonChiffon);
                SolidColorBrush.LightBlue = new SolidColorBrush(U1.Colors.LightBlue);
                SolidColorBrush.LightCoral = new SolidColorBrush(U1.Colors.LightCoral);
                SolidColorBrush.LightCyan = new SolidColorBrush(U1.Colors.LightCyan);
                SolidColorBrush.LightGoldenrodYellow = new SolidColorBrush(U1.Colors.LightGoldenrodYellow);
                SolidColorBrush.LightGray = new SolidColorBrush(U1.Colors.LightGray);
                SolidColorBrush.LightGreen = new SolidColorBrush(U1.Colors.LightGreen);
                SolidColorBrush.LightPink = new SolidColorBrush(U1.Colors.LightPink);
                SolidColorBrush.LightSalmon = new SolidColorBrush(U1.Colors.LightSalmon);
                SolidColorBrush.LightSeaGreen = new SolidColorBrush(U1.Colors.LightSeaGreen);
                SolidColorBrush.LightSkyBlue = new SolidColorBrush(U1.Colors.LightSkyBlue);
                SolidColorBrush.LightSlateGray = new SolidColorBrush(U1.Colors.LightSlateGray);
                SolidColorBrush.LightSteelBlue = new SolidColorBrush(U1.Colors.LightSteelBlue);
                SolidColorBrush.LightYellow = new SolidColorBrush(U1.Colors.LightYellow);
                SolidColorBrush.Lime = new SolidColorBrush(U1.Colors.Lime);
                SolidColorBrush.LimeGreen = new SolidColorBrush(U1.Colors.LimeGreen);
                SolidColorBrush.Linen = new SolidColorBrush(U1.Colors.Linen);
                SolidColorBrush.Magenta = new SolidColorBrush(U1.Colors.Magenta);
                SolidColorBrush.Maroon = new SolidColorBrush(U1.Colors.Maroon);
                SolidColorBrush.MediumAquamarine = new SolidColorBrush(U1.Colors.MediumAquamarine);
                SolidColorBrush.MediumBlue = new SolidColorBrush(U1.Colors.MediumBlue);
                SolidColorBrush.MediumOrchid = new SolidColorBrush(U1.Colors.MediumOrchid);
                SolidColorBrush.MediumPurple = new SolidColorBrush(U1.Colors.MediumPurple);
                SolidColorBrush.MediumSeaGreen = new SolidColorBrush(U1.Colors.MediumSeaGreen);
                SolidColorBrush.MediumSlateBlue = new SolidColorBrush(U1.Colors.MediumSlateBlue);
                SolidColorBrush.MediumSpringGreen = new SolidColorBrush(U1.Colors.MediumSpringGreen);
                SolidColorBrush.MediumTurquoise = new SolidColorBrush(U1.Colors.MediumTurquoise);
                SolidColorBrush.MediumVioletRed = new SolidColorBrush(U1.Colors.MediumVioletRed);
                SolidColorBrush.MidnightBlue = new SolidColorBrush(U1.Colors.MidnightBlue);
                SolidColorBrush.MintCream = new SolidColorBrush(U1.Colors.MintCream);
                SolidColorBrush.MistyRose = new SolidColorBrush(U1.Colors.MistyRose);
                SolidColorBrush.Moccasin = new SolidColorBrush(U1.Colors.Moccasin);
                SolidColorBrush.NavajoWhite = new SolidColorBrush(U1.Colors.NavajoWhite);
                SolidColorBrush.Navy = new SolidColorBrush(U1.Colors.Navy);
                SolidColorBrush.OldLace = new SolidColorBrush(U1.Colors.OldLace);
                SolidColorBrush.Olive = new SolidColorBrush(U1.Colors.Olive);
                SolidColorBrush.OliveDrab = new SolidColorBrush(U1.Colors.OliveDrab);
                SolidColorBrush.Orange = new SolidColorBrush(U1.Colors.Orange);
                SolidColorBrush.OrangeRed = new SolidColorBrush(U1.Colors.OrangeRed);
                SolidColorBrush.Orchid = new SolidColorBrush(U1.Colors.Orchid);
                SolidColorBrush.PaleGoldenrod = new SolidColorBrush(U1.Colors.PaleGoldenrod);
                SolidColorBrush.PaleGreen = new SolidColorBrush(U1.Colors.PaleGreen);
                SolidColorBrush.PaleTurquoise = new SolidColorBrush(U1.Colors.PaleTurquoise);
                SolidColorBrush.PaleVioletRed = new SolidColorBrush(U1.Colors.PaleVioletRed);
                SolidColorBrush.PapayaWhip = new SolidColorBrush(U1.Colors.PapayaWhip);
                SolidColorBrush.PeachPuff = new SolidColorBrush(U1.Colors.PeachPuff);
                SolidColorBrush.Peru = new SolidColorBrush(U1.Colors.Peru);
                SolidColorBrush.Pink = new SolidColorBrush(U1.Colors.Pink);
                SolidColorBrush.Plum = new SolidColorBrush(U1.Colors.Plum);
                SolidColorBrush.PowderBlue = new SolidColorBrush(U1.Colors.PowderBlue);
                SolidColorBrush.Purple = new SolidColorBrush(U1.Colors.Purple);
                SolidColorBrush.Red = new SolidColorBrush(U1.Colors.Red);
                SolidColorBrush.RosyBrown = new SolidColorBrush(U1.Colors.RosyBrown);
                SolidColorBrush.RoyalBlue = new SolidColorBrush(U1.Colors.RoyalBlue);
                SolidColorBrush.SaddleBrown = new SolidColorBrush(U1.Colors.SaddleBrown);
                SolidColorBrush.Salmon = new SolidColorBrush(U1.Colors.Salmon);
                SolidColorBrush.SandyBrown = new SolidColorBrush(U1.Colors.SandyBrown);
                SolidColorBrush.SeaGreen = new SolidColorBrush(U1.Colors.SeaGreen);
                SolidColorBrush.SeaShell = new SolidColorBrush(U1.Colors.SeaShell);
                SolidColorBrush.Sienna = new SolidColorBrush(U1.Colors.Sienna);
                SolidColorBrush.Silver = new SolidColorBrush(U1.Colors.Silver);
                SolidColorBrush.SkyBlue = new SolidColorBrush(U1.Colors.SkyBlue);
                SolidColorBrush.SlateBlue = new SolidColorBrush(U1.Colors.SlateBlue);
                SolidColorBrush.SlateGray = new SolidColorBrush(U1.Colors.SlateGray);
                SolidColorBrush.Snow = new SolidColorBrush(U1.Colors.Snow);
                SolidColorBrush.SpringGreen = new SolidColorBrush(U1.Colors.SpringGreen);
                SolidColorBrush.SteelBlue = new SolidColorBrush(U1.Colors.SteelBlue);
                SolidColorBrush.Tan = new SolidColorBrush(U1.Colors.Tan);
                SolidColorBrush.Teal = new SolidColorBrush(U1.Colors.Teal);
                SolidColorBrush.Thistle = new SolidColorBrush(U1.Colors.Thistle);
                SolidColorBrush.Tomato = new SolidColorBrush(U1.Colors.Tomato);
                SolidColorBrush.Transparent = new SolidColorBrush(U1.Colors.Transparent);
                SolidColorBrush.Turquoise = new SolidColorBrush(U1.Colors.Turquoise);
                SolidColorBrush.Violet = new SolidColorBrush(U1.Colors.Violet);
                SolidColorBrush.Wheat = new SolidColorBrush(U1.Colors.Wheat);
                SolidColorBrush.White = new SolidColorBrush(U1.Colors.White);
                SolidColorBrush.WhiteSmoke = new SolidColorBrush(U1.Colors.WhiteSmoke);
                SolidColorBrush.Yellow = new SolidColorBrush(U1.Colors.Yellow);
                SolidColorBrush.YellowGreen = new SolidColorBrush(U1.Colors.YellowGreen);
                return SolidColorBrush;
            }());
            Media.SolidColorBrush = SolidColorBrush;
            var Transform = (function () {
                function Transform() {
                }
                Object.defineProperty(Transform.prototype, "Matrix", {
                    get: function () {
                        return U1.Matrix4.Identity;
                    },
                    enumerable: true,
                    configurable: true
                });
                return Transform;
            }());
            Media.Transform = Transform;
            var TransformCollection = (function (_super) {
                __extends(TransformCollection, _super);
                function TransformCollection() {
                    _super.apply(this, arguments);
                    this.children = new Array();
                }
                TransformCollection.prototype.Add = function (item) {
                    this.children.push(item);
                };
                Object.defineProperty(TransformCollection.prototype, "Children", {
                    get: function () {
                        return this.children;
                    },
                    enumerable: true,
                    configurable: true
                });
                return TransformCollection;
            }(System.Collections.IList));
            Media.TransformCollection = TransformCollection;
            var ScaleTransform = (function (_super) {
                __extends(ScaleTransform, _super);
                function ScaleTransform() {
                    _super.apply(this, arguments);
                    this.CenterX = 0;
                    this.CenterY = 0;
                    this.ScaleX = 1;
                    this.ScaleY = 1;
                }
                Object.defineProperty(ScaleTransform.prototype, "Matrix", {
                    get: function () {
                        var m4 = U1.Matrix4;
                        var m = m4.CreateTranslation(new U1.Vector3(-this.CenterX, -this.CenterY))
                            .Multiply(m4.CreateScale(new U1.Vector3(this.ScaleX, this.ScaleY, 1)))
                            .Multiply(m4.CreateTranslation(new U1.Vector3(-this.CenterX, -this.CenterY)));
                        return m;
                    },
                    enumerable: true,
                    configurable: true
                });
                return ScaleTransform;
            }(Transform));
            Media.ScaleTransform = ScaleTransform;
            var RotateTransform = (function (_super) {
                __extends(RotateTransform, _super);
                function RotateTransform() {
                    _super.apply(this, arguments);
                    this.Angle = 0;
                    this.CenterX = 0;
                    this.CenterY = 0;
                }
                Object.defineProperty(RotateTransform.prototype, "Matrix", {
                    get: function () {
                        var m4 = U1.Matrix4;
                        var m = m4.CreateTranslation(new U1.Vector3(-this.CenterX, -this.CenterY))
                            .Multiply(m4.CreateRotationZ(this.Angle))
                            .Multiply(m4.CreateTranslation(new U1.Vector3(-this.CenterX, -this.CenterY)));
                        return m;
                    },
                    enumerable: true,
                    configurable: true
                });
                return RotateTransform;
            }(Transform));
            Media.RotateTransform = RotateTransform;
            var TranslateTransform = (function (_super) {
                __extends(TranslateTransform, _super);
                function TranslateTransform() {
                    _super.apply(this, arguments);
                    this.X = 0;
                    this.Y = 0;
                }
                Object.defineProperty(TranslateTransform.prototype, "Matrix", {
                    get: function () {
                        var m4 = U1.Matrix4;
                        var m = m4.CreateTranslation(new U1.Vector3(this.X, this.Y));
                        return m;
                    },
                    enumerable: true,
                    configurable: true
                });
                return TranslateTransform;
            }(Transform));
            Media.TranslateTransform = TranslateTransform;
            var TransformGroup = (function (_super) {
                __extends(TransformGroup, _super);
                function TransformGroup() {
                    _super.apply(this, arguments);
                    this.Children = new TransformCollection();
                }
                Object.defineProperty(TransformGroup.prototype, "Matrix", {
                    get: function () {
                        var m4 = U1.Matrix4;
                        var m = m4.Identity;
                        if (this.Children != null) {
                            for (var _i = 0, _a = this.Children.Children; _i < _a.length; _i++) {
                                var ch = _a[_i];
                                var chm = ch.Matrix;
                                m.Multiply(chm);
                            }
                        }
                        return m;
                    },
                    enumerable: true,
                    configurable: true
                });
                return TransformGroup;
            }(Transform));
            Media.TransformGroup = TransformGroup;
            var PointCollection = (function (_super) {
                __extends(PointCollection, _super);
                function PointCollection() {
                    _super.apply(this, arguments);
                    this.children = new Array();
                }
                PointCollection.prototype.Add = function (item) {
                    this.children.push(item);
                };
                Object.defineProperty(PointCollection.prototype, "Children", {
                    get: function () {
                        return this.children;
                    },
                    enumerable: true,
                    configurable: true
                });
                return PointCollection;
            }(System.Collections.IList));
            Media.PointCollection = PointCollection;
            var DoubleCollection = (function (_super) {
                __extends(DoubleCollection, _super);
                function DoubleCollection() {
                    _super.apply(this, arguments);
                    this.children = new Array();
                }
                DoubleCollection.prototype.Add = function (item) {
                    this.children.push(item);
                };
                Object.defineProperty(DoubleCollection.prototype, "Children", {
                    get: function () {
                        return this.children;
                    },
                    enumerable: true,
                    configurable: true
                });
                return DoubleCollection;
            }(System.Collections.IList));
            Media.DoubleCollection = DoubleCollection;
            var reg = (function () {
                U1.WinCad.GScripts.GScriptEngine.RegisterType("SolidColorBrush", SolidColorBrush);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("TransformGroup", TransformGroup);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("TranslateTransform", TranslateTransform);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("RotateTransform", RotateTransform);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("ScaleTransform", ScaleTransform);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("TransformCollection", TransformCollection);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("PointCollection", PointCollection);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("DoubleCollection", DoubleCollection);
            })();
        })(Media = Windows.Media || (Windows.Media = {}));
    })(Windows = System.Windows || (System.Windows = {}));
})(System || (System = {}));
/// <reference path="collections.ts" />
var System;
(function (System) {
    var Windows;
    (function (Windows) {
        var UIElement = (function () {
            function UIElement() {
                this.RenderTransform = new Windows.Media.TranslateTransform();
            }
            UIElement.prototype.Render = function (parentEntity) {
            };
            return UIElement;
        }());
        Windows.UIElement = UIElement;
        var FrameworkElement = (function (_super) {
            __extends(FrameworkElement, _super);
            function FrameworkElement() {
                _super.apply(this, arguments);
                this.Height = 0;
                this.Width = 0;
            }
            return FrameworkElement;
        }(UIElement));
        Windows.FrameworkElement = FrameworkElement;
        var Point = (function () {
            function Point(x, y) {
                if (x === void 0) { x = 0; }
                if (y === void 0) { y = 0; }
                this.X = 0;
                this.Y = 0;
                this.X = x;
                this.Y = y;
            }
            return Point;
        }());
        Windows.Point = Point;
        /**
        *     자식 요소가 부모의 레이아웃 슬롯 내에 세로 방향으로 배치되거나 늘어나는 방식을 설명합니다.
        */
        (function (VerticalAlignment) {
            /**
            * 요소를 부모 레이아웃 슬롯의 위쪽에 맞춥니다.
            */
            VerticalAlignment[VerticalAlignment["Top"] = 0] = "Top";
            /**
            *     요소를 부모 레이아웃 슬롯의 가운데에 맞춥니다.
            */
            VerticalAlignment[VerticalAlignment["Center"] = 1] = "Center";
            /**
            *     요소를 부모 레이아웃 슬롯의 아래쪽에 맞춥니다.
            */
            VerticalAlignment[VerticalAlignment["Bottom"] = 2] = "Bottom";
            /**
            *     요소를 늘여 부모 요소의 전체 레이아웃 슬롯을 채웁니다.
            */
            VerticalAlignment[VerticalAlignment["Stretch"] = 3] = "Stretch";
        })(Windows.VerticalAlignment || (Windows.VerticalAlignment = {}));
        var VerticalAlignment = Windows.VerticalAlignment;
        (function () {
            U1.WinCad.GScripts.GScriptEngine.RegisterType("Point", Point);
        })();
    })(Windows = System.Windows || (System.Windows = {}));
})(System || (System = {}));
var System;
(function (System) {
    var Windows;
    (function (Windows) {
        var Shapes;
        (function (Shapes) {
            /** 요약:
            *     System.Windows.Shapes.Ellipse, System.Windows.Shapes.Polygon 및 System.Windows.Shapes.Rectangle
            *     등의 도형 요소에 대해 기본 클래스를 제공합니다.
            */
            var Shape = (function (_super) {
                __extends(Shape, _super);
                function Shape() {
                    _super.apply(this, arguments);
                    this.Fill = null;
                    this.Stroke = null;
                    this.StrokeThickness = 1;
                    this.StrokeDashArray = new System.Windows.Media.DoubleCollection();
                }
                Shape.prototype.SetStyle = function (entity) {
                    if (this.Fill != null) {
                        entity.Fill = this.Fill.Color;
                    }
                    if (this.Stroke != null) {
                        entity.Stroke = this.Stroke.Color;
                    }
                    if (this.StrokeThickness != null) {
                        entity.StrokeThickness = this.StrokeThickness;
                    }
                    if (this.StrokeDashArray.Children.length > 0) {
                        entity.StrokeDash = this.StrokeDashArray.Children;
                    }
                };
                return Shape;
            }(Windows.FrameworkElement));
            Shapes.Shape = Shape;
            var Rectangle = (function (_super) {
                __extends(Rectangle, _super);
                function Rectangle() {
                    _super.apply(this, arguments);
                    this.RadiusX = 0;
                    this.RadiusY = 0;
                }
                Rectangle.prototype.Render = function (parentEntity) {
                    var scene = parentEntity.Component.Scene;
                    var scpolygon = scene.newPolygon();
                    this.SetStyle(scpolygon);
                    if (this.StrokeDashArray != null && this.StrokeDashArray.Children.length > 0) {
                    }
                    var points = [
                        new U1.Vector3(0, 0, 0),
                        new U1.Vector3(this.Width, 0, 0),
                        new U1.Vector3(this.Width, this.Height, 0),
                        new U1.Vector3(0, this.Height, 0)
                    ];
                    points = points.reverse();
                    scpolygon.Points = points;
                    if (this.RenderTransform != null) {
                        scpolygon.Transform = this.RenderTransform.Matrix;
                    }
                    parentEntity.AddChild(scpolygon);
                };
                return Rectangle;
            }(Shape));
            Shapes.Rectangle = Rectangle;
            var RectanglePattern = (function (_super) {
                __extends(RectanglePattern, _super);
                function RectanglePattern() {
                    _super.apply(this, arguments);
                    this.IsHorzontal = true;
                    this.StartMargin = 20;
                    this.Span = 100;
                }
                RectanglePattern.prototype.Render = function (parentEntity) {
                    var scene = parentEntity.Component.Scene;
                    if (this.IsHorzontal) {
                        for (var i = this.StartMargin; i < this.Height; i += this.Span) {
                            var p0 = new U1.Vector3(0, i);
                            var p1 = new U1.Vector3(this.Width, i);
                            var scPLine = scene.newPolyLine();
                            this.SetStyle(scPLine);
                            scPLine.Points = [p0, p1];
                            if (this.RenderTransform != null) {
                                scPLine.Transform = this.RenderTransform.Matrix;
                            }
                            parentEntity.AddChild(scPLine);
                        }
                    }
                    else {
                        for (var i = this.StartMargin; i < this.Width; i += this.Span) {
                            var p0 = new U1.Vector3(i, 0);
                            var p1 = new U1.Vector3(i, this.Height);
                            var scPLine = scene.newPolyLine();
                            this.SetStyle(scPLine);
                            scPLine.Points = [p0, p1];
                            if (this.RenderTransform != null) {
                                scPLine.Transform = this.RenderTransform.Matrix;
                            }
                            parentEntity.AddChild(scPLine);
                        }
                    }
                };
                return RectanglePattern;
            }(Shape));
            Shapes.RectanglePattern = RectanglePattern;
            var Polygon = (function (_super) {
                __extends(Polygon, _super);
                function Polygon() {
                    _super.apply(this, arguments);
                    this.Points = new System.Windows.Media.PointCollection();
                }
                Polygon.prototype.Render = function (parentEntity) {
                    var scene = parentEntity.Component.Scene;
                    var scpolygon = scene.newPolygon();
                    this.SetStyle(scpolygon);
                    var points = new Array();
                    for (var i = 0; i < this.Points.Children.length; i++) {
                        var p = this.Points.Children[i];
                        var v3 = new U1.Vector3(p.X, p.Y);
                        points.push(v3);
                    }
                    scpolygon.Points = points;
                    if (this.RenderTransform != null) {
                        scpolygon.Transform = this.RenderTransform.Matrix;
                    }
                    parentEntity.AddChild(scpolygon);
                };
                return Polygon;
            }(Shape));
            Shapes.Polygon = Polygon;
            var Polyline = (function (_super) {
                __extends(Polyline, _super);
                function Polyline() {
                    _super.apply(this, arguments);
                    this.Points = new System.Windows.Media.PointCollection();
                }
                Polyline.prototype.Render = function (parentEntity) {
                    var scene = parentEntity.Component.Scene;
                    var scpolygon = scene.newPolyLine();
                    this.SetStyle(scpolygon);
                    var points = new Array();
                    for (var i = 0; i < this.Points.Children.length; i++) {
                        var p = this.Points.Children[i];
                        var v3 = new U1.Vector3(p.X, p.Y);
                        points.push(v3);
                    }
                    scpolygon.Points = points;
                    if (this.RenderTransform != null) {
                        scpolygon.Transform = this.RenderTransform.Matrix;
                    }
                    parentEntity.AddChild(scpolygon);
                };
                return Polyline;
            }(Shape));
            Shapes.Polyline = Polyline;
            var Line = (function (_super) {
                __extends(Line, _super);
                function Line() {
                    _super.apply(this, arguments);
                    this.X1 = 0;
                    this.X2 = 0;
                    this.Y1 = 0;
                    this.Y2 = 0;
                }
                Line.prototype.Render = function (parentEntity) {
                    var scene = parentEntity.Component.Scene;
                    var scPLine = scene.newPolyLine();
                    this.SetStyle(scPLine);
                    var points = [
                        new U1.Vector3(this.X1, this.Y1),
                        new U1.Vector3(this.X2, this.Y2),
                    ];
                    scPLine.Points = points;
                    if (this.RenderTransform != null) {
                        scPLine.Transform = this.RenderTransform.Matrix;
                    }
                    parentEntity.AddChild(scPLine);
                };
                return Line;
            }(Shape));
            Shapes.Line = Line;
            var Ellipse = (function (_super) {
                __extends(Ellipse, _super);
                function Ellipse() {
                    _super.apply(this, arguments);
                }
                Ellipse.prototype.Render = function (parentEntity) {
                    var scene = parentEntity.Component.Scene;
                    var scEllipse = scene.newEllipse();
                    this.SetStyle(scEllipse);
                    scEllipse.Width = this.Width;
                    scEllipse.Height = this.Height;
                    scEllipse.Position = new U1.Vector3(this.Width / 2, this.Height / 2, 0);
                    if (this.RenderTransform != null) {
                        scEllipse.Transform = this.RenderTransform.Matrix;
                    }
                    parentEntity.AddChild(scEllipse);
                };
                return Ellipse;
            }(Shape));
            Shapes.Ellipse = Ellipse;
            (function () {
                U1.WinCad.GScripts.GScriptEngine.RegisterType("Rectangle", Rectangle);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("Polygon", Polygon);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("Polyline", Polyline);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("Line", Line);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("Ellipse", Ellipse);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("RectanglePattern", RectanglePattern);
            })();
        })(Shapes = Windows.Shapes || (Windows.Shapes = {}));
    })(Windows = System.Windows || (System.Windows = {}));
})(System || (System = {}));
var System;
(function (System) {
    var Windows;
    (function (Windows) {
        var Controls;
        (function (Controls) {
            var Panel = (function (_super) {
                __extends(Panel, _super);
                function Panel() {
                    _super.apply(this, arguments);
                    this.Background = null;
                    this.Children = new UIElementCollection();
                }
                Panel.prototype.Render = function (parentEntity) {
                    var group = parentEntity.Component.Scene.newGroup();
                    parentEntity.AddChild(group);
                    if (this.RenderTransform != null) {
                        group.Transform = this.RenderTransform.Matrix;
                    }
                    var children = this.Children.Children;
                    for (var _i = 0, children_4 = children; _i < children_4.length; _i++) {
                        var ch = children_4[_i];
                        ch.Render(group);
                    }
                };
                return Panel;
            }(Windows.FrameworkElement));
            Controls.Panel = Panel;
            var Canvas = (function (_super) {
                __extends(Canvas, _super);
                function Canvas() {
                    _super.call(this);
                }
                return Canvas;
            }(Panel));
            Controls.Canvas = Canvas;
            var UIElementCollection = (function (_super) {
                __extends(UIElementCollection, _super);
                function UIElementCollection() {
                    _super.apply(this, arguments);
                    this.Children = new Array();
                }
                UIElementCollection.prototype.Add = function (item) {
                    this.Children.push(item);
                };
                return UIElementCollection;
            }(System.Collections.IList));
            Controls.UIElementCollection = UIElementCollection;
            (function () {
                U1.WinCad.GScripts.GScriptEngine.RegisterType("UIElementCollection", UIElementCollection);
                U1.WinCad.GScripts.GScriptEngine.RegisterType("Canvas", Canvas);
            })();
        })(Controls = Windows.Controls || (Windows.Controls = {}));
    })(Windows = System.Windows || (System.Windows = {}));
})(System || (System = {}));
/// <reference path="../math/u1math.ts" />
/// <reference path="../math/colors.ts" />
var U1;
(function (U1) {
    var Views;
    (function (Views) {
        var ControlComponent = (function () {
            function ControlComponent(scene) {
                this._orderedItems = null;
                this.Controls = new Array();
                //Events
                this._controlAdded = new U1.Event2();
                this._controlRemoving = new U1.Event2();
                this._view = scene;
            }
            Object.defineProperty(ControlComponent.prototype, "View", {
                get: function () {
                    return this._view;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControlComponent.prototype, "ActiveControl", {
                get: function () {
                    return this._activeControl;
                },
                set: function (value) {
                    if (this._activeControl == value)
                        return;
                    this._activeControl = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControlComponent.prototype, "OrderedControls", {
                get: function () {
                    if (this._orderedItems == null) {
                        this._orderedItems = this.Controls.sort(function (a_, b_) {
                            if (a_.Order < b_.Order)
                                return -1;
                            if (a_.Order > b_.Order)
                                return 1;
                            return 0;
                        });
                    }
                    return this._orderedItems;
                },
                enumerable: true,
                configurable: true
            });
            ControlComponent.prototype.AddControl = function (ctor) {
                var ch = new ctor(this);
                if (this.Controls == null) {
                    this.Controls = new Array();
                }
                this.Controls.push(ch);
                this.InvokeControlAdded(ch);
                this._orderedItems = null;
                return ch;
            };
            ControlComponent.prototype.RemoveControl = function (item) {
                if (item == null)
                    return;
                this.InvokeControlRemoving(item);
                if (this.Controls == null)
                    return;
                if (this.ActiveControl == item)
                    this.ActiveControl = null;
                var idx = this.Controls.indexOf(item);
                this.Controls.splice(idx, 1);
                this._orderedItems = null;
                if (!item.IsDisposed) {
                    item.Clear();
                }
            };
            Object.defineProperty(ControlComponent.prototype, "ControlAdded", {
                get: function () {
                    return this._controlAdded;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ControlComponent.prototype, "ControlRemoving", {
                get: function () {
                    return this._controlRemoving;
                },
                enumerable: true,
                configurable: true
            });
            ControlComponent.prototype.InvokeControlAdded = function (entity) {
                //요소추가 이벤트 발생
                this._controlAdded.Invoke(this, entity);
            };
            ControlComponent.prototype.InvokeControlRemoving = function (item) {
                //요소제거 이벤트 발생
                this._controlRemoving.Invoke(this, item);
            };
            ControlComponent.prototype.Pick = function (isectContext) {
                var res_isect = null;
                var res_node = null;
                var orderedNodes = this.OrderedControls;
                for (var i = orderedNodes.length - 1; i >= 0; i--) {
                    var node = orderedNodes[i];
                    if (node.IsPickable === false)
                        continue;
                    var isect = node.CheckIntersect(isectContext);
                    if (isect == null)
                        continue;
                    if (res_isect == null || isect.Distance < res_isect.Distance) {
                        isectContext.MaxDistance = isect.Distance;
                        res_node = node;
                        res_isect = isect;
                    }
                }
                var result = {
                    ISect: res_isect,
                    Control: res_node
                };
                return result;
            };
            ControlComponent.prototype.Update = function () {
                var orderedItems = this.OrderedControls;
                for (var _i = 0, orderedItems_1 = orderedItems; _i < orderedItems_1.length; _i++) {
                    var p = orderedItems_1[_i];
                    p.Update();
                }
            };
            return ControlComponent;
        }());
        Views.ControlComponent = ControlComponent;
        var VControl = (function () {
            function VControl(comp) {
                this._ver = 0;
                this._updatever = 0;
                this.Order = 0;
                this.AfterMouseDown = new U1.Event2();
                this.AfterMouseUp = new U1.Event2();
                this._comp = comp;
            }
            Object.defineProperty(VControl.prototype, "Component", {
                get: function () {
                    return this._comp;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VControl.prototype, "IsDisposed", {
                get: function () {
                    return this._isDisposed;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VControl.prototype, "View", {
                get: function () {
                    return this.Component.View;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VControl.prototype, "Scene", {
                get: function () {
                    return this.View.Scene;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VControl.prototype, "Transform", {
                get: function () {
                    return this._transform;
                },
                set: function (value) {
                    if (this._transform === value)
                        return;
                    this._transform = value;
                    this.MarkChanged();
                },
                enumerable: true,
                configurable: true
            });
            //Methods
            VControl.prototype.MarkChanged = function () {
                this._ver++;
                if (this.View != null)
                    this.View.Invalidate();
            };
            VControl.prototype.CheckIntersect = function (isectContext) {
                return null;
            };
            VControl.prototype.Update = function () {
                this.OnUpdate();
            };
            VControl.prototype.OnUpdate = function () {
            };
            VControl.prototype.Dispose = function () {
                if (this._isDisposed === true)
                    return;
                this._isDisposed = true;
                this._comp.RemoveControl(this);
                this.Clear();
                this.AfterMouseDown = null;
            };
            VControl.prototype.Clear = function () {
            };
            VControl.prototype.OnMouseEnter = function () {
            };
            VControl.prototype.OnMouseLeave = function () {
            };
            //UI Events
            VControl.prototype.OnMouseMove = function (ev) {
                return false;
            };
            VControl.prototype.OnMouseUp = function (ev) {
                this.AfterMouseUp.Invoke(this, ev);
                return false;
            };
            VControl.prototype.OnMouseDown = function (ev) {
                this.AfterMouseDown.Invoke(this, ev);
                return false;
            };
            VControl.prototype.OnMouseWheel = function (ev) {
                return false;
            };
            VControl.prototype.OnPress = function (ev) {
                return false;
            };
            VControl.prototype.OnPanMove = function (ev) {
                return false;
            };
            VControl.prototype.OnPanStart = function (ev) {
                return false;
            };
            VControl.prototype.OnPanEnd = function (ev) {
                return false;
            };
            VControl.prototype.OnPinch = function (ev) {
                return false;
            };
            VControl.prototype.OnTouchStart = function (ev) {
                return false;
            };
            VControl.prototype.OnTouchMove = function (ev) {
                return false;
            };
            VControl.prototype.OnTouchEnd = function (ev) {
                return false;
            };
            return VControl;
        }());
        Views.VControl = VControl;
        var VcDimension = (function (_super) {
            __extends(VcDimension, _super);
            function VcDimension(comp) {
                _super.call(this, comp);
                this._start = new U1.Vector3();
                this._end = new U1.Vector3();
                this._normal = new U1.Vector3(0, 0, 1);
                this._fontSize = 1;
                this._offset = 0;
                this._textOffset = new U1.Vector2();
                this.ReadOnly = false;
                this.isEditing = false;
                this.AfterEndEdit = new U1.Event2();
                this.AfterCancelEdit = new U1.Event1();
            }
            Object.defineProperty(VcDimension.prototype, "Text", {
                get: function () {
                    return this._text;
                },
                set: function (value) {
                    this._text = value;
                    this.MarkChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "Start", {
                get: function () {
                    return this._start;
                },
                set: function (value) {
                    this._start.CopyFrom(value);
                    this.MarkChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "End", {
                get: function () {
                    return this._end;
                },
                set: function (value) {
                    this._end.CopyFrom(value);
                    this.MarkChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "Normal", {
                get: function () {
                    return this._normal;
                },
                set: function (value) {
                    this._normal.CopyFrom(value);
                    this.MarkChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "FontSize", {
                get: function () {
                    return this._fontSize;
                },
                set: function (value) {
                    this._fontSize = value;
                    this.MarkChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "Offset", {
                /**
                * 중심선을 오른쪽으로 이동
                */
                get: function () {
                    return this._offset;
                },
                set: function (value) {
                    this._offset = value;
                    this.MarkChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "TextOffset", {
                get: function () {
                    return this._textOffset;
                },
                set: function (value) {
                    this._textOffset.CopyFrom(value);
                    this.MarkChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "wstart", {
                get: function () {
                    if (this.Transform != null) {
                        return U1.Vector3.Transform(this.Start, this.Transform);
                    }
                    return this.Start;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "wend", {
                get: function () {
                    if (this.Transform != null) {
                        return U1.Vector3.Transform(this.End, this.Transform);
                    }
                    return this.End;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "wnorm", {
                get: function () {
                    if (this.Transform != null) {
                        return U1.Vector3.TransformNormal(this.Normal, this.Transform);
                    }
                    return this.Normal;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "wleft", {
                get: function () {
                    var left = new U1.Vector3();
                    U1.Vector3.Subtract(this.wend, this.wstart, left);
                    U1.Vector3.Cross(left, this.wnorm, left);
                    left.Normalize();
                    return left;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "Left", {
                /**
                * 왼쪽 방향
                */
                get: function () {
                    var left = new U1.Vector3();
                    U1.Vector3.Subtract(this.End, this.Start, left);
                    U1.Vector3.Cross(left, this.Normal, left);
                    left.Normalize();
                    return left;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "TextAlign", {
                get: function () {
                    return this._textAlign;
                },
                set: function (value) {
                    this._textAlign = value;
                    this.MarkChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VcDimension.prototype, "TextLocation", {
                /**
                * 텍스트 위치
                */
                get: function () {
                    var sp = this.wstart;
                    var ep = this.wend;
                    var dir = U1.Vector3.Subtract(ep, sp).Normalize();
                    var right = this.wleft.Clone().Negate();
                    var lp0 = U1.Vector3.ScaleAdd(sp, this.Offset, right);
                    var lp1 = U1.Vector3.ScaleAdd(ep, this.Offset, right);
                    var actualwidth = this.Text.length * this.FontSize;
                    var result = U1.Vector3.Add(lp0, lp1)
                        .Scale(1 / 2)
                        .Subtract(U1.Vector3.Scale(dir, actualwidth).Scale(1 / 2));
                    if (this.TextAlign == System.Windows.VerticalAlignment.Bottom) {
                        result.Add(U1.Vector3.Scale(right, (this.Offset < 0 ? -1 : 1) * this.FontSize * 1.4));
                    }
                    else if (this.TextAlign == System.Windows.VerticalAlignment.Center) {
                        result.Add(U1.Vector3.Scale(right, (this.Offset < 0 ? -1 : 1) * this.FontSize / 2 * 1.4));
                    }
                    return result;
                },
                enumerable: true,
                configurable: true
            });
            VcDimension.prototype.UpdateBounding = function () {
                var ws = this.wstart;
                var we = this.wend;
                var sp = new U1.Vector3(ws.X, ws.Y);
                var ep = new U1.Vector3(we.X, we.Y);
                if (sp == ep)
                    return;
                var r2 = this.Left;
                var right = new U1.Vector3(r2.X, r2.Y);
                var lp0 = U1.Vector3.ScaleAdd(sp, this.Offset, right);
                var lp1 = U1.Vector3.ScaleAdd(ep, this.Offset, right);
                lp0 = U1.Vector3.ScaleAdd(lp0, VcDimension.OFFSET_TOP, right, lp0);
                lp1 = U1.Vector3.ScaleAdd(lp1, VcDimension.OFFSET_TOP, right, lp1);
            };
            VcDimension.prototype.Clear = function () {
                if (this._board != null) {
                    this._board.Delete();
                }
                this._line = null;
                this._startArrow = null;
                this._endArrow = null;
                this._startBar = null;
                this._endBar = null;
                this._board = null;
            };
            VcDimension.prototype.OnUpdate = function () {
                if (this._ver != this._updatever ||
                    this._board == null) {
                    this.Clear();
                    this._board = this.Scene.newGroup();
                    this._board.Control = this;
                    this.Scene.Overlay.AddChild(this._board);
                    this.DrawLine();
                }
                if (this.isEditing) {
                    var min = this._scText.BoundingBox.Min;
                    var max = this._scText.BoundingBox.Max;
                    var lt = U1.Vector3.New().Set(min.X, max.Y, 0);
                    var lb = U1.Vector3.New().Set(min.X, min.Y, 0);
                    lt.Transform(this._scText.Transform);
                    lb.Transform(this._scText.Transform);
                    this.View.Scene.Camera.WorldToScreen(lt, lt);
                    this.View.Scene.Camera.WorldToScreen(lb, lb);
                    var left = Math.round(lt.X);
                    var top = Math.round(lt.Y);
                    $("#__edit_dim")
                        .css("left", left + "px")
                        .css("top", top + "px");
                    lt.Release();
                    lb.Release();
                }
                this._updatever = this._ver;
            };
            Object.defineProperty(VcDimension.prototype, "TextLocationWorld", {
                get: function () {
                    return this._textXForm.Translation.Clone();
                },
                enumerable: true,
                configurable: true
            });
            VcDimension.prototype.DrawLine = function () {
                this._line = this.Scene.newPolyLine();
                this._startBar = this.Scene.newPolyLine();
                this._endBar = this.Scene.newPolyLine();
                this._scText = this.Scene.newText();
                this._startArrow = this.Scene.newPolyLine();
                this._endArrow = this.Scene.newPolyLine();
                this._board.AddChild(this._line);
                this._board.AddChild(this._startBar);
                this._board.AddChild(this._endBar);
                this._board.AddChild(this._startArrow);
                this._board.AddChild(this._endArrow);
                this._board.AddChild(this._scText);
                var offset = this.Offset;
                var left = this.wleft;
                var ws = this.wstart;
                var we = this.wend;
                var wdir = U1.Vector3.Subtract(we, ws).Normalize();
                var p1 = U1.Vector3.ScaleAdd(ws, offset, left);
                var p2 = U1.Vector3.ScaleAdd(we, offset, left);
                var p11 = U1.Vector3.ScaleAdd(ws, offset + (offset < 0 ? -20 : 20), left);
                var p21 = U1.Vector3.ScaleAdd(we, offset + (offset < 0 ? -20 : 20), left);
                var mp = U1.Vector3.Add(p1, p2).Scale(0.5);
                var wsl = U1.Vector3.ScaleAdd(p1, 20, wdir).ScaleAdd(20, left);
                var wsr = U1.Vector3.ScaleAdd(p1, 20, wdir).ScaleAdd(-20, left);
                var wel = U1.Vector3.ScaleAdd(p2, -20, wdir).ScaleAdd(20, left);
                var wer = U1.Vector3.ScaleAdd(p2, -20, wdir).ScaleAdd(-20, left);
                this._startBar.Points = [ws, p11];
                this._endBar.Points = [we, p21];
                this._startArrow.Points = [wsl, p1, wsr];
                this._endArrow.Points = [wel, p2, wer];
                this._line.Points = [p1, p2];
                var w = this.Text.length * this.FontSize;
                this._scText.Text = this.Text;
                this._scText.FontSize = this.FontSize;
                this._scText.Height = this.FontSize;
                this._scText.Width = this.Text.length * this.FontSize;
                if (this.ReadOnly) {
                }
                var w = this._scText.ActualWidth;
                var r = U1.GeometryHelper2.AngleCCW(U1.Vector2.UnitX, new U1.Vector2(p2.X - p1.X, p2.Y - p1.Y));
                this._scText.Transform =
                    this._textXForm =
                        U1.Matrix4.CreateTranslation(new U1.Vector3(-w / 2, -this.FontSize, 0))
                            .Multiply(U1.Matrix4.CreateRotationZ(r))
                            .Multiply(U1.Matrix4.CreateTranslation(mp));
            };
            VcDimension.prototype.BeginEdit = function () {
                var _this = this;
                if (this.isEditing || this.ReadOnly)
                    return;
                this.RemoveInput();
                this.isEditing = true;
                var wp = this.TextLocationWorld;
                var sp = this.View.Scene.Camera.WorldToScreen(wp);
                var left = Math.round(sp.X);
                var top = Math.round(sp.Y);
                //var result = prompt("Enter Length", this.Text);
                var input = document.createElement("input");
                input.id = "__edit_dim";
                input.value = this.Text;
                input.style.position = "absolute";
                input.style.fontSize = "large";
                input.style.left = left + "px";
                input.style.top = top + "px";
                var $input = $(input)
                    .mousedown(function (ev_) {
                    ev_.preventDefault();
                })
                    .keydown(function (ev_) {
                    if (ev_.keyCode == 27) {
                        _this.CancelEdit();
                    }
                    else if (ev_.keyCode == 13) {
                        _this.EndEdit();
                    }
                })
                    .on("change", function (ev) {
                    _this.EndEdit();
                });
                this.View.ActiveControl = this;
                $("#OverlayArea").get(0).appendChild(input);
                input.select();
                input.focus();
            };
            VcDimension.prototype.OnMouseDown = function (ev) {
                if (ev.srcElement instanceof HTMLInputElement) {
                    if (ev.srcElement.id == "__edit_dim")
                        return;
                }
                if (this.View.ActiveControl == this) {
                    this.View.ActiveControl = null;
                }
                if (this.isEditing) {
                    this.EndEdit();
                }
                return false;
            };
            VcDimension.prototype.RemoveInput = function () {
                $("#OverlayArea").empty();
            };
            VcDimension.prototype.CancelEdit = function () {
                if (this.View.ActiveControl == this)
                    this.View.ActiveControl = null;
                this.RemoveInput();
                this.isEditing = false;
                this.AfterCancelEdit.Invoke(this);
            };
            VcDimension.prototype.EndEdit = function () {
                if (this.View.ActiveControl == this)
                    this.View.ActiveControl = null;
                var input = document.getElementById("__edit_dim");
                var value = "";
                if (input != null)
                    value = input.value;
                this.RemoveInput();
                this.isEditing = false;
                if (input != null && input.value != this.Text) {
                    this.AfterEndEdit.Invoke(this, value);
                }
            };
            VcDimension.OFFSET_TOP = 50;
            VcDimension.ARROW_LEN = 30;
            return VcDimension;
        }(VControl));
        Views.VcDimension = VcDimension;
    })(Views = U1.Views || (U1.Views = {}));
})(U1 || (U1 = {}));
/// <reference path="../math/u1math.ts" />
/// <reference path="../math/colors.ts" />
var U1;
(function (U1) {
    var Views;
    (function (Views) {
        var ScEntity = (function () {
            //Ctor
            function ScEntity() {
                //Fields
                this._transform = U1.Matrix4.Identity;
                this._worldTransform = null;
                this._boundingBox = new U1.BoundingBox();
                this._boundingSphere = new U1.BoundingSphere();
                this._geometryBBx = new U1.BoundingBox(U1.Vector3.MaxValue, U1.Vector3.MinValue);
                this._worldBoundingSphere = new U1.BoundingSphere();
                this._isInvalidBounding = true;
                this._isInvalidWorldBounding = true;
                this._stroke = U1.Colors.Black;
                this._alpha = 1;
                this._strokeThickness = 1;
                this._order = 0;
                this._invalidOrder = true;
                this.Ver = 0;
                this.UpdateVer = 0;
                this.Visible = true;
                this.Handle = ScEntity._handle++;
            }
            Object.defineProperty(ScEntity.prototype, "Presenter", {
                get: function () {
                    if (this._presenter != null)
                        return this._presenter;
                    if (this._parent != null)
                        return this.Parent.Presenter;
                    return null;
                },
                set: function (value) {
                    this._presenter = value;
                },
                enumerable: true,
                configurable: true
            });
            ;
            Object.defineProperty(ScEntity.prototype, "Control", {
                get: function () {
                    if (this._control != null)
                        return this._control;
                    if (this._control != null)
                        return this.Parent.Control;
                    return null;
                },
                set: function (value) {
                    this._control = value;
                },
                enumerable: true,
                configurable: true
            });
            ;
            Object.defineProperty(ScEntity.prototype, "Stroke", {
                //Props
                get: function () {
                    return this._stroke;
                },
                set: function (value) {
                    if (value == null)
                        this._stroke = null;
                    else {
                        if (this._stroke == null)
                            this._stroke = value.Clone();
                        else
                            this._stroke.CopyFrom(value);
                    }
                    this._strokeStr = null;
                    this.Invalidate();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "StrokeStr", {
                get: function () {
                    if (this._strokeStr == null) {
                        this._strokeStr = this.Stroke.toString();
                    }
                    return this._strokeStr;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "Fill", {
                get: function () {
                    return this._fill;
                },
                set: function (value) {
                    if (value == null)
                        this._fill = null;
                    else {
                        if (this._fill == null)
                            this._fill = value.Clone();
                        else
                            this._fill.CopyFrom(value);
                    }
                    this._fillStr = null;
                    this.Invalidate();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "FillStr", {
                get: function () {
                    if (this._fillStr == null) {
                        if (this._fill != null)
                            this._fillStr = this._fill.toString();
                        else
                            this._fillStr = "black";
                    }
                    return this._fillStr;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "Filled", {
                get: function () {
                    return this.Fill != null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "Alpha", {
                /**
                * 불투명 정도 0~1.0
                */
                get: function () {
                    return this._alpha;
                },
                set: function (value) {
                    this._alpha = value;
                    this.Invalidate();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "StrokeThickness", {
                get: function () {
                    return this._strokeThickness;
                },
                set: function (val) {
                    if (this._strokeThickness == val)
                        return;
                    this._strokeThickness = val;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "StrokeDash", {
                get: function () {
                    return this._strokeDash;
                },
                set: function (value) {
                    this._strokeDash = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "Parent", {
                get: function () {
                    return this._parent;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "Order", {
                get: function () {
                    return this._order;
                },
                set: function (order) {
                    this._order = order;
                    if (this.Parent != null)
                        this.Parent._invalidOrder = true;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "Transform", {
                get: function () {
                    return this._transform;
                },
                set: function (value) {
                    this._transform.CopyFrom(value);
                    this._isInvalidBounding = true;
                    this.InvalidateWorldTransform();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "WorldTransform", {
                get: function () {
                    if (this._worldTransform == null) {
                        if (this._parent == null) {
                            this._worldTransform = this.Transform;
                        }
                        else {
                            this._worldTransform = U1.Matrix4.Multiply(this.Transform, this._parent.WorldTransform);
                        }
                    }
                    return this._worldTransform;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "BoundingBox", {
                get: function () {
                    if (this._isInvalidBounding) {
                        this.UpdateBounding();
                        this._isInvalidBounding = false;
                    }
                    return this._boundingBox;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "BoundingSphere", {
                get: function () {
                    if (this._isInvalidBounding) {
                        this.UpdateBounding();
                        this._isInvalidBounding = false;
                    }
                    return this._boundingSphere;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "WorldBoundingSphere", {
                get: function () {
                    if (this._isInvalidWorldBounding) {
                        this._isInvalidWorldBounding = false;
                        U1.BoundingSphere.Transform(this.BoundingSphere, this.WorldTransform, this._worldBoundingSphere);
                    }
                    return this._worldBoundingSphere;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "Component", {
                get: function () {
                    if (this instanceof EntityComponent)
                        return this;
                    if (this._parent instanceof EntityComponent)
                        return this._parent;
                    if (this._parent != null)
                        return this._parent.Component;
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "Children", {
                get: function () {
                    return this._children;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEntity.prototype, "OrderedChildren", {
                get: function () {
                    if (this._orderedChildren == null && this._children != null) {
                        this._invalidOrder = true;
                        this._orderedChildren = this._children.slice();
                    }
                    if (this._orderedChildren == null)
                        this._orderedChildren = [];
                    if (this._orderedChildren != null) {
                        this._orderedChildren = this._orderedChildren.sort(function (a, b) {
                            if (a.Order == b.Order)
                                return 0;
                            if (a.Order < b.Order)
                                return -1;
                            return 1;
                        });
                        this._invalidOrder = false;
                    }
                    return this._orderedChildren;
                },
                enumerable: true,
                configurable: true
            });
            ScEntity.prototype.AddChild = function (entity) {
                if (entity._parent != null) {
                    throw "The instance of Entity is already added as child to another parent";
                }
                entity._parent = this;
                if (this._children == null) {
                    this._children = new Array();
                }
                this._children.push(entity);
                this._orderedChildren = null;
                this.InvalidateBounding();
                this.InvalidateOrderedChildren();
                return entity;
            };
            ScEntity.prototype.RemoveChild = function (entity) {
                if (this.Children == null)
                    return;
                var idx = this.Children.indexOf(entity);
                if (idx >= 0) {
                    this.Children.splice(idx, 1);
                    this.InvalidateBounding();
                }
                this._orderedChildren = null;
            };
            ScEntity.prototype.Delete = function () {
                this.OnDeleting();
                if (this._children != null) {
                    var children = this._children.slice();
                    children.forEach(function (o_) { return o_.Delete(); });
                }
                if (this._parent != null) {
                    this._parent.RemoveChild(this);
                }
                this._parent = null;
                this._children = null;
            };
            ScEntity.prototype.SetChanged = function () {
                this.Ver++;
                this.InvalidateBounding();
            };
            ScEntity.prototype.UpdateBounding = function () {
                this.UpdateGeometryBounding();
                var min = this._geometryBBx.Min.Clone();
                var max = this._geometryBBx.Max.Clone();
                var tmp_p = U1.Vector3.New();
                if (this.Children != null) {
                    for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                        var child = _a[_i];
                        var bbx = child.BoundingBox;
                        if (bbx == null)
                            continue;
                        bbx.GetCorners().forEach(function (o_) {
                            var p = U1.Vector3.Transform(o_, child.Transform, tmp_p);
                            min.Minimize(p);
                            max.Maximize(p);
                        });
                    }
                }
                this._boundingBox.Min.CopyFrom(min);
                this._boundingBox.Max.CopyFrom(max);
                this._boundingSphere.SetCreateFromBoundingBox(this._boundingBox);
                this._isInvalidWorldBounding = true;
                tmp_p.Release();
            };
            ScEntity.prototype.UpdateGeometryBounding = function () {
            };
            ScEntity.prototype.OnDeleting = function () {
            };
            ScEntity.prototype.CheckIntersect = function (isectContext) {
                var wsphere = this.WorldBoundingSphere;
                if (isectContext.Ray.IntersectsBoundingSphere(wsphere) === null) {
                    return null;
                }
                var result = null; // this.OnCheckIntersect(isectContext);
                var isect;
                var orderedChildren = this.OrderedChildren;
                for (var i = orderedChildren.length - 1; i >= 0; i--) {
                    var chEntity = orderedChildren[i];
                    isect = chEntity.CheckIntersect(isectContext);
                    if (isect == null)
                        continue;
                    if (result == null || isect.Distance < result.Distance) {
                        if (result != null)
                            result.Release();
                        result = isect;
                    }
                    else if (isect != null) {
                        isect.Release();
                    }
                }
                isect = this.OnCheckIntersect(isectContext);
                if (isect != null && (result == null || isect.Distance < result.Distance)) {
                    if (result != null)
                        result.Release();
                    result = isect;
                }
                else if (isect != null) {
                    isect.Release();
                }
                return result;
            };
            ScEntity.prototype.OnCheckIntersect = function (isectContext) {
                return null;
            };
            ScEntity.prototype.IsInside = function (planes, wm, checkCross) {
                wm = U1.Matrix4.Multiply(this.Transform, wm);
                if (this.Children != null) {
                    for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                        var geom = _a[_i];
                        if (geom.IsInside(planes, wm, checkCross))
                            return true;
                    }
                }
                return false;
            };
            ScEntity.prototype.Invalidate = function () {
                this.IsInvalid = true;
                if (this._parent != null)
                    this._parent.Invalidate();
            };
            ScEntity.prototype.InvalidateBounding = function () {
                this._isInvalidBounding = true;
                this._isInvalidWorldBounding = true;
                if (this._parent != null) {
                    this._parent.InvalidateBounding();
                }
            };
            ScEntity.prototype.InvalidateOrderedChildren = function () {
                this._orderedChildren = null;
            };
            ScEntity.prototype.Update = function (context) {
                this.OnUpdate(context);
                for (var _i = 0, _a = this.OrderedChildren; _i < _a.length; _i++) {
                    var ch = _a[_i];
                    ch.Update(context);
                }
            };
            ScEntity.prototype.OnUpdate = function (context) {
            };
            ScEntity.prototype.Draw = function (context) {
                this.OnDraw(context);
                for (var _i = 0, _a = this.OrderedChildren; _i < _a.length; _i++) {
                    var ch = _a[_i];
                    ch.Draw(context);
                }
            };
            ScEntity.prototype.OnDraw = function (context) {
            };
            ScEntity.prototype.InvalidateWorldTransform = function () {
                this._worldTransform = null;
                this._isInvalidWorldBounding = true;
                if (this.Children != null) {
                    for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                        var ch = _a[_i];
                        ch.InvalidateWorldTransform();
                    }
                }
            };
            ScEntity._handle = 0;
            //임시 변수
            ScEntity.tmp_m0 = U1.Matrix4.Identity;
            ScEntity.tmp_m1 = U1.Matrix4.Identity;
            ScEntity.tmp_m2 = U1.Matrix4.Identity;
            ScEntity.tmp_m3 = U1.Matrix4.Identity;
            ScEntity.tmp_v30 = U1.Vector3.Zero;
            ScEntity.tmp_v31 = U1.Vector3.Zero;
            ScEntity.tmp_v32 = U1.Vector3.Zero;
            ScEntity.tmp_v33 = U1.Vector3.Zero;
            ScEntity.tmp_v34 = U1.Vector3.Zero;
            ScEntity.tmp_bx0 = new U1.BoundingBox();
            ScEntity.tmp_bx1 = new U1.BoundingBox();
            ScEntity.tmp_bx2 = new U1.BoundingBox();
            ScEntity.tmp_r30 = new U1.Ray3();
            ScEntity.tmp_r31 = new U1.Ray3();
            ScEntity.tmp_sphere_1 = new U1.BoundingSphere();
            return ScEntity;
        }());
        Views.ScEntity = ScEntity;
        var ScPoint = (function (_super) {
            __extends(ScPoint, _super);
            function ScPoint() {
                _super.call(this);
                this._position = U1.Vector3.Zero;
                this._radius = 3;
                this._points = [];
                this.Filled = true;
            }
            Object.defineProperty(ScPoint.prototype, "Position", {
                get: function () {
                    return this._position;
                },
                set: function (value) {
                    if (value != null) {
                        this._position.CopyFrom(value);
                        this.Invalidate();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScPoint.prototype, "Radius", {
                get: function () {
                    return this._radius;
                },
                set: function (value) {
                    if (this._radius == value)
                        return;
                    this._radius = value;
                    this.Invalidate();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScPoint.prototype, "Points", {
                get: function () {
                    if (this._points.length == 0) {
                        var x = 0.0;
                        var y = 0.0;
                        var side = ScPoint._side;
                        var delt = Math.PI * 2 / side;
                        var ang = 0.0;
                        for (var i = 0; i < side; i++) {
                            ang = delt * i;
                            var p = new U1.Vector3();
                            p.X = Math.cos(ang) * this._radius;
                            p.Y = Math.sin(ang) * this._radius;
                            p.Add(this._position);
                            this._points.push(p);
                        }
                    }
                    return this._points;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScPoint.prototype, "Triangles", {
                get: function () {
                    if (this._triangles == null) {
                        this._triangles = ScPolyLine.Tesselate(this.Points);
                    }
                    return this._triangles;
                },
                enumerable: true,
                configurable: true
            });
            ScPoint.prototype.OnCheckIntersect = function (context) {
                var local_ray = ScEntity.tmp_r30;
                var inv_mat = ScEntity.tmp_m0;
                var wm = this.WorldTransform;
                inv_mat.SetInvert(wm);
                local_ray.CopyFrom(context.Ray).Transform(inv_mat);
                var ray_point = ScPoint.GetNearestPoint(local_ray, this.Position, context.MaxDistance);
                ray_point.Transform(wm);
                if (context.IsLineIsect(this.Position, ray_point, this.Radius)) {
                    var isect = U1.ISectInfo.New();
                    isect.OriginalSource = this;
                    isect.IsectNormal = local_ray.Direction;
                    isect.IsectPosition = this.Position;
                    return isect;
                }
                return null;
            };
            ScPoint.prototype.Invalidate = function () {
                this._points.length = 0;
                this._triangles = null;
                this.Ver++;
                _super.prototype.Invalidate.call(this);
            };
            ScPoint.GetNearestPoint = function (ray, point, min_dist) {
                var v0 = ScEntity.tmp_v30.SetNormalize(ray.Direction);
                var v1 = ScEntity.tmp_v31.SetSubtract(point, ray.Position);
                var t = U1.Vector3.Dot(ray.Direction, v1);
                if (t < 0)
                    t = 0;
                var p = ScEntity.tmp_v32.SetScaleAdd(ray.Position, t, v0);
                return p;
            };
            ScPoint._side = 16;
            return ScPoint;
        }(ScEntity));
        Views.ScPoint = ScPoint;
        var ScPolyLine = (function (_super) {
            __extends(ScPolyLine, _super);
            function ScPolyLine() {
                _super.call(this);
            }
            Object.defineProperty(ScPolyLine.prototype, "Points", {
                get: function () {
                    return this._points;
                },
                set: function (value) {
                    this._points = value;
                    this._triangles = null;
                    this.InvalidateBounding();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScPolyLine.prototype, "Triangles", {
                get: function () {
                    if (this._triangles == null) {
                        this._triangles = ScPolyLine.Tesselate(this._points);
                    }
                    return this._triangles;
                },
                enumerable: true,
                configurable: true
            });
            ScPolyLine.prototype.UpdateGeometryBounding = function () {
                this._geometryBBx.SetCreateFromPoints(this.Points);
            };
            ScPolyLine.prototype.SetChanged = function () {
                _super.prototype.SetChanged.call(this);
                this._triangles = null;
            };
            ScPolyLine.prototype.OnCheckIntersect = function (context) {
                var ray = ScEntity.tmp_r30;
                var invm = ScEntity.tmp_m0;
                var bbx = ScEntity.tmp_bx0;
                var size = ScEntity.tmp_v30;
                var d1 = ScEntity.tmp_v31;
                var d2 = ScEntity.tmp_v32;
                var pointOnRay = ScEntity.tmp_v33;
                var pointOnPath = ScEntity.tmp_v34;
                var wm = this.WorldTransform;
                invm.SetInvert(wm);
                ray.CopyFrom(context.Ray).Transform(invm);
                bbx.CopyFrom(this.BoundingBox);
                size.SetSubtract(bbx.Max, bbx.Min);
                size.Scale(0.1);
                bbx.Max.Add(size);
                bbx.Min.Subtract(size);
                if (bbx.IntersectsRay(ray) == null)
                    return null;
                ScPolyLine.GetNearestPoint(ray, this.Points, false, context.MaxDistance, pointOnRay, pointOnPath);
                pointOnRay.Transform(wm);
                pointOnPath.Transform(wm);
                if (context.IsLineIsect(pointOnRay, pointOnPath, this.StrokeThickness)) {
                    var isect = new U1.ISectInfo();
                    isect.OriginalSource = this;
                    isect.IsectNormal = ray.Direction;
                    isect.IsectPosition = pointOnPath;
                    return isect;
                }
                if (this.Filled) {
                    if (ScPolyLine.CheckPolygonInside(context.Ray, pointOnRay, this.Points)) {
                        var isect = U1.ISectInfo.New();
                        isect.OriginalSource = this;
                        isect.IsectNormal = ray.Direction;
                        isect.IsectPosition = pointOnRay;
                        return isect;
                    }
                }
                return null;
            };
            ScPolyLine.GetNearestPoint = function (ray, points, isClosed, min_dist, result_ptRay, result_ptPath) {
                var p_ray = U1.Vector3.Zero;
                var p_path = U1.Vector3.Zero;
                var p0 = U1.Vector3.Zero;
                var p1 = U1.Vector3.Zero;
                var d1 = U1.Vector3.Zero;
                var st = ScPolyLine.tmp_st;
                var pi = points.length - 1;
                var ci = 0;
                if (!isClosed) {
                    pi = 0;
                    ci = 1;
                }
                for (; ci < points.length; pi = ci, ci++) {
                    var pp = points[pi];
                    var cp = points[ci];
                    d1.SetSubtract(cp, pp);
                    var dist = U1.Line3.SquardDistance1(ray.Position, ray.Direction, pp, d1, st);
                    if (min_dist < dist)
                        continue;
                    if (st.t < 0)
                        st.t = 0;
                    if (st.t > 1)
                        st.t = 1;
                    p0.SetScaleAdd(ray.Position, st.s, ray.Direction);
                    p1.SetScaleAdd(pp, st.t, d1);
                    dist = U1.Vector3.DistanceSquared(p0, p1);
                    if (min_dist < dist)
                        continue;
                    min_dist = dist;
                    p_ray.CopyFrom(p0);
                    p_path.CopyFrom(p1);
                }
                result_ptRay.CopyFrom(p_ray);
                result_ptPath.CopyFrom(p_path);
                p_ray.Release();
                p_path.Release();
                p0.Release();
                p1.Release();
                d1.Release();
            };
            ScPolyLine.Tesselate = function (points) {
                var tess = new U1.LibTess.Tess();
                var contour = new Array(points.length);
                points.forEach(function (v_, i_) {
                    var cv = new U1.LibTess.ContourVertex();
                    cv.Position.SetValues(v_.X, v_.Y, v_.Z);
                    contour[i_] = cv;
                });
                //contour.push(contour[0]);
                tess.AddContour(contour);
                tess.Tessellate(U1.LibTess.WindingRule.EvenOdd, U1.LibTess.ElementType.Polygons, 3, null);
                var result = new Array();
                for (var i = 0; i < tess.ElementCount; i++) {
                    for (var j = 0; j < 3; j++) {
                        var index = tess.Elements[i * 3 + j];
                        if (index == -1)
                            continue;
                        var v = new U1.Vector3(tess.Vertices[index].Position.X, tess.Vertices[index].Position.Y, tess.Vertices[index].Position.Z);
                        result.push(v);
                    }
                }
                return result;
            };
            ScPolyLine.CheckPolygonInside = function (ray, point, points) {
                var u = U1.Vector3.New();
                var v = U1.Vector3.New();
                var d1 = U1.Vector3.New();
                var mp = U1.Vector3.New();
                var plane = U1.Plane.New();
                U1.GeometryHelper3.GetArbitraryAxis(ray.Direction, u, v);
                plane.SetFromPointNormal(point, v);
                var pi = points.length - 1;
                var ci = 0;
                var front = 0;
                var back = 0;
                for (; ci < points.length; pi = ci, ci++) {
                    var pp = points[pi];
                    var cp = points[ci];
                    if (plane.DotCoordinate(pp) * plane.DotCoordinate(cp) >= 0) {
                        continue;
                    }
                    d1.SetSubtract(cp, pp);
                    var t = plane.IntersectsLine(pp, d1);
                    if (t == null)
                        continue;
                    mp.SetScaleAdd(pp, t, d1);
                    d1.SetSubtract(mp, point);
                    t = U1.Vector3.Dot(d1, u);
                    if (t > 0)
                        front++;
                    else
                        back++;
                }
                u.Release();
                v.Release();
                d1.Release();
                mp.Release();
                plane.Release();
                if (front % 2 === back % 2)
                    return front % 2 == 1;
                return false;
            };
            ScPolyLine.tmp_st = { s: -1, t: -1 };
            return ScPolyLine;
        }(ScEntity));
        Views.ScPolyLine = ScPolyLine;
        var ScPolygon = (function (_super) {
            __extends(ScPolygon, _super);
            function ScPolygon() {
                _super.call(this);
            }
            ScPolygon.prototype.OnCheckIntersect = function (context) {
                var ray = ScEntity.tmp_r30;
                var invm = ScEntity.tmp_m0;
                var bbx = ScEntity.tmp_bx0;
                var size = ScEntity.tmp_v30;
                var d1 = ScEntity.tmp_v31;
                var d2 = ScEntity.tmp_v32;
                var pointOnRay = ScEntity.tmp_v33;
                var pointOnPath = ScEntity.tmp_v34;
                var wm = this.WorldTransform;
                invm.SetInvert(wm);
                ray.CopyFrom(context.Ray).Transform(invm);
                bbx.CopyFrom(this.BoundingBox);
                size.SetSubtract(bbx.Max, bbx.Min);
                size.Scale(0.1);
                bbx.Max.Add(size);
                bbx.Min.Subtract(size);
                if (bbx.IntersectsRay(ray) == null)
                    return null;
                ScPolygon.GetNearestPoint(ray, this.Points, true, context.MaxDistance, pointOnRay, pointOnPath);
                pointOnRay.Transform(wm);
                pointOnPath.Transform(wm);
                if (context.IsLineIsect(pointOnRay, pointOnPath, this.StrokeThickness)) {
                    var isect = U1.ISectInfo.New();
                    isect.OriginalSource = this;
                    isect.IsectNormal = context.Ray.Direction;
                    isect.IsectPosition = pointOnPath;
                    return isect;
                }
                if (this.Filled) {
                    pointOnRay.Transform(invm);
                    if (ScPolyLine.CheckPolygonInside(ray, pointOnRay, this.Points)) {
                        var isect = U1.ISectInfo.New();
                        isect.OriginalSource = this;
                        isect.IsectNormal = context.Ray.Direction;
                        isect.IsectPosition = pointOnRay.Transform(wm);
                        return isect;
                    }
                }
                return null;
            };
            return ScPolygon;
        }(ScPolyLine));
        Views.ScPolygon = ScPolygon;
        var ScText = (function (_super) {
            __extends(ScText, _super);
            function ScText() {
                _super.call(this);
                this._fontSize = 1;
                this._height = 1;
                this._width = 10;
                this.IsSingeLine = false;
            }
            Object.defineProperty(ScText.prototype, "Background", {
                get: function () {
                    return this._background;
                },
                set: function (value) {
                    if (value == null)
                        this._background = null;
                    else {
                        if (this._background == null)
                            this._background = value.Clone();
                        else
                            this._background.CopyFrom(value);
                    }
                    this._backgroundStr = null;
                    this.Invalidate();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScText.prototype, "BackgroundStr", {
                get: function () {
                    if (this._backgroundStr == null) {
                        if (this._background != null)
                            this._backgroundStr = this._background.toString();
                        else
                            this._backgroundStr = "white";
                    }
                    return this._backgroundStr;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScText.prototype, "Text", {
                get: function () {
                    return this._text;
                },
                set: function (value) {
                    var _this = this;
                    this._text = value;
                    this._lines = this._text != null ? this._text.split("\n") : [];
                    this._max_line_index = 0;
                    this._lines.forEach(function (o_, i_) {
                        if (_this._lines[_this._max_line_index].length < o_.length) {
                            _this._max_line_index = i_;
                        }
                    });
                    this.SetChanged();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScText.prototype, "Lines", {
                get: function () {
                    return this._lines;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScText.prototype, "Width", {
                get: function () {
                    return this._width;
                },
                set: function (value) {
                    if (this._width == value)
                        return;
                    this._width = value;
                    this.InvalidateBounding();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScText.prototype, "Height", {
                get: function () {
                    return this._height;
                },
                set: function (value) {
                    if (this._height == value)
                        return;
                    this._height = value;
                    this.InvalidateBounding();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScText.prototype, "ActualWidth", {
                get: function () {
                    var _this = this;
                    if (this._actualWidth == null) {
                        if (ScText.MeasureTextureWidthFunc != null) {
                            this._actualWidth = 0;
                            this.Lines.forEach(function (o_) {
                                var w = ScText.MeasureTextureWidthFunc(o_, _this.FontSize);
                                if (w > _this._actualWidth) {
                                    _this._actualWidth = w;
                                }
                            });
                        }
                        else if (this.Component != null && this.Component.Scene != null) {
                            this._actualWidth = 0;
                            this.Lines.forEach(function (o_) {
                                var w = _this.Component.Scene.MeasureTextureWidth(o_, _this.FontSize);
                                if (w > _this._actualWidth) {
                                    _this._actualWidth = w;
                                }
                            });
                        }
                    }
                    return this._actualWidth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScText.prototype, "FontSize", {
                get: function () {
                    return this._fontSize;
                },
                set: function (value) {
                    if (this._fontSize == value)
                        return;
                    this._fontSize = value;
                    this.InvalidateBounding();
                },
                enumerable: true,
                configurable: true
            });
            ScText.prototype.SetChanged = function () {
                _super.prototype.SetChanged.call(this);
                this._actualWidth = null;
            };
            ScText.prototype.UpdateGeometryBounding = function () {
                var char_count = 0;
                this.Lines.forEach(function (o_) {
                    if (char_count < o_.length)
                        char_count = o_.length;
                });
                var w = this.Height * char_count;
                if (this.ActualWidth != null)
                    w = this.ActualWidth;
                var miny = 0; // -this.Height * this.Lines.length;//* 1.2;
                var maxy = miny + this.Height * this.Lines.length;
                this._geometryBBx.Min.Set(0, miny, -1);
                this._geometryBBx.Max.Set(w, maxy, 1);
            };
            ScText.prototype.OnCheckIntersect = function (context) {
                var ray = ScEntity.tmp_r30;
                var invm = ScEntity.tmp_m0;
                var bbx = ScEntity.tmp_bx0;
                var isectp = ScEntity.tmp_v30;
                var v1 = ScEntity.tmp_v31;
                var wm = this.WorldTransform;
                invm.SetInvert(wm);
                //if (context.IsScreenSpace)
                //{
                //    var sp = Vector2.New();
                //    sp.SetTransform(context.View, invm);
                //    var bbx = this.BoundingBox;
                //    if (sp.X >= bbx.Min.X && sp.X <= bbx.Max.X &&
                //        sp.Y >= bbx.Min.Y && sp.Y >= bbx.Max.Y)
                //    {
                //        var isect = U1.ISectInfo.New();
                //        isect.OriginalSource = this;
                //        isect.IsectNormal.SetUnitZ().TransformNormal(wm);
                //        isect.IsectPosition = isectp;
                //        isect.Distance = Vector3.Distance(isectp, context.Ray.Position);
                //        return isect;
                //    }
                //    return null;
                //}
                ray.CopyFrom(context.Ray).Transform(invm);
                var t = this.BoundingBox.IntersectsRay(ray);
                if (t == null)
                    return null;
                isectp.SetScaleAdd(ray.Position, t, ray.Direction);
                isectp.Transform(wm);
                var isect = U1.ISectInfo.New();
                isect.OriginalSource = this;
                isect.IsectNormal.SetUnitZ().TransformNormal(wm);
                isect.IsectPosition = isectp;
                isect.Distance = U1.Vector3.Distance(isectp, context.Ray.Position);
                return isect;
            };
            return ScText;
        }(ScEntity));
        Views.ScText = ScText;
        var ScMesh = (function (_super) {
            __extends(ScMesh, _super);
            function ScMesh() {
                _super.call(this);
            }
            Object.defineProperty(ScMesh.prototype, "MeshData", {
                get: function () {
                    return this._meshData;
                },
                set: function (value) {
                    this._meshData = value;
                    this.SetChanged();
                },
                enumerable: true,
                configurable: true
            });
            ScMesh.prototype.UpdateGeometryBounding = function () {
                this._geometryBBx.CopyFrom(this.MeshData.BoundingBox);
            };
            return ScMesh;
        }(ScEntity));
        Views.ScMesh = ScMesh;
        var ScGroup = (function (_super) {
            __extends(ScGroup, _super);
            function ScGroup() {
                _super.apply(this, arguments);
            }
            return ScGroup;
        }(ScEntity));
        Views.ScGroup = ScGroup;
        var ScEllipse = (function (_super) {
            __extends(ScEllipse, _super);
            function ScEllipse() {
                _super.apply(this, arguments);
                this._position = U1.Vector3.Zero;
                this._width = 10;
                this._height = 10;
                this._points = null;
            }
            Object.defineProperty(ScEllipse.prototype, "Position", {
                get: function () {
                    return this._position;
                },
                set: function (value) {
                    if (value != null) {
                        this._position.CopyFrom(value);
                        this.Invalidate();
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEllipse.prototype, "Width", {
                get: function () {
                    return this._width;
                },
                set: function (value) {
                    this._width = value;
                    this._points = null;
                    this._triangles = null;
                    this.InvalidateBounding();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEllipse.prototype, "Height", {
                get: function () {
                    return this._height;
                },
                set: function (value) {
                    this._height = value;
                    this._points = null;
                    this._triangles = null;
                    this.InvalidateBounding();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEllipse.prototype, "Points", {
                get: function () {
                    if (this._points == null) {
                        this._points = [];
                        var rx = this.Width / 2;
                        var ry = this.Height / 2;
                        var side = ScEllipse._ellipse_side;
                        var delt = Math.PI * 2 / side;
                        var ang = 0.0;
                        var cx = this.Position.X;
                        var cy = this.Position.Y;
                        for (var i = 0; i < side; i++) {
                            ang = delt * i;
                            var p = new U1.Vector3();
                            p.X = Math.cos(ang) * rx + cx;
                            p.Y = Math.sin(ang) * ry + cy;
                            this._points.push(p);
                        }
                    }
                    return this._points;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScEllipse.prototype, "Triangles", {
                get: function () {
                    if (this._triangles == null) {
                        this._triangles = ScPolyLine.Tesselate(this.Points);
                    }
                    return this._triangles;
                },
                enumerable: true,
                configurable: true
            });
            ScEllipse.prototype.UpdateGeometryBounding = function () {
                this._geometryBBx.SetCreateFromPoints(this.Points);
            };
            ScEllipse.prototype.Invalidate = function () {
                this._points = null;
                this._triangles = null;
                this.Ver++;
                _super.prototype.Invalidate.call(this);
            };
            ScEllipse.prototype.CheckIntersect = function (context) {
                var ray = ScEntity.tmp_r30;
                var invm = ScEntity.tmp_m0;
                var bbx = ScEntity.tmp_bx0;
                var size = ScEntity.tmp_v30;
                var d1 = ScEntity.tmp_v31;
                var d2 = ScEntity.tmp_v32;
                var pointOnRay = ScEntity.tmp_v33;
                var pointOnPath = ScEntity.tmp_v34;
                var wm = this.WorldTransform;
                invm.SetInvert(wm);
                ray.CopyFrom(context.Ray).Transform(invm);
                bbx.CopyFrom(this.BoundingBox);
                size.SetSubtract(bbx.Max, bbx.Min);
                size.Scale(0.1);
                bbx.Max.Add(size);
                bbx.Min.Subtract(size);
                if (bbx.IntersectsRay(ray) == null)
                    return null;
                ScPolygon.GetNearestPoint(ray, this.Points, true, context.MaxDistance, pointOnRay, pointOnPath);
                pointOnRay.Transform(wm);
                pointOnPath.Transform(wm);
                if (context.IsLineIsect(pointOnRay, pointOnPath, this.StrokeThickness)) {
                    var isect = U1.ISectInfo.New();
                    isect.OriginalSource = this;
                    isect.IsectNormal = context.Ray.Direction;
                    isect.IsectPosition = pointOnPath;
                    return isect;
                }
                if (this.Filled) {
                    pointOnRay.Transform(invm);
                    if (ScPolyLine.CheckPolygonInside(ray, pointOnRay, this.Points)) {
                        var isect = U1.ISectInfo.New();
                        isect.OriginalSource = this;
                        isect.IsectNormal = context.Ray.Direction;
                        isect.IsectPosition = pointOnRay.Transform(wm);
                        return isect;
                    }
                }
                return null;
            };
            ScEllipse._ellipse_side = 32;
            return ScEllipse;
        }(ScEntity));
        Views.ScEllipse = ScEllipse;
        var EntityComponent = (function (_super) {
            __extends(EntityComponent, _super);
            function EntityComponent(scene) {
                _super.call(this);
                this._scene = scene;
                this._children = new Array();
            }
            Object.defineProperty(EntityComponent.prototype, "Scene", {
                get: function () {
                    return this._scene;
                },
                enumerable: true,
                configurable: true
            });
            EntityComponent.prototype.Invalidate = function () {
                this._scene.View.Invalidate();
            };
            EntityComponent.prototype.Pick = function (isectContext) {
                var res_isect = null;
                var res_node = null;
                var orderedItems = this.OrderedChildren;
                for (var i = orderedItems.length - 1; i >= 0; i--) {
                    var node = orderedItems[i];
                    if (!node.Visible || node.IsPickable === false)
                        continue;
                    var isect = node.CheckIntersect(isectContext);
                    if (isect == null)
                        continue;
                    if (res_isect == null || isect.Distance < res_isect.Distance) {
                        isectContext.MaxDistance = isect.Distance;
                        res_node = node;
                        res_isect = isect;
                    }
                    else {
                        if (isect != null)
                            isect.Release();
                    }
                }
                var result = Views.PickResult.New();
                result.ISect = res_isect;
                result.Node = res_node;
                return result;
            };
            EntityComponent.prototype.SelectRegion = function (lt, rb, allowCross) {
                if (allowCross === void 0) { allowCross = false; }
                var result = new Array();
                var regionBox = this.Scene.View.GetClippingCorners(lt, rb);
                var planes = new U1.Plane[4];
                planes[0] = U1.Plane.FromTriangle(regionBox[0], regionBox[1], regionBox[6]);
                planes[1] = U1.Plane.FromTriangle(regionBox[0], regionBox[2], regionBox[1]);
                planes[2] = U1.Plane.FromTriangle(regionBox[2], regionBox[4], regionBox[3]);
                planes[3] = U1.Plane.FromTriangle(regionBox[4], regionBox[6], regionBox[7]);
                var wm = U1.Matrix4.Identity;
                for (var _i = 0, _a = this.Children; _i < _a.length; _i++) {
                    var node = _a[_i];
                    if (!node.Visible)
                        continue;
                    if (node.IsInside(planes, wm, allowCross))
                        result.push(node);
                }
                return result;
            };
            EntityComponent.prototype.Clear = function () {
                var children = this.Children;
                if (children != null) {
                    children = children.slice();
                    for (var _i = 0, children_5 = children; _i < children_5.length; _i++) {
                        var ch = children_5[_i];
                        this.RemoveChild(ch);
                    }
                }
            };
            return EntityComponent;
        }(ScEntity));
        Views.EntityComponent = EntityComponent;
        var WorldComponent = (function (_super) {
            __extends(WorldComponent, _super);
            function WorldComponent(scene) {
                _super.call(this, scene);
            }
            return WorldComponent;
        }(EntityComponent));
        Views.WorldComponent = WorldComponent;
        var OverlayComponent = (function (_super) {
            __extends(OverlayComponent, _super);
            function OverlayComponent(scene) {
                _super.call(this, scene);
            }
            return OverlayComponent;
        }(EntityComponent));
        Views.OverlayComponent = OverlayComponent;
        var ScreenComponent = (function (_super) {
            __extends(ScreenComponent, _super);
            function ScreenComponent(scene) {
                _super.call(this, scene);
            }
            return ScreenComponent;
        }(EntityComponent));
        Views.ScreenComponent = ScreenComponent;
    })(Views = U1.Views || (U1.Views = {}));
})(U1 || (U1 = {}));
/// <reference path="../math/u1math.ts" />
/// <reference path="../math/colors.ts" />
var U1;
(function (U1) {
    var Views;
    (function (Views) {
        var UDocumentPresenter = (function () {
            /*ctor*/
            function UDocumentPresenter() {
                this.document = null;
                this.view = null;
                this._elementPresenters = {};
                this.m_selection = new Array();
                this.m_selectionBoxDirty = true;
            }
            UDocumentPresenter.Register = function (ecreater, pcreate) {
                var funcNameRegex = /function (.{1,})\(/;
                var results = (funcNameRegex).exec(ecreater.toString());
                var name = (results && results.length > 1) ? results[1] : "";
                UDocumentPresenter.Creaters[name] = pcreate;
            };
            Object.defineProperty(UDocumentPresenter.prototype, "Document", {
                /*begin props */
                get: function () {
                    return this.document;
                },
                set: function (value) {
                    if (this.document == value)
                        return;
                    if (this.document != null) {
                        this.document.ElementAdded.Remove(this, this.OnElementAdded);
                        this.document.ElementRemoving.Remove(this, this.OnElementRemoving);
                        this.document.ElementChanged.Remove(this, this.OnElementPropertyChanged);
                        this.document.Selection.SelectionChanged.Remove(this, this.OnSelectionChanged);
                        this.document.AfterUndoRedo.Remove(this, this.OnAfterUndoRedo);
                        this.document.AfterLoaded.Remove(this, this.OnAfterLoaded);
                        this.document.AfterAbortTransaction.Remove(this, this.OnAfterAbortTransaction);
                        this.document.AfterEndTransaction.Remove(this, this.OnAfterEndTransaction);
                    }
                    this.document = value;
                    if (this.document != null) {
                        this.document.ElementAdded.Add(this, this.OnElementAdded);
                        this.document.ElementRemoving.Add(this, this.OnElementRemoving);
                        this.document.ElementChanged.Add(this, this.OnElementPropertyChanged);
                        this.document.Selection.SelectionChanged.Add(this, this.OnSelectionChanged);
                        this.document.AfterUndoRedo.Add(this, this.OnAfterUndoRedo);
                        this.document.AfterLoaded.Add(this, this.OnAfterLoaded);
                        this.document.AfterClear.Add(this, this.OnAfterClear);
                        this.document.AfterAbortTransaction.Add(this, this.OnAfterAbortTransaction);
                        this.document.AfterEndTransaction.Add(this, this.OnAfterEndTransaction);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(UDocumentPresenter.prototype, "View", {
                get: function () {
                    return this.view;
                },
                set: function (value) {
                    this.view = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(UDocumentPresenter.prototype, "Selection", {
                get: function () {
                    return this.m_selection;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(UDocumentPresenter.prototype, "ElementPresenters", {
                get: function () {
                    return this._elementPresenters;
                },
                enumerable: true,
                configurable: true
            });
            /*end props */
            UDocumentPresenter.prototype.Update = function () {
                for (var p in this._elementPresenters) {
                    var elmPresenter = this._elementPresenters[p];
                    if (elmPresenter != null) {
                        if (elmPresenter.Invalid && elmPresenter.Element != null) {
                            elmPresenter.Update();
                            elmPresenter.Invalid = false;
                        }
                    }
                }
                if (this.m_selectionBoxDirty) {
                    this.m_selectionBoxDirty = false;
                    this.ShowSelectionBox();
                }
            };
            UDocumentPresenter.prototype.InvalidateAll = function () {
                var presentres = this.ElementPresenters;
                for (var idx in presentres) {
                    var presenter = presentres[idx];
                    presenter.Invalid = true;
                }
                this.view.Invalidate();
            };
            UDocumentPresenter.prototype.OnElementAdded = function (doc_, elm_) {
                this.OnAttach(elm_);
            };
            UDocumentPresenter.prototype.OnElementRemoving = function (doc_, elm_) {
                var elemPresenter = this._elementPresenters[elm_.id];
                if (elemPresenter != null) {
                    elemPresenter.Dispose();
                    delete this._elementPresenters[elm_.id];
                    this.View.Invalidate();
                }
            };
            UDocumentPresenter.prototype.OnElementPropertyChanged = function (doc_, elem, prop) {
                if (this._elementPresenters[elem.ID] != null) {
                    this._elementPresenters[elem.ID].OnElementPropertyChanged(elem, prop);
                }
            };
            UDocumentPresenter.prototype.OnSelectionChanged = function (selectin) {
                var _this = this;
                var oldSelection = this.m_selection.splice(0);
                var sel_elements = selectin.SelectedElements;
                var self = this;
                sel_elements.forEach(function (elm) {
                    var presenter = self._elementPresenters[elm.ID];
                    if (presenter != null) {
                        var idx = oldSelection.indexOf(presenter);
                        if (idx > -1) {
                            oldSelection.splice(idx, 1);
                        }
                        _this.m_selection.push(presenter);
                    }
                });
                oldSelection.forEach(function (o_) {
                    o_.IsSelected = false;
                });
                this.m_selection.forEach(function (o_) {
                    o_.IsSelected = true;
                });
                this.ShowSelectionBox();
                this.View.Invalidate();
            };
            UDocumentPresenter.prototype.OnAfterUndoRedo = function (doc, isUndo) {
                this.m_selectionBoxDirty = true;
                this.View.Invalidate();
            };
            UDocumentPresenter.prototype.OnAfterLoaded = function (doc) {
                for (var _i = 0, _a = doc.Elements; _i < _a.length; _i++) {
                    var elm = _a[_i];
                    this.OnAttach(elm);
                }
            };
            UDocumentPresenter.prototype.OnAfterClear = function (doc) {
                this.Clear();
            };
            UDocumentPresenter.prototype.OnAfterAbortTransaction = function (doc) {
                this.m_selectionBoxDirty = true;
                this.View.Invalidate();
            };
            UDocumentPresenter.prototype.OnAfterEndTransaction = function (doc) {
                this.m_selectionBoxDirty = true;
                this.View.Invalidate();
            };
            UDocumentPresenter.prototype.OnAttach = function (elm) {
                var presenter = this.CreatePresenter(elm);
                if (presenter != null) {
                    presenter.Element = elm;
                    presenter.DocumentPresesnter = this;
                    this._elementPresenters[elm.id] = presenter;
                    this.View.Invalidate();
                }
            };
            UDocumentPresenter.prototype.CreatePresenter = function (elm_) {
                return null;
            };
            UDocumentPresenter.prototype.Clear = function () {
                var elmPresenters = this._elementPresenters;
                this._elementPresenters = {};
                for (var idx in elmPresenters) {
                    elmPresenters[idx].Dispose();
                }
                this.View.Scene.Clear();
            };
            UDocumentPresenter.prototype.GetPresenter = function (ctr, elm) {
                for (var idx in this._elementPresenters) {
                    if (this._elementPresenters[idx] == null)
                        continue;
                    var presnt = this._elementPresenters[idx];
                    if (presnt instanceof ctr && presnt.Element == elm) {
                        return presnt;
                    }
                }
                return null;
            };
            UDocumentPresenter.prototype.ShowSelectionBox = function () {
                var _this = this;
                var sel_nodes = new Array();
                this.Selection.forEach(function (v_) {
                    _this.View.Scene.World.Children.forEach(function (node_) {
                        if (node_.Presenter != null && node_.Presenter == v_) {
                            sel_nodes.push(node_);
                        }
                    });
                });
                if (sel_nodes.length > 0) {
                    if (this.xform2 == null) {
                        this.xform2 = this.view.Controls.AddControl(Views.VcXForm2);
                    }
                    this.xform2.Init(sel_nodes);
                    this.view.ActiveControl = this.xform2;
                }
                else {
                    if (this.xform2 != null) {
                        this.xform2.Dispose();
                    }
                    this.xform2 = null;
                }
            };
            UDocumentPresenter.Creaters = {};
            return UDocumentPresenter;
        }());
        Views.UDocumentPresenter = UDocumentPresenter;
        var UElementPresenter = (function () {
            function UElementPresenter() {
                this.Invalid = true;
                this._isDisposed = false;
                this._isSelected = false;
            }
            Object.defineProperty(UElementPresenter.prototype, "Element", {
                get: function () {
                    return this._element;
                },
                set: function (value) {
                    this._element = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(UElementPresenter.prototype, "IsSelected", {
                get: function () {
                    return this._isSelected;
                },
                set: function (value) {
                    if (this._isSelected == value)
                        return;
                    this._isSelected = value;
                    if (this._isSelected)
                        this.OnSelected();
                    else
                        this.OnDeselected();
                },
                enumerable: true,
                configurable: true
            });
            UElementPresenter.prototype.OnSelected = function () {
            };
            UElementPresenter.prototype.OnDeselected = function () {
            };
            Object.defineProperty(UElementPresenter.prototype, "View", {
                get: function () {
                    if (this.DocumentPresesnter != null)
                        return this.DocumentPresesnter.View;
                    return null;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(UElementPresenter.prototype, "Scene", {
                get: function () {
                    return this.View.Scene;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(UElementPresenter.prototype, "IsDisposed", {
                get: function () {
                    return this._isDisposed;
                },
                enumerable: true,
                configurable: true
            });
            UElementPresenter.prototype.Update = function () {
                this.OnUpdate();
            };
            UElementPresenter.prototype.OnUpdate = function () {
            };
            UElementPresenter.prototype.OnClear = function () {
            };
            UElementPresenter.prototype.Dispose = function () {
                if (this._isDisposed)
                    return;
                if (this.Element == null)
                    return;
                this.OnClear();
                this.Element = null;
                this._isDisposed = true;
            };
            UElementPresenter.prototype.OnElementPropertyChanged = function (sender, prop) {
                this.Invalid = true;
                this.View.Invalidate();
            };
            UElementPresenter.prototype.AddTransform = function (matrix) {
            };
            UElementPresenter.prototype.CanMove = function () {
                return false;
            };
            UElementPresenter.prototype.BeginMove = function () { };
            UElementPresenter.prototype.EndMove = function (from, to) { };
            UElementPresenter.prototype.Move = function (from, to) { };
            UElementPresenter.prototype.CancelMove = function () { };
            UElementPresenter.SelectStrokeColor = U1.Colors.Red;
            UElementPresenter.SelectFillColor = new U1.Color(255, 200, 200, 100);
            return UElementPresenter;
        }());
        Views.UElementPresenter = UElementPresenter;
    })(Views = U1.Views || (U1.Views = {}));
})(U1 || (U1 = {}));
///<reference path="../Documents/UDocument.ts"/> 
///<reference path="../Math/U1Math.ts"/> 
///<reference path="../Math/Colors.ts"/> 
///<reference path="../LibTess/LibTess.ts"/> 
///<reference path="../../typings/hammerjs.d.ts"/> 
var U1;
(function (U1) {
    var Views;
    (function (Views) {
        var SceneBase = (function () {
            function SceneBase(view) {
                this._camera = new ScCamera();
                this.Light1 = new U1.Light();
                this.Light2 = new U1.Light();
                this.Light3 = new U1.Light();
                this.World = new Views.WorldComponent(this);
                this.Overlay = new Views.OverlayComponent(this);
                this.Screen = new Views.ScreenComponent(this);
                this.Textures = new Views.TextureComponent(this);
                this.Materials = new Views.MaterialComponent(this);
                this._view = view;
                this._camera.OrthoHeight = 4000;
            }
            Object.defineProperty(SceneBase.prototype, "View", {
                get: function () {
                    return this._view;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(SceneBase.prototype, "Camera", {
                get: function () {
                    return this._camera;
                },
                enumerable: true,
                configurable: true
            });
            SceneBase.prototype.Update = function () {
                this.OnBeginUpdate();
                this.Camera.ViewportWidth = this.View.Width;
                this.Camera.ViewportHeight = this.View.Height;
                var context = this.CreateUpdateContext();
                context.IsScreenSpace = false;
                this.World.Update(context);
                this.Overlay.Update(context);
                context.IsScreenSpace = true;
                this.Screen.Update(context);
                this.OnEndUpdate();
            };
            SceneBase.prototype.Draw = function () {
                this.Camera.ViewportWidth = this.View.Width;
                this.Camera.ViewportHeight = this.View.Height;
                this.OnBeginUpdate();
                var context = this.CreateDrawContext();
                context.IsScreenSpace = false;
                context.IsOveraySpace = false;
                this.OnBeginDraw(context);
                this.World.Draw(context);
                context.IsOveraySpace = true;
                this.Overlay.Draw(context);
                context.IsScreenSpace = true;
                this.Screen.Draw(context);
                this.OnEndDraw(context);
                this.OnEndUpdate();
            };
            SceneBase.prototype.Clear = function () {
                this.World.Clear();
                this.Overlay.Clear();
                this.Screen.Clear();
                this.Textures.Clear();
                this.Materials.Clear();
            };
            SceneBase.prototype.CreateDrawContext = function () {
                return new Views.DrawContext();
            };
            SceneBase.prototype.CreateUpdateContext = function () {
                return new Views.UpdateContext();
            };
            SceneBase.prototype.OnBeginUpdate = function () {
            };
            SceneBase.prototype.OnEndUpdate = function () {
            };
            SceneBase.prototype.OnBeginDraw = function (context) {
            };
            SceneBase.prototype.OnEndDraw = function (context) {
            };
            SceneBase.prototype.newPoint = function () {
                return new Views.ScPoint();
            };
            SceneBase.prototype.newPolyLine = function () {
                return new Views.ScPolyLine();
            };
            SceneBase.prototype.newPolygon = function () {
                return new Views.ScPolygon();
            };
            SceneBase.prototype.newText = function () {
                return new Views.ScText();
            };
            SceneBase.prototype.newMesh = function () {
                return new Views.ScMesh();
            };
            SceneBase.prototype.newGroup = function () {
                return new Views.ScGroup();
            };
            SceneBase.prototype.newEllipse = function () {
                return new Views.ScEllipse();
            };
            SceneBase.prototype.MeasureTextureWidth = function (text, fontsize) {
                return text.length * fontsize;
            };
            return SceneBase;
        }());
        Views.SceneBase = SceneBase;
        var ScCamera = (function () {
            function ScCamera() {
                this.position = new U1.Vector3(0, 0, 10);
                this.lookat = U1.Vector3.Zero;
                this.up = U1.Vector3.UnitY;
                this.fov = (Math.PI / 4);
                this.near = 0.1;
                this.far = 10000;
                this.orthoheight = 100;
                this.projectionmode = U1.ProjectionTypeEnum.Perspective;
                this.viewport = new Views.Viewport(0, 0, 100, 100, 0, 1);
                this.ver = 0;
                this.ViewProj = U1.Matrix4.Identity;
                this.vpVer = 0;
            }
            ScCamera.prototype.GetPosition = function (result) {
                if (result === void 0) { result = null; }
                if (result == null)
                    result = U1.Vector3.Zero;
                result.CopyFrom(this.position);
                return result;
            };
            Object.defineProperty(ScCamera.prototype, "Position", {
                get: function () {
                    return this.position;
                },
                set: function (value) {
                    this.position.CopyFrom(value);
                    this.ver++;
                },
                enumerable: true,
                configurable: true
            });
            ScCamera.prototype.GetLookAt = function (result) {
                if (result === void 0) { result = null; }
                if (result == null)
                    result = U1.Vector3.Zero;
                result.CopyFrom(this.lookat);
                return result;
            };
            Object.defineProperty(ScCamera.prototype, "LookAt", {
                get: function () {
                    return this.lookat;
                },
                set: function (value) {
                    this.lookat.CopyFrom(value);
                    this.ver++;
                },
                enumerable: true,
                configurable: true
            });
            ScCamera.prototype.GetUp = function (result) {
                if (result === void 0) { result = null; }
                if (result == null)
                    result = U1.Vector3.Zero;
                result.CopyFrom(this.up);
                return result;
            };
            Object.defineProperty(ScCamera.prototype, "Up", {
                get: function () {
                    return this.up;
                },
                set: function (value) {
                    this.up.CopyFrom(value);
                    this.ver++;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScCamera.prototype, "FOV", {
                /**
                * radian
                */
                get: function () {
                    return this.fov;
                },
                set: function (value) {
                    this.fov = value;
                    this.ver++;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScCamera.prototype, "Near", {
                get: function () {
                    return this.near;
                },
                set: function (value) {
                    this.near = value;
                    this.ver++;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScCamera.prototype, "Far", {
                get: function () {
                    return this.far;
                },
                set: function (value) {
                    this.far = value;
                    this.ver++;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScCamera.prototype, "OrthoHeight", {
                get: function () {
                    return this.orthoheight;
                },
                set: function (value) {
                    this.orthoheight = value;
                    this.ver++;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScCamera.prototype, "ProjectionMode", {
                get: function () {
                    return this.projectionmode;
                },
                set: function (value) {
                    this.projectionmode = value;
                    this.ver++;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScCamera.prototype, "ViewportWidth", {
                get: function () {
                    return this.viewport.Width;
                },
                set: function (value) {
                    if (this.viewport.Width === value)
                        return;
                    this.viewport.Width = value;
                    this.ver++;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScCamera.prototype, "ViewportHeight", {
                get: function () {
                    return this.viewport.Height;
                },
                set: function (value) {
                    if (this.viewport.Height === value)
                        return;
                    this.viewport.Height = value;
                    this.ver++;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScCamera.prototype, "ViewportX", {
                get: function () {
                    return this.viewport.X;
                },
                set: function (value) {
                    this.viewport.X = value;
                    this.ver++;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ScCamera.prototype, "ViewportY", {
                get: function () {
                    return this.viewport.Y;
                },
                set: function (value) {
                    this.viewport.Y = value;
                    this.ver++;
                },
                enumerable: true,
                configurable: true
            });
            ScCamera.prototype.GetFrustum = function (result) {
                if (result === void 0) { result = null; }
                if (result == null)
                    result = new U1.BoundingFrustum();
                var matrix = result.Matrix;
                matrix.SetMultiply(this.GetViewMatrix(ScCamera.tmp_m0), this.GetProjMatrix(ScCamera.tmp_m1));
                result.Matrix = matrix;
                return result;
            };
            ScCamera.prototype.GetRight = function (result) {
                if (result === void 0) { result = null; }
                if (result == null)
                    result = U1.Vector3.Zero;
                var dir = this.GetDirection(ScCamera.tmp_v0);
                result.SetCross(dir, this.up).Normalize();
                return result;
            };
            ScCamera.prototype.GetDirection = function (result) {
                if (result == null)
                    result = U1.Vector3.Zero;
                result.SetSubtract(this.LookAt, this.Position).Normalize();
                return result;
            };
            Object.defineProperty(ScCamera.prototype, "Aspect", {
                get: function () {
                    if (this.ViewportHeight <= 0)
                        return 1;
                    else
                        return this.ViewportWidth / this.ViewportHeight;
                },
                enumerable: true,
                configurable: true
            });
            ScCamera.prototype.GetViewMatrix = function (result) {
                if (result === void 0) { result = null; }
                if (result == null)
                    result = U1.Matrix4.Identity;
                return result.SetCreateLookAt(this.Position, this.LookAt, this.Up);
            };
            ScCamera.prototype.GetProjMatrix = function (result) {
                if (result === void 0) { result = null; }
                if (result == null)
                    result = U1.Matrix4.Identity;
                if (this.ProjectionMode == U1.ProjectionTypeEnum.Perspective)
                    return result.SetCreatePerspectiveFieldOfView(this.FOV, this.Aspect, this.Near, this.Far);
                else
                    return result.SetCreateOrthographic(this.Aspect * this.OrthoHeight, this.OrthoHeight, this.Near, this.Far);
            };
            Object.defineProperty(ScCamera, "Default", {
                get: function () {
                    return new ScCamera();
                },
                enumerable: true,
                configurable: true
            });
            ScCamera.prototype.CalPickingRay = function (x, y, result) {
                if (result === void 0) { result = null; }
                if (result == null)
                    result = new U1.Ray3();
                var vm = this.GetViewMatrix(ScCamera.tmp_m0);
                var pm = this.GetProjMatrix(ScCamera.tmp_m1);
                var tv0 = ScCamera.tmp_v0.Set(x, y, 0);
                var tv1 = ScCamera.tmp_v1.Set(x, y, 1);
                var tv2 = ScCamera.tmp_v2;
                tv0 = this.viewport.UnprojectRef(tv0, pm, vm, null, tv0);
                tv1 = this.viewport.UnprojectRef(tv1, pm, vm, null, tv1);
                tv2.SetSubtract(tv1, tv0).Normalize();
                result.Position.CopyFrom(tv0);
                result.Direction.CopyFrom(tv2);
                return result;
            };
            ScCamera.prototype.WorldToScreen = function (wp, result) {
                if (result === void 0) { result = null; }
                if (result == null)
                    result = U1.Vector3.Zero;
                if (this.vpVer != this.ver) {
                    var vm = U1.Matrix4.New();
                    var pm = U1.Matrix4.New();
                    this.vpVer = this.ver;
                    this.ViewProj.SetMultiply(this.GetViewMatrix(vm), this.GetProjMatrix(pm));
                    vm.Release();
                    pm.Release();
                }
                result = this.viewport.ProjectMRef(wp, this.ViewProj, result);
                return result;
            };
            ScCamera.prototype.ScreenToWorld = function (sp, result) {
                if (result === void 0) { result = null; }
                if (result == null)
                    result = U1.Vector3.Zero;
                var vm = this.GetViewMatrix(ScCamera.tmp_m0);
                var pm = this.GetProjMatrix(ScCamera.tmp_m1);
                result = this.viewport.UnprojectRef(sp, pm, vm, null, result);
                return result;
            };
            ScCamera.prototype.GetRotation = function (targetCamera) {
                var tmp_v0 = ScCamera.tmp_v0;
                var tgt = ScCamera.tmp_m1.SetIdentity();
                var src = ScCamera.tmp_m0.SetIdentity();
                src.Right = this.GetRight(tmp_v0);
                src.Up = this.GetUp(tmp_v0);
                src.Forward = this.GetDirection(tmp_v0);
                tgt.Right = targetCamera.GetRight(tmp_v0);
                tgt.Up = targetCamera.GetUp(tmp_v0);
                tgt.Forward = targetCamera.GetDirection(tmp_v0);
                return ScCamera.GetRotation(src, tgt);
            };
            ScCamera.GetRotation = function (src, target) {
                var result = { axis: U1.Vector3.UnitZ, angle: 0, roll: 0 };
                var srcv = src.Backward;
                var tgtv = target.Backward;
                if (Math.abs(src.Backward.Z - target.Backward.Z) < 0.0001) {
                    srcv.Z = tgtv.Z = 0;
                    srcv.Normalize();
                    tgtv.Normalize();
                }
                result.axis.SetCross(srcv, tgtv).Normalize();
                var dt = U1.Vector3.Dot(srcv, tgtv);
                if (dt > 0.999 || dt < -0.999)
                    result.axis = U1.Vector3.UnitZ;
                result.angle = Math.acos(dt);
                src.Multiply(U1.Matrix4.CreateFromAxisAngle(result.axis, result.angle));
                var sr = src.Right;
                var tr = target.Right;
                var n = src.Backward;
                result.roll = U1.GeometryHelper3.AngleCCW(sr, n, tr);
                if (result.roll > Math.PI)
                    result.roll = -(Math.PI * 2 - result.roll);
                return result;
            };
            ScCamera.prototype.Roll = function (roll) {
                this.Rotate(this.GetPosition(ScCamera.tmp_v0), this.GetDirection(ScCamera.tmp_v1).Negate(), roll);
            };
            ScCamera.prototype.Rotate = function (pos, axis, ang) {
                axis.Normalize();
                var opp = ScCamera.tmp_v0.SetNegate(pos);
                var mat = ScCamera.tmp_m0.SetCreateTranslation(opp);
                mat.Multiply(ScCamera.tmp_m1.SetCreateFromAxisAngle(axis, ang));
                mat.Multiply(ScCamera.tmp_m2.SetCreateTranslation(pos));
                this.position.Transform(mat);
                this.up.TransformNormal(mat);
                this.lookat.Transform(mat);
                this.ver++;
            };
            ScCamera.prototype.ScreenToPlane = function (pt, plane, result) {
                var t_ray = U1.Ray3.New();
                this.CalPickingRay(pt.X, pt.Y, t_ray);
                var t = plane.IntersectsLine(t_ray.Position, t_ray.Direction);
                if (t != null) {
                    if (result == null)
                        result = U1.Vector3.New();
                    result.SetScaleAdd(t_ray.Position, t, t_ray.Direction);
                    t_ray.Release();
                    return result;
                }
                t_ray.Release();
                return null;
            };
            ScCamera.prototype.Move = function (offset) {
                this.position.Add(offset);
                this.lookat.Add(offset);
                this.ver++;
            };
            ScCamera.prototype.Clone = function () {
                var camera = new ScCamera();
                camera.position.CopyFrom(this.position);
                camera.lookat.CopyFrom(this.lookat);
                camera.up.CopyFrom(this.up);
                camera.FOV = this.FOV;
                camera.Near = this.Near;
                camera.Far = this.Far;
                camera.OrthoHeight = this.OrthoHeight;
                camera.ProjectionMode = this.ProjectionMode;
                camera.viewport.MaxDepth = this.viewport.MaxDepth;
                camera.viewport.MinDepth = this.viewport.MinDepth;
                camera.viewport.Width = this.viewport.Width;
                camera.viewport.Height = this.viewport.Height;
                camera.viewport.X = this.viewport.X;
                camera.viewport.Y = this.viewport.Y;
                return camera;
            };
            ScCamera.tmp_v0 = U1.Vector3.Zero;
            ScCamera.tmp_v1 = U1.Vector3.Zero;
            ScCamera.tmp_v2 = U1.Vector3.Zero;
            ScCamera.tmp_m0 = U1.Matrix4.Identity;
            ScCamera.tmp_m1 = U1.Matrix4.Identity;
            ScCamera.tmp_m2 = U1.Matrix4.Identity;
            ScCamera.tmp_r0 = new U1.Ray3();
            return ScCamera;
        }());
        Views.ScCamera = ScCamera;
        var ScResource = (function () {
            function ScResource() {
            }
            return ScResource;
        }());
        Views.ScResource = ScResource;
        var ScTexture = (function (_super) {
            __extends(ScTexture, _super);
            function ScTexture() {
                _super.apply(this, arguments);
            }
            return ScTexture;
        }(ScResource));
        Views.ScTexture = ScTexture;
        var ScMaterial = (function (_super) {
            __extends(ScMaterial, _super);
            function ScMaterial() {
                _super.apply(this, arguments);
            }
            return ScMaterial;
        }(ScResource));
        Views.ScMaterial = ScMaterial;
    })(Views = U1.Views || (U1.Views = {}));
})(U1 || (U1 = {}));
///<reference path="../Documents/UDocument.ts"/> 
///<reference path="../Math/U1Math.ts"/> 
///<reference path="../Math/Colors.ts"/> 
///<reference path="../LibTess/LibTess.ts"/> 
///<reference path="../../typings/hammerjs.d.ts"/> 
var U1;
(function (U1) {
    var Views;
    (function (Views) {
        var ViewBase = (function () {
            function ViewBase() {
                var _this = this;
                this._workingPlane = U1.Plane.FromPointNormal(U1.Vector3.Zero, U1.Vector3.UnitZ);
                this._controlComponent = new Views.ControlComponent(this);
                this._needZoomFit = false;
                this._afterUpdated = new U1.Event1();
                this.IsInvalid = true;
                this.picking_ray = new U1.Ray3();
                this._defaultTool = new Views.DefaultTool();
                this._pan_pos = U1.Vector2.Zero;
                this.CurMv = U1.Vector2.Zero;
                this.CurDn = U1.Vector2.Zero;
                this.CurUp = U1.Vector2.Zero;
                this.OldMv = U1.Vector2.Zero;
                this.OldDn = U1.Vector2.Zero;
                this.OldUp = U1.Vector2.Zero;
                this._onTouchStart = function (ev) { return _this.OnTouchStart(ev); };
                this._onTouchMove = function (ev) { return _this.OnTouchMove(ev); };
                this._onTouchEnd = function (ev) { return _this.OnTouchEnd(ev); };
                this._onMouseMove = function (ev) { return _this.OnMouseMove(ev); };
                this._onMouseUp = function (ev) { return _this.OnMouseUp(ev); };
                this._onMouseDown = function (ev) { return _this.OnMouseDown(ev); };
                this._onMouseWheel = function (ev) { return _this.OnMouseWheel(ev); };
                this._onPress = function (ev) { return _this.OnPress(ev); };
                this._onPanMove = function (ev) { return _this.OnPanMove(ev); };
                this._onPanStart = function (ev) { return _this.OnPanStart(ev); };
                this._onPanEnd = function (ev) { return _this.OnPanEnd(ev); };
                this._onPinch = function (ev) { return _this.OnPinch(ev); };
                this._isMouseDown = false;
            }
            Object.defineProperty(ViewBase.prototype, "Document", {
                //Properties
                get: function () {
                    return this.document;
                },
                set: function (value) {
                    if (this.document == value)
                        return;
                    if (this.document != null) {
                        this.document.Selection.SelectionChanged.Remove(this, this.OnSelectionChanged);
                    }
                    this.document = value;
                    if (this.document != null) {
                        this.document.Selection.SelectionChanged.Add(this, this.OnSelectionChanged);
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewBase.prototype, "DocumentPresenter", {
                get: function () {
                    return this.documentPresenter;
                },
                set: function (value) {
                    if (this.documentPresenter != null) {
                        this.documentPresenter.View = null;
                    }
                    this.documentPresenter = value;
                    if (this.documentPresenter != null) {
                        this.documentPresenter.View = this;
                        this.documentPresenter.Document = this.Document;
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewBase.prototype, "Controls", {
                get: function () {
                    return this._controlComponent;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewBase.prototype, "Scene", {
                get: function () {
                    if (this._scene == null)
                        this._scene = this.CreateScene();
                    return this._scene;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewBase.prototype, "Width", {
                get: function () {
                    if (this._board == null)
                        return 0;
                    return this._board.clientWidth;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewBase.prototype, "Height", {
                get: function () {
                    if (this._board == null)
                        return 0;
                    return this._board.clientHeight;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewBase.prototype, "Board", {
                get: function () {
                    return this._board;
                },
                set: function (value) {
                    if (this._board == value)
                        return;
                    this.DetachUIEventHandlers(this._board);
                    this._board = value;
                    this.AttachUIEventHandlers(this._board);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewBase.prototype, "WorkingPlane", {
                get: function () {
                    return this._workingPlane;
                },
                set: function (value) {
                    this._workingPlane.CopyFrom(value);
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewBase.prototype, "ActiveControl", {
                get: function () {
                    return this.Controls.ActiveControl;
                },
                set: function (value) {
                    if (this.Controls.ActiveControl == value)
                        return;
                    this.Controls.ActiveControl = value;
                    this.Invalidate();
                },
                enumerable: true,
                configurable: true
            });
            ViewBase.prototype.Activate = function () {
                var _self = this;
                this._timerToken = setInterval(function () {
                    if (_self.IsInvalid) {
                        if (_self.Document != null && _self.Document.IsUndoRedo)
                            return;
                        _self.Update();
                    }
                }, 30);
                this.ActiveTool = this._defaultTool;
            };
            ViewBase.prototype.DeActive = function () {
                clearTimeout(this._timerToken);
                this.ActiveTool = null;
            };
            ViewBase.prototype.Invalidate = function () {
                this.IsInvalid = true;
            };
            ViewBase.prototype.Update = function () {
                this.IsInvalid = false;
                this.OnBeginUpdate();
                if (this.DocumentPresenter != null) {
                    this.DocumentPresenter.Update();
                }
                if (this.Controls != null) {
                    this.Controls.Update();
                }
                this.Scene.Update();
                this.Scene.Draw();
                this.OnEndUpeate();
                if (this._needZoomFit) {
                    this.ZoomFit();
                }
                this.AfterUpdated.Invoke(this);
            };
            ViewBase.prototype.OnBeginUpdate = function () {
            };
            ViewBase.prototype.OnEndUpeate = function () {
            };
            ViewBase.prototype.ZoomFit = function () {
                var world = this.Scene.World;
                var overlay = this.Scene.Overlay;
                var box = world.BoundingBox;
                var ovbox = this.Scene.Overlay.BoundingBox;
                var a = box.Min.Clone().Transform(world.Transform);
                var b = box.Max.Clone().Transform(world.Transform);
                var min = U1.Vector3.Min(a, b);
                var max = U1.Vector3.Max(a, b);
                var minov = ovbox.Min.Clone().Transform(overlay.Transform);
                var maxov = ovbox.Max.Clone().Transform(overlay.Transform);
                if (!isNaN(minov.X) && !isNaN(maxov.X)) {
                    min.SetMin(min, minov);
                    max.SetMax(max, maxov);
                }
                if (min == U1.Vector3.MaxValue)
                    min = U1.Vector3.One.Scale(-10);
                if (max == U1.Vector3.MinValue)
                    max = U1.Vector3.One.Scale(10);
                if (!isFinite(min.X) || !isFinite(min.Y) || !isFinite(min.Z)) {
                    this._needZoomFit = true;
                    return;
                }
                this._needZoomFit = false;
                var cent = U1.Vector3.Add(min, max).Scale(1 / 2);
                var orth_h = radius * 2;
                if (U1.Vector3.Dot(this.Scene.Camera.Up, U1.Vector3.UnitY) > 0.9) {
                    //2D
                    var rwh = this.Height / this.Width;
                    var oh = (max.Y - min.Y);
                    var ow = (max.X - min.X);
                    oh *= 1.1;
                    ow *= 1.1;
                    var sx = this.Width / ow;
                    var sy = this.Height / oh;
                    if (sx < sy) {
                        oh = oh * sy / sx;
                    }
                    orth_h = oh;
                }
                var radius = U1.Vector3.Distance(min, max) / 2;
                radius = Math.max(10, radius);
                var dist = (radius * 2 / Math.tan(this.Scene.Camera.FOV));
                var lookAt = cent;
                var dir = U1.Vector3.Normalize(U1.Vector3.Subtract(this.Scene.Camera.Position, this.Scene.Camera.LookAt));
                var pos = U1.Vector3.ScaleAdd(cent, dist, dir);
                var up = this.Scene.Camera.Up;
                this.Scene.Camera.LookAt = lookAt;
                this.Scene.Camera.Position = pos;
                this.Scene.Camera.OrthoHeight = orth_h;
                this.Scene.Camera.Up = up;
                this.Invalidate();
            };
            ViewBase.prototype.ZoomView = function (focus, delt) {
                var tv0 = ViewBase.tmp_v30;
                try {
                    delt *= 0.02;
                    delt = Math.min(0.3, delt);
                    delt = Math.max(-0.3, delt);
                    var camera = this.Scene.Camera;
                    if (camera.ProjectionMode == U1.ProjectionTypeEnum.Perspective) {
                        var dir = ViewBase.tmp_v31.SetZero();
                        camera.GetDirection(dir);
                        camera.ScreenToPlane(new U1.Vector2(this.Width / 2, this.Height / 2), this._workingPlane, tv0);
                        if (tv0 != null) {
                            var len = U1.Vector3.Distance(tv0, camera.Position);
                            camera.Move(dir.Scale(len * delt));
                        }
                        else {
                            dir.Scale(delt);
                            camera.Move(dir);
                        }
                    }
                    else {
                        var p0 = ViewBase.tmp_v30;
                        var p1 = ViewBase.tmp_v31;
                        var v1 = ViewBase.tmp_v32;
                        camera.ScreenToPlane(focus, this._workingPlane, p0);
                        var orthHeight = camera.OrthoHeight - (delt * camera.OrthoHeight);
                        if (orthHeight >= 0.1) {
                            camera.OrthoHeight = orthHeight;
                        }
                        camera.ScreenToPlane(focus, this._workingPlane, p1);
                        v1.SetSubtract(p0, p1);
                        camera.Move(v1);
                    }
                    //Scene.Low_Detail();
                    this.Invalidate();
                }
                catch (err) {
                    U1.LogService.WriteException(err);
                }
            };
            ViewBase.prototype.ScaleView = function (focus, scale) {
                var tv0 = ViewBase.tmp_v30;
                if (scale <= 0)
                    return;
                try {
                    var camera = this.Scene.Camera;
                    if (camera.ProjectionMode == U1.ProjectionTypeEnum.Perspective) {
                        var dir = ViewBase.tmp_v31.SetZero();
                        camera.GetDirection(dir);
                        camera.ScreenToPlane(new U1.Vector2(this.Width / 2, this.Height / 2), this._workingPlane, tv0);
                        if (tv0 != null) {
                            var len = U1.Vector3.Distance(tv0, camera.Position);
                            camera.Move(dir.Scale(len * scale));
                        }
                        else {
                            dir.Scale(scale);
                            camera.Move(dir);
                        }
                    }
                    else {
                        var p0 = ViewBase.tmp_v30;
                        var p1 = ViewBase.tmp_v31;
                        var v1 = ViewBase.tmp_v32;
                        camera.ScreenToPlane(focus, this._workingPlane, p0);
                        var orthHeight = (1 / scale * camera.OrthoHeight);
                        if (orthHeight >= 0.1) {
                            camera.OrthoHeight = orthHeight;
                        }
                        camera.ScreenToPlane(focus, this._workingPlane, p1);
                        v1.SetSubtract(p0, p1);
                        camera.Move(v1);
                    }
                    //Scene.Low_Detail();
                    this.Invalidate();
                }
                catch (err) {
                    U1.LogService.WriteException(err);
                }
            };
            ViewBase.prototype.PanPlane = function (plane, sp0, sp1) {
                try {
                    var cent = this.Scene.Camera.LookAt;
                    var p0 = ViewBase.tmp_v30;
                    var p1 = ViewBase.tmp_v31;
                    var v0 = ViewBase.tmp_v32;
                    this.Scene.Camera.ScreenToPlane(sp0, plane, p0);
                    this.Scene.Camera.ScreenToPlane(sp1, plane, p1);
                    if (p0 != null && p1 != null) {
                        v0.SetSubtract(p0, p1);
                        if (v0.X != 0 || v0.Y != 0) {
                            this.Scene.Camera.Move(v0);
                        }
                    }
                    this.Invalidate();
                }
                catch (err) {
                    U1.LogService.WriteException(err);
                }
            };
            ViewBase.prototype.GetClippingCorners = function (p1, p2) {
                var min = U1.Vector2.Min(p1, p2);
                var max = U1.Vector2.Max(p1, p2);
                var r1 = this.GetRay(min);
                var r2 = this.GetRay(new U1.Vector2(min.X, max.Y));
                var r3 = this.GetRay(new U1.Vector2(max.X, max.Y));
                var r4 = this.GetRay(new U1.Vector2(max.X, min.Y));
                var v1 = r1.Position; //Left Top Back
                var v2 = U1.Vector3.Add(r1.Position, r1.Direction); //Left Top Front
                var v3 = r2.Position; //Left Bottom Back
                var v4 = U1.Vector3.Add(r2.Position, r2.Direction); //Left Bottom Front
                var v5 = r3.Position; //Right Bottom Back
                var v6 = U1.Vector3.Add(r3.Position, r3.Direction); //Right Bottom Front
                var v7 = r4.Position; //Right Top Back
                var v8 = U1.Vector3.Add(r4.Position, r4.Direction); //Right Top Front
                return [v1, v2, v3, v4, v5, v6, v7, v8];
            };
            ViewBase.prototype.GetRay = function (screen, result) {
                if (result === void 0) { result = null; }
                if (result == null)
                    result = U1.Ray3.New();
                return this.Scene.Camera.CalPickingRay(screen.X, screen.Y, result);
            };
            ViewBase.prototype.Pick = function (screen_pos) {
                var _this = this;
                var picking_ray = this.picking_ray;
                picking_ray.Position.Set(screen_pos.X, screen_pos.Y, 1000);
                picking_ray.Direction.Set(0, 0, -1);
                var isectContext = new ISectContext(screen_pos, picking_ray, Number.MAX_VALUE);
                isectContext.WorldToScreen =
                    function (wpos, result) {
                        if (result == null)
                            result = U1.Vector3.New();
                        result.Set(wpos.X, wpos.Y, wpos.Z);
                        return result;
                    };
                isectContext.IsScreenSpace = true;
                var isect = this.Scene.Screen.Pick(isectContext);
                if (isect == null || isect.ISect == null) {
                    this.GetRay(screen_pos, picking_ray);
                    isectContext.Ray = picking_ray;
                    isectContext.WorldToScreen =
                        function (wpos, result) {
                            if (result == null)
                                result = U1.Vector3.New();
                            _this.Scene.Camera.WorldToScreen(wpos, result);
                            return result;
                        };
                    isectContext.IsScreenSpace = false;
                    if (isect == null || isect.ISect == null)
                        isect = this.Scene.Overlay.Pick(isectContext);
                    if (isect == null || isect.ISect == null)
                        isect = this.Scene.World.Pick(isectContext);
                }
                return isect;
            };
            ViewBase.prototype.SelectRegion = function (lt, rb, allowCross) {
                if (allowCross === void 0) { allowCross = false; }
                return this.Scene.World.SelectRegion(lt, rb, allowCross);
            };
            Object.defineProperty(ViewBase.prototype, "DefaultTool", {
                get: function () {
                    return this._defaultTool;
                },
                set: function (value) {
                    if (this._defaultTool == value)
                        return;
                    this._defaultTool = value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewBase.prototype, "ActiveTool", {
                get: function () {
                    return this._activeTool;
                },
                set: function (value) {
                    if (this._activeTool != null) {
                        this._activeTool.OnDetach(this);
                        delete this._activeTool.View;
                    }
                    this._activeTool = value;
                    if (this._activeTool == null) {
                        this._activeTool = this._defaultTool;
                    }
                    if (this._activeTool != null) {
                        this._activeTool.View = this;
                        this._activeTool.OnAttach(this);
                    }
                    this.Invalidate();
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(ViewBase.prototype, "AfterUpdated", {
                //Events
                get: function () {
                    return this._afterUpdated;
                },
                enumerable: true,
                configurable: true
            });
            ViewBase.prototype.AttachUIEventHandlers = function (board) {
                if (board != null) {
                }
                this.AttachGestures(board);
            };
            ViewBase.prototype.DetachUIEventHandlers = function (board) {
                if (board != null) {
                    board.removeEventListener("mousemove", this._onMouseMove);
                    board.removeEventListener("mousedown", this._onMouseDown);
                    board.removeEventListener("mouseup", this._onMouseUp);
                    var mousewheelevt = (/Firefox/i.test(navigator.userAgent)) ? "DOMMouseScroll" : "mousewheel"; //FF doesn't recognize mousewheel as of FF3.x 
                    board.removeEventListener(mousewheelevt, this._onMouseWheel);
                    board.removeEventListener("touchstart", this.OnTouchStart);
                    board.removeEventListener("touchmove", this._onTouchMove);
                    board.removeEventListener("touchend", this._onTouchEnd);
                }
                this.DetachGestures(board);
            };
            ViewBase.prototype.AttachGestures = function (board) {
                if (this._hammer != null)
                    this._hammer.destroy();
                if (board != null) {
                    this._hammer = new Hammer(board);
                    var mc = this._hammer;
                    mc.add(new Hammer.Swipe()).recognizeWith(mc.get('pan'));
                    mc.add(new Hammer.Rotate({ threshold: 0 })).recognizeWith(mc.get('pan'));
                    mc.add(new Hammer.Pinch({ threshold: 0 })).recognizeWith(mc.get('pan')).recognizeWith(mc.get('rotate'));
                    this._hammer.on("panmove", this._onPanMove);
                    this._hammer.on("panstart", this._onPanStart);
                    this._hammer.on("panend", this._onPanEnd);
                    this._hammer.on("pinchstart pinchmove", this._onPinch);
                }
            };
            ViewBase.prototype.DetachGestures = function (board) {
                if (this._hammer != null) {
                    this._hammer.off("panmove", this._onPanMove);
                    this._hammer.off("panstart", this._onPanStart);
                    this._hammer.off("panend", this._onPanEnd);
                    this._hammer.destroy();
                    this._hammer = null;
                }
            };
            Object.defineProperty(ViewBase.prototype, "IsMouseDown", {
                get: function () {
                    return this._isMouseDown;
                },
                enumerable: true,
                configurable: true
            });
            ViewBase.prototype.OnMouseMove = function (ev) {
                if (ev.srcElement instanceof HTMLInputElement) {
                    return;
                }
                ev.preventDefault();
                this.OldMv.CopyFrom(this.CurMv);
                this.CurMv.Set(ev.offsetX, ev.offsetY);
                if (this.ActiveControl != null
                    && this.ActiveControl.OnMouseMove(ev)) {
                }
                else if (this.ActiveTool != null
                    && this.ActiveTool.OnMouseMove(ev)) {
                }
                else {
                }
            };
            ViewBase.prototype.OnMouseUp = function (ev) {
                if (ev.srcElement instanceof HTMLInputElement) {
                    return;
                }
                ev.preventDefault();
                this._isMouseDown = false;
                this.OldUp.CopyFrom(this.CurUp);
                this.CurUp.Set(ev.offsetX, ev.offsetY);
                this.CurMv.CopyFrom(this.CurUp);
                this.OldMv.CopyFrom(this.CurUp);
                if (this.ActiveControl != null
                    && this.ActiveControl.OnMouseUp(ev)) {
                }
                else if (this.ActiveTool != null && this.ActiveTool.OnMouseUp(ev)) {
                }
                else {
                }
            };
            ViewBase.prototype.OnMouseDown = function (ev) {
                if (ev.srcElement instanceof HTMLInputElement) {
                    return;
                }
                ev.preventDefault();
                this._isMouseDown = true;
                this.OldDn.CopyFrom(this.CurDn);
                this.CurDn.Set(ev.offsetX, ev.offsetY);
                this.CurMv.CopyFrom(this.CurDn);
                this.OldMv.CopyFrom(this.CurDn);
                if (this.ActiveControl != null && this.ActiveControl.OnMouseDown(ev)) {
                    return;
                }
                if (this.ActiveTool != null && this.ActiveTool.OnMouseDown(ev)) {
                }
                else {
                }
            };
            ViewBase.prototype.OnMouseWheel = function (ev) {
                if (ev.srcElement instanceof HTMLInputElement) {
                    return;
                }
                this.OldMv.CopyFrom(this.CurMv);
                this.CurMv.Set(ev.offsetX, ev.offsetY);
                if (this.ActiveControl != null
                    && this.ActiveControl.OnMouseWheel(ev)) {
                }
                else if (this.ActiveTool != null
                    && this.ActiveTool.OnMouseWheel(ev)) {
                }
                else {
                }
            };
            ViewBase.prototype.OnPress = function (ev) {
                if (ev.pointerType == "touch") {
                    this.OldMv.CopyFrom(this.CurMv);
                    this.OldDn.CopyFrom(this.CurDn);
                    var te = (ev.srcEvent);
                    if (te.touches.length > 0) {
                        var tc = te.touches[0];
                        this.CurMv.Set(tc.clientX, tc.clientY);
                        this.CurDn.Set(tc.clientX, tc.clientY);
                    }
                    if (this.ActiveControl != null
                        && this.ActiveControl.OnPress(ev)) {
                    }
                    else if (this.ActiveTool != null && this.ActiveTool.OnPress(ev)) {
                    }
                    else {
                    }
                    this.Invalidate();
                }
            };
            ViewBase.prototype.OnPanMove = function (ev) {
                if (ev.pointerType == "touch") {
                    this.OldMv.CopyFrom(this.CurMv);
                    var te = (ev.srcEvent);
                    if (te.touches.length > 0) {
                        var tc = te.touches[0];
                        this.CurMv.Set(tc.clientX, tc.clientY);
                    }
                    if (this.ActiveControl != null
                        && this.ActiveControl.OnPanMove(ev)) {
                    }
                    else if (this.ActiveTool != null && this.ActiveTool.OnPanMove(ev)) {
                        return true;
                    }
                    else {
                    }
                    this.Invalidate();
                }
            };
            ViewBase.prototype.OnPanStart = function (ev) {
                if (ev.pointerType == "touch") {
                    this.OldMv.CopyFrom(this.CurMv);
                    this.OldDn.CopyFrom(this.CurDn);
                    var te = (ev.srcEvent);
                    if (te.touches.length > 0) {
                        var tc = te.touches[0];
                        this.CurMv.Set(tc.clientX, tc.clientY);
                        this.CurDn.Set(tc.clientX, tc.clientY);
                    }
                    if (this.ActiveControl != null
                        && this.ActiveControl.OnPanStart(ev)) {
                    }
                    else if (this.ActiveTool != null && this.ActiveTool.OnPanStart(ev)) {
                    }
                    else {
                    }
                    this.Invalidate();
                }
            };
            ViewBase.prototype.OnPanEnd = function (ev) {
                if (ev.pointerType == "touch") {
                    this.OldMv.CopyFrom(this.CurMv);
                    this.OldUp.CopyFrom(this.CurUp);
                    var te = (ev.srcEvent);
                    if (te.touches.length > 0) {
                        var tc = te.touches[0];
                        this.CurMv.Set(tc.clientX, tc.clientY);
                        this.OldUp.CopyFrom(this.CurMv);
                    }
                    if (this.ActiveControl != null
                        && this.ActiveControl.OnPanEnd(ev)) {
                    }
                    else if (this.ActiveTool != null && this.ActiveTool.OnPanEnd(ev)) {
                        return true;
                    }
                    else {
                    }
                    this.Invalidate();
                }
            };
            ViewBase.prototype.OnPinch = function (ev) {
                if (this.ActiveControl != null
                    && this.ActiveControl.OnPinch(ev)) {
                }
                else if (this.ActiveTool != null && this.ActiveTool.OnPinch(ev)) {
                    return true;
                }
                else {
                }
                if (ev.type == "pinchmove") {
                    var sc_delt = ev.scale / this._prev_scale;
                    this._prev_scale = ev.scale;
                    var cent = ViewBase.tmp_v20.Set(ev.center.x, ev.center.y);
                    this.ScaleView(cent, sc_delt);
                }
                else if (ev.type == "pinchstart") {
                    this._prev_scale = ev.scale;
                }
                else if (ev.type == "pinchin") {
                    var cent = ViewBase.tmp_v20.Set(ev.center.x, ev.center.y);
                    this.ScaleView(cent, ev.scale);
                }
                else if (ev.type == "pinchout") {
                    var cent = ViewBase.tmp_v20.Set(ev.center.x, ev.center.y);
                    this.ScaleView(cent, ev.scale);
                }
            };
            ViewBase.prototype.OnTouchStart = function (te) {
                this.OldMv.CopyFrom(this.CurMv);
                this.OldDn.CopyFrom(this.CurDn);
                if (te.touches.length > 0) {
                    var tc = te.touches[0];
                    this.CurMv.Set(tc.clientX, tc.clientY);
                    this.CurDn.Set(tc.clientX, tc.clientY);
                }
                if (this.ActiveControl != null
                    && this.ActiveControl.OnTouchStart(te)) {
                }
                else if (this.ActiveTool != null && this.ActiveTool.OnTouchStart(te)) {
                }
                else {
                }
                this.Invalidate();
            };
            ViewBase.prototype.OnTouchMove = function (ev) {
                if (ev.srcElement instanceof HTMLInputElement) {
                    return;
                }
                this.OldMv.CopyFrom(this.CurMv);
                if (ev.changedTouches.length > 0) {
                    var tc = ev.changedTouches[0];
                    this.CurMv.Set(tc.clientX, tc.clientY);
                }
                if (this.ActiveControl != null
                    && this.ActiveControl.OnTouchMove(ev)) {
                }
                else if (this.ActiveTool != null && this.ActiveTool.OnTouchMove(ev)) {
                    return true;
                }
                else {
                }
                this.Invalidate();
            };
            ViewBase.prototype.OnTouchEnd = function (te) {
                this.OldMv.CopyFrom(this.CurMv);
                this.OldUp.CopyFrom(this.CurUp);
                if (te.touches.length > 0) {
                    var tc = te.touches[0];
                    this.CurMv.Set(tc.clientX, tc.clientY);
                    this.OldUp.CopyFrom(this.CurMv);
                }
                if (this.ActiveControl != null
                    && this.ActiveControl.OnTouchEnd(te)) {
                }
                else if (this.ActiveTool != null && this.ActiveTool.OnTouchEnd(te)) {
                    return true;
                }
                else {
                }
                this.Invalidate();
            };
            ViewBase.prototype.OnSelectionChanged = function (sel) {
            };
            ViewBase.prototype.CreateScene = function () {
                return new Views.SceneBase(this);
            };
            //Temp values
            ViewBase.tmp_v20 = U1.Vector2.Zero;
            ViewBase.tmp_v21 = U1.Vector2.Zero;
            ViewBase.tmp_v22 = U1.Vector2.Zero;
            ViewBase.tmp_v23 = U1.Vector2.Zero;
            ViewBase.tmp_v30 = U1.Vector3.Zero;
            ViewBase.tmp_v31 = U1.Vector3.Zero;
            ViewBase.tmp_v32 = U1.Vector3.Zero;
            ViewBase.tmp_v33 = U1.Vector3.Zero;
            return ViewBase;
        }());
        Views.ViewBase = ViewBase;
        var Viewport = (function () {
            function Viewport(x, y, w, h, min, max) {
                if (x === void 0) { x = 0; }
                if (y === void 0) { y = 0; }
                if (w === void 0) { w = 0; }
                if (h === void 0) { h = 0; }
                if (min === void 0) { min = 0; }
                if (max === void 0) { max = 1; }
                this.X = x;
                this.Y = y;
                this.Width = w,
                    this.Height = h;
                this.MinDepth = min;
                this.MaxDepth = max;
            }
            Viewport.prototype.ConvertFromStr = function (value) {
                if (value == null)
                    return;
                var items = value.split(",");
                this.X = items.length > 0 ? parseFloat(items[0]) : 0;
                this.Y = items.length > 1 ? parseFloat(items[1]) : 0;
                this.Width = items.length > 2 ? parseFloat(items[2]) : 0;
                this.Height = items.length > 3 ? parseFloat(items[3]) : 0;
                this.MinDepth = items.length > 4 ? parseFloat(items[4]) : 0;
                this.MaxDepth = items.length > 5 ? parseFloat(items[5]) : 0;
            };
            Viewport.prototype.ConvertToStr = function () {
                return "" + this.X + "," + this.Y + "," + this.Width + "," + this.Height + "," + this.MinDepth + "," + this.MaxDepth;
            };
            Viewport.prototype.Equals = function (other) {
                return this.X == other.X &&
                    this.Y == other.Y &&
                    this.MinDepth == other.MinDepth &&
                    this.MaxDepth == other.MaxDepth &&
                    this.Width == other.Width &&
                    this.Height == other.Height;
            };
            Viewport.prototype.Project = function (source, projection, view, world) {
                var matrix = Viewport.tmp_m0.SetMultiply(world, view).Multiply(projection);
                var vector = U1.Vector3.Transform(source, matrix);
                var a = (((source.X * matrix.M14) + (source.Y * matrix.M24)) + (source.Z * matrix.M34)) + matrix.M44;
                if (!U1.WithinEpsilon(a, 1)) {
                    vector.Scale(1 / a);
                }
                vector.X = (((vector.X + 1) * 0.5) * this.Width) + this.X;
                vector.Y = (((-vector.Y + 1) * 0.5) * this.Height) + this.Y;
                vector.Z = (vector.Z * (this.MaxDepth - this.MinDepth)) + this.MinDepth;
                return vector;
            };
            Viewport.prototype.ProjectRef = function (source, projection, view, world, ref) {
                var a = source.X * Viewport.tmp_m0.M14
                    + source.Y * Viewport.tmp_m0.M24
                    + source.Z * Viewport.tmp_m0.M34
                    + Viewport.tmp_m0.M44;
                Viewport.tmp_m0.SetMultiply(world, view).Multiply(projection);
                ref.SetTransform(source, Viewport.tmp_m0);
                if (!U1.WithinEpsilon(a, 1)) {
                    ref.Scale(1 / a);
                }
                ref.X = (((ref.X + 1) * 0.5) * this.Width) + this.X;
                ref.Y = (((-ref.Y + 1) * 0.5) * this.Height) + this.Y;
                ref.Z = (ref.Z * (this.MaxDepth - this.MinDepth)) + this.MinDepth;
                return ref;
            };
            Viewport.prototype.ProjectM = function (source, matrix) {
                var a = (((source.X * matrix.M14) + (source.Y * matrix.M24)) + (source.Z * matrix.M34)) + matrix.M44;
                var vector = U1.Vector3.Transform(source, matrix);
                if (!U1.WithinEpsilon(a, 1)) {
                    vector.Scale(1 / a);
                }
                vector.X = ((((vector.X + 1) * 0.5) * this.Width) + this.X);
                vector.Y = ((((-vector.Y + 1) * 0.5) * this.Height) + this.Y);
                vector.Z = (vector.Z * (this.MaxDepth - this.MinDepth)) + this.MinDepth;
                return vector;
            };
            Viewport.prototype.ProjectMRef = function (source, matrix, ref) {
                var a = (((source.X * matrix.M14) + (source.Y * matrix.M24)) + (source.Z * matrix.M34)) + matrix.M44;
                ref.SetTransform(source, matrix);
                if (!U1.WithinEpsilon(a, 1)) {
                    ref.Scale(1 / a);
                }
                ref.X = ((((ref.X + 1) * 0.5) * this.Width) + this.X);
                ref.Y = ((((-ref.Y + 1) * 0.5) * this.Height) + this.Y);
                ref.Z = (ref.Z * (this.MaxDepth - this.MinDepth)) + this.MinDepth;
                return ref;
            };
            Viewport.prototype.Unproject = function (source, projection, view, world) {
                var matrix = Viewport.tmp_m0.SetMultiply(world, view).Multiply(projection).Invert();
                var srcr = Viewport.tmp_v30.CopyFrom(source);
                srcr.X = (((srcr.X - this.X) / (this.Width)) * 2) - 1;
                srcr.Y = -((((srcr.Y - this.Y) / (this.Height)) * 2) - 1);
                srcr.Z = (srcr.Z - this.MinDepth) / (this.MaxDepth - this.MinDepth);
                var vector = U1.Vector3.Transform(source, matrix);
                var a = (((srcr.X * matrix.M14) + (srcr.Y * matrix.M24)) + (srcr.Z * matrix.M34)) + matrix.M44;
                if (!U1.WithinEpsilon(a, 1)) {
                    vector.Scale(1 / a);
                }
                return vector.Clone();
            };
            Viewport.prototype.UnprojectRef = function (source, projection, view, world, ref) {
                var matrix = Viewport.tmp_m0
                    .SetMultiply(world, view)
                    .Multiply(projection)
                    .Invert();
                var srcr = Viewport.tmp_v30.CopyFrom(source);
                srcr.X = (((srcr.X - this.X) / (this.Width)) * 2) - 1;
                srcr.Y = -((((srcr.Y - this.Y) / (this.Height)) * 2) - 1);
                srcr.Z = (srcr.Z - this.MinDepth) / (this.MaxDepth - this.MinDepth);
                ref.SetTransform(srcr, matrix);
                var a = (((srcr.X * matrix.M14) + (srcr.Y * matrix.M24)) + (srcr.Z * matrix.M34)) + matrix.M44;
                if (!U1.WithinEpsilon(a, 1)) {
                    ref.Scale(1 / a);
                }
                return ref;
            };
            Object.defineProperty(Viewport.prototype, "AspectRatio", {
                get: function () {
                    if ((this.Height != 0) && (this.Width != 0)) {
                        return ((this.Width) / (this.Height));
                    }
                    return 0;
                },
                enumerable: true,
                configurable: true
            });
            Viewport.tmp_v30 = U1.Vector3.Zero;
            Viewport.tmp_v31 = U1.Vector3.Zero;
            Viewport.tmp_v32 = U1.Vector3.Zero;
            Viewport.tmp_v33 = U1.Vector3.Zero;
            Viewport.tmp_m0 = U1.Matrix4.Identity;
            Viewport.tmp_m1 = U1.Matrix4.Identity;
            Viewport.tmp_m2 = U1.Matrix4.Identity;
            Viewport.tmp_m3 = U1.Matrix4.Identity;
            Viewport.tmp_m4 = U1.Matrix4.Identity;
            return Viewport;
        }());
        Views.Viewport = Viewport;
        var UpdateContext = (function () {
            function UpdateContext() {
                this.IsScreenSpace = false;
            }
            return UpdateContext;
        }());
        Views.UpdateContext = UpdateContext;
        var DrawContext = (function () {
            function DrawContext() {
                this.IsScreenSpace = false;
                this.IsOveraySpace = false;
            }
            return DrawContext;
        }());
        Views.DrawContext = DrawContext;
        var ISectContext = (function () {
            function ISectContext(view, ray, maxDistance) {
                this.ScreenWithinSq = 36;
                this.IsScreenSpace = false;
                this.IsOveraySpace = false;
                this.View = view;
                this.Ray = ray;
                this.MaxDistance = maxDistance;
            }
            ISectContext.prototype.IsLineIsect = function (pOnRay, pOnObject, lineWidth) {
                if (lineWidth === void 0) { lineWidth = 0; }
                lineWidth /= 2;
                var dist = U1.Vector3.DistanceSquared(pOnRay, pOnObject);
                if (dist >= this.ScreenWithinSq + (lineWidth * lineWidth))
                    return false;
                if (this.WorldToScreen != null) {
                    var p1 = U1.Vector3.New();
                    var p2 = U1.Vector3.New();
                    p1 = this.WorldToScreen(pOnRay, p1);
                    p2 = this.WorldToScreen(pOnObject, p2);
                    dist = U1.Vector3.DistanceSquared(p1, p2);
                    p1.Release();
                    p2.Release();
                    if (dist >= this.ScreenWithinSq)
                        return false;
                }
                else {
                    dist = U1.Vector3.DistanceSquared(pOnRay, pOnObject);
                    if (dist >= this.ScreenWithinSq)
                        return false;
                }
                return true;
            };
            return ISectContext;
        }());
        Views.ISectContext = ISectContext;
        var PickResult = (function () {
            function PickResult() {
            }
            PickResult.New = function () {
                var res = PickResult._cache.New();
                res.ISect = U1.ISectInfo.New();
                res.Node = null;
                return res;
            };
            PickResult.Release = function (v) {
                PickResult._cache.Release(v);
            };
            PickResult.prototype.Release = function () {
                if (this.ISect != null)
                    this.ISect.Release();
                this.ISect = null;
                PickResult.Release(this);
            };
            PickResult._cache = new U1.Cache(PickResult, 30);
            return PickResult;
        }());
        Views.PickResult = PickResult;
        var TextureComponent = (function () {
            function TextureComponent(scene) {
                this._scene = scene;
            }
            Object.defineProperty(TextureComponent.prototype, "Scene", {
                get: function () {
                    return this._scene;
                },
                enumerable: true,
                configurable: true
            });
            TextureComponent.prototype.GetOrAddTexture = function (c, name) {
                if (this.Textures == null) {
                    this.Textures = {};
                }
                if (this.Textures[name] == null) {
                    var ch = new c();
                    ch.Name = name;
                    this.Textures[name] = ch;
                }
                return this.Textures[name];
            };
            TextureComponent.prototype.GetTexture = function (c, name) {
                if (this.Textures[name] instanceof c)
                    return this.Textures[name];
                return null;
            };
            TextureComponent.prototype.AddTexture = function (c, name) {
                var ch = new c();
                ch.Name = name;
                if (this.Textures == null) {
                    this.Textures = {};
                }
                this.Textures[name] = ch;
                return ch;
            };
            TextureComponent.prototype.RemoveTexture = function (entity) {
                if (this.Textures == null)
                    return;
                this.Textures[entity.Name] = null;
            };
            TextureComponent.prototype.Clear = function () {
                this.Textures = null;
            };
            return TextureComponent;
        }());
        Views.TextureComponent = TextureComponent;
        var MaterialComponent = (function () {
            function MaterialComponent(scene) {
                this._scene = scene;
            }
            Object.defineProperty(MaterialComponent.prototype, "Scene", {
                get: function () {
                    return this._scene;
                },
                enumerable: true,
                configurable: true
            });
            MaterialComponent.prototype.GetOrAddMaterial = function (c, name) {
                if (this.Materials == null) {
                    this.Materials = {};
                }
                if (this.Materials[name] == null) {
                    var ch = new c();
                    ch.Name = name;
                    this.Materials[name] = ch;
                }
                return this.Materials[name];
            };
            MaterialComponent.prototype.GetMaterial = function (c, name) {
                if (this.Materials[name] instanceof c)
                    return this.Materials[name];
                return null;
            };
            MaterialComponent.prototype.AddMaterial = function (c, name) {
                var ch = new c();
                ch.Name = name;
                if (this.Materials == null) {
                    this.Materials = {};
                }
                this.Materials[name] = ch;
                return ch;
            };
            MaterialComponent.prototype.RemoveMaterial = function (entity) {
                if (this.Materials == null)
                    return;
                this.Materials[entity.Name] = null;
            };
            MaterialComponent.prototype.Clear = function () {
                this.Materials = null;
            };
            return MaterialComponent;
        }());
        Views.MaterialComponent = MaterialComponent;
    })(Views = U1.Views || (U1.Views = {}));
})(U1 || (U1 = {}));
/// <reference path="u1.views.ts" /> 
/// <reference path="entity.ts" />
var U1;
(function (U1) {
    var Views;
    (function (Views) {
        var View2Canvas = (function (_super) {
            __extends(View2Canvas, _super);
            function View2Canvas(canvas) {
                _super.call(this);
                this._canvas = canvas;
            }
            Object.defineProperty(View2Canvas.prototype, "Canvas", {
                get: function () {
                    return this._canvas;
                },
                set: function (value) {
                    this._canvas = value;
                },
                enumerable: true,
                configurable: true
            });
            View2Canvas.prototype.CreateScene = function () {
                return new Scene2Canvas(this);
            };
            return View2Canvas;
        }(Views.ViewBase));
        Views.View2Canvas = View2Canvas;
        var Scene2Canvas = (function (_super) {
            __extends(Scene2Canvas, _super);
            function Scene2Canvas(scene) {
                _super.call(this, scene);
                this._frustum = new U1.BoundingFrustum();
                this.Camera.ProjectionMode = U1.ProjectionTypeEnum.Orthographic;
                Views.ScText.MeasureTextureWidthFunc = this.MeasureTextureWidth;
            }
            Scene2Canvas.prototype.newPoint = function () {
                return new ScPoint2Canvas();
            };
            Scene2Canvas.prototype.newPolyLine = function () {
                return new ScPolyLine2Canvas();
            };
            Scene2Canvas.prototype.newPolygon = function () {
                return new ScPolygon2Canvas();
            };
            Scene2Canvas.prototype.newText = function () {
                return new ScText2Canvas();
            };
            Scene2Canvas.prototype.newMesh = function () {
                return new ScMesh2Canvas();
            };
            Scene2Canvas.prototype.newEllipse = function () {
                return new ScEllipseCanvas();
            };
            Scene2Canvas.prototype.Draw = function () {
                this.Camera.ViewportWidth = this.View.Width;
                this.Camera.ViewportHeight = this.View.Height;
                this.OnBeginUpdate();
                var context = this.CreateDrawContext();
                context.IsScreenSpace = false;
                context.IsOveraySpace = false;
                this.OnBeginDraw(context);
                this._context.save();
                this.World.Draw(context);
                this._context.restore();
                this._context.save();
                this.Overlay.Draw(context);
                this._context.restore();
                this._context.save();
                context.IsScreenSpace = true;
                context.IsOveraySpace = true;
                this.Screen.Draw(context);
                this._context.restore();
                this.OnEndDraw(context);
                this.OnEndUpdate();
            };
            Scene2Canvas.prototype.Clear = function () {
                _super.prototype.Clear.call(this);
                this.Draw();
            };
            Scene2Canvas.prototype.OnBeginDraw = function (context) {
                this._context.clearRect(0, 0, this.View.Width, this.View.Height);
                if (this._context.setLineDash != undefined)
                    this._context.setLineDash([]);
                /*
                if (this.orign_point == null)
                {
                    this.orign_point = new ScPoint2Canvas();
                    this.orign_point.Fill = U1.Colors.Red;
                    this.orign_point.Radius = 10;
                }
    
                if (this.rectangles == null)
                {
                    this.rectangles = [
                        (() =>
                        {
                            var pgon = new ScPolygon2Canvas();
                            pgon.Points = [new Vector3(5, 5, 0), new Vector3(15, 5, 0), new Vector3(15, 15, 0), new Vector3(5, 15, 0)]
                            pgon.Fill = Colors.Green;
                            pgon.Stroke = Colors.Black;
                            pgon.StrokeThickness = 2;
                            pgon.Filled = true
                            return pgon;
                        })()
                    ];
                }
    
                this.orign_point.Draw(context);
                for (var rect of this.rectangles)
                {
                    rect.Draw(context);
                }
                //*/
            };
            Scene2Canvas.prototype.OnEndDraw = function (context) {
            };
            Scene2Canvas.prototype.CreateDrawContext = function () {
                var _this = this;
                var view2 = this.View;
                if (this._drawContext == null) {
                    this._drawContext = new DrawContext2Canvas(this);
                    this._drawContext.WorldToScreen =
                        function (wpos, result) {
                            result = _this.Camera.WorldToScreen(wpos, result);
                            if (isNaN(result.X) || !isFinite(result.X) ||
                                isNaN(result.Y) || !isFinite(result.Y)) {
                                console.log("WorldToScreen error");
                            }
                            return result;
                        };
                    this._context = view2.Canvas.getContext("2d");
                    this._drawContext.RenderingContext2D = this._context;
                }
                this._drawContext.ViewMatrix = this.Camera.GetViewMatrix(this._drawContext.ViewMatrix);
                this._drawContext.ProjMatrix = this.Camera.GetProjMatrix(this._drawContext.ProjMatrix);
                this._drawContext.ViewProjMatrix.SetMultiply(this._drawContext.ViewMatrix, this._drawContext.ProjMatrix);
                return this._drawContext;
            };
            Scene2Canvas.prototype.MeasureTextureWidth = function (text, fontsize) {
                if (Scene2Canvas._temp_cavas == null) {
                    Scene2Canvas._temp_cavas = document.createElement("canvas");
                }
                var context = Scene2Canvas._temp_cavas.getContext("2d");
                context.font = "10px";
                var metrics = context.measureText(text);
                return metrics.width * fontsize / 10;
            };
            return Scene2Canvas;
        }(Views.SceneBase));
        Views.Scene2Canvas = Scene2Canvas;
        var DrawContext2Canvas = (function (_super) {
            __extends(DrawContext2Canvas, _super);
            function DrawContext2Canvas(scene) {
                _super.call(this);
                this.ShowTextBounding = false;
                this.ViewMatrix = U1.Matrix4.New();
                this.ProjMatrix = U1.Matrix4.New();
                this.ViewProjMatrix = U1.Matrix4.New();
            }
            DrawContext2Canvas.prototype.Dispose = function () {
            };
            return DrawContext2Canvas;
        }(Views.DrawContext));
        Views.DrawContext2Canvas = DrawContext2Canvas;
        var ScPoint2Canvas = (function (_super) {
            __extends(ScPoint2Canvas, _super);
            function ScPoint2Canvas() {
                _super.apply(this, arguments);
            }
            ScPoint2Canvas.prototype.OnDraw = function (context) {
                var contextX = context;
                var context2D = contextX.RenderingContext2D;
                context2D.save();
                var p0 = ScPoint2Canvas._p1;
                var pos = this.Position;
                var wm = this.WorldTransform;
                p0.SetTransform(pos, wm);
                if (!context.IsScreenSpace)
                    context.WorldToScreen(pos, p0);
                var radius = this.Radius;
                context2D.strokeStyle = this.StrokeStr;
                if (this.Filled && this.Fill != null)
                    context2D.fillStyle = this.FillStr;
                context2D.globalAlpha = this.Alpha;
                context2D.lineWidth = this.StrokeThickness;
                context2D.beginPath();
                context2D.arc(p0.X, p0.Y, radius, 0, Math.PI * 2, false);
                if (this.Filled && this.Fill != null) {
                    context2D.fill();
                }
                context2D.stroke();
                context2D.restore();
            };
            ScPoint2Canvas._p1 = U1.Vector3.New();
            return ScPoint2Canvas;
        }(Views.ScPoint));
        Views.ScPoint2Canvas = ScPoint2Canvas;
        var ScPolyLine2Canvas = (function (_super) {
            __extends(ScPolyLine2Canvas, _super);
            function ScPolyLine2Canvas() {
                _super.apply(this, arguments);
            }
            ScPolyLine2Canvas.prototype.OnDraw = function (context) {
                var contextX = context;
                var context2D = contextX.RenderingContext2D;
                context2D.save();
                var points = this.Points;
                var cp = ScPolyLine2Canvas._p1;
                var p0 = ScPolyLine2Canvas._p2;
                var p1 = ScPolyLine2Canvas._p3;
                var wm = this.WorldTransform;
                p0.SetTransform(points[0], wm);
                if (!context.IsScreenSpace)
                    contextX.WorldToScreen(p0, p0);
                context2D.strokeStyle = this.StrokeStr;
                context2D.lineWidth = this.StrokeThickness;
                if (context2D.setLineDash != undefined) {
                    if (this.StrokeDash != null) {
                        context2D.setLineDash(this.StrokeDash);
                    }
                    else {
                        context2D.setLineDash([]);
                    }
                }
                context2D.beginPath();
                context2D.moveTo(p0.X, p0.Y);
                context2D.globalAlpha = this.Alpha;
                var point_length = points.length;
                for (var j = 1; j < point_length; j++) {
                    p1.SetTransform(points[j], wm);
                    if (!context.IsScreenSpace)
                        contextX.WorldToScreen(p1, p1);
                    context2D.lineTo(p1.X, p1.Y);
                }
                if (this.Filled && this.Fill != null) {
                    context2D.fill();
                }
                context2D.stroke();
                context2D.restore();
            };
            ScPolyLine2Canvas._p1 = U1.Vector3.New();
            ScPolyLine2Canvas._p2 = U1.Vector3.New();
            ScPolyLine2Canvas._p3 = U1.Vector3.New();
            ScPolyLine2Canvas._empty_dash = [];
            return ScPolyLine2Canvas;
        }(Views.ScPolyLine));
        Views.ScPolyLine2Canvas = ScPolyLine2Canvas;
        var ScPolygon2Canvas = (function (_super) {
            __extends(ScPolygon2Canvas, _super);
            function ScPolygon2Canvas() {
                _super.apply(this, arguments);
            }
            ScPolygon2Canvas.prototype.OnDraw = function (context) {
                var contextX = context;
                var context2D = contextX.RenderingContext2D;
                context2D.save();
                var points = this.Points;
                var cp = ScPolygon2Canvas._p1;
                var p0 = ScPolygon2Canvas._p2;
                var p1 = ScPolygon2Canvas._p3;
                var wm = this.WorldTransform;
                p0.SetTransform(points[0], wm);
                if (!context.IsScreenSpace)
                    contextX.WorldToScreen(p0, p0);
                context2D.strokeStyle = this.StrokeStr;
                if (this.Filled && this.Fill != null)
                    context2D.fillStyle = this.FillStr;
                if (context2D.setLineDash != undefined) {
                    if (this.StrokeDash != null) {
                        context2D.setLineDash(this.StrokeDash);
                    }
                    else {
                        context2D.setLineDash(ScPolygon2Canvas._empty_dash);
                    }
                }
                context2D.globalAlpha = this.Alpha;
                context2D.lineWidth = this.StrokeThickness;
                context2D.beginPath();
                context2D.moveTo(p0.X, p0.Y);
                var point_length = points.length;
                for (var j = 1; j < point_length; j++) {
                    p1.SetTransform(points[j], wm);
                    if (!context.IsScreenSpace)
                        contextX.WorldToScreen(p1, p1);
                    context2D.lineTo(p1.X, p1.Y);
                }
                context2D.closePath();
                if (this.Filled && this.Fill != null) {
                    context2D.fill();
                }
                context2D.stroke();
                context2D.restore();
            };
            ScPolygon2Canvas._p1 = U1.Vector3.New();
            ScPolygon2Canvas._p2 = U1.Vector3.New();
            ScPolygon2Canvas._p3 = U1.Vector3.New();
            ScPolygon2Canvas._empty_dash = [];
            return ScPolygon2Canvas;
        }(Views.ScPolygon));
        Views.ScPolygon2Canvas = ScPolygon2Canvas;
        var ScText2Canvas = (function (_super) {
            __extends(ScText2Canvas, _super);
            function ScText2Canvas() {
                _super.apply(this, arguments);
            }
            ScText2Canvas.prototype.OnDraw = function (context) {
                var contextX = context;
                var context2D = contextX.RenderingContext2D;
                context2D.save();
                var wm = this.WorldTransform;
                var p0 = ScText2Canvas._p0;
                var p1 = ScText2Canvas._p1;
                var p2 = ScText2Canvas._p2;
                var p3 = ScText2Canvas._p3;
                var p4 = ScText2Canvas._p4;
                var p5 = ScText2Canvas._p5;
                var p6 = ScText2Canvas._p6;
                var min = this.BoundingBox.Min;
                var max = this.BoundingBox.Max;
                var lb = p0.Set(min.X, min.Y, 0).Transform(wm);
                var rb = p1.Set(max.X, min.Y, 0).Transform(wm);
                var rt = p2.Set(max.X, max.Y, 0).Transform(wm);
                var lt = p3.Set(min.X, max.Y, 0).Transform(wm);
                if (!context.IsScreenSpace) {
                    contextX.WorldToScreen(lb, lb);
                    contextX.WorldToScreen(rb, rb);
                    contextX.WorldToScreen(rt, rt);
                    contextX.WorldToScreen(lt, lt);
                }
                var right = p4.Set(rb.X - lb.X, rb.Y - lb.Y, 0);
                var ydir0 = p5.Set(-right.Y, right.X, 0);
                var ydir1 = p6.Set(lt.X - lb.X, lt.Y - lb.Y, 0);
                var loc = lb;
                if (U1.Vector3.Dot(ydir0, ydir1) > 0) {
                    loc = lt;
                }
                if (this.Background != null) {
                    context2D.save();
                    context2D.fillStyle = this.BackgroundStr;
                    context2D.beginPath();
                    context2D.moveTo(lb.X, lb.Y);
                    context2D.lineTo(rb.X, rb.Y);
                    context2D.lineTo(rt.X, rt.Y);
                    context2D.lineTo(lt.X, lt.Y);
                    context2D.closePath();
                    context2D.fill();
                    context2D.restore();
                }
                context2D.save();
                context2D.fillStyle = this.FillStr;
                var h = U1.Vector3.Distance(lb, lt);
                h /= this.Lines.length;
                context2D.font = "10px"; // "" + Math.round(h) + "px";
                right.Normalize();
                var a = U1.Vector3.Dot(ScText2Canvas.unit_x, right);
                a = Math.acos(a);
                if (right.Y < 0)
                    a *= -1;
                h = h / 10; //기본폰트 크기 10px
                var lines = this.Lines;
                var lstart = ScText2Canvas._p7.CopyFrom(loc);
                context2D.translate(lstart.X, lstart.Y);
                context2D.rotate(a);
                context2D.scale(h, h);
                var line_num = lines.length;
                for (var i = 0; i < line_num; i++) {
                    context2D.fillText(lines[i], 0, 10 * i - 10 * (line_num - 1) - 1);
                }
                context2D.restore();
                if (contextX.ShowTextBounding) {
                    context2D.beginPath();
                    context2D.moveTo(lb.X, lb.Y);
                    context2D.lineTo(rb.X, rb.Y);
                    context2D.lineTo(rt.X, rt.Y);
                    context2D.lineTo(lt.X, lt.Y);
                    context2D.closePath();
                    context2D.stroke();
                }
                context2D.restore();
            };
            ScText2Canvas.unit_x = U1.Vector3.UnitX;
            ScText2Canvas._p0 = U1.Vector3.New();
            ScText2Canvas._p1 = U1.Vector3.New();
            ScText2Canvas._p2 = U1.Vector3.New();
            ScText2Canvas._p3 = U1.Vector3.New();
            ScText2Canvas._p4 = U1.Vector3.New();
            ScText2Canvas._p5 = U1.Vector3.New();
            ScText2Canvas._p6 = U1.Vector3.New();
            ScText2Canvas._p7 = U1.Vector3.New();
            return ScText2Canvas;
        }(Views.ScText));
        Views.ScText2Canvas = ScText2Canvas;
        var ScMesh2Canvas = (function (_super) {
            __extends(ScMesh2Canvas, _super);
            function ScMesh2Canvas() {
                _super.apply(this, arguments);
            }
            ScMesh2Canvas.prototype.OnDraw = function (context) {
            };
            return ScMesh2Canvas;
        }(Views.ScMesh));
        Views.ScMesh2Canvas = ScMesh2Canvas;
        var ScEllipseCanvas = (function (_super) {
            __extends(ScEllipseCanvas, _super);
            function ScEllipseCanvas() {
                _super.apply(this, arguments);
            }
            ScEllipseCanvas.prototype.OnDraw = function (context) {
                var contextX = context;
                var context2D = contextX.RenderingContext2D;
                context2D.save();
                var points = this.Points;
                var wm = this.WorldTransform;
                var p0 = ScEllipseCanvas._p0;
                var p1 = ScEllipseCanvas._p1;
                p0.SetTransform(points[0], wm);
                if (!context.IsScreenSpace)
                    contextX.WorldToScreen(p0, p0);
                context2D.strokeStyle = this.StrokeStr;
                if (this.Filled && this.Fill != null)
                    context2D.fillStyle = this.FillStr;
                context2D.globalAlpha = this.Alpha;
                context2D.lineWidth = this.StrokeThickness;
                context2D.beginPath();
                context2D.moveTo(p0.X, p0.Y);
                var point_length = points.length;
                for (var j = 1; j < point_length; j++) {
                    p1.SetTransform(points[j], wm);
                    if (!context.IsScreenSpace)
                        contextX.WorldToScreen(p1, p1);
                    context2D.lineTo(p1.X, p1.Y);
                }
                context2D.closePath();
                if (this.Filled && this.Fill != null) {
                    context2D.fill();
                }
                context2D.stroke();
                context2D.restore();
            };
            ScEllipseCanvas._p0 = U1.Vector3.New();
            ScEllipseCanvas._p1 = U1.Vector3.New();
            return ScEllipseCanvas;
        }(Views.ScEllipse));
        Views.ScEllipseCanvas = ScEllipseCanvas;
    })(Views = U1.Views || (U1.Views = {}));
})(U1 || (U1 = {}));
///<reference path="./U1.Views.ts"/> 
var U1;
(function (U1) {
    var Views;
    (function (Views) {
        var VcTool = (function () {
            function VcTool() {
            }
            Object.defineProperty(VcTool.prototype, "View", {
                get: function () {
                    return this._view;
                },
                set: function (value) {
                    this._view = value;
                },
                enumerable: true,
                configurable: true
            });
            VcTool.prototype.OnAttach = function (view) {
            };
            VcTool.prototype.OnDetach = function (view) {
            };
            VcTool.prototype.OnMouseMove = function (ev) {
                return false;
            };
            VcTool.prototype.OnMouseUp = function (ev) {
                return false;
            };
            VcTool.prototype.OnMouseDown = function (ev) {
                return false;
            };
            VcTool.prototype.OnMouseWheel = function (ev) {
                return false;
            };
            VcTool.prototype.OnPress = function (ev) {
                return false;
            };
            VcTool.prototype.OnPanMove = function (ev) {
                return false;
            };
            VcTool.prototype.OnPanStart = function (ev) {
                return false;
            };
            VcTool.prototype.OnPanEnd = function (ev) {
                return false;
            };
            VcTool.prototype.OnPinch = function (ev) {
                return false;
            };
            VcTool.prototype.OnTouchStart = function (ev) {
                return false;
            };
            VcTool.prototype.OnTouchMove = function (ev) {
                return false;
            };
            VcTool.prototype.OnTouchEnd = function (ev) {
                return false;
            };
            return VcTool;
        }());
        Views.VcTool = VcTool;
        var DefaultTool = (function (_super) {
            __extends(DefaultTool, _super);
            function DefaultTool() {
                _super.call(this);
                this.isPanning = false;
            }
            DefaultTool.prototype.OnAttach = function (view) {
                _super.prototype.OnAttach.call(this, view);
            };
            DefaultTool.prototype.OnDetach = function (view) {
                _super.prototype.OnDetach.call(this, view);
            };
            DefaultTool.prototype.OnMouseMove = function (ev) {
                if (this.View.IsMouseDown) {
                    //왼쪽마우스 눌러진 경우
                    if (!this.isPanning) {
                        var dist = U1.Vector2.Distance(this.View.OldDn, this.View.CurMv);
                        if (dist > 4) {
                            this.isPanning = true;
                        }
                    }
                    if (this.isPanning)
                        this.View.PanPlane(this.View.WorkingPlane, this.View.OldMv, this.View.CurMv);
                    return true;
                }
                else {
                    this.isPanning = false;
                }
                return _super.prototype.OnMouseMove.call(this, ev);
            };
            DefaultTool.prototype.OnMouseUp = function (ev) {
                this.isPanning = false;
                if (ev.button === 0 || ev.buttons === 1) {
                    var res = this.View.Pick(this.View.CurDn);
                    this.View.ActiveControl = null;
                    if (res != null && res.Node != null && res.Node.Control != null) {
                        var vc = res.Node.Control;
                        vc.OnMouseUp(ev);
                    }
                    else if (res != null && res.Control != null) {
                        var vc = res.Control;
                        vc.OnMouseUp(ev);
                    }
                    if (res != null)
                        res.Release();
                    return true;
                }
                return _super.prototype.OnMouseUp.call(this, ev);
            };
            DefaultTool.prototype.OnMouseDown = function (ev) {
                if (ev.button === 0 || ev.buttons === 1) {
                    var res = this.View.Pick(this.View.CurDn);
                    this.View.ActiveControl = null;
                    if (res != null && res.Node != null && res.Node.Presenter != null) {
                        this.View.Document.Selection.Add(res.Node.Presenter.Element, true);
                    }
                    else if (res != null && res.Node != null && res.Node.Control != null) {
                        var vc = res.Node.Control;
                        vc.OnMouseDown(ev);
                    }
                    else if (res != null && res.Control != null) {
                        var vc = res.Control;
                        vc.OnMouseDown(ev);
                    }
                    else {
                        this.View.Document.Selection.Clear();
                    }
                    if (res != null)
                        res.Release();
                    return true;
                }
                return _super.prototype.OnMouseDown.call(this, ev);
            };
            DefaultTool.prototype.OnMouseWheel = function (ev) {
                var delta = ev.wheelDelta ? ev.wheelDelta : -ev.detail;
                this.View.ZoomView(this.View.CurMv, delta);
                return true;
            };
            DefaultTool.prototype.OnPanMove = function (ev) {
                this.View.PanPlane(this.View.WorkingPlane, this.View.OldMv, this.View.CurMv);
                return true;
            };
            DefaultTool.prototype.OnPanStart = function (ev) {
                return false;
            };
            DefaultTool.prototype.OnPanEnd = function (ev) {
                return false;
            };
            DefaultTool.prototype.OnPinch = function (ev) {
                return false;
            };
            DefaultTool.prototype.OnTouchStart = function (ev) {
                return false;
            };
            DefaultTool.prototype.OnTouchMove = function (ev) {
                this.View.PanPlane(this.View.WorkingPlane, this.View.OldMv, this.View.CurMv);
                return true;
            };
            DefaultTool.prototype.OnTouchEnd = function (ev) {
                return false;
            };
            DefaultTool.prototype.Finish = function () {
                this.View.ActiveTool = null;
            };
            return DefaultTool;
        }(VcTool));
        Views.DefaultTool = DefaultTool;
    })(Views = U1.Views || (U1.Views = {}));
})(U1 || (U1 = {}));
///<reference path="./U1.Views.ts"/> 
var U1;
(function (U1) {
    var Views;
    (function (Views) {
        var VcXForm2_Node = (function () {
            function VcXForm2_Node(node) {
                this.Node = node;
                this.Transform = U1.Matrix4.New();
                this.Transform.CopyFrom(node.Transform);
            }
            return VcXForm2_Node;
        }());
        var VcXForm2_HP = (function () {
            function VcXForm2_HP(name) {
                this.m_pos = U1.Vector3.Zero;
                this.Opp = U1.Vector3.Zero;
                this.Dir = U1.Vector3.Zero;
                this.DragStart = U1.Vector3.Zero;
                this.PrevPos = U1.Vector3.Zero;
                this.CurPos = U1.Vector3.Zero;
                this.Name = name;
            }
            VcXForm2_HP.prototype.Update = function (xform, pos, opp) {
                if (this.m_node == null) {
                    var point = xform.Scene.newPoint();
                    this.m_node = xform.Scene.Overlay.AddChild(point);
                    point.Radius = VcXForm2_HP._radius;
                    point.Fill = U1.Colors.Gray;
                    point.Filled = true;
                }
                this.Opp.CopyFrom(opp);
                this.Dir.SetSubtract(pos, opp).Normalize();
                this.m_pos.CopyFrom(pos);
                this.m_node.Transform.SetCreateTranslation(this.m_pos);
            };
            VcXForm2_HP.prototype.CheckIntersect = function (isectContext) {
                return this.m_node.CheckIntersect(isectContext);
            };
            VcXForm2_HP.prototype.IsInterSect = function (xform, screen_pos) {
                var sp = VcXForm2_HP._tmp_v30;
                var dist_sp = VcXForm2_HP._radius * VcXForm2_HP._radius;
                var cam = xform.Scene.Camera;
                cam.WorldToScreen(this.m_pos, sp);
                sp.Z = screen_pos.Z;
                if (U1.Vector3.DistanceSquared(sp, screen_pos) <= dist_sp)
                    return true;
                return false;
            };
            VcXForm2_HP.prototype.Clear = function () {
                if (this.m_node != null)
                    this.m_node.Delete();
                this.m_node = null;
            };
            VcXForm2_HP.prototype.OnMouseMove = function (xform, ev) {
                this.Move(xform);
                return true;
            };
            VcXForm2_HP.prototype.OnMouseUp = function (xform, ev) {
                xform.EndTransform();
                return true;
            };
            VcXForm2_HP.prototype.OnMouseDown = function (view, ev) {
                return false;
            };
            VcXForm2_HP.prototype.OnPanMove = function (xform, ev) {
                this.Move(xform);
                return true;
            };
            VcXForm2_HP.prototype.BeginTransform = function (xform) {
                xform.View.Scene.Camera.ScreenToPlane(xform.View.CurDn, xform.View.WorkingPlane, this.CurPos);
                var v = U1.Vector3.Subtract(this.CurPos, this.Opp);
                var t = U1.Vector3.Dot(this.Dir, v);
                this.CurPos.SetScaleAdd(this.Opp, t, this.Dir);
                v.Release();
                this.DragStart.CopyFrom(this.CurPos);
                //this.DragStart.CopyFrom(this.m_pos); 
                return true;
            };
            VcXForm2_HP.prototype.Move = function (xform) {
                this.PrevPos.CopyFrom(this.CurPos);
                xform.View.Scene.Camera.ScreenToPlane(xform.View.CurMv, xform.View.WorkingPlane, this.CurPos);
                var v = U1.Vector3.Subtract(this.CurPos, this.Opp);
                var t = U1.Vector3.Dot(this.Dir, v);
                this.CurPos.SetScaleAdd(this.Opp, t, this.Dir);
                v.Release();
                xform.Scale(this.Opp, this.PrevPos, this.CurPos);
            };
            VcXForm2_HP._radius = 8;
            VcXForm2_HP._tmp_v30 = U1.Vector3.Zero;
            return VcXForm2_HP;
        }());
        var VcXForm2_Rotate = (function (_super) {
            __extends(VcXForm2_Rotate, _super);
            function VcXForm2_Rotate(name) {
                _super.call(this, name);
                this.Center = U1.Vector3.Zero;
                this.Angle = 0;
            }
            VcXForm2_Rotate.prototype.UpdateRot = function (xform, front, back) {
                if (this.m_node == null) {
                    var pt = xform.Scene.newPoint();
                    this.m_node = xform.Scene.Overlay.AddChild(pt);
                    pt.Radius = VcXForm2_HP._radius;
                    pt.Fill = U1.Colors.Gray;
                    pt.Filled = true;
                }
                var dir = U1.Vector3.New().SetSubtract(back, front).Normalize();
                var p1 = U1.Vector3.New().CopyFrom(back);
                this.m_pos.SetAdd(dir, back);
                xform.Scene.Camera.WorldToScreen(p1, p1);
                xform.Scene.Camera.WorldToScreen(this.m_pos, this.m_pos);
                p1.Z = this.m_pos.Z;
                var dist = U1.Vector3.Distance(p1, this.m_pos);
                this.m_pos.SetScaleAdd(back, 40 / dist, dir);
                this.m_node.Transform.SetCreateTranslation(this.m_pos);
                dir.Release();
                p1.Release();
            };
            VcXForm2_Rotate.prototype.BeginTransform = function (xform) {
                this.Angle = 0;
                this.Center.CopyFrom(xform.CurOBB.Center);
                xform.View.Scene.Camera.ScreenToPlane(xform.View.CurDn, xform.View.WorkingPlane, this.PrevPos);
                xform.View.Scene.Camera.ScreenToPlane(xform.View.CurDn, xform.View.WorkingPlane, this.CurPos);
                return true;
            };
            VcXForm2_Rotate.prototype.OnMouseDn = function (xform, ev) {
                return true;
            };
            VcXForm2_Rotate.prototype.OnMouseMove = function (xform, ev) {
                this.Move(xform);
                return true;
            };
            VcXForm2_Rotate.prototype.OnPanMove = function (view, ev) {
                this.Move(view);
                return true;
            };
            VcXForm2_Rotate.prototype.Move = function (xform) {
                this.PrevPos.CopyFrom(this.CurPos);
                xform.View.Scene.Camera.ScreenToPlane(xform.View.CurMv, xform.View.WorkingPlane, this.CurPos);
                var norm = xform.View.WorkingPlane.Normal;
                var v1 = U1.Vector3.Subtract(this.PrevPos, this.Center).Normalize();
                var v2 = U1.Vector3.Subtract(this.CurPos, this.Center).Normalize();
                var ang = U1.GeometryHelper3.AngleCCW(v1, norm, v2);
                this.Angle += ang;
                var neg_cent = U1.Vector3.Negate(this.Center);
                var m0 = U1.Matrix4.CreateTranslation(neg_cent);
                var m1 = U1.Matrix4.CreateFromAxisAngle(norm, ang);
                var m2 = U1.Matrix4.CreateTranslation(this.Center);
                m0.Multiply(m1).Multiply(m2);
                xform.Translate(m0);
                v1.Release();
                v2.Release();
                neg_cent.Release();
                m0.Release();
                m1.Release();
                m2.Release();
            };
            VcXForm2_Rotate.prototype.OnMouseUp = function (view, ev) {
                view.EndTransform();
                return true;
            };
            return VcXForm2_Rotate;
        }(VcXForm2_HP));
        var VcXForm2_Box = (function (_super) {
            __extends(VcXForm2_Box, _super);
            function VcXForm2_Box(name) {
                _super.call(this, name);
            }
            VcXForm2_Box.prototype.UpdateBox = function (xform, lf, lk, rk, rf) {
                if (this.m_node == null) {
                    var pgon = xform.Scene.newPolygon();
                    this.m_node = xform.Scene.Overlay.AddChild(pgon);
                    this.m_node.Order = -1;
                    this.m_node.StrokeDash = [1];
                    pgon.Fill = new U1.Color(0, 0, 255);
                    pgon.Alpha = 0.3;
                    pgon.IsPickable = false;
                    pgon.Points = [
                        U1.Vector3.Zero,
                        U1.Vector3.Zero,
                        U1.Vector3.Zero,
                        U1.Vector3.Zero
                    ];
                    pgon.Stroke = U1.Colors.Blue;
                    pgon.StrokeThickness = 4;
                }
                var polygon = this.m_node;
                polygon.Points[0].CopyFrom(lf);
                polygon.Points[1].CopyFrom(lk);
                polygon.Points[2].CopyFrom(rk);
                polygon.Points[3].CopyFrom(rf);
            };
            return VcXForm2_Box;
        }(VcXForm2_HP));
        var VcXForm2 = (function (_super) {
            __extends(VcXForm2, _super);
            function VcXForm2() {
                _super.apply(this, arguments);
                this.m_curObb = new U1.OrientedBox3();
                this.m_oldObb = new U1.OrientedBox3();
                this.m_mode = 0;
                this.m_prev_loc = U1.Vector3.Zero;
                this.m_cur_loc = U1.Vector3.Zero;
                this.m_points = {
                    "Front": new VcXForm2_HP("Front"),
                    "Back": new VcXForm2_HP("Back"),
                    "Left": new VcXForm2_HP("Left"),
                    "Right": new VcXForm2_HP("Right"),
                    "LeftFront": new VcXForm2_HP("LeftFront"),
                    "RightFront": new VcXForm2_HP("RightFront"),
                    "LeftBack": new VcXForm2_HP("LeftBack"),
                    "RightBack": new VcXForm2_HP("RightBack"),
                    "Rotate": new VcXForm2_Rotate("Rotate"),
                    "Box": new VcXForm2_Box("Box")
                };
            }
            Object.defineProperty(VcXForm2.prototype, "CurOBB", {
                //Props
                get: function () {
                    return this.m_curObb;
                },
                enumerable: true,
                configurable: true
            });
            VcXForm2.prototype.CheckIntersect = function (isectContext) {
                for (var idx in this.m_points) {
                    var node = this.m_points[idx];
                    var isect = node.CheckIntersect(isectContext);
                    if (isect != null)
                        return isect;
                }
                return null;
            };
            VcXForm2.prototype.GetIntersectNode = function (screen_pos) {
                for (var idx in this.m_points) {
                    var node = this.m_points[idx];
                    if (node.IsInterSect(this, screen_pos))
                        return node;
                }
                return null;
            };
            VcXForm2.prototype.Init = function (nodes) {
                this.m_selected_nodes = {};
                var min = U1.Vector3.New().SetMaxValue();
                var max = U1.Vector3.New().SetMinValue();
                var p = U1.Vector3.New();
                var tm = U1.Matrix4.New();
                for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {
                    var node = nodes_1[_i];
                    this.m_selected_nodes[node.Handle] = new VcXForm2_Node(node);
                    var wm = node.WorldTransform;
                    tm.CopyFrom(wm);
                    node.BoundingBox.GetCorners()
                        .forEach(function (v_, i_) {
                        p.SetTransform(v_, tm);
                        min.Minimize(p);
                        max.Maximize(p);
                    });
                }
                this.m_curObb.Center.SetAdd(min, max).Scale(0.5);
                this.m_curObb.Axes[0].Set(1, 0, 0);
                this.m_curObb.Axes[1].Set(0, 1, 0);
                this.m_curObb.Axes[2].Set(0, 0, 1);
                this.m_curObb.Extents[0] = (max.X - min.X) * 0.5;
                this.m_curObb.Extents[1] = (max.Y - min.Y) * 0.5;
                this.m_curObb.Extents[2] = (max.Z - min.Z) * 0.5;
                min.Release();
                max.Release();
                p.Release();
                tm.Release();
            };
            VcXForm2.prototype.Update = function () {
                var lft = this.m_curObb.LFT(U1.Vector3.New());
                var rft = this.m_curObb.RFT(U1.Vector3.New());
                var lkt = this.m_curObb.LKT(U1.Vector3.New());
                var rkt = this.m_curObb.RKT(U1.Vector3.New());
                var front = U1.Vector3.New().SetAdd(lft, rft).Scale(0.5);
                var back = U1.Vector3.New().SetAdd(lkt, rkt).Scale(0.5);
                var left = U1.Vector3.New().SetAdd(lft, lkt).Scale(0.5);
                var right = U1.Vector3.New().SetAdd(rft, rkt).Scale(0.5);
                /*
                this.m_points.LeftFront.Update(this, lft, rkt);
                this.m_points.RightFront.Update(this, rft, lkt);
                this.m_points.LeftBack.Update(this, lkt, rft);
                this.m_points.RightBack.Update(this, rkt, lft);
                this.m_points.Back.Update(this, back, front);
                this.m_points.Front.Update(this, front, back);
                this.m_points.Left.Update(this, left, right);
                this.m_points.Right.Update(this, right, left);
                */
                this.m_points.Box.UpdateBox(this, lft, lkt, rkt, rft);
                /*
                this.m_points.Rotate.UpdateRot(this, front, back);
                */
                lft.Release();
                rft.Release();
                lkt.Release();
                rkt.Release();
                front.Release();
                back.Release();
                left.Release();
                right.Release();
            };
            VcXForm2.prototype.Clear = function () {
                if (this.m_points != null) {
                    for (var idx in this.m_points) {
                        var node = this.m_points[idx];
                        node.Clear();
                    }
                }
            };
            VcXForm2.prototype.OnMouseMove = function (ev) {
                if (this.m_active_hp != null &&
                    this.m_active_hp.OnMouseMove(this, ev)) {
                    return true;
                }
                if (this.m_mode == 1) {
                    this.Move();
                    return true;
                }
                return false;
            };
            VcXForm2.prototype.OnMouseUp = function (ev) {
                if (this.m_active_hp != null &&
                    this.m_active_hp.OnMouseUp(this, ev)) {
                    return true;
                }
                if (this.m_mode > 0) {
                    if (this.EndTransform())
                        return true;
                    this.m_mode = 0;
                }
                return false;
            };
            VcXForm2.prototype.OnMouseDown = function (ev) {
                if (ev.button == 0) {
                    if (this.PrepareTransform())
                        return true;
                    if (this.m_active_hp != null &&
                        this.m_active_hp.OnMouseDown(this, ev)) {
                        return true;
                    }
                }
                return false;
            };
            VcXForm2.prototype.OnMouseWheel = function (ev) {
                return false;
            };
            VcXForm2.prototype.OnPanMove = function (ev) {
                if (this.m_active_hp != null &&
                    this.m_active_hp.OnPanMove(this, ev)) {
                    return true;
                }
                if (this.m_mode == 1) {
                    this.Move();
                    return true;
                }
                return false;
            };
            VcXForm2.prototype.OnPanStart = function (ev) {
                if (this.PrepareTransform())
                    return true;
                return false;
            };
            VcXForm2.prototype.OnPanEnd = function (ev) {
                if (this.EndTransform())
                    return true;
                return false;
            };
            VcXForm2.prototype.OnPinch = function (ev) {
                return false;
            };
            VcXForm2.prototype.Move = function () {
                if (this.m_mode != 1)
                    return;
                this.m_prev_loc.CopyFrom(this.m_cur_loc);
                this.View.Scene.Camera.ScreenToPlane(this.View.CurMv, this.View.WorkingPlane, this.m_cur_loc);
                var offset = U1.Vector3.Subtract(this.m_cur_loc, this.m_prev_loc);
                var tm = U1.Matrix4.CreateTranslation(offset);
                this.m_curObb.Transform(tm);
                for (var id in this.m_selected_nodes) {
                    var nd = this.m_selected_nodes[id];
                    nd.Node.Transform.Multiply(tm);
                }
                offset.Release();
                tm.Release();
                this.View.Invalidate();
                return true;
            };
            VcXForm2.prototype.PrepareTransform = function () {
                if (this.m_mode != 0)
                    return false;
                var screen_pos = U1.Vector3.New().Set(this.View.CurDn.X, this.View.CurDn.Y, 0);
                var isect_node = this.GetIntersectNode(screen_pos);
                if (isect_node != null) {
                    this.m_active_hp = isect_node;
                    this.m_mode = 2;
                    this.BeginTransform();
                    return true;
                }
                var pkResult = this.View.Pick(this.View.CurDn);
                if (pkResult.Node != null && this.m_selected_nodes[pkResult.Node.Handle] != null) {
                    if (pkResult.Node.Presenter != null && pkResult.Node.Presenter.CanMove()) {
                        this.m_mode = 1;
                        this.View.Scene.Camera.ScreenToPlane(this.View.CurDn, this.View.WorkingPlane, this.m_cur_loc);
                        this.BeginTransform();
                        return true;
                    }
                }
                return false;
            };
            VcXForm2.prototype.BeginTransform = function () {
                this.m_oldObb.CopyFrom(this.m_curObb);
                if (this.m_active_hp != null)
                    this.m_active_hp.BeginTransform(this);
                return true;
            };
            VcXForm2.prototype.Translate = function (matrix) {
                this.m_curObb.Transform(matrix);
                this.View.Invalidate();
            };
            VcXForm2.prototype.Scale = function (center, p1, p2) {
                this.CurOBB.ScaleWithTwoPoints(center, p1, p2);
                this.View.Invalidate();
            };
            VcXForm2.prototype.EndTransform = function () {
                var z = U1.Vector3.UnitZ;
                if (this.m_mode == 1 || this.m_active_hp != null) {
                    if (this.m_mode == 1) {
                        this.ApplyMove();
                    }
                    else if (this.m_active_hp == this.m_points.Rotate) {
                        var rot = this.m_points.Rotate;
                        var angle = U1.GeometryHelper3.AngleCCW(this.m_oldObb.Axes[0], z, this.m_curObb.Axes[0]);
                        this.ApplyRotate(this.m_oldObb.Center, z, angle);
                    }
                    else if (this.m_active_hp != null && this.m_active_hp != this.m_points.Box) {
                        var cent = this.m_active_hp.Opp;
                        var p1 = this.m_active_hp.DragStart;
                        var p2 = this.m_active_hp.CurPos;
                        this.ApplyScale(cent, p1, p2);
                    }
                }
                z.Release();
                this.m_active_hp = null;
                this.m_mode = 0;
                return true;
            };
            VcXForm2.prototype.ApplyMove = function () {
                this.View.Document.BeginTransaction();
                if (this.m_mode == 1) {
                    var v = U1.Vector3.Subtract(this.m_curObb.Center, this.m_oldObb.Center);
                    var m = U1.Matrix4.CreateTranslation(v);
                    for (var id in this.m_selected_nodes) {
                        var nd = this.m_selected_nodes[id];
                        nd.Node.Transform = nd.Transform;
                        nd.Node.Presenter.AddTransform(m);
                    }
                    v.Release();
                    m.Release();
                }
                this.View.Document.EndTransaction();
            };
            VcXForm2.prototype.ApplyRotate = function (center, axis, angle) {
                var neg = U1.Vector3.Negate(center);
                var m = U1.Matrix4.CreateTranslation(neg);
                var rm = U1.Matrix4.CreateFromAxisAngle(axis, angle);
                var tm1 = U1.Matrix4.CreateTranslation(center);
                m.Multiply(rm).Multiply(tm1);
                this.View.Document.BeginTransaction();
                for (var id in this.m_selected_nodes) {
                    var nd = this.m_selected_nodes[id];
                    nd.Node.Transform = nd.Transform;
                    nd.Node.Presenter.AddTransform(m);
                }
                this.View.Document.EndTransaction();
                m.Release();
                rm.Release();
                tm1.Release();
            };
            VcXForm2.prototype.ApplyScale = function (center, p1, p2) {
                var obb = U1.OrientedBox3.Identity;
                obb.Axes[0].CopyFrom(this.m_oldObb.Axes[0]);
                obb.Axes[1].CopyFrom(this.m_oldObb.Axes[1]);
                obb.Axes[2].CopyFrom(this.m_oldObb.Axes[2]);
                var m = this.CreateOBBScaleMatrix(obb, center, p1, p2);
                this.View.Document.BeginTransaction();
                for (var id in this.m_selected_nodes) {
                    var nd = this.m_selected_nodes[id];
                    nd.Node.Transform = nd.Transform;
                    nd.Node.Presenter.AddTransform(m);
                }
                this.View.Document.EndTransaction();
                obb.Release();
                m.Release();
            };
            VcXForm2.prototype.CreateOBBScaleMatrix = function (obb, center, from, to) {
                var xformedOBB = obb.Clone().ScaleWithTwoPoints(center, from, to);
                var sx = xformedOBB.Extents[0] / obb.Extents[0];
                var sy = xformedOBB.Extents[1] / obb.Extents[1];
                var sz = xformedOBB.Extents[2] / obb.Extents[2];
                var loc = xformedOBB.Center;
                var scl = U1.Vector3.New().Set(sx, sy, sz);
                var m = U1.Matrix4.CreateScale(scl);
                var tm = U1.Matrix4.CreateTranslation(loc);
                m.Multiply(tm);
                tm.Release();
                scl.Release();
                xformedOBB.Release();
                return m;
            };
            VcXForm2._tmp_m0 = U1.Matrix4.Identity;
            VcXForm2._tmp_m1 = U1.Matrix4.Identity;
            VcXForm2._tmp_v30 = U1.Vector3.Zero;
            VcXForm2._tmp_v31 = U1.Vector3.Zero;
            VcXForm2._tmp_v32 = U1.Vector3.Zero;
            VcXForm2._radius = 10;
            VcXForm2._fillcolor = U1.Colors.LightGray;
            return VcXForm2;
        }(Views.VControl));
        Views.VcXForm2 = VcXForm2;
    })(Views = U1.Views || (U1.Views = {}));
})(U1 || (U1 = {}));
///<reference path="../Math/U1Math.ts"/> 
///<reference path="../Math/CGAL.ts"/> 
var U1;
(function (U1) {
    var Visualize;
    (function (Visualize) {
        (function (VisPrimitiveTypes) {
            VisPrimitiveTypes[VisPrimitiveTypes["Points"] = 0] = "Points";
            VisPrimitiveTypes[VisPrimitiveTypes["Lines"] = 1] = "Lines";
            VisPrimitiveTypes[VisPrimitiveTypes["Triangles"] = 2] = "Triangles";
        })(Visualize.VisPrimitiveTypes || (Visualize.VisPrimitiveTypes = {}));
        var VisPrimitiveTypes = Visualize.VisPrimitiveTypes;
        (function (VisAttributeKinds) {
            VisAttributeKinds[VisAttributeKinds["Color"] = 0] = "Color";
            VisAttributeKinds[VisAttributeKinds["DiffuseColor"] = 1] = "DiffuseColor";
            VisAttributeKinds[VisAttributeKinds["SpecularColor"] = 2] = "SpecularColor";
            VisAttributeKinds[VisAttributeKinds["LineColor"] = 3] = "LineColor";
            VisAttributeKinds[VisAttributeKinds["MarkColor"] = 4] = "MarkColor";
            VisAttributeKinds[VisAttributeKinds["LineWeight"] = 5] = "LineWeight";
        })(Visualize.VisAttributeKinds || (Visualize.VisAttributeKinds = {}));
        var VisAttributeKinds = Visualize.VisAttributeKinds;
        var VisPrimitiveData = (function () {
            function VisPrimitiveData() {
            }
            return VisPrimitiveData;
        }());
        Visualize.VisPrimitiveData = VisPrimitiveData;
        var VisAttributeBase = (function () {
            function VisAttributeBase() {
            }
            return VisAttributeBase;
        }());
        Visualize.VisAttributeBase = VisAttributeBase;
        var VisAttribute = (function (_super) {
            __extends(VisAttribute, _super);
            function VisAttribute() {
                _super.apply(this, arguments);
            }
            return VisAttribute;
        }(VisAttributeBase));
        Visualize.VisAttribute = VisAttribute;
        (function (ColorTargets) {
            ColorTargets[ColorTargets["Lines"] = 0] = "Lines";
            ColorTargets[ColorTargets["Marks"] = 1] = "Marks";
        })(Visualize.ColorTargets || (Visualize.ColorTargets = {}));
        var ColorTargets = Visualize.ColorTargets;
        var VisSceneGraph = (function () {
            function VisSceneGraph() {
                this._rootNodes = {};
            }
            VisSceneGraph.prototype.AddRootNode = function (name) {
                var node = new VisNode();
                this._rootNodes[name] = node;
                return node;
            };
            VisSceneGraph.prototype.GetRootNode = function (name) {
                if (this._rootNodes[name] != null) {
                    return this._rootNodes[name];
                }
                return null;
            };
            return VisSceneGraph;
        }());
        Visualize.VisSceneGraph = VisSceneGraph;
        var VisNode = (function () {
            function VisNode() {
            }
            VisNode.prototype.MarkGeometryChanged = function () {
                this.GeometryVer++;
                if (this.Parent != null) {
                    this.Parent.MarkGeometryChanged();
                }
                return this;
            };
            VisNode.prototype.MarkTransformChanged = function () {
                this.TransformVer++;
                if (this.Parent != null) {
                    this.TransformVer++;
                    this.Parent.MarkTransformChanged();
                }
                return this;
            };
            VisNode.prototype.SetAttr = function (key, value) {
                if (this._attrs == null)
                    this._attrs = {};
                this._attrs[key] = value;
            };
            VisNode.prototype.GetAttr = function (key) {
                if (this._attrs != null && this._attrs[key] != null) {
                    var attr = this._attrs[key];
                    if (attr != null) {
                        return attr;
                    }
                }
                return null;
            };
            VisNode.prototype.SetColor = function (color) {
                this.SetAttr(VisAttributeKinds.Color, color);
                return this;
            };
            VisNode.prototype.GetColor = function () {
                return this.GetAttr(VisAttributeKinds.Color);
            };
            //#endregion Attributes
            VisNode.prototype.InsertGeometry = function (geometry) {
                geometry.Node = this;
                if (this.Geometries == null) {
                    this.Geometries = new Array();
                }
                this.Geometries.push(geometry);
            };
            VisNode.prototype.RemoveGeometry = function (geometry) {
                if (this.Geometries == null)
                    return;
                var idx = this.Geometries.indexOf(geometry);
                if (idx >= 0) {
                    this.Children.splice(idx, 1);
                    geometry.Node = null;
                }
            };
            VisNode.prototype.RemoveChild = function (ch) {
                if (this.Children == null)
                    return;
                var idx = this.Children.indexOf(ch);
                if (idx >= 0) {
                    this.Children.splice(idx, 1);
                    ch.Parent = null;
                }
            };
            return VisNode;
        }());
        Visualize.VisNode = VisNode;
        var VisNodeInclude = (function (_super) {
            __extends(VisNodeInclude, _super);
            function VisNodeInclude() {
                _super.apply(this, arguments);
            }
            return VisNodeInclude;
        }(VisNode));
        Visualize.VisNodeInclude = VisNodeInclude;
        var VisGeometry = (function () {
            function VisGeometry() {
                this._boundingBox = new U1.BoundingBox();
            }
            Object.defineProperty(VisGeometry.prototype, "BoundingBox", {
                //#region Props
                get: function () {
                    if (this._boudningBoxInvalid) {
                        this._boudningBoxInvalid = false;
                        this.UpdateBoundingBox(this._boundingBox);
                    }
                    return this._boundingBox;
                },
                enumerable: true,
                configurable: true
            });
            //#endregion
            //#region Methods
            VisGeometry.prototype.MarkChanged = function () {
                this.Ver++;
                this._boudningBoxInvalid = true;
                if (this.Node != null) {
                    this.Node.MarkGeometryChanged();
                }
                return this;
            };
            VisGeometry.prototype.GetPrimitiveData = function () {
                return null;
            };
            //#endregion
            //#region Vietual Methods
            VisGeometry.prototype.UpdateBoundingBox = function (boundingBox) {
            };
            return VisGeometry;
        }());
        Visualize.VisGeometry = VisGeometry;
        (function (VisFaceStates) {
            VisFaceStates[VisFaceStates["None"] = 0] = "None";
            VisFaceStates[VisFaceStates["Cutted"] = 2] = "Cutted";
            VisFaceStates[VisFaceStates["Cap"] = 4] = "Cap";
            VisFaceStates[VisFaceStates["Flat"] = 8] = "Flat";
        })(Visualize.VisFaceStates || (Visualize.VisFaceStates = {}));
        var VisFaceStates = Visualize.VisFaceStates;
        var VisFace = (function () {
            function VisFace(boundary) {
                if (boundary === void 0) { boundary = null; }
                this.Handle = ++VisFace.s_handle;
                this.State = VisFaceStates.None;
                this.Normal = U1.Vector3.Zero;
                if (boundary != null) {
                    this.Boundary = boundary;
                }
            }
            Object.defineProperty(VisFace.prototype, "IsFlat", {
                get: function () {
                    return (this.State & VisFaceStates.Flat) == VisFaceStates.Flat;
                },
                set: function (isFlat) {
                    if (isFlat)
                        this.State = this.State | VisFaceStates.Flat;
                    else
                        this.State = this.State & ~VisFaceStates.Flat;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(VisFace.prototype, "IsCap", {
                get: function () {
                    return (this.State & VisFaceStates.Cap) == VisFaceStates.Cap;
                },
                set: function (value) {
                    if (value)
                        this.State = this.State | VisFaceStates.Cap;
                    else
                        this.State = this.State & ~VisFaceStates.Cap;
                },
                enumerable: true,
                configurable: true
            });
            VisFace.prototype.GetPointIndics = function (indics) {
                if (this.Boundary != null) {
                    for (var _i = 0, _a = this.Boundary; _i < _a.length; _i++) {
                        var idx = _a[_i];
                        indics[idx] = idx;
                    }
                }
                if (this.Holes != null) {
                    for (var _b = 0, _c = this.Holes; _b < _c.length; _b++) {
                        var hole = _c[_b];
                        for (var _d = 0, hole_4 = hole; _d < hole_4.length; _d++) {
                            var idx = hole_4[_d];
                            indics[idx] = idx;
                        }
                    }
                }
            };
            VisFace.prototype.Clone = function (vertex_offset) {
                if (vertex_offset === void 0) { vertex_offset = 0; }
                var result = new VisFace();
                result.Boundary = this.Boundary.slice();
                result.Normal = this.Normal,
                    result.State = this.State;
                if (this.Holes != null) {
                    result.Holes = new Array();
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        var copy_hole = hole.slice();
                        result.Holes.push(copy_hole);
                    }
                }
                if (vertex_offset != 0) {
                    for (var i = 0; i < result.Boundary.length; i++) {
                        result.Boundary[i] += vertex_offset;
                    }
                    if (result.Holes != null) {
                        for (var i = 0; i < result.Holes.length; i++) {
                            var hole = result.Holes[i];
                            for (var j = 0; j < hole.length; j++) {
                                hole[j] += vertex_offset;
                            }
                        }
                    }
                }
                return result;
            };
            VisFace.prototype.ReplaceIndics = function (indicsMap) {
                for (var i = 0; i < this.Boundary.length; i++) {
                    this.Boundary[i] = indicsMap[this.Boundary[i]];
                }
                if (this.Holes != null) {
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        for (var i = 0; i < hole.length; i++) {
                            hole[i] = indicsMap[hole[i]];
                        }
                    }
                }
            };
            VisFace.prototype.UpdateNormal = function (vertics) {
                if (this.Normal.X != 0 && this.Normal.Y != 0 && this.Normal.Z != 0)
                    return;
                var points = new Array(this.Boundary.length);
                for (var i = 0; i < this.Boundary.length; i++) {
                    points[i] = vertics[this.Boundary[i]];
                }
                U1.GeometryHelper3.PolygonNormal(points, 0, points.length, true, this.Normal);
            };
            VisFace.prototype.GetUV = function (u, v) {
                U1.GeometryHelper3.GetArbitraryAxis(this.Normal, u, v);
            };
            VisFace.Project = function (p, uaxis, vaxis) {
                return new U1.Vector2(U1.Vector3.Dot(p, uaxis), U1.Vector3.Dot(p, vaxis));
            };
            VisFace.PlaneIntersection = function (polygon, vertics, plane) {
                var num_boundary = polygon.length;
                var sign = 0;
                for (var _i = 0, polygon_2 = polygon; _i < polygon_2.length; _i++) {
                    var pi = polygon_2[_i];
                    var p = vertics[pi];
                    var d = plane.DotCoordinate(p);
                    if (d < -VisShell.EPSILON) {
                        if (sign > 0)
                            return U1.PlaneIntersectionTypeEnum.Intersecting;
                        sign = -1;
                    }
                    else if (d > VisShell.EPSILON) {
                        if (sign < 0)
                            return U1.PlaneIntersectionTypeEnum.Intersecting;
                        sign = 1;
                    }
                }
                return sign > 0 ? U1.PlaneIntersectionTypeEnum.Front : U1.PlaneIntersectionTypeEnum.Back;
            };
            VisFace.GetCuttingEdges = function (polygon, vertics, plane, result) {
                var hasCuttingEdge = false;
                var polygon_num = polygon.length;
                for (var ci = 0; ci < polygon_num; ci++) {
                    var ni = (ci + 1) % polygon_num;
                    var cpi = polygon[ci];
                    var npi = polygon[ni];
                    var cp = vertics[cpi];
                    var np = vertics[npi];
                    var d = plane.DotCoordinate(cp);
                    if (d > VisShell.EPSILON || d < -VisShell.EPSILON)
                        continue;
                    d = plane.DotCoordinate(np);
                    if (d > VisShell.EPSILON || d < -VisShell.EPSILON)
                        continue;
                    result.push(cpi);
                    result.push(npi);
                    hasCuttingEdge = true;
                }
                return hasCuttingEdge;
            };
            VisFace.prototype.GetCuttingEdges = function (vertics, plane, result) {
                var hasCuttingEdge = VisFace.GetCuttingEdges(this.Boundary, vertics, plane, result);
                if (this.Holes != null) {
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        if (VisFace.GetCuttingEdges(hole, vertics, plane, result))
                            hasCuttingEdge = true;
                    }
                }
                return hasCuttingEdge;
            };
            VisFace.prototype.GetPolygonWithHoles = function (vertics, vmap, v2map) {
                if (vmap === void 0) { vmap = null; }
                if (v2map === void 0) { v2map = null; }
                var u = U1.Vector3.Zero;
                var v = U1.Vector3.Zero;
                this.GetUV(u, v);
                var vc = 0;
                var project = function (boundary_) {
                    var count = boundary_.length;
                    var result = new Array(count);
                    for (var i = 0; i < count; i++) {
                        var vi_ = boundary_[i];
                        var v3 = vertics[vi_];
                        var x = U1.Vector3.Dot(v3, u);
                        var y = U1.Vector3.Dot(v3, v);
                        if (vmap != null)
                            vmap[vc++] = vi_;
                        var v2 = new U1.Vector2(x, y);
                        if (v2map != null)
                            v2map[v2.toString()] = vi_;
                        result[i] = v2;
                    }
                    return result;
                };
                var boundary2 = project(this.Boundary);
                var pgon = new U1.CGAL.Polygon2();
                pgon.Points = boundary2;
                var pwh = new U1.CGAL.PolygonWithHoles2(pgon);
                if (this.Holes != null) {
                    var holes = new Array();
                    for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        var hole2 = project(hole);
                        pwh.AddHole(new U1.CGAL.Polygon2(hole2));
                    }
                }
                return pwh;
            };
            VisFace.prototype.Tesselate = function (vertics) {
                if (this.Holes == null && this.Boundary.length == 3) {
                    return this.Boundary.slice();
                }
                var result = new Array();
                if (VisFace.TesselaterFunc != null) {
                    return VisFace.TesselaterFunc(this, vertics);
                }
                var vmap = {};
                var pwh = this.GetPolygonWithHoles(vertics, vmap);
                var ptriangulate = new U1.Triangulations.PolygonTriangulation2();
                ptriangulate.FillPWH(pwh);
                var mesh = ptriangulate.GetMesh();
                for (var _i = 0, _a = mesh.FList; _i < _a.length; _i++) {
                    var f = _a[_i];
                    result.push(vmap[f.V0]);
                    result.push(vmap[f.V1]);
                    result.push(vmap[f.V2]);
                }
                return result;
            };
            /// <summary>
            /// 폴리곤과 면의 교차지점에 새로운 포인트 추가
            /// </summary>
            /// <param name="polygon"></param>
            /// <param name="vertics"></param>
            /// <param name="plane">절단평면</param>
            /// <param name="add_point_func">포인트 추가콜백</param>
            /// <param name="isect_points"> 새로추가된 포인트</param>
            /// <param name="new_polygon"></param>
            /// <returns></returns>
            VisFace.InsertIsectPoints = function (polygon, vertics, plane, add_point_func, isect_points, result) {
                var new_boundary = new Array();
                var insert_list = new Array();
                var num_boundary = polygon.length;
                var is_cutted = false;
                var cur_p = U1.Vector3.Zero;
                var nxt_p = U1.Vector3.Zero;
                var dir = U1.Vector3.Zero;
                var f_num = 0;
                var b_num = 0;
                for (var i = 0; i < num_boundary; i++) {
                    var ci = polygon[i];
                    var ni = (i + 1) < num_boundary ? polygon[i + 1] : polygon[0];
                    new_boundary.push(ci);
                    cur_p = vertics[ci];
                    nxt_p = vertics[ni];
                    dir.Set(nxt_p.X - cur_p.X, nxt_p.Y - cur_p.Y, nxt_p.Z - cur_p.Z);
                    var d0 = plane.DotCoordinate(cur_p);
                    if (d0 <= VisShell.EPSILON && d0 >= -VisShell.EPSILON)
                        d0 = 0;
                    var d1 = plane.DotCoordinate(nxt_p);
                    if (d1 <= VisShell.EPSILON && d1 >= -VisShell.EPSILON)
                        d1 = 0;
                    if (d0 * d1 < 0) {
                        //면의 양쪽으로 분리 
                        var t = plane.IntersectsLine(cur_p, dir);
                        var isect;
                        if (t == null)
                            isect = cur_p;
                        else
                            isect = U1.Vector3.ScaleAdd(cur_p, t, dir);
                        if (isect != cur_p) {
                            var vi = add_point_func(isect);
                            isect = vertics[vi];
                            if (isect_points.indexOf(isect) < 0)
                                isect_points.push(isect);
                            if (new_boundary == null)
                                new_boundary = new Array();
                            insert_list.push(new_boundary.length);
                            new_boundary.push(vi);
                            is_cutted = true;
                        }
                    }
                    else if (d0 == 0) {
                        //면과만나는경우 
                        isect_points.push(cur_p);
                    }
                    if (d0 > 0)
                        f_num++;
                    if (d0 < 0)
                        b_num++;
                }
                if (is_cutted) {
                    result.new_polygon = new_boundary;
                    result.insert_indics = insert_list;
                }
                else {
                    result.new_polygon = polygon;
                    result.insert_indics = new Array();
                    if (f_num > 0 && b_num > 0 && isect_points.length > 1)
                        is_cutted = true;
                }
                return is_cutted;
            };
            VisFace.prototype.Cut = function (vertics, plane, add_point_func, fronts, backs) {
                var isect_points = new Array();
                var out = {
                    new_polygon: new Array(),
                    insert_indics: new Array()
                };
                var is_cutted = VisFace.InsertIsectPoints(this.Boundary, vertics, plane, add_point_func, isect_points, out);
                var boundary_insert_indics = out.insert_indics;
                if (is_cutted) {
                    var copy = this.Clone();
                    copy.Boundary = out.new_polygon;
                    if (this.Holes != null) {
                        var h_list = new Array();
                        for (var _i = 0, _a = this.Holes; _i < _a.length; _i++) {
                            var h = _a[_i];
                            var hole_insert_indics = new Array();
                            out.insert_indics = hole_insert_indics;
                            if (VisFace.InsertIsectPoints(h, vertics, plane, add_point_func, isect_points, out)) {
                                h_list.push(out.new_polygon);
                            }
                            else {
                                h_list.push(h);
                            }
                        }
                        copy.Holes = h_list;
                    }
                    if (isect_points.length == 2 && boundary_insert_indics.length == 2) {
                        // 2점에서 교차하는 경우 
                        // 면을 양분함. 
                        var face_boundary1 = new Array();
                        var face_boundary2 = new Array();
                        for (var i = 0; i < copy.Boundary.length; i++) {
                            if (i <= boundary_insert_indics[0] || i >= boundary_insert_indics[1])
                                face_boundary1.push(copy.Boundary[i]);
                            if (i >= boundary_insert_indics[0] && i <= boundary_insert_indics[1])
                                face_boundary2.push(copy.Boundary[i]);
                        }
                        var front_face = new VisFace(face_boundary1);
                        var back_face = new VisFace(face_boundary2);
                        front_face.State = VisFaceStates.Cutted;
                        back_face.State = VisFaceStates.Cutted;
                        var isectType = VisFace.PlaneIntersection(front_face.Boundary, vertics, plane);
                        if (isectType == U1.PlaneIntersectionTypeEnum.Back) {
                            var tmp = back_face;
                            back_face = front_face;
                            front_face = tmp;
                        }
                        if (copy.Holes != null) {
                            //홀을 면의 앞뒤로 구분하여 면에 반영 
                            var front_holes = new Array();
                            var back_holes = new Array();
                            for (var _b = 0, _c = copy.Holes; _b < _c.length; _b++) {
                                var hole = _c[_b];
                                if (VisFace.PlaneIntersection(hole, vertics, plane) == U1.PlaneIntersectionTypeEnum.Front) {
                                    front_holes.push(hole);
                                }
                                else {
                                    back_holes.push(hole);
                                }
                            }
                            front_face.Holes = front_holes.length > 0 ? front_holes : null;
                            back_face.Holes = back_holes.length > 0 ? back_holes : null;
                        }
                        fronts.push(front_face);
                        backs.push(back_face);
                        return true;
                    }
                    return VisFaceCutter.SplitFace(copy, vertics, plane, isect_points, fronts, backs);
                }
                {
                    var isectType = VisFace.PlaneIntersection(this.Boundary, vertics, plane);
                    if (isectType == U1.PlaneIntersectionTypeEnum.Front)
                        fronts.push(this);
                    else
                        backs.push(this);
                }
                return is_cutted;
            };
            VisFace.s_handle = 0;
            return VisFace;
        }());
        Visualize.VisFace = VisFace;
        var VisFaceCutter = (function () {
            function VisFaceCutter() {
            }
            VisFaceCutter.SplitFace = function (face, vertics, plane, insert_points, front_faces, back_faces) {
                if (insert_points.length < 2) {
                    if (this.IsFront(face.Boundary, vertics, plane)) {
                        front_faces.push(face);
                    }
                    else {
                        back_faces.push(face);
                    }
                    return true;
                }
                var dir = U1.Vector3.Cross(plane.Normal, face.Normal);
                dir.Normalize();
                var facemap = function () {
                    var map_ = {
                        keys: new Array(),
                        values: new Array(),
                        getValue: function (this_, key_) {
                            var idx_ = this_.keys.indexOf(key_);
                            if (idx_ >= 0)
                                return this_.values[idx_];
                            return null;
                        },
                        setValue: function (this_, key_, val_) {
                            var idx_ = this_.keys.indexOf(key_);
                            if (idx_ >= 0)
                                this_.values[idx_] = val_;
                            else {
                                this_.keys.push(key_);
                                this_.values.push(val_);
                            }
                        }
                    };
                    return map_;
                };
                var f_faces = new Map();
                var b_faces = new Map();
                var loops = new Array();
                loops.push(V_Link.CreateLoop(face.Boundary, 0));
                var loop = 1;
                if (face.Holes != null) {
                    for (var _i = 0, _a = face.Holes; _i < _a.length; _i++) {
                        var hole = _a[_i];
                        loops.push(V_Link.CreateLoop(hole, loop++));
                    }
                }
                var insert_indics = new Array();
                insert_points
                    .sort(function (a_, b_) {
                    var da = U1.Vector3.Dot(dir, a_);
                    var db = U1.Vector3.Dot(dir, b_);
                    if (da == db)
                        return 0;
                    if (da < db)
                        return -1;
                    return 1;
                })
                    .forEach(function (v_, i_, arr) {
                    insert_indics.push(vertics.indexOf(v_));
                });
                for (var i = 0; i < insert_indics.length - 1; i += 2) {
                    var idx0 = insert_indics[i];
                    var idx1 = insert_indics[i + 1];
                    var f_idx = -1;
                    var t_idx = -1;
                    var fr = null;
                    var to = null;
                    for (var j = 0; j < loops.length; j++) {
                        fr = loops[j].Find(idx0);
                        if (fr != null) {
                            f_idx = j;
                            loops[j] = fr;
                            break;
                        }
                    }
                    for (var j = 0; j < loops.length; j++) {
                        to = loops[j].Find(idx1);
                        if (to != null) {
                            t_idx = j;
                            loops[j] = to;
                            break;
                        }
                    }
                    if (fr != to && fr != null && to != null) {
                        var isSameLoop = f_idx == t_idx;
                        V_Link.Connect(fr, to);
                        if (isSameLoop) {
                            //동일 루프인경우 분할
                            loops.push(fr);
                        }
                        else {
                            //서로다른 루프인 경우 병합
                            loops.splice(t_idx, 1);
                        }
                    }
                }
                var faces = new Array();
                for (var _b = 0, loops_5 = loops; _b < loops_5.length; _b++) {
                    var vlink = loops_5[_b];
                    if (!vlink.IsBoundary)
                        continue;
                    var visFace = new VisFace();
                    visFace.Boundary = vlink.GetIndics(),
                        visFace.State = VisFaceStates.Cutted;
                    if (this.IsFront(visFace.Boundary, vertics, plane)) {
                        f_faces.setValue(visFace, this.GetPolygon(visFace.Boundary, vertics, face.Normal));
                    }
                    else {
                        b_faces.setValue(visFace, this.GetPolygon(visFace.Boundary, vertics, face.Normal));
                    }
                }
                for (var _c = 0, loops_6 = loops; _c < loops_6.length; _c++) {
                    var vlink = loops_6[_c];
                    if (vlink.IsBoundary)
                        continue;
                    var h_points = vlink.GetIndics();
                    var out_face = null;
                    if (this.IsFront(h_points, vertics, plane)) {
                        for (var _d = 0, _e = f_faces.KeyValues; _d < _e.length; _d++) {
                            var kv = _e[_d];
                            if (this.Contains(kv.value, h_points, vertics, face.Normal)) {
                                out_face = kv.key;
                                break;
                            }
                        }
                    }
                    else {
                        for (var _f = 0, _g = b_faces.KeyValues; _f < _g.length; _f++) {
                            var key = _g[_f];
                            if (this.Contains(kv.value, h_points, vertics, face.Normal)) {
                                out_face = kv.key;
                                break;
                            }
                        }
                    }
                    if (out_face != null) {
                        var holes = out_face.Holes != null ? out_face.Holes.slice() : new Array();
                        holes.push(h_points);
                        out_face.Holes = holes;
                    }
                }
                if (f_faces.Count > 0 || b_faces.Count > 0) {
                    f_faces.Keys.forEach(function (v_, i_, arr_) { return front_faces.push(v_); });
                    b_faces.Keys.forEach(function (v_, i_, arr_) { return back_faces.push(v_); });
                    return true;
                }
                if (this.IsFront(face.Boundary, vertics, plane)) {
                    front_faces.push(face);
                }
                else {
                    back_faces.push(face);
                }
                return true;
            };
            VisFaceCutter.IsFront = function (points, vertics, plane) {
                for (var i = 0; i < points.length; i++) {
                    if (plane.DotCoordinate(vertics[points[i]]) > VisShell.EPSILON)
                        return true;
                }
                return false;
            };
            VisFaceCutter.GetPolygon = function (b, vertics, normal) {
                var u = U1.Vector3.Zero;
                var v = U1.Vector3.Zero;
                U1.GeometryHelper3.GetArbitraryAxis(normal, u, v);
                var b2 = new Array();
                b.forEach(function (v_, idx_, arr_) {
                    var p_ = vertics[v_];
                    var x = U1.Vector3.Dot(p_, u);
                    var y = U1.Vector3.Dot(p_, v);
                    b2.push(new U1.Vector2(x, y));
                });
                var pgon = new U1.CGAL.Polygon2(b2);
                if (pgon.IsCW()) {
                    pgon.Reverse();
                }
                return pgon;
            };
            VisFaceCutter.Contains = function (boundary, hole, vertics, normal) {
                var u = new U1.Vector3();
                var v = new U1.Vector3();
                U1.GeometryHelper3.GetArbitraryAxis(normal, u, v);
                for (var _i = 0, hole_5 = hole; _i < hole_5.length; _i++) {
                    var i = hole_5[_i];
                    var p_ = vertics[i];
                    var x = U1.Vector3.Dot(p_, u);
                    var y = U1.Vector3.Dot(p_, v);
                    var p2 = new U1.Vector2(x, y);
                    if (boundary.HasOnBoundedSide(p2))
                        return true;
                }
                return false;
            };
            return VisFaceCutter;
        }());
        Visualize.VisFaceCutter = VisFaceCutter;
        var V_Link = (function () {
            function V_Link() {
            }
            Object.defineProperty(V_Link.prototype, "IsBoundary", {
                get: function () {
                    return this.Loop == 0;
                },
                enumerable: true,
                configurable: true
            });
            V_Link.Connect = function (fr, to) {
                var isSampLoop = fr.IsSampeLoop(to);
                var n_from = fr.Clone();
                var n_to = to.Clone();
                to.Next = n_from;
                fr.Next = n_to;
                if (fr.Loop != to.Loop) {
                    var loop = fr.Loop < to.Loop ? fr.Loop : to.Loop;
                    fr.SetLoop(loop);
                    to.SetLoop(loop);
                }
            };
            V_Link.prototype.Clone = function () {
                var clone = new V_Link();
                clone.Index = this.Index;
                clone.Next = this.Next;
                return clone;
            };
            V_Link.prototype.Find = function (index) {
                if (this.Index == index)
                    return this;
                var cp = this.Next;
                while (cp != this) {
                    if (index == cp.Index)
                        return cp;
                    cp = cp.Next;
                }
                return null;
            };
            V_Link.prototype.SetLoop = function (loopNum) {
                this.Loop = loopNum;
                var cp = this.Next;
                while (cp != this) {
                    cp.Loop = loopNum;
                    cp = cp.Next;
                }
            };
            V_Link.prototype.IsSampeLoop = function (other) {
                if (this == other)
                    return true;
                var cp = this.Next;
                while (cp != this) {
                    if (cp == other)
                        return true;
                    cp = cp.Next;
                }
                return false;
            };
            V_Link.prototype.GetIndics = function () {
                var result = new Array();
                result.push(this.Index);
                var cp = this.Next;
                while (cp != this) {
                    result.push(cp.Index);
                    cp = cp.Next;
                }
                return result;
            };
            V_Link.CreateLoop = function (indics, loop) {
                var start = new V_Link();
                start.Index = indics[0];
                var prev = start;
                for (var i = 1; i < indics.length; i++) {
                    var cur = new V_Link();
                    cur.Index = indics[i];
                    cur.Loop = loop;
                    prev.Next = cur;
                    prev = cur;
                }
                prev.Next = start;
                return start;
            };
            return V_Link;
        }());
        var Map = (function () {
            function Map() {
                this._keys = new Array();
                this._value = new Array();
            }
            Map.prototype.getValue = function (key) {
                var idx = this._keys.indexOf(key);
                if (idx < 0)
                    return null;
                return this._value[idx];
            };
            Map.prototype.setValue = function (key, val) {
                var idx = this._keys.indexOf(key);
                if (idx >= 0) {
                    this._value[idx] = val;
                }
                else {
                    this._keys.push(key);
                    this._value.push(val);
                }
            };
            Object.defineProperty(Map.prototype, "Count", {
                get: function () {
                    return this._keys.length;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Map.prototype, "Keys", {
                get: function () {
                    return this._keys;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Map.prototype, "Values", {
                get: function () {
                    return this._value;
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(Map.prototype, "KeyValues", {
                get: function () {
                    var result = new Array();
                    for (var i = 0; i < this._keys.length; i++) {
                        result.push({ key: this._keys[i], value: this._value[i] });
                    }
                    return result;
                },
                enumerable: true,
                configurable: true
            });
            return Map;
        }());
        var VisShell = (function (_super) {
            __extends(VisShell, _super);
            function VisShell() {
                _super.apply(this, arguments);
                this._mesh = null;
            }
            VisShell.prototype.UpdateBoundingBox = function (boundingBox) {
                var pIndics = {};
                for (var _i = 0, _a = this.Faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    face.GetPointIndics(pIndics);
                }
                var min = U1.Vector3.MaxValue;
                var max = U1.Vector3.MinValue;
                for (var idx in pIndics) {
                    min.Minimize(this.Vertics[idx]);
                    max.Maximize(this.Vertics[idx]);
                }
                boundingBox.Min = min;
                boundingBox.Max = max;
            };
            VisShell.prototype.IntersectsBoundingBoxPlane = function (plane) {
                return plane.IntersectsBoundingBox(this.BoundingBox);
            };
            VisShell.prototype.Intersects = function (plane) {
                var isect_bounding = this.IntersectsBoundingBoxPlane(plane);
                if (isect_bounding == U1.PlaneIntersectionTypeEnum.Back ||
                    isect_bounding == U1.PlaneIntersectionTypeEnum.Front) {
                    return isect_bounding;
                }
                var result = null;
                for (var _i = 0, _a = this.Faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    var isect = VisFace.PlaneIntersection(face.Boundary, this.Vertics, plane);
                    if (isect == U1.PlaneIntersectionTypeEnum.Intersecting)
                        return U1.PlaneIntersectionTypeEnum.Intersecting;
                    if (result == null)
                        result = isect;
                    else {
                        if (result != isect)
                            return U1.PlaneIntersectionTypeEnum.Intersecting;
                    }
                }
                if (result == null)
                    return U1.PlaneIntersectionTypeEnum.Front;
                return result;
            };
            VisShell.prototype.GetMesh = function () {
                if (this._mesh != null)
                    return this._mesh;
                var hasVertexNormal = this.VertexNormals != null && this.VertexNormals.length == this.Vertics.length;
                var vtxList = new Array();
                var vnomList = hasVertexNormal ? this.VertexNormals.slice() : new Array();
                var fidxList = new Array();
                for (var vi = 0; vi < this.Vertics.length; vi++) {
                    var vtx = new U1.MeshVertex();
                    vtx.Position = this.Vertics[vi];
                    vtx.Normal = this.VertexNormals != null && this.VertexNormals.length > vi ? this.VertexNormals[vi] : U1.Vector3.Zero,
                        vtx.UV = this.UVs != null && this.UVs.length > vi ? this.UVs[vi] : U1.Vector2.Zero;
                    vtxList.push(vtx);
                }
                for (var _i = 0, _a = this.Faces; _i < _a.length; _i++) {
                    var face = _a[_i];
                    face.UpdateNormal(this.Vertics);
                    var useFaceNormal = !hasVertexNormal || face.IsCap || face.IsFlat;
                    var tri_faces = face.Tesselate(this.Vertics);
                    if (useFaceNormal) {
                        var vamp = {};
                        var fnormal = face.Normal;
                        for (var _b = 0, tri_faces_2 = tri_faces; _b < tri_faces_2.length; _b++) {
                            var i = tri_faces_2[_b];
                            if (vamp[i] == null) {
                                var ni = vtxList.length;
                                vamp[i] = ni;
                                fidxList.push(ni);
                                var vtx = new U1.MeshVertex();
                                vtx.Position = this.Vertics[i];
                                vtx.Normal = fnormal;
                                vtx.UV = U1.Vector2.Zero;
                                vtxList.push(vtx);
                            }
                            else {
                                fidxList.push(vamp[i]);
                            }
                        }
                    }
                    else {
                        tri_faces.forEach(function (v_, i_, arr_) { return fidxList.push(v_); });
                    }
                }
                this._mesh = new U1.MeshData();
                this._mesh.Vertices = vtxList;
                this._mesh.Indexes = fidxList;
                return this._mesh;
            };
            VisShell.EPSILON = 0.00001;
            VisShell.MaxCuttedCache = 5;
            return VisShell;
        }(VisGeometry));
        Visualize.VisShell = VisShell;
    })(Visualize = U1.Visualize || (U1.Visualize = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            (function (WcWinTypeEnums) {
                WcWinTypeEnums[WcWinTypeEnums["_1F_1W_TD_D_R"] = 0] = "_1F_1W_TD_D_R";
                WcWinTypeEnums[WcWinTypeEnums["_1F_1W_TD_D_L"] = 1] = "_1F_1W_TD_D_L";
                WcWinTypeEnums[WcWinTypeEnums["_1F_1W_TD_R"] = 2] = "_1F_1W_TD_R";
                WcWinTypeEnums[WcWinTypeEnums["_1F_1W_TD_L"] = 3] = "_1F_1W_TD_L";
                WcWinTypeEnums[WcWinTypeEnums["_1W_TD_D_R"] = 4] = "_1W_TD_D_R";
                WcWinTypeEnums[WcWinTypeEnums["_1W_TD_D_L"] = 5] = "_1W_TD_D_L";
                WcWinTypeEnums[WcWinTypeEnums["_1W_TD_R"] = 6] = "_1W_TD_R";
                WcWinTypeEnums[WcWinTypeEnums["_1W_TD_L"] = 7] = "_1W_TD_L";
                WcWinTypeEnums[WcWinTypeEnums["_1W_1F_1F_1F_UB_FP"] = 8] = "_1W_1F_1F_1F_UB_FP";
                WcWinTypeEnums[WcWinTypeEnums["_4W_2F_T_R_FS"] = 9] = "_4W_2F_T_R_FS";
                WcWinTypeEnums[WcWinTypeEnums["_4W_2F_T_L_FS"] = 10] = "_4W_2F_T_L_FS";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2F_T_R_FS"] = 11] = "_2W_2F_T_R_FS";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2F_T_L_FS"] = 12] = "_2W_2F_T_L_FS";
                WcWinTypeEnums[WcWinTypeEnums["_1W_1F_I_PJ"] = 13] = "_1W_1F_I_PJ";
                WcWinTypeEnums[WcWinTypeEnums["_WH_C"] = 14] = "_WH_C";
                WcWinTypeEnums[WcWinTypeEnums["_WH_N"] = 15] = "_WH_N";
                WcWinTypeEnums[WcWinTypeEnums["_1W_C_N_C"] = 16] = "_1W_C_N_C";
                WcWinTypeEnums[WcWinTypeEnums["_1W_R_N_C"] = 17] = "_1W_R_N_C";
                WcWinTypeEnums[WcWinTypeEnums["_1W_L_N_C"] = 18] = "_1W_L_N_C";
                WcWinTypeEnums[WcWinTypeEnums["_1W_R_V_C"] = 19] = "_1W_R_V_C";
                WcWinTypeEnums[WcWinTypeEnums["_1W_L_V_C"] = 20] = "_1W_L_V_C";
                WcWinTypeEnums[WcWinTypeEnums["_1W_C_N_H"] = 21] = "_1W_C_N_H";
                WcWinTypeEnums[WcWinTypeEnums["_1W_R_N_H"] = 22] = "_1W_R_N_H";
                WcWinTypeEnums[WcWinTypeEnums["_1W_L_N_H"] = 23] = "_1W_L_N_H";
                WcWinTypeEnums[WcWinTypeEnums["_1W_R_V_H"] = 24] = "_1W_R_V_H";
                WcWinTypeEnums[WcWinTypeEnums["_1W_L_V_H"] = 25] = "_1W_L_V_H";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2F_FP"] = 26] = "_2W_2F_FP";
                WcWinTypeEnums[WcWinTypeEnums["_2W_I_PJ"] = 27] = "_2W_I_PJ";
                WcWinTypeEnums[WcWinTypeEnums["_6W_3F_R_FS"] = 28] = "_6W_3F_R_FS";
                WcWinTypeEnums[WcWinTypeEnums["_6W_3F_L_FS"] = 29] = "_6W_3F_L_FS";
                WcWinTypeEnums[WcWinTypeEnums["_3W_3W_UB_SS"] = 30] = "_3W_3W_UB_SS";
                WcWinTypeEnums[WcWinTypeEnums["_1W_1F_R_PJ"] = 31] = "_1W_1F_R_PJ";
                WcWinTypeEnums[WcWinTypeEnums["_1W_1F_L_PJ"] = 32] = "_1W_1F_L_PJ";
                WcWinTypeEnums[WcWinTypeEnums["_2W_UB_2F_UB_R_FS"] = 33] = "_2W_UB_2F_UB_R_FS";
                WcWinTypeEnums[WcWinTypeEnums["_2W_UB_2F_UB_L_FS"] = 34] = "_2W_UB_2F_UB_L_FS";
                WcWinTypeEnums[WcWinTypeEnums["_8W_R_SS"] = 35] = "_8W_R_SS";
                WcWinTypeEnums[WcWinTypeEnums["_8W_L_SS"] = 36] = "_8W_L_SS";
                WcWinTypeEnums[WcWinTypeEnums["_4W_UB_CENTER"] = 37] = "_4W_UB_CENTER";
                WcWinTypeEnums[WcWinTypeEnums["_1W_SF"] = 38] = "_1W_SF";
                WcWinTypeEnums[WcWinTypeEnums["_6W_1F_I_R_FS"] = 39] = "_6W_1F_I_R_FS";
                WcWinTypeEnums[WcWinTypeEnums["_6W_1F_I_L_FS"] = 40] = "_6W_1F_I_L_FS";
                WcWinTypeEnums[WcWinTypeEnums["_4W_4W_L_SS"] = 41] = "_4W_4W_L_SS";
                WcWinTypeEnums[WcWinTypeEnums["_3W_4W_UB_SS"] = 42] = "_3W_4W_UB_SS";
                WcWinTypeEnums[WcWinTypeEnums["_3W_4F_UB_FS"] = 43] = "_3W_4F_UB_FS";
                WcWinTypeEnums[WcWinTypeEnums["_12W_UB_R_SS"] = 44] = "_12W_UB_R_SS";
                WcWinTypeEnums[WcWinTypeEnums["_12W_UB_L_SS"] = 45] = "_12W_UB_L_SS";
                WcWinTypeEnums[WcWinTypeEnums["_1F_1"] = 46] = "_1F_1";
                WcWinTypeEnums[WcWinTypeEnums["_1F_2"] = 47] = "_1F_2";
                WcWinTypeEnums[WcWinTypeEnums["_3W_UB_2F_I_U_FS"] = 48] = "_3W_UB_2F_I_U_FS";
                WcWinTypeEnums[WcWinTypeEnums["_2W_1F_PI"] = 49] = "_2W_1F_PI";
                WcWinTypeEnums[WcWinTypeEnums["_1W_1F_PI"] = 50] = "_1W_1F_PI";
                WcWinTypeEnums[WcWinTypeEnums["_2W_PI"] = 51] = "_2W_PI";
                WcWinTypeEnums[WcWinTypeEnums["_1W_PI"] = 52] = "_1W_PI";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2F_UB_R"] = 53] = "_2W_2F_UB_R";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2F_UB_L"] = 54] = "_2W_2F_UB_L";
                WcWinTypeEnums[WcWinTypeEnums["_2F_UB_I"] = 55] = "_2F_UB_I";
                WcWinTypeEnums[WcWinTypeEnums["_2W_C"] = 56] = "_2W_C";
                WcWinTypeEnums[WcWinTypeEnums["_4W_4W_SS_R"] = 57] = "_4W_4W_SS_R";
                WcWinTypeEnums[WcWinTypeEnums["_4W_4W_SS_L"] = 58] = "_4W_4W_SS_L";
                WcWinTypeEnums[WcWinTypeEnums["_3W_3F_U"] = 59] = "_3W_3F_U";
                WcWinTypeEnums[WcWinTypeEnums["_3W_3F_D"] = 60] = "_3W_3F_D";
                WcWinTypeEnums[WcWinTypeEnums["_4Fix"] = 61] = "_4Fix";
                WcWinTypeEnums[WcWinTypeEnums["_12W_I_UB_SS_R"] = 62] = "_12W_I_UB_SS_R";
                WcWinTypeEnums[WcWinTypeEnums["_12W_I_UB_SS_L"] = 63] = "_12W_I_UB_SS_L";
                WcWinTypeEnums[WcWinTypeEnums["_1W_1F_T_D_R"] = 64] = "_1W_1F_T_D_R";
                WcWinTypeEnums[WcWinTypeEnums["_1W_1F_T_D_L"] = 65] = "_1W_1F_T_D_L";
                WcWinTypeEnums[WcWinTypeEnums["_1W_1F_T_R"] = 66] = "_1W_1F_T_R";
                WcWinTypeEnums[WcWinTypeEnums["_1W_1F_T_L"] = 67] = "_1W_1F_T_L";
                WcWinTypeEnums[WcWinTypeEnums["_1W_T_D_R"] = 68] = "_1W_T_D_R";
                WcWinTypeEnums[WcWinTypeEnums["_1W_T_D_L"] = 69] = "_1W_T_D_L";
                WcWinTypeEnums[WcWinTypeEnums["_1W_T_R"] = 70] = "_1W_T_R";
                WcWinTypeEnums[WcWinTypeEnums["_1W_T_L"] = 71] = "_1W_T_L";
                WcWinTypeEnums[WcWinTypeEnums["_2W_U_END_R"] = 72] = "_2W_U_END_R";
                WcWinTypeEnums[WcWinTypeEnums["_2W_U_END_L"] = 73] = "_2W_U_END_L";
                WcWinTypeEnums[WcWinTypeEnums["_1W_U_CB_PJ"] = 74] = "_1W_U_CB_PJ";
                WcWinTypeEnums[WcWinTypeEnums["_1W_U_END_CB_PJ"] = 75] = "_1W_U_END_CB_PJ";
                WcWinTypeEnums[WcWinTypeEnums["_2W_4W_R_SS"] = 76] = "_2W_4W_R_SS";
                WcWinTypeEnums[WcWinTypeEnums["_2W_4W_L_SS"] = 77] = "_2W_4W_L_SS";
                WcWinTypeEnums[WcWinTypeEnums["_1V_1F_1V_I_FP"] = 78] = "_1V_1F_1V_I_FP";
                WcWinTypeEnums[WcWinTypeEnums["_1F_1F_2W_I_R"] = 79] = "_1F_1F_2W_I_R";
                WcWinTypeEnums[WcWinTypeEnums["_1F_1F_2W_I_L"] = 80] = "_1F_1F_2W_I_L";
                WcWinTypeEnums[WcWinTypeEnums["_1F_2W_1F_I_R"] = 81] = "_1F_2W_1F_I_R";
                WcWinTypeEnums[WcWinTypeEnums["_1F_2W_1F_I_L"] = 82] = "_1F_2W_1F_I_L";
                WcWinTypeEnums[WcWinTypeEnums["_1F_1V_1F_I_V"] = 83] = "_1F_1V_1F_I_V";
                WcWinTypeEnums[WcWinTypeEnums["_1F_1V_1F_I_J"] = 84] = "_1F_1V_1F_I_J";
                WcWinTypeEnums[WcWinTypeEnums["_1F_2V_V"] = 85] = "_1F_2V_V";
                WcWinTypeEnums[WcWinTypeEnums["_1F_2V_J"] = 86] = "_1F_2V_J";
                WcWinTypeEnums[WcWinTypeEnums["_2F_I_V"] = 87] = "_2F_I_V";
                WcWinTypeEnums[WcWinTypeEnums["_2F_I_J"] = 88] = "_2F_I_J";
                WcWinTypeEnums[WcWinTypeEnums["_1F_1W_1F_I_A"] = 89] = "_1F_1W_1F_I_A";
                WcWinTypeEnums[WcWinTypeEnums["_1F_2V_A"] = 90] = "_1F_2V_A";
                WcWinTypeEnums[WcWinTypeEnums["_2F_I_A"] = 91] = "_2F_I_A";
                WcWinTypeEnums[WcWinTypeEnums["_1FIX_U_3"] = 92] = "_1FIX_U_3";
                WcWinTypeEnums[WcWinTypeEnums["_1FIX_U_4"] = 93] = "_1FIX_U_4";
                WcWinTypeEnums[WcWinTypeEnums["_4W_CS"] = 94] = "_4W_CS";
                WcWinTypeEnums[WcWinTypeEnums["_3W_UB_CS"] = 95] = "_3W_UB_CS";
                WcWinTypeEnums[WcWinTypeEnums["_2W_UB_CS_R"] = 96] = "_2W_UB_CS_R";
                WcWinTypeEnums[WcWinTypeEnums["_2W_UB_CS_L"] = 97] = "_2W_UB_CS_L";
                WcWinTypeEnums[WcWinTypeEnums["_2W_CS_R"] = 98] = "_2W_CS_R";
                WcWinTypeEnums[WcWinTypeEnums["_2W_CS_L"] = 99] = "_2W_CS_L";
                WcWinTypeEnums[WcWinTypeEnums["_2W_P"] = 100] = "_2W_P";
                WcWinTypeEnums[WcWinTypeEnums["_8W_UB_R"] = 101] = "_8W_UB_R";
                WcWinTypeEnums[WcWinTypeEnums["_8W_UB_L"] = 102] = "_8W_UB_L";
                WcWinTypeEnums[WcWinTypeEnums["_6W_L"] = 103] = "_6W_L";
                WcWinTypeEnums[WcWinTypeEnums["_1W_PJ"] = 104] = "_1W_PJ";
                WcWinTypeEnums[WcWinTypeEnums["_1W_MF"] = 105] = "_1W_MF";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2W_CS_I_R"] = 106] = "_2W_2W_CS_I_R";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2W_CS_I_L"] = 107] = "_2W_2W_CS_I_L";
                WcWinTypeEnums[WcWinTypeEnums["_3W_UB_1FIX_I"] = 108] = "_3W_UB_1FIX_I";
                WcWinTypeEnums[WcWinTypeEnums["_8W_CS_R"] = 109] = "_8W_CS_R";
                WcWinTypeEnums[WcWinTypeEnums["_8W_CS_L"] = 110] = "_8W_CS_L";
                WcWinTypeEnums[WcWinTypeEnums["_4W_CS_I_R"] = 111] = "_4W_CS_I_R";
                WcWinTypeEnums[WcWinTypeEnums["_4W_CS_I_L"] = 112] = "_4W_CS_I_L";
                WcWinTypeEnums[WcWinTypeEnums["_8W_R"] = 113] = "_8W_R";
                WcWinTypeEnums[WcWinTypeEnums["_8W_L"] = 114] = "_8W_L";
                WcWinTypeEnums[WcWinTypeEnums["_6W_UB_I_R"] = 115] = "_6W_UB_I_R";
                WcWinTypeEnums[WcWinTypeEnums["_6W_UB_I_L"] = 116] = "_6W_UB_I_L";
                WcWinTypeEnums[WcWinTypeEnums["_6W_R_SS"] = 117] = "_6W_R_SS";
                WcWinTypeEnums[WcWinTypeEnums["_6W_L_SS"] = 118] = "_6W_L_SS";
                WcWinTypeEnums[WcWinTypeEnums["_4W_R_SS"] = 119] = "_4W_R_SS";
                WcWinTypeEnums[WcWinTypeEnums["_4W_L_SS"] = 120] = "_4W_L_SS";
                WcWinTypeEnums[WcWinTypeEnums["_4W_I_R_SS"] = 121] = "_4W_I_R_SS";
                WcWinTypeEnums[WcWinTypeEnums["_4W_I_L_SS"] = 122] = "_4W_I_L_SS";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2FIX_LR_R"] = 123] = "_2W_2FIX_LR_R";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2FIX_LR_L"] = 124] = "_2W_2FIX_LR_L";
                WcWinTypeEnums[WcWinTypeEnums["_4W_4FIX_R"] = 125] = "_4W_4FIX_R";
                WcWinTypeEnums[WcWinTypeEnums["_4W_4FIX_L"] = 126] = "_4W_4FIX_L";
                WcWinTypeEnums[WcWinTypeEnums["_4W_2FIX_R"] = 127] = "_4W_2FIX_R";
                WcWinTypeEnums[WcWinTypeEnums["_4W_1FIX_I_R"] = 128] = "_4W_1FIX_I_R";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2FIX_I_R"] = 129] = "_2W_2FIX_I_R";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2FIX_FS"] = 130] = "_2W_2FIX_FS";
                WcWinTypeEnums[WcWinTypeEnums["_4W_2FIX_L"] = 131] = "_4W_2FIX_L";
                WcWinTypeEnums[WcWinTypeEnums["_2W_1FIX_I_R"] = 132] = "_2W_1FIX_I_R";
                WcWinTypeEnums[WcWinTypeEnums["_4W_1FIX_I"] = 133] = "_4W_1FIX_I";
                WcWinTypeEnums[WcWinTypeEnums["_3W_1FIX_I"] = 134] = "_3W_1FIX_I";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2FIX_I_L"] = 135] = "_2W_2FIX_I_L";
                WcWinTypeEnums[WcWinTypeEnums["_2W_4FIX"] = 136] = "_2W_4FIX";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2FIX"] = 137] = "_2W_2FIX";
                WcWinTypeEnums[WcWinTypeEnums["_2W_3FIX_I"] = 138] = "_2W_3FIX_I";
                WcWinTypeEnums[WcWinTypeEnums["_2W_1FIX_I"] = 139] = "_2W_1FIX_I";
                WcWinTypeEnums[WcWinTypeEnums["_2W_2FIX_I"] = 140] = "_2W_2FIX_I";
                WcWinTypeEnums[WcWinTypeEnums["_2W_1FIX_I_L"] = 141] = "_2W_1FIX_I_L";
                WcWinTypeEnums[WcWinTypeEnums["_2W_I"] = 142] = "_2W_I";
                WcWinTypeEnums[WcWinTypeEnums["_1W_4FIX_I"] = 143] = "_1W_4FIX_I";
                WcWinTypeEnums[WcWinTypeEnums["_1W_3FIX_I"] = 144] = "_1W_3FIX_I";
                WcWinTypeEnums[WcWinTypeEnums["_1W_2FIX_I"] = 145] = "_1W_2FIX_I";
                WcWinTypeEnums[WcWinTypeEnums["_1W_1FIX_I"] = 146] = "_1W_1FIX_I";
                WcWinTypeEnums[WcWinTypeEnums["_1W_FIX"] = 147] = "_1W_FIX";
                WcWinTypeEnums[WcWinTypeEnums["_1W_FIX_I"] = 148] = "_1W_FIX_I";
                WcWinTypeEnums[WcWinTypeEnums["_1W"] = 149] = "_1W";
                WcWinTypeEnums[WcWinTypeEnums["_3Fix_I"] = 150] = "_3Fix_I";
                WcWinTypeEnums[WcWinTypeEnums["_2Fix_I"] = 151] = "_2Fix_I";
                WcWinTypeEnums[WcWinTypeEnums["_4Fix_Rect"] = 152] = "_4Fix_Rect";
                WcWinTypeEnums[WcWinTypeEnums["_3Fix"] = 153] = "_3Fix";
                WcWinTypeEnums[WcWinTypeEnums["_2Fix"] = 154] = "_2Fix";
                WcWinTypeEnums[WcWinTypeEnums["_WH"] = 155] = "_WH";
                WcWinTypeEnums[WcWinTypeEnums["_Fix"] = 156] = "_Fix";
                WcWinTypeEnums[WcWinTypeEnums["_3W_UB"] = 157] = "_3W_UB";
                WcWinTypeEnums[WcWinTypeEnums["_3W_1_1_1"] = 158] = "_3W_1_1_1";
                WcWinTypeEnums[WcWinTypeEnums["_2W_UB_Right"] = 159] = "_2W_UB_Right";
                WcWinTypeEnums[WcWinTypeEnums["_4W_LR"] = 160] = "_4W_LR";
                WcWinTypeEnums[WcWinTypeEnums["_2W_UB_Left"] = 161] = "_2W_UB_Left";
                WcWinTypeEnums[WcWinTypeEnums["_3W_1_2_1"] = 162] = "_3W_1_2_1";
                WcWinTypeEnums[WcWinTypeEnums["_4W_Center"] = 163] = "_4W_Center";
                WcWinTypeEnums[WcWinTypeEnums["_2W_Right"] = 164] = "_2W_Right";
                WcWinTypeEnums[WcWinTypeEnums["_2W_Left"] = 165] = "_2W_Left";
                WcWinTypeEnums[WcWinTypeEnums["None"] = 166] = "None";
            })(Models.WcWinTypeEnums || (Models.WcWinTypeEnums = {}));
            var WcWinTypeEnums = Models.WcWinTypeEnums;
            var WcWinTypeConverter = (function () {
                function WcWinTypeConverter() {
                }
                WcWinTypeConverter.FromSting = function (str) {
                    return WcWinTypeConverter.Names[str];
                };
                WcWinTypeConverter.ToSting = function (type) {
                    for (var idx in WcWinTypeConverter.Names) {
                        if (WcWinTypeConverter.Names[idx] == type)
                            return idx;
                    }
                    return "";
                };
                WcWinTypeConverter.Names = {
                    "289": WcWinTypeEnums._1F_1W_TD_D_R,
                    "288": WcWinTypeEnums._1F_1W_TD_D_L,
                    "287": WcWinTypeEnums._1F_1W_TD_R,
                    "286": WcWinTypeEnums._1F_1W_TD_L,
                    "285": WcWinTypeEnums._1W_TD_D_R,
                    "284": WcWinTypeEnums._1W_TD_D_L,
                    "283": WcWinTypeEnums._1W_TD_R,
                    "282": WcWinTypeEnums._1W_TD_L,
                    "279": WcWinTypeEnums._1W_1F_1F_1F_UB_FP,
                    "278": WcWinTypeEnums._4W_2F_T_R_FS,
                    "277": WcWinTypeEnums._4W_2F_T_L_FS,
                    "276": WcWinTypeEnums._2W_2F_T_R_FS,
                    "275": WcWinTypeEnums._2W_2F_T_L_FS,
                    "274": WcWinTypeEnums._1W_1F_I_PJ,
                    "271": WcWinTypeEnums._WH_C,
                    "270": WcWinTypeEnums._WH_N,
                    "264": WcWinTypeEnums._1W_C_N_C,
                    "263": WcWinTypeEnums._1W_R_N_C,
                    "262": WcWinTypeEnums._1W_L_N_C,
                    "261": WcWinTypeEnums._1W_R_V_C,
                    "260": WcWinTypeEnums._1W_L_V_C,
                    "259": WcWinTypeEnums._1W_C_N_H,
                    "258": WcWinTypeEnums._1W_R_N_H,
                    "257": WcWinTypeEnums._1W_L_N_H,
                    "256": WcWinTypeEnums._1W_R_V_H,
                    "255": WcWinTypeEnums._1W_L_V_H,
                    "254": WcWinTypeEnums._2W_2F_FP,
                    "253": WcWinTypeEnums._2W_I_PJ,
                    "252": WcWinTypeEnums._6W_3F_R_FS,
                    "251": WcWinTypeEnums._6W_3F_L_FS,
                    "249": WcWinTypeEnums._3W_3W_UB_SS,
                    "248": WcWinTypeEnums._1W_1F_R_PJ,
                    "247": WcWinTypeEnums._1W_1F_L_PJ,
                    "244": WcWinTypeEnums._2W_UB_2F_UB_R_FS,
                    "243": WcWinTypeEnums._2W_UB_2F_UB_L_FS,
                    "242": WcWinTypeEnums._8W_R_SS,
                    "241": WcWinTypeEnums._8W_L_SS,
                    "239": WcWinTypeEnums._4W_UB_CENTER,
                    "235": WcWinTypeEnums._1W_SF,
                    "233": WcWinTypeEnums._6W_1F_I_R_FS,
                    "232": WcWinTypeEnums._6W_1F_I_L_FS,
                    "227": WcWinTypeEnums._4W_4W_L_SS,
                    "226": WcWinTypeEnums._3W_4W_UB_SS,
                    "225": WcWinTypeEnums._3W_4F_UB_FS,
                    "224": WcWinTypeEnums._12W_UB_R_SS,
                    "223": WcWinTypeEnums._12W_UB_L_SS,
                    "222": WcWinTypeEnums._1F_1,
                    "221": WcWinTypeEnums._1F_2,
                    "220": WcWinTypeEnums._3W_UB_2F_I_U_FS,
                    "219": WcWinTypeEnums._2W_1F_PI,
                    "218": WcWinTypeEnums._1W_1F_PI,
                    "217": WcWinTypeEnums._2W_PI,
                    "216": WcWinTypeEnums._1W_PI,
                    "215": WcWinTypeEnums._2W_2F_UB_R,
                    "214": WcWinTypeEnums._2W_2F_UB_L,
                    "211": WcWinTypeEnums._2F_UB_I,
                    "208": WcWinTypeEnums._2W_C,
                    "206": WcWinTypeEnums._4W_4W_SS_R,
                    "205": WcWinTypeEnums._4W_4W_SS_L,
                    "200": WcWinTypeEnums._3W_3F_U,
                    "199": WcWinTypeEnums._3W_3F_D,
                    "198": WcWinTypeEnums._4Fix,
                    //"197": WcWinTypeEnums._12W_I_UB_SS_R,      // 12W(십자종형_3단)
                    //"196": WcWinTypeEnums._12W_I_UB_SS_L,      // 12W(십자종형_3단)
                    "195": WcWinTypeEnums._1W_1F_T_D_R,
                    "194": WcWinTypeEnums._1W_1F_T_D_L,
                    "193": WcWinTypeEnums._1W_1F_T_R,
                    "192": WcWinTypeEnums._1W_1F_T_L,
                    "191": WcWinTypeEnums._1W_T_D_R,
                    "190": WcWinTypeEnums._1W_T_D_L,
                    "189": WcWinTypeEnums._1W_T_R,
                    "188": WcWinTypeEnums._1W_T_L,
                    "185": WcWinTypeEnums._2W_U_END_R,
                    "184": WcWinTypeEnums._2W_U_END_L,
                    "183": WcWinTypeEnums._1W_U_CB_PJ,
                    "182": WcWinTypeEnums._1W_U_END_CB_PJ,
                    "181": WcWinTypeEnums._2W_4W_R_SS,
                    "180": WcWinTypeEnums._2W_4W_L_SS,
                    //"168": WcWinTypeEnums._1V_1F_1V_I_FP,      // FP_1V/1F/1V(↕)
                    //"167": WcWinTypeEnums._1F_1F_2W_I_R,       // FS_1F/1F/2W(↕)_우
                    //"166": WcWinTypeEnums._1F_1F_2W_I_L,       // FS_1F/1F/2W(↕)_좌
                    //"163": WcWinTypeEnums._1F_2W_1F_I_R,       // FS_1F/2W/1F(↕)_우
                    //"162": WcWinTypeEnums._1F_2W_1F_I_L,       // FS_1F/2W/1F(↕)_좌
                    //"161": WcWinTypeEnums._1F_1V_1F_I_V,       // FP_1F/1V/1F(↕)_V용접
                    //"160": WcWinTypeEnums._1F_1V_1F_I_J,       // FP_1F/1V/1F(↕)_쪼인
                    "159": WcWinTypeEnums._1F_2V_V,
                    "158": WcWinTypeEnums._1F_2V_J,
                    "157": WcWinTypeEnums._2F_I_V,
                    "156": WcWinTypeEnums._2F_I_J,
                    //"155": WcWinTypeEnums._1F_1W_1F_I_A,       // FP_1F/1V/1F(↕)_조립
                    "154": WcWinTypeEnums._1F_2V_A,
                    "153": WcWinTypeEnums._2F_I_A,
                    "152": WcWinTypeEnums._1FIX_U_3,
                    "151": WcWinTypeEnums._1FIX_U_4,
                    //"137": WcWinTypeEnums._4W_CS,              // 4W_CS
                    //"136": WcWinTypeEnums._3W_UB_CS,           // 3W_UB_CS
                    //"133": WcWinTypeEnums._2W_UB_CS_R,         // 2W_UB(우)_CS
                    //"132": WcWinTypeEnums._2W_UB_CS_L,         // 2W_UB(좌)_CS
                    //"131": WcWinTypeEnums._2W_CS_R,            // 2W_정(우)_CS
                    //"130": WcWinTypeEnums._2W_CS_L,            // 2W_정(좌)_CS
                    "126": WcWinTypeEnums._2W_P,
                    "123": WcWinTypeEnums._8W_UB_R,
                    "122": WcWinTypeEnums._8W_UB_L,
                    "119": WcWinTypeEnums._6W_L,
                    "103": WcWinTypeEnums._1W_PJ,
                    "101": WcWinTypeEnums._1W_MF,
                    //"88": WcWinTypeEnums._2W_2W_CS_I_R,        // SS_2W/2W(CS)
                    //"87": WcWinTypeEnums._2W_2W_CS_I_L,        // SS_2W/2W(CS)
                    "86": WcWinTypeEnums._3W_UB_1FIX_I,
                    //"78": WcWinTypeEnums._8W_CS_R,             // SS_8W_CS_R(UB십자)
                    //"77": WcWinTypeEnums._8W_CS_L,             // SS_8W_CS_L(UB십자)
                    //"72": WcWinTypeEnums._4W_CS_I_R,           // SS_4W_CS(↓종형)
                    //"71": WcWinTypeEnums._4W_CS_I_L,           // SS_4W_CS(↓종형)
                    "68": WcWinTypeEnums._8W_R,
                    "67": WcWinTypeEnums._8W_L,
                    //"66": WcWinTypeEnums._6W_UB_I_R,           // SS_6W U/B(↕종형)
                    //"65": WcWinTypeEnums._6W_UB_I_L,           // SS_6W U/B(↕종형)
                    "64": WcWinTypeEnums._6W_R_SS,
                    "63": WcWinTypeEnums._6W_L_SS,
                    "60": WcWinTypeEnums._4W_R_SS,
                    "59": WcWinTypeEnums._4W_L_SS,
                    "58": WcWinTypeEnums._4W_I_R_SS,
                    "57": WcWinTypeEnums._4W_I_L_SS,
                    "56": WcWinTypeEnums._2W_2FIX_LR_R,
                    "55": WcWinTypeEnums._2W_2FIX_LR_L,
                    "54": WcWinTypeEnums._4W_4FIX_R,
                    "53": WcWinTypeEnums._4W_4FIX_L,
                    "52": WcWinTypeEnums._4W_2FIX_R,
                    "51": WcWinTypeEnums._4W_1FIX_I_R,
                    //"47": WcWinTypeEnums._2W_2FIX_I_R,         // FS_2W/2FIX(↕)_R
                    "45": WcWinTypeEnums._2W_2FIX_FS,
                    "42": WcWinTypeEnums._4W_2FIX_L,
                    "41": WcWinTypeEnums._2W_1FIX_I_R,
                    "39": WcWinTypeEnums._4W_1FIX_I,
                    "38": WcWinTypeEnums._3W_1FIX_I,
                    //"34": WcWinTypeEnums._2W_2FIX_I_L,         // FS_2W/2FIX(↕)_L
                    "33": WcWinTypeEnums._2W_4FIX,
                    "32": WcWinTypeEnums._2W_2FIX,
                    "31": WcWinTypeEnums._2W_3FIX_I,
                    "29": WcWinTypeEnums._2W_1FIX_I,
                    "28": WcWinTypeEnums._2W_2FIX_I,
                    "27": WcWinTypeEnums._2W_1FIX_I_L,
                    "26": WcWinTypeEnums._2W_I,
                    "25": WcWinTypeEnums._1W_4FIX_I,
                    "24": WcWinTypeEnums._1W_3FIX_I,
                    "23": WcWinTypeEnums._1W_2FIX_I,
                    "22": WcWinTypeEnums._1W_1FIX_I,
                    "21": WcWinTypeEnums._1W_FIX,
                    "20": WcWinTypeEnums._1W_FIX_I,
                    "19": WcWinTypeEnums._1W,
                    "18": WcWinTypeEnums._3Fix_I,
                    "17": WcWinTypeEnums._2Fix_I,
                    "16": WcWinTypeEnums._4Fix_Rect,
                    "15": WcWinTypeEnums._3Fix,
                    "14": WcWinTypeEnums._2Fix,
                    "13": WcWinTypeEnums._WH,
                    "12": WcWinTypeEnums._Fix,
                    "10": WcWinTypeEnums._3W_UB,
                    "09": WcWinTypeEnums._3W_1_1_1,
                    "08": WcWinTypeEnums._2W_UB_Right,
                    "07": WcWinTypeEnums._4W_LR,
                    "06": WcWinTypeEnums._2W_UB_Left,
                    "05": WcWinTypeEnums._3W_1_2_1,
                    "04": WcWinTypeEnums._4W_Center,
                    "03": WcWinTypeEnums._2W_Right,
                    "02": WcWinTypeEnums._2W_Left,
                    "없음": WcWinTypeEnums.None,
                };
                return WcWinTypeConverter;
            }());
            Models.WcWinTypeConverter = WcWinTypeConverter;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="../../u1/documents/uelement.ts" />
/// <reference path="wcwintypeenums.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            Models.WinCreater = {};
            function FindWinType(elm) {
                var constructor = elm.constructor;
                for (var idx in Models.WinCreater) {
                    if (Models.WinCreater[idx] === constructor)
                        return idx;
                }
                return "";
            }
            Models.FindWinType = FindWinType;
            var WcWinElement = (function (_super) {
                __extends(WcWinElement, _super);
                function WcWinElement() {
                    _super.apply(this, arguments);
                    //Fields
                    this.w = new U1.UFieldFloat(2000);
                    this.h = new U1.UFieldFloat(1000);
                    this.showInsectNet = new U1.UFieldBool(true);
                    this.showDim = new U1.UFieldBool(true);
                    this.w1 = new U1.UFieldFloat(1000);
                    this.h1 = new U1.UFieldFloat(500);
                    this.hndlLocW = new U1.UFieldFloat(1000);
                    this.hndlLocH = new U1.UFieldFloat(0);
                }
                Object.defineProperty(WcWinElement.prototype, "W", {
                    //Properties
                    get: function () {
                        return this.w.GetCurrent(this);
                    },
                    set: function (value) {
                        this.w.SetCurrent(this, "W", value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WcWinElement.prototype, "H", {
                    get: function () {
                        return this.h.GetCurrent(this);
                    },
                    set: function (value) {
                        this.h.SetCurrent(this, "H", value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WcWinElement.prototype, "ShowInsectNet", {
                    get: function () {
                        return this.showInsectNet.GetCurrent(this);
                    },
                    set: function (value) {
                        this.showInsectNet.SetCurrent(this, "ShowInsectNet", value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WcWinElement.prototype, "ShowDim", {
                    get: function () {
                        return this.showDim.GetCurrent(this);
                    },
                    set: function (value) {
                        this.showDim.SetCurrent(this, "ShowDim", value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WcWinElement.prototype, "W1", {
                    get: function () {
                        return this.w1.GetCurrent(this);
                    },
                    set: function (value) {
                        this.w1.SetCurrent(this, "W1", value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WcWinElement.prototype, "H1", {
                    get: function () {
                        return this.h1.GetCurrent(this);
                    },
                    set: function (value) {
                        this.h1.SetCurrent(this, "H1", value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WcWinElement.prototype, "HndlLocW", {
                    get: function () {
                        return this.hndlLocW.GetCurrent(this);
                    },
                    set: function (value) {
                        this.hndlLocW.SetCurrent(this, "HndlLocW", value);
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WcWinElement.prototype, "HndlLocH", {
                    get: function () {
                        return this.hndlLocH.GetCurrent(this);
                    },
                    set: function (value) {
                        this.hndlLocH.SetCurrent(this, "HndlLocH", value);
                    },
                    enumerable: true,
                    configurable: true
                });
                WcWinElement.prototype.CanHaveInsectNet = function () {
                    return true;
                };
                //Methods
                WcWinElement.prototype.OnGetFields = function (fieldSet) {
                    _super.prototype.OnGetFields.call(this, fieldSet);
                    fieldSet.AddField("W", this.w);
                    fieldSet.AddField("H", this.h);
                    fieldSet.AddField("ShowInsectNet", this.showInsectNet);
                    fieldSet.AddField("ShowDim", this.showDim);
                    fieldSet.AddField("W1", this.w1);
                    fieldSet.AddField("H1", this.h1);
                    fieldSet.AddField("HndlLocW", this.hndlLocW);
                    fieldSet.AddField("HndlLocH", this.hndlLocH);
                };
                WcWinElement.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = [];
                    if (this.CanHaveInsectNet()) {
                        uprops.push(new U1.UPropBool({
                            Source: this,
                            SourceProperty: "ShowInsectNet",
                            Category: this.PropertyCategory,
                            Label: "방충망",
                            GetValueFunc: function (p_) { return _this.ShowInsectNet; },
                            SetValueFunc: function (p_, v_) { return _this.ShowInsectNet = v_; }
                        }));
                    }
                    uprops.push(new U1.UPropBool({
                        Source: this,
                        SourceProperty: "ShowDim",
                        Category: this.PropertyCategory,
                        Label: "치수",
                        GetValueFunc: function (p_) { return _this.ShowDim; },
                        SetValueFunc: function (p_, v_) { return _this.ShowDim = v_; }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W",
                        Category: this.PropertyCategory,
                        Label: "W",
                        GetValueFunc: function (p_) { return _this.W; },
                        SetValueFunc: function (p_, v_) { return _this.W = v_; }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H",
                        Category: this.PropertyCategory,
                        Label: "H",
                        GetValueFunc: function (p_) { return _this.H; },
                        SetValueFunc: function (p_, v_) { return _this.H = v_; }
                    }));
                    return uprops;
                };
                return WcWinElement;
            }(U1.UElement));
            Models.WcWinElement = WcWinElement;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _2W_1FIX_I_L = (function (_super) {
                __extends(_2W_1FIX_I_L, _super);
                function _2W_1FIX_I_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_1FIX_I_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_1FIX_I_L;
            }(Models.WcWinElement));
            Models._2W_1FIX_I_L = _2W_1FIX_I_L;
            var _2W_2FIX_I = (function (_super) {
                __extends(_2W_2FIX_I, _super);
                function _2W_2FIX_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 2000);
                }
                _2W_2FIX_I.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2FIX_I;
            }(Models.WcWinElement));
            Models._2W_2FIX_I = _2W_2FIX_I;
            var _2W_1FIX_I = (function (_super) {
                __extends(_2W_1FIX_I, _super);
                function _2W_1FIX_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_1FIX_I.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_1FIX_I;
            }(Models.WcWinElement));
            Models._2W_1FIX_I = _2W_1FIX_I;
            var _2W_3FIX_I = (function (_super) {
                __extends(_2W_3FIX_I, _super);
                function _2W_3FIX_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 4000);
                    this.h1.SetCurrent(this, "H1", 3000);
                }
                _2W_3FIX_I.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_3FIX_I;
            }(Models.WcWinElement));
            Models._2W_3FIX_I = _2W_3FIX_I;
            var _2W_2FIX = (function (_super) {
                __extends(_2W_2FIX, _super);
                function _2W_2FIX() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_2FIX.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2FIX;
            }(Models.WcWinElement));
            Models._2W_2FIX = _2W_2FIX;
            var _2W_4FIX = (function (_super) {
                __extends(_2W_4FIX, _super);
                function _2W_4FIX() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 2000);
                }
                _2W_4FIX.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_4FIX;
            }(Models.WcWinElement));
            Models._2W_4FIX = _2W_4FIX;
            var _2W_2FIX_I_L = (function (_super) {
                __extends(_2W_2FIX_I_L, _super);
                function _2W_2FIX_I_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_2FIX_I_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2FIX_I_L;
            }(Models.WcWinElement));
            Models._2W_2FIX_I_L = _2W_2FIX_I_L;
            var _2W_1FIX_I_R = (function (_super) {
                __extends(_2W_1FIX_I_R, _super);
                function _2W_1FIX_I_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_1FIX_I_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_1FIX_I_R;
            }(Models.WcWinElement));
            Models._2W_1FIX_I_R = _2W_1FIX_I_R;
            var _2W_2FIX_FS = (function (_super) {
                __extends(_2W_2FIX_FS, _super);
                function _2W_2FIX_FS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_2FIX_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2FIX_FS;
            }(Models.WcWinElement));
            Models._2W_2FIX_FS = _2W_2FIX_FS;
            var _2W_2FIX_I_R = (function (_super) {
                __extends(_2W_2FIX_I_R, _super);
                function _2W_2FIX_I_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_2FIX_I_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2FIX_I_R;
            }(Models.WcWinElement));
            Models._2W_2FIX_I_R = _2W_2FIX_I_R;
            var _2W_2FIX_LR_L = (function (_super) {
                __extends(_2W_2FIX_LR_L, _super);
                function _2W_2FIX_LR_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 1000);
                    this.w1.SetCurrent(this, "W1", 2000);
                }
                _2W_2FIX_LR_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2FIX_LR_L;
            }(Models.WcWinElement));
            Models._2W_2FIX_LR_L = _2W_2FIX_LR_L;
            var _2W_2FIX_LR_R = (function (_super) {
                __extends(_2W_2FIX_LR_R, _super);
                function _2W_2FIX_LR_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 1000);
                    this.w1.SetCurrent(this, "W1", 2000);
                }
                _2W_2FIX_LR_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2FIX_LR_R;
            }(Models.WcWinElement));
            Models._2W_2FIX_LR_R = _2W_2FIX_LR_R;
            var _1F_2W_1F_I_L = (function (_super) {
                __extends(_1F_2W_1F_I_L, _super);
                function _1F_2W_1F_I_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1F_2W_1F_I_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_2W_1F_I_L;
            }(Models.WcWinElement));
            Models._1F_2W_1F_I_L = _1F_2W_1F_I_L;
            var _1F_2W_1F_I_R = (function (_super) {
                __extends(_1F_2W_1F_I_R, _super);
                function _1F_2W_1F_I_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1F_2W_1F_I_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_2W_1F_I_R;
            }(Models.WcWinElement));
            Models._1F_2W_1F_I_R = _1F_2W_1F_I_R;
            var _1F_1F_2W_I_L = (function (_super) {
                __extends(_1F_1F_2W_I_L, _super);
                function _1F_1F_2W_I_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1F_1F_2W_I_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_1F_2W_I_L;
            }(Models.WcWinElement));
            Models._1F_1F_2W_I_L = _1F_1F_2W_I_L;
            var _1F_1F_2W_I_R = (function (_super) {
                __extends(_1F_1F_2W_I_R, _super);
                function _1F_1F_2W_I_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1F_1F_2W_I_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_1F_2W_I_R;
            }(Models.WcWinElement));
            Models._1F_1F_2W_I_R = _1F_1F_2W_I_R;
            var _1F_2V_A = (function (_super) {
                __extends(_1F_2V_A, _super);
                function _1F_2V_A() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 1000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1F_2V_A.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_2V_A;
            }(Models.WcWinElement));
            Models._1F_2V_A = _1F_2V_A;
            var _1F_2V_J = (function (_super) {
                __extends(_1F_2V_J, _super);
                function _1F_2V_J() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 1000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1F_2V_J.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_2V_J;
            }(Models.WcWinElement));
            Models._1F_2V_J = _1F_2V_J;
            var _1F_2V_V = (function (_super) {
                __extends(_1F_2V_V, _super);
                function _1F_2V_V() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 1000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1F_2V_V.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_2V_V;
            }(Models.WcWinElement));
            Models._1F_2V_V = _1F_2V_V;
            var _2W_2F_UB_L = (function (_super) {
                __extends(_2W_2F_UB_L, _super);
                function _2W_2F_UB_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 1000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_2F_UB_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2F_UB_L;
            }(Models.WcWinElement));
            Models._2W_2F_UB_L = _2W_2F_UB_L;
            var _2W_2F_UB_R = (function (_super) {
                __extends(_2W_2F_UB_R, _super);
                function _2W_2F_UB_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 1000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_2F_UB_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2F_UB_R;
            }(Models.WcWinElement));
            Models._2W_2F_UB_R = _2W_2F_UB_R;
            var _2W_1F_PI = (function (_super) {
                __extends(_2W_1F_PI, _super);
                function _2W_1F_PI() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 1000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_1F_PI.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_1F_PI;
            }(Models.WcWinElement));
            Models._2W_1F_PI = _2W_1F_PI;
            var _2W_UB_2F_UB_L_FS = (function (_super) {
                __extends(_2W_UB_2F_UB_L_FS, _super);
                function _2W_UB_2F_UB_L_FS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 1000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_UB_2F_UB_L_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_UB_2F_UB_L_FS;
            }(Models.WcWinElement));
            Models._2W_UB_2F_UB_L_FS = _2W_UB_2F_UB_L_FS;
            var _2W_UB_2F_UB_R_FS = (function (_super) {
                __extends(_2W_UB_2F_UB_R_FS, _super);
                function _2W_UB_2F_UB_R_FS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 1000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_UB_2F_UB_R_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_UB_2F_UB_R_FS;
            }(Models.WcWinElement));
            Models._2W_UB_2F_UB_R_FS = _2W_UB_2F_UB_R_FS;
            var _2W_2F_FP = (function (_super) {
                __extends(_2W_2F_FP, _super);
                function _2W_2F_FP() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 1000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_2F_FP.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2F_FP;
            }(Models.WcWinElement));
            Models._2W_2F_FP = _2W_2F_FP;
            var _2W_2F_T_L_FS = (function (_super) {
                __extends(_2W_2F_T_L_FS, _super);
                function _2W_2F_T_L_FS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_2F_T_L_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2F_T_L_FS;
            }(Models.WcWinElement));
            Models._2W_2F_T_L_FS = _2W_2F_T_L_FS;
            var _2W_2F_T_R_FS = (function (_super) {
                __extends(_2W_2F_T_R_FS, _super);
                function _2W_2F_T_R_FS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_2F_T_R_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2F_T_R_FS;
            }(Models.WcWinElement));
            Models._2W_2F_T_R_FS = _2W_2F_T_R_FS;
            Models.WinCreater[Models.WcWinTypeEnums._2W_1FIX_I_L] = _2W_1FIX_I_L;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2FIX_I] = _2W_2FIX_I;
            Models.WinCreater[Models.WcWinTypeEnums._2W_1FIX_I] = _2W_1FIX_I;
            Models.WinCreater[Models.WcWinTypeEnums._2W_3FIX_I] = _2W_3FIX_I;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2FIX] = _2W_2FIX;
            Models.WinCreater[Models.WcWinTypeEnums._2W_4FIX] = _2W_4FIX;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2FIX_I_L] = _2W_2FIX_I_L;
            Models.WinCreater[Models.WcWinTypeEnums._2W_1FIX_I_R] = _2W_1FIX_I_R;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2FIX_FS] = _2W_2FIX_FS;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2FIX_I_R] = _2W_2FIX_I_R;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2FIX_LR_L] = _2W_2FIX_LR_L;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2FIX_LR_R] = _2W_2FIX_LR_R;
            Models.WinCreater[Models.WcWinTypeEnums._1F_2W_1F_I_L] = _1F_2W_1F_I_L;
            Models.WinCreater[Models.WcWinTypeEnums._1F_2W_1F_I_R] = _1F_2W_1F_I_R;
            Models.WinCreater[Models.WcWinTypeEnums._1F_1F_2W_I_L] = _1F_1F_2W_I_L;
            Models.WinCreater[Models.WcWinTypeEnums._1F_1F_2W_I_R] = _1F_1F_2W_I_R;
            Models.WinCreater[Models.WcWinTypeEnums._1F_2V_A] = _1F_2V_A;
            Models.WinCreater[Models.WcWinTypeEnums._1F_2V_J] = _1F_2V_J;
            Models.WinCreater[Models.WcWinTypeEnums._1F_2V_V] = _1F_2V_V;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2F_UB_L] = _2W_2F_UB_L;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2F_UB_R] = _2W_2F_UB_R;
            Models.WinCreater[Models.WcWinTypeEnums._2W_1F_PI] = _2W_1F_PI;
            Models.WinCreater[Models.WcWinTypeEnums._2W_UB_2F_UB_L_FS] = _2W_UB_2F_UB_L_FS;
            Models.WinCreater[Models.WcWinTypeEnums._2W_UB_2F_UB_R_FS] = _2W_UB_2F_UB_R_FS;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2F_FP] = _2W_2F_FP;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2F_T_L_FS] = _2W_2F_T_L_FS;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2F_T_R_FS] = _2W_2F_T_R_FS;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _1W_FIX = (function (_super) {
                __extends(_1W_FIX, _super);
                function _1W_FIX() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                _1W_FIX.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_FIX;
            }(Models.WcWinElement));
            Models._1W_FIX = _1W_FIX;
            var _1W_FIX_I = (function (_super) {
                __extends(_1W_FIX_I, _super);
                function _1W_FIX_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h1.GetCurrent(this) / 2);
                }
                _1W_FIX_I.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_FIX_I;
            }(Models.WcWinElement));
            Models._1W_FIX_I = _1W_FIX_I;
            var _1W_1FIX_I = (function (_super) {
                __extends(_1W_1FIX_I, _super);
                function _1W_1FIX_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1W_1FIX_I.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_1FIX_I;
            }(Models.WcWinElement));
            Models._1W_1FIX_I = _1W_1FIX_I;
            var _1W_2FIX_I = (function (_super) {
                __extends(_1W_2FIX_I, _super);
                function _1W_2FIX_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1W_2FIX_I.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_2FIX_I;
            }(Models.WcWinElement));
            Models._1W_2FIX_I = _1W_2FIX_I;
            var _1W_3FIX_I = (function (_super) {
                __extends(_1W_3FIX_I, _super);
                function _1W_3FIX_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 4000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1W_3FIX_I.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_3FIX_I;
            }(Models.WcWinElement));
            Models._1W_3FIX_I = _1W_3FIX_I;
            var _1W_4FIX_I = (function (_super) {
                __extends(_1W_4FIX_I, _super);
                function _1W_4FIX_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 5000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1W_4FIX_I.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_4FIX_I;
            }(Models.WcWinElement));
            Models._1W_4FIX_I = _1W_4FIX_I;
            var _1F_1W_TD_L = (function (_super) {
                __extends(_1F_1W_TD_L, _super);
                function _1F_1W_TD_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h1.GetCurrent(this) / 2);
                }
                _1F_1W_TD_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_1W_TD_L;
            }(Models.WcWinElement));
            Models._1F_1W_TD_L = _1F_1W_TD_L;
            var _1F_1W_TD_R = (function (_super) {
                __extends(_1F_1W_TD_R, _super);
                function _1F_1W_TD_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h1.GetCurrent(this) / 2);
                }
                _1F_1W_TD_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_1W_TD_R;
            }(Models.WcWinElement));
            Models._1F_1W_TD_R = _1F_1W_TD_R;
            var _1F_1W_TD_D_L = (function (_super) {
                __extends(_1F_1W_TD_D_L, _super);
                function _1F_1W_TD_D_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1600);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h1.GetCurrent(this) / 2);
                }
                _1F_1W_TD_D_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_1W_TD_D_L;
            }(Models.WcWinElement));
            Models._1F_1W_TD_D_L = _1F_1W_TD_D_L;
            var _1F_1W_TD_D_R = (function (_super) {
                __extends(_1F_1W_TD_D_R, _super);
                function _1F_1W_TD_D_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h1.GetCurrent(this) / 2);
                }
                _1F_1W_TD_D_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_1W_TD_D_R;
            }(Models.WcWinElement));
            Models._1F_1W_TD_D_R = _1F_1W_TD_D_R;
            var _1F_1W_1F_I_A = (function (_super) {
                __extends(_1F_1W_1F_I_A, _super);
                function _1F_1W_1F_I_A() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1F_1W_1F_I_A.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_1W_1F_I_A;
            }(Models.WcWinElement));
            Models._1F_1W_1F_I_A = _1F_1W_1F_I_A;
            var _1F_1V_1F_I_J = (function (_super) {
                __extends(_1F_1V_1F_I_J, _super);
                function _1F_1V_1F_I_J() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1F_1V_1F_I_J.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_1V_1F_I_J;
            }(Models.WcWinElement));
            Models._1F_1V_1F_I_J = _1F_1V_1F_I_J;
            var _1F_1V_1F_I_V = (function (_super) {
                __extends(_1F_1V_1F_I_V, _super);
                function _1F_1V_1F_I_V() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1F_1V_1F_I_V.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_1V_1F_I_V;
            }(Models.WcWinElement));
            Models._1F_1V_1F_I_V = _1F_1V_1F_I_V;
            var _1V_1F_1V_I_FP = (function (_super) {
                __extends(_1V_1F_1V_I_FP, _super);
                function _1V_1F_1V_I_FP() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1V_1F_1V_I_FP.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1V_1F_1V_I_FP;
            }(Models.WcWinElement));
            Models._1V_1F_1V_I_FP = _1V_1F_1V_I_FP;
            var _1W_1F_T_L = (function (_super) {
                __extends(_1W_1F_T_L, _super);
                function _1W_1F_T_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h1.GetCurrent(this) / 2);
                }
                _1W_1F_T_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_1F_T_L;
            }(Models.WcWinElement));
            Models._1W_1F_T_L = _1W_1F_T_L;
            var _1W_1F_T_R = (function (_super) {
                __extends(_1W_1F_T_R, _super);
                function _1W_1F_T_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h1.GetCurrent(this) / 2);
                }
                _1W_1F_T_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_1F_T_R;
            }(Models.WcWinElement));
            Models._1W_1F_T_R = _1W_1F_T_R;
            var _1W_1F_T_D_L = (function (_super) {
                __extends(_1W_1F_T_D_L, _super);
                function _1W_1F_T_D_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h1.GetCurrent(this) / 2);
                }
                _1W_1F_T_D_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_1F_T_D_L;
            }(Models.WcWinElement));
            Models._1W_1F_T_D_L = _1W_1F_T_D_L;
            var _1W_1F_T_D_R = (function (_super) {
                __extends(_1W_1F_T_D_R, _super);
                function _1W_1F_T_D_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h1.GetCurrent(this) / 2);
                }
                _1W_1F_T_D_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_1F_T_D_R;
            }(Models.WcWinElement));
            Models._1W_1F_T_D_R = _1W_1F_T_D_R;
            var _1W_1F_PI = (function (_super) {
                __extends(_1W_1F_PI, _super);
                function _1W_1F_PI() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1W_1F_PI.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_1F_PI;
            }(Models.WcWinElement));
            Models._1W_1F_PI = _1W_1F_PI;
            var _1W_1F_L_PJ = (function (_super) {
                __extends(_1W_1F_L_PJ, _super);
                function _1W_1F_L_PJ() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 1000);
                    this.w1.SetCurrent(this, "W1", 1000);
                }
                _1W_1F_L_PJ.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_1F_L_PJ;
            }(Models.WcWinElement));
            Models._1W_1F_L_PJ = _1W_1F_L_PJ;
            var _1W_1F_R_PJ = (function (_super) {
                __extends(_1W_1F_R_PJ, _super);
                function _1W_1F_R_PJ() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 1000);
                    this.w1.SetCurrent(this, "W1", 1000);
                }
                _1W_1F_R_PJ.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_1F_R_PJ;
            }(Models.WcWinElement));
            Models._1W_1F_R_PJ = _1W_1F_R_PJ;
            var _1W_1F_1F_1F_UB_FP = (function (_super) {
                __extends(_1W_1F_1F_1F_UB_FP, _super);
                function _1W_1F_1F_1F_UB_FP() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 1000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1W_1F_1F_1F_UB_FP.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_1F_1F_1F_UB_FP;
            }(Models.WcWinElement));
            Models._1W_1F_1F_1F_UB_FP = _1W_1F_1F_1F_UB_FP;
            var _1W_1F_I_PJ = (function (_super) {
                __extends(_1W_1F_I_PJ, _super);
                function _1W_1F_I_PJ() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1W_1F_I_PJ.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_1F_I_PJ;
            }(Models.WcWinElement));
            Models._1W_1F_I_PJ = _1W_1F_I_PJ;
            Models.WinCreater[Models.WcWinTypeEnums._1W_FIX] = _1W_FIX;
            Models.WinCreater[Models.WcWinTypeEnums._1W_FIX_I] = _1W_FIX_I;
            Models.WinCreater[Models.WcWinTypeEnums._1W_1FIX_I] = _1W_1FIX_I;
            Models.WinCreater[Models.WcWinTypeEnums._1W_2FIX_I] = _1W_2FIX_I;
            Models.WinCreater[Models.WcWinTypeEnums._1W_3FIX_I] = _1W_3FIX_I;
            Models.WinCreater[Models.WcWinTypeEnums._1W_4FIX_I] = _1W_4FIX_I;
            Models.WinCreater[Models.WcWinTypeEnums._1F_1W_TD_L] = _1F_1W_TD_L;
            Models.WinCreater[Models.WcWinTypeEnums._1F_1W_TD_R] = _1F_1W_TD_R;
            Models.WinCreater[Models.WcWinTypeEnums._1F_1W_TD_D_L] = _1F_1W_TD_D_L;
            Models.WinCreater[Models.WcWinTypeEnums._1F_1W_TD_D_R] = _1F_1W_TD_D_R;
            Models.WinCreater[Models.WcWinTypeEnums._1F_1W_1F_I_A] = _1F_1W_1F_I_A;
            Models.WinCreater[Models.WcWinTypeEnums._1F_1V_1F_I_J] = _1F_1V_1F_I_J;
            Models.WinCreater[Models.WcWinTypeEnums._1F_1V_1F_I_V] = _1F_1V_1F_I_V;
            Models.WinCreater[Models.WcWinTypeEnums._1V_1F_1V_I_FP] = _1V_1F_1V_I_FP;
            Models.WinCreater[Models.WcWinTypeEnums._1W_1F_T_L] = _1W_1F_T_L;
            Models.WinCreater[Models.WcWinTypeEnums._1W_1F_T_R] = _1W_1F_T_R;
            Models.WinCreater[Models.WcWinTypeEnums._1W_1F_T_D_L] = _1W_1F_T_D_L;
            Models.WinCreater[Models.WcWinTypeEnums._1W_1F_T_D_R] = _1W_1F_T_D_R;
            Models.WinCreater[Models.WcWinTypeEnums._1W_1F_PI] = _1W_1F_PI;
            Models.WinCreater[Models.WcWinTypeEnums._1W_1F_L_PJ] = _1W_1F_L_PJ;
            Models.WinCreater[Models.WcWinTypeEnums._1W_1F_R_PJ] = _1W_1F_R_PJ;
            Models.WinCreater[Models.WcWinTypeEnums._1W_1F_1F_1F_UB_FP] = _1W_1F_1F_1F_UB_FP;
            Models.WinCreater[Models.WcWinTypeEnums._1W_1F_I_PJ] = _1W_1F_I_PJ;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _1W = (function (_super) {
                __extends(_1W, _super);
                function _1W() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W;
            }(Models.WcWinElement));
            Models._1W = _1W;
            var _1W_MF = (function (_super) {
                __extends(_1W_MF, _super);
                function _1W_MF() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _1W_MF;
            }(Models.WcWinElement));
            Models._1W_MF = _1W_MF;
            var _1W_PJ = (function (_super) {
                __extends(_1W_PJ, _super);
                function _1W_PJ() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _1W_PJ;
            }(Models.WcWinElement));
            Models._1W_PJ = _1W_PJ;
            var _1W_TD_L = (function (_super) {
                __extends(_1W_TD_L, _super);
                function _1W_TD_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_TD_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_TD_L;
            }(Models.WcWinElement));
            Models._1W_TD_L = _1W_TD_L;
            var _1W_TD_R = (function (_super) {
                __extends(_1W_TD_R, _super);
                function _1W_TD_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_TD_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_TD_R;
            }(Models.WcWinElement));
            Models._1W_TD_R = _1W_TD_R;
            var _1W_TD_D_L = (function (_super) {
                __extends(_1W_TD_D_L, _super);
                function _1W_TD_D_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_TD_D_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_TD_D_L;
            }(Models.WcWinElement));
            Models._1W_TD_D_L = _1W_TD_D_L;
            var _1W_TD_D_R = (function (_super) {
                __extends(_1W_TD_D_R, _super);
                function _1W_TD_D_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_TD_D_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_TD_D_R;
            }(Models.WcWinElement));
            Models._1W_TD_D_R = _1W_TD_D_R;
            var _1W_U_END_CB_PJ = (function (_super) {
                __extends(_1W_U_END_CB_PJ, _super);
                function _1W_U_END_CB_PJ() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _1W_U_END_CB_PJ;
            }(Models.WcWinElement));
            Models._1W_U_END_CB_PJ = _1W_U_END_CB_PJ;
            var _1W_U_CB_PJ = (function (_super) {
                __extends(_1W_U_CB_PJ, _super);
                function _1W_U_CB_PJ() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _1W_U_CB_PJ;
            }(Models.WcWinElement));
            Models._1W_U_CB_PJ = _1W_U_CB_PJ;
            var _1W_T_L = (function (_super) {
                __extends(_1W_T_L, _super);
                function _1W_T_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_T_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_T_L;
            }(Models.WcWinElement));
            Models._1W_T_L = _1W_T_L;
            var _1W_T_R = (function (_super) {
                __extends(_1W_T_R, _super);
                function _1W_T_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_T_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_T_R;
            }(Models.WcWinElement));
            Models._1W_T_R = _1W_T_R;
            var _1W_T_D_L = (function (_super) {
                __extends(_1W_T_D_L, _super);
                function _1W_T_D_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_T_D_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_T_D_L;
            }(Models.WcWinElement));
            Models._1W_T_D_L = _1W_T_D_L;
            var _1W_T_D_R = (function (_super) {
                __extends(_1W_T_D_R, _super);
                function _1W_T_D_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_T_D_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_T_D_R;
            }(Models.WcWinElement));
            Models._1W_T_D_R = _1W_T_D_R;
            var _1W_PI = (function (_super) {
                __extends(_1W_PI, _super);
                function _1W_PI() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _1W_PI;
            }(Models.WcWinElement));
            Models._1W_PI = _1W_PI;
            var _1W_L_V_H = (function (_super) {
                __extends(_1W_L_V_H, _super);
                function _1W_L_V_H() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_L_V_H.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_L_V_H;
            }(Models.WcWinElement));
            Models._1W_L_V_H = _1W_L_V_H;
            var _1W_R_V_H = (function (_super) {
                __extends(_1W_R_V_H, _super);
                function _1W_R_V_H() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_R_V_H.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_R_V_H;
            }(Models.WcWinElement));
            Models._1W_R_V_H = _1W_R_V_H;
            var _1W_L_N_H = (function (_super) {
                __extends(_1W_L_N_H, _super);
                function _1W_L_N_H() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_L_N_H.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_L_N_H;
            }(Models.WcWinElement));
            Models._1W_L_N_H = _1W_L_N_H;
            var _1W_R_N_H = (function (_super) {
                __extends(_1W_R_N_H, _super);
                function _1W_R_N_H() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_R_N_H.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_R_N_H;
            }(Models.WcWinElement));
            Models._1W_R_N_H = _1W_R_N_H;
            var _1W_C_N_H = (function (_super) {
                __extends(_1W_C_N_H, _super);
                function _1W_C_N_H() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _1W_C_N_H;
            }(Models.WcWinElement));
            Models._1W_C_N_H = _1W_C_N_H;
            var _1W_L_V_C = (function (_super) {
                __extends(_1W_L_V_C, _super);
                function _1W_L_V_C() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_L_V_C.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_L_V_C;
            }(Models.WcWinElement));
            Models._1W_L_V_C = _1W_L_V_C;
            var _1W_R_V_C = (function (_super) {
                __extends(_1W_R_V_C, _super);
                function _1W_R_V_C() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                /**
                 * 핸들
                 */
                _1W_R_V_C.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _1W_R_V_C;
            }(Models.WcWinElement));
            Models._1W_R_V_C = _1W_R_V_C;
            var _1W_L_N_C = (function (_super) {
                __extends(_1W_L_N_C, _super);
                function _1W_L_N_C() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _1W_L_N_C;
            }(Models.WcWinElement));
            Models._1W_L_N_C = _1W_L_N_C;
            var _1W_R_N_C = (function (_super) {
                __extends(_1W_R_N_C, _super);
                function _1W_R_N_C() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _1W_R_N_C;
            }(Models.WcWinElement));
            Models._1W_R_N_C = _1W_R_N_C;
            var _1W_C_N_C = (function (_super) {
                __extends(_1W_C_N_C, _super);
                function _1W_C_N_C() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _1W_C_N_C;
            }(Models.WcWinElement));
            Models._1W_C_N_C = _1W_C_N_C;
            Models.WinCreater[Models.WcWinTypeEnums._1W] = _1W;
            Models.WinCreater[Models.WcWinTypeEnums._1W_MF] = _1W_MF;
            Models.WinCreater[Models.WcWinTypeEnums._1W_PJ] = _1W_PJ;
            Models.WinCreater[Models.WcWinTypeEnums._1W_TD_L] = _1W_TD_L;
            Models.WinCreater[Models.WcWinTypeEnums._1W_TD_R] = _1W_TD_R;
            Models.WinCreater[Models.WcWinTypeEnums._1W_TD_D_L] = _1W_TD_D_L;
            Models.WinCreater[Models.WcWinTypeEnums._1W_TD_D_R] = _1W_TD_D_R;
            Models.WinCreater[Models.WcWinTypeEnums._1W_U_END_CB_PJ] = _1W_U_END_CB_PJ;
            Models.WinCreater[Models.WcWinTypeEnums._1W_U_CB_PJ] = _1W_U_CB_PJ;
            Models.WinCreater[Models.WcWinTypeEnums._1W_T_L] = _1W_T_L;
            Models.WinCreater[Models.WcWinTypeEnums._1W_T_R] = _1W_T_R;
            Models.WinCreater[Models.WcWinTypeEnums._1W_T_D_L] = _1W_T_D_L;
            Models.WinCreater[Models.WcWinTypeEnums._1W_T_D_R] = _1W_T_D_R;
            Models.WinCreater[Models.WcWinTypeEnums._1W_PI] = _1W_PI;
            Models.WinCreater[Models.WcWinTypeEnums._1W_L_V_H] = _1W_L_V_H;
            Models.WinCreater[Models.WcWinTypeEnums._1W_R_V_H] = _1W_R_V_H;
            Models.WinCreater[Models.WcWinTypeEnums._1W_L_N_H] = _1W_L_N_H;
            Models.WinCreater[Models.WcWinTypeEnums._1W_R_N_H] = _1W_R_N_H;
            Models.WinCreater[Models.WcWinTypeEnums._1W_C_N_H] = _1W_C_N_H;
            Models.WinCreater[Models.WcWinTypeEnums._1W_L_V_C] = _1W_L_V_C;
            Models.WinCreater[Models.WcWinTypeEnums._1W_R_V_C] = _1W_R_V_C;
            Models.WinCreater[Models.WcWinTypeEnums._1W_L_N_C] = _1W_L_N_C;
            Models.WinCreater[Models.WcWinTypeEnums._1W_R_N_C] = _1W_R_N_C;
            Models.WinCreater[Models.WcWinTypeEnums._1W_C_N_C] = _1W_C_N_C;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _12W_I_UB_SS_L = (function (_super) {
                __extends(_12W_I_UB_SS_L, _super);
                function _12W_I_UB_SS_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _12W_I_UB_SS_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _12W_I_UB_SS_L;
            }(Models.WcWinElement));
            Models._12W_I_UB_SS_L = _12W_I_UB_SS_L;
            var _12W_I_UB_SS_R = (function (_super) {
                __extends(_12W_I_UB_SS_R, _super);
                function _12W_I_UB_SS_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _12W_I_UB_SS_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _12W_I_UB_SS_R;
            }(Models.WcWinElement));
            Models._12W_I_UB_SS_R = _12W_I_UB_SS_R;
            var _12W_UB_L_SS = (function (_super) {
                __extends(_12W_UB_L_SS, _super);
                function _12W_UB_L_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 6000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _12W_UB_L_SS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _12W_UB_L_SS;
            }(Models.WcWinElement));
            Models._12W_UB_L_SS = _12W_UB_L_SS;
            var _12W_UB_R_SS = (function (_super) {
                __extends(_12W_UB_R_SS, _super);
                function _12W_UB_R_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 6000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _12W_UB_R_SS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _12W_UB_R_SS;
            }(Models.WcWinElement));
            Models._12W_UB_R_SS = _12W_UB_R_SS;
            Models.WinCreater[Models.WcWinTypeEnums._12W_I_UB_SS_L] = _12W_I_UB_SS_L;
            Models.WinCreater[Models.WcWinTypeEnums._12W_I_UB_SS_R] = _12W_I_UB_SS_R;
            Models.WinCreater[Models.WcWinTypeEnums._12W_UB_L_SS] = _12W_UB_L_SS;
            Models.WinCreater[Models.WcWinTypeEnums._12W_UB_R_SS] = _12W_UB_R_SS;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _6W_1F_I_L_FS = (function (_super) {
                __extends(_6W_1F_I_L_FS, _super);
                function _6W_1F_I_L_FS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 6000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _6W_1F_I_L_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _6W_1F_I_L_FS;
            }(Models.WcWinElement));
            Models._6W_1F_I_L_FS = _6W_1F_I_L_FS;
            var _6W_1F_I_R_FS = (function (_super) {
                __extends(_6W_1F_I_R_FS, _super);
                function _6W_1F_I_R_FS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 6000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _6W_1F_I_R_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _6W_1F_I_R_FS;
            }(Models.WcWinElement));
            Models._6W_1F_I_R_FS = _6W_1F_I_R_FS;
            var _6W_3F_L_FS = (function (_super) {
                __extends(_6W_3F_L_FS, _super);
                function _6W_3F_L_FS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 6000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _6W_3F_L_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _6W_3F_L_FS;
            }(Models.WcWinElement));
            Models._6W_3F_L_FS = _6W_3F_L_FS;
            var _6W_3F_R_FS = (function (_super) {
                __extends(_6W_3F_R_FS, _super);
                function _6W_3F_R_FS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 6000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.w1.SetCurrent(this, "W1", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _6W_3F_R_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _6W_3F_R_FS;
            }(Models.WcWinElement));
            Models._6W_3F_R_FS = _6W_3F_R_FS;
            Models.WinCreater[Models.WcWinTypeEnums._6W_1F_I_L_FS] = _6W_1F_I_L_FS;
            Models.WinCreater[Models.WcWinTypeEnums._6W_1F_I_R_FS] = _6W_1F_I_R_FS;
            Models.WinCreater[Models.WcWinTypeEnums._6W_3F_L_FS] = _6W_3F_L_FS;
            Models.WinCreater[Models.WcWinTypeEnums._6W_3F_R_FS] = _6W_3F_R_FS;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _8W_L = (function (_super) {
                __extends(_8W_L, _super);
                function _8W_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                }
                return _8W_L;
            }(Models.WcWinElement));
            Models._8W_L = _8W_L;
            var _8W_R = (function (_super) {
                __extends(_8W_R, _super);
                function _8W_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                }
                return _8W_R;
            }(Models.WcWinElement));
            Models._8W_R = _8W_R;
            var _8W_CS_L = (function (_super) {
                __extends(_8W_CS_L, _super);
                function _8W_CS_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _8W_CS_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _8W_CS_L;
            }(Models.WcWinElement));
            Models._8W_CS_L = _8W_CS_L;
            var _8W_CS_R = (function (_super) {
                __extends(_8W_CS_R, _super);
                function _8W_CS_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _8W_CS_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _8W_CS_R;
            }(Models.WcWinElement));
            Models._8W_CS_R = _8W_CS_R;
            var _8W_UB_L = (function (_super) {
                __extends(_8W_UB_L, _super);
                function _8W_UB_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _8W_UB_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _8W_UB_L;
            }(Models.WcWinElement));
            Models._8W_UB_L = _8W_UB_L;
            var _8W_UB_R = (function (_super) {
                __extends(_8W_UB_R, _super);
                function _8W_UB_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _8W_UB_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _8W_UB_R;
            }(Models.WcWinElement));
            Models._8W_UB_R = _8W_UB_R;
            var _8W_L_SS = (function (_super) {
                __extends(_8W_L_SS, _super);
                function _8W_L_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 8000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _8W_L_SS;
            }(Models.WcWinElement));
            Models._8W_L_SS = _8W_L_SS;
            var _8W_R_SS = (function (_super) {
                __extends(_8W_R_SS, _super);
                function _8W_R_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 8000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _8W_R_SS;
            }(Models.WcWinElement));
            Models._8W_R_SS = _8W_R_SS;
            var _4W_4W_L_SS = (function (_super) {
                __extends(_4W_4W_L_SS, _super);
                function _4W_4W_L_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_4W_L_SS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_4W_L_SS;
            }(Models.WcWinElement));
            Models._4W_4W_L_SS = _4W_4W_L_SS;
            Models.WinCreater[Models.WcWinTypeEnums._8W_L] = _8W_L;
            Models.WinCreater[Models.WcWinTypeEnums._8W_R] = _8W_R;
            Models.WinCreater[Models.WcWinTypeEnums._8W_CS_L] = _8W_CS_L;
            Models.WinCreater[Models.WcWinTypeEnums._8W_CS_R] = _8W_CS_R;
            Models.WinCreater[Models.WcWinTypeEnums._8W_UB_L] = _8W_UB_L;
            Models.WinCreater[Models.WcWinTypeEnums._8W_UB_R] = _8W_UB_R;
            Models.WinCreater[Models.WcWinTypeEnums._8W_L_SS] = _8W_L_SS;
            Models.WinCreater[Models.WcWinTypeEnums._8W_R_SS] = _8W_R_SS;
            Models.WinCreater[Models.WcWinTypeEnums._4W_4W_L_SS] = _4W_4W_L_SS;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _6W_L_SS = (function (_super) {
                __extends(_6W_L_SS, _super);
                function _6W_L_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 6000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _6W_L_SS;
            }(Models.WcWinElement));
            Models._6W_L_SS = _6W_L_SS;
            var _6W_R_SS = (function (_super) {
                __extends(_6W_R_SS, _super);
                function _6W_R_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 6000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _6W_R_SS;
            }(Models.WcWinElement));
            Models._6W_R_SS = _6W_R_SS;
            var _6W_UB_I_L = (function (_super) {
                __extends(_6W_UB_I_L, _super);
                function _6W_UB_I_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _6W_UB_I_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _6W_UB_I_L;
            }(Models.WcWinElement));
            Models._6W_UB_I_L = _6W_UB_I_L;
            var _6W_UB_I_R = (function (_super) {
                __extends(_6W_UB_I_R, _super);
                function _6W_UB_I_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 3000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _6W_UB_I_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _6W_UB_I_R;
            }(Models.WcWinElement));
            Models._6W_UB_I_R = _6W_UB_I_R;
            var _2W_4W_L_SS = (function (_super) {
                __extends(_2W_4W_L_SS, _super);
                function _2W_4W_L_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_4W_L_SS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_4W_L_SS;
            }(Models.WcWinElement));
            Models._2W_4W_L_SS = _2W_4W_L_SS;
            var _2W_4W_R_SS = (function (_super) {
                __extends(_2W_4W_R_SS, _super);
                function _2W_4W_R_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_4W_R_SS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_4W_R_SS;
            }(Models.WcWinElement));
            Models._2W_4W_R_SS = _2W_4W_R_SS;
            var _6W_L = (function (_super) {
                __extends(_6W_L, _super);
                function _6W_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 6000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _6W_L;
            }(Models.WcWinElement));
            Models._6W_L = _6W_L;
            Models.WinCreater[Models.WcWinTypeEnums._6W_L_SS] = _6W_L_SS;
            Models.WinCreater[Models.WcWinTypeEnums._6W_R_SS] = _6W_R_SS;
            Models.WinCreater[Models.WcWinTypeEnums._6W_UB_I_L] = _6W_UB_I_L;
            Models.WinCreater[Models.WcWinTypeEnums._6W_UB_I_R] = _6W_UB_I_R;
            Models.WinCreater[Models.WcWinTypeEnums._2W_4W_L_SS] = _2W_4W_L_SS;
            Models.WinCreater[Models.WcWinTypeEnums._2W_4W_R_SS] = _2W_4W_R_SS;
            Models.WinCreater[Models.WcWinTypeEnums._6W_L] = _6W_L;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _4W_1FIX_I = (function (_super) {
                __extends(_4W_1FIX_I, _super);
                function _4W_1FIX_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_1FIX_I.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_1FIX_I;
            }(Models.WcWinElement));
            Models._4W_1FIX_I = _4W_1FIX_I;
            var _4W_2FIX_L = (function (_super) {
                __extends(_4W_2FIX_L, _super);
                function _4W_2FIX_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_2FIX_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_2FIX_L;
            }(Models.WcWinElement));
            Models._4W_2FIX_L = _4W_2FIX_L;
            var _4W_1FIX_I_R = (function (_super) {
                __extends(_4W_1FIX_I_R, _super);
                function _4W_1FIX_I_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_1FIX_I_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_1FIX_I_R;
            }(Models.WcWinElement));
            Models._4W_1FIX_I_R = _4W_1FIX_I_R;
            var _4W_2FIX_R = (function (_super) {
                __extends(_4W_2FIX_R, _super);
                function _4W_2FIX_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_2FIX_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_2FIX_R;
            }(Models.WcWinElement));
            Models._4W_2FIX_R = _4W_2FIX_R;
            var _4W_4FIX_L = (function (_super) {
                __extends(_4W_4FIX_L, _super);
                function _4W_4FIX_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_4FIX_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_4FIX_L;
            }(Models.WcWinElement));
            Models._4W_4FIX_L = _4W_4FIX_L;
            var _4W_4FIX_R = (function (_super) {
                __extends(_4W_4FIX_R, _super);
                function _4W_4FIX_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_4FIX_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_4FIX_R;
            }(Models.WcWinElement));
            Models._4W_4FIX_R = _4W_4FIX_R;
            var _4W_2F_T_L_FS = (function (_super) {
                __extends(_4W_2F_T_L_FS, _super);
                function _4W_2F_T_L_FS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_2F_T_L_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_2F_T_L_FS;
            }(Models.WcWinElement));
            Models._4W_2F_T_L_FS = _4W_2F_T_L_FS;
            var _4W_2F_T_R_FS = (function (_super) {
                __extends(_4W_2F_T_R_FS, _super);
                function _4W_2F_T_R_FS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_2F_T_R_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_2F_T_R_FS;
            }(Models.WcWinElement));
            Models._4W_2F_T_R_FS = _4W_2F_T_R_FS;
            Models.WinCreater[Models.WcWinTypeEnums._4W_1FIX_I] = _4W_1FIX_I;
            Models.WinCreater[Models.WcWinTypeEnums._4W_2FIX_L] = _4W_2FIX_L;
            Models.WinCreater[Models.WcWinTypeEnums._4W_1FIX_I_R] = _4W_1FIX_I_R;
            Models.WinCreater[Models.WcWinTypeEnums._4W_2FIX_R] = _4W_2FIX_R;
            Models.WinCreater[Models.WcWinTypeEnums._4W_4FIX_L] = _4W_4FIX_L;
            Models.WinCreater[Models.WcWinTypeEnums._4W_4FIX_R] = _4W_4FIX_R;
            Models.WinCreater[Models.WcWinTypeEnums._4W_2F_T_L_FS] = _4W_2F_T_L_FS;
            Models.WinCreater[Models.WcWinTypeEnums._4W_2F_T_R_FS] = _4W_2F_T_R_FS;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _3W_1FIX_I = (function (_super) {
                __extends(_3W_1FIX_I, _super);
                function _3W_1FIX_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 3000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _3W_1FIX_I.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _3W_1FIX_I;
            }(Models.WcWinElement));
            Models._3W_1FIX_I = _3W_1FIX_I;
            var _3W_UB_1FIX_I = (function (_super) {
                __extends(_3W_UB_1FIX_I, _super);
                function _3W_UB_1FIX_I() {
                    _super.call(this);
                    this.W = 3000;
                    this.W1 = 1000;
                    this.H = 2000;
                    this.H1 = 1000;
                }
                _3W_UB_1FIX_I.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _3W_UB_1FIX_I;
            }(Models.WcWinElement));
            Models._3W_UB_1FIX_I = _3W_UB_1FIX_I;
            var _3W_UB_2F_I_U_FS = (function (_super) {
                __extends(_3W_UB_2F_I_U_FS, _super);
                function _3W_UB_2F_I_U_FS() {
                    _super.call(this);
                    this.W = 3000;
                    this.W1 = 1000;
                    this.H = 2000;
                    this.H1 = 1000;
                }
                _3W_UB_2F_I_U_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _3W_UB_2F_I_U_FS;
            }(Models.WcWinElement));
            Models._3W_UB_2F_I_U_FS = _3W_UB_2F_I_U_FS;
            var _3W_4F_UB_FS = (function (_super) {
                __extends(_3W_4F_UB_FS, _super);
                function _3W_4F_UB_FS() {
                    _super.call(this);
                    this.W = 3000;
                    this.W1 = 1000;
                    this.H = 2000;
                    this.H1 = 1000;
                }
                _3W_4F_UB_FS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _3W_4F_UB_FS;
            }(Models.WcWinElement));
            Models._3W_4F_UB_FS = _3W_4F_UB_FS;
            var _3W_3W_UB_SS = (function (_super) {
                __extends(_3W_3W_UB_SS, _super);
                function _3W_3W_UB_SS() {
                    _super.call(this);
                    this.W = 3000;
                    this.W1 = 1000;
                    this.H = 2000;
                    this.H1 = 1000;
                }
                _3W_3W_UB_SS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _3W_3W_UB_SS;
            }(Models.WcWinElement));
            Models._3W_3W_UB_SS = _3W_3W_UB_SS;
            var _3W_3F_D = (function (_super) {
                __extends(_3W_3F_D, _super);
                function _3W_3F_D() {
                    _super.call(this);
                    this.W = 3000;
                    this.W1 = 1000;
                    this.H = 2000;
                    this.H1 = 1000;
                }
                _3W_3F_D.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _3W_3F_D;
            }(Models.WcWinElement));
            Models._3W_3F_D = _3W_3F_D;
            var _3W_3F_U = (function (_super) {
                __extends(_3W_3F_U, _super);
                function _3W_3F_U() {
                    _super.call(this);
                    this.W = 3000;
                    this.W1 = 1000;
                    this.H = 2000;
                    this.H1 = 1000;
                }
                _3W_3F_U.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _3W_3F_U;
            }(Models.WcWinElement));
            Models._3W_3F_U = _3W_3F_U;
            var _3W_4W_UB_SS = (function (_super) {
                __extends(_3W_4W_UB_SS, _super);
                function _3W_4W_UB_SS() {
                    _super.call(this);
                    this.W = 3000;
                    this.W1 = 1000;
                    this.H = 2000;
                    this.H1 = 1000;
                }
                _3W_4W_UB_SS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _3W_4W_UB_SS;
            }(Models.WcWinElement));
            Models._3W_4W_UB_SS = _3W_4W_UB_SS;
            Models.WinCreater[Models.WcWinTypeEnums._3W_1FIX_I] = _3W_1FIX_I;
            Models.WinCreater[Models.WcWinTypeEnums._3W_UB_1FIX_I] = _3W_UB_1FIX_I;
            Models.WinCreater[Models.WcWinTypeEnums._3W_UB_2F_I_U_FS] = _3W_UB_2F_I_U_FS;
            Models.WinCreater[Models.WcWinTypeEnums._3W_4F_UB_FS] = _3W_4F_UB_FS;
            Models.WinCreater[Models.WcWinTypeEnums._3W_3W_UB_SS] = _3W_3W_UB_SS;
            Models.WinCreater[Models.WcWinTypeEnums._3W_3F_D] = _3W_3F_D;
            Models.WinCreater[Models.WcWinTypeEnums._3W_3F_U] = _3W_3F_U;
            Models.WinCreater[Models.WcWinTypeEnums._3W_4W_UB_SS] = _3W_4W_UB_SS;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _Fix = (function (_super) {
                __extends(_Fix, _super);
                function _Fix() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                }
                _Fix.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _Fix;
            }(Models.WcWinElement));
            Models._Fix = _Fix;
            var _2Fix = (function (_super) {
                __extends(_2Fix, _super);
                function _2Fix() {
                    _super.apply(this, arguments);
                }
                _2Fix.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _2Fix;
            }(Models.WcWinElement));
            Models._2Fix = _2Fix;
            var _3Fix = (function (_super) {
                __extends(_3Fix, _super);
                function _3Fix() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 3000);
                }
                _3Fix.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _3Fix;
            }(Models.WcWinElement));
            Models._3Fix = _3Fix;
            var _4Fix = (function (_super) {
                __extends(_4Fix, _super);
                function _4Fix() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                }
                _4Fix.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _4Fix;
            }(Models.WcWinElement));
            Models._4Fix = _4Fix;
            var _2Fix_I = (function (_super) {
                __extends(_2Fix_I, _super);
                function _2Fix_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                }
                _2Fix_I.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _2Fix_I;
            }(Models.WcWinElement));
            Models._2Fix_I = _2Fix_I;
            var _3Fix_I = (function (_super) {
                __extends(_3Fix_I, _super);
                function _3Fix_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 3000);
                }
                _3Fix_I.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _3Fix_I;
            }(Models.WcWinElement));
            Models._3Fix_I = _3Fix_I;
            var _4Fix_Rect = (function (_super) {
                __extends(_4Fix_Rect, _super);
                function _4Fix_Rect() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                }
                _4Fix_Rect.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _4Fix_Rect;
            }(Models.WcWinElement));
            Models._4Fix_Rect = _4Fix_Rect;
            var _1FIX_U_4 = (function (_super) {
                __extends(_1FIX_U_4, _super);
                function _1FIX_U_4() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                }
                _1FIX_U_4.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _1FIX_U_4;
            }(Models.WcWinElement));
            Models._1FIX_U_4 = _1FIX_U_4;
            var _1FIX_U_3 = (function (_super) {
                __extends(_1FIX_U_3, _super);
                function _1FIX_U_3() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                }
                _1FIX_U_3.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _1FIX_U_3;
            }(Models.WcWinElement));
            Models._1FIX_U_3 = _1FIX_U_3;
            var _2F_I_A = (function (_super) {
                __extends(_2F_I_A, _super);
                function _2F_I_A() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2F_I_A.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2F_I_A;
            }(Models.WcWinElement));
            Models._2F_I_A = _2F_I_A;
            var _2F_I_J = (function (_super) {
                __extends(_2F_I_J, _super);
                function _2F_I_J() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2F_I_J.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2F_I_J;
            }(Models.WcWinElement));
            Models._2F_I_J = _2F_I_J;
            var _2F_I_V = (function (_super) {
                __extends(_2F_I_V, _super);
                function _2F_I_V() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2F_I_V.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2F_I_V;
            }(Models.WcWinElement));
            Models._2F_I_V = _2F_I_V;
            var _2F_UB_I = (function (_super) {
                __extends(_2F_UB_I, _super);
                function _2F_UB_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2F_UB_I.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2F_UB_I;
            }(Models.WcWinElement));
            Models._2F_UB_I = _2F_UB_I;
            var _1F_2 = (function (_super) {
                __extends(_1F_2, _super);
                function _1F_2() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1F_2.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_2;
            }(Models.WcWinElement));
            Models._1F_2 = _1F_2;
            var _1F_1 = (function (_super) {
                __extends(_1F_1, _super);
                function _1F_1() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _1F_1.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _1F_1;
            }(Models.WcWinElement));
            Models._1F_1 = _1F_1;
            var _WH_N = (function (_super) {
                __extends(_WH_N, _super);
                function _WH_N() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                _WH_N.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _WH_N;
            }(Models.WcWinElement));
            Models._WH_N = _WH_N;
            var _WH_C = (function (_super) {
                __extends(_WH_C, _super);
                function _WH_C() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                _WH_C.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _WH_C;
            }(Models.WcWinElement));
            Models._WH_C = _WH_C;
            Models.WinCreater[Models.WcWinTypeEnums._Fix] = _Fix;
            Models.WinCreater[Models.WcWinTypeEnums._2Fix] = _2Fix;
            Models.WinCreater[Models.WcWinTypeEnums._3Fix] = _3Fix;
            Models.WinCreater[Models.WcWinTypeEnums._4Fix] = _4Fix;
            Models.WinCreater[Models.WcWinTypeEnums._2Fix_I] = _2Fix_I;
            Models.WinCreater[Models.WcWinTypeEnums._3Fix_I] = _3Fix_I;
            Models.WinCreater[Models.WcWinTypeEnums._4Fix_Rect] = _4Fix_Rect;
            Models.WinCreater[Models.WcWinTypeEnums._1FIX_U_4] = _1FIX_U_4;
            Models.WinCreater[Models.WcWinTypeEnums._1FIX_U_3] = _1FIX_U_3;
            Models.WinCreater[Models.WcWinTypeEnums._2F_I_A] = _2F_I_A;
            Models.WinCreater[Models.WcWinTypeEnums._2F_I_J] = _2F_I_J;
            Models.WinCreater[Models.WcWinTypeEnums._2F_I_V] = _2F_I_V;
            Models.WinCreater[Models.WcWinTypeEnums._2F_UB_I] = _2F_UB_I;
            Models.WinCreater[Models.WcWinTypeEnums._1F_2] = _1F_2;
            Models.WinCreater[Models.WcWinTypeEnums._1F_1] = _1F_1;
            Models.WinCreater[Models.WcWinTypeEnums._WH_N] = _WH_N;
            Models.WinCreater[Models.WcWinTypeEnums._WH_C] = _WH_C;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="../../u1/documents/udocument.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var WcDocument = (function (_super) {
                __extends(WcDocument, _super);
                function WcDocument() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(WcDocument.prototype, "ActWin", {
                    get: function () {
                        return this.Elements
                            .filter(function (o_) { return o_ instanceof Models.WcWinElement; })
                            .map(function (o_) { return o_; })[0];
                    },
                    enumerable: true,
                    configurable: true
                });
                return WcDocument;
            }(U1.UDocument));
            Models.WcDocument = WcDocument;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _2W_Left = (function (_super) {
                __extends(_2W_Left, _super);
                function _2W_Left() {
                    _super.apply(this, arguments);
                }
                return _2W_Left;
            }(Models.WcWinElement));
            Models._2W_Left = _2W_Left;
            var _2W_Right = (function (_super) {
                __extends(_2W_Right, _super);
                function _2W_Right() {
                    _super.apply(this, arguments);
                }
                return _2W_Right;
            }(Models.WcWinElement));
            Models._2W_Right = _2W_Right;
            var _2W_UB_Left = (function (_super) {
                __extends(_2W_UB_Left, _super);
                function _2W_UB_Left() {
                    _super.apply(this, arguments);
                }
                _2W_UB_Left.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_UB_Left;
            }(Models.WcWinElement));
            Models._2W_UB_Left = _2W_UB_Left;
            var _2W_UB_Right = (function (_super) {
                __extends(_2W_UB_Right, _super);
                function _2W_UB_Right() {
                    _super.apply(this, arguments);
                }
                _2W_UB_Right.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_UB_Right;
            }(Models.WcWinElement));
            Models._2W_UB_Right = _2W_UB_Right;
            var _2W_I = (function (_super) {
                __extends(_2W_I, _super);
                function _2W_I() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                }
                return _2W_I;
            }(Models.WcWinElement));
            Models._2W_I = _2W_I;
            var _2W_P = (function (_super) {
                __extends(_2W_P, _super);
                function _2W_P() {
                    _super.apply(this, arguments);
                }
                _2W_P.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_P;
            }(Models.WcWinElement));
            Models._2W_P = _2W_P;
            var _2W_CS_Left = (function (_super) {
                __extends(_2W_CS_Left, _super);
                function _2W_CS_Left() {
                    _super.apply(this, arguments);
                }
                return _2W_CS_Left;
            }(Models.WcWinElement));
            Models._2W_CS_Left = _2W_CS_Left;
            var _2W_CS_Right = (function (_super) {
                __extends(_2W_CS_Right, _super);
                function _2W_CS_Right() {
                    _super.apply(this, arguments);
                }
                return _2W_CS_Right;
            }(Models.WcWinElement));
            Models._2W_CS_Right = _2W_CS_Right;
            var _2W_UB_CS_Left = (function (_super) {
                __extends(_2W_UB_CS_Left, _super);
                function _2W_UB_CS_Left() {
                    _super.apply(this, arguments);
                }
                _2W_UB_CS_Left.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_UB_CS_Left;
            }(Models.WcWinElement));
            Models._2W_UB_CS_Left = _2W_UB_CS_Left;
            var _2W_UB_CS_Right = (function (_super) {
                __extends(_2W_UB_CS_Right, _super);
                function _2W_UB_CS_Right() {
                    _super.apply(this, arguments);
                }
                _2W_UB_CS_Right.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_UB_CS_Right;
            }(Models.WcWinElement));
            Models._2W_UB_CS_Right = _2W_UB_CS_Right;
            var _2W_U_END_L = (function (_super) {
                __extends(_2W_U_END_L, _super);
                function _2W_U_END_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _2W_U_END_L;
            }(Models.WcWinElement));
            Models._2W_U_END_L = _2W_U_END_L;
            var _2W_U_END_R = (function (_super) {
                __extends(_2W_U_END_R, _super);
                function _2W_U_END_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _2W_U_END_R;
            }(Models.WcWinElement));
            Models._2W_U_END_R = _2W_U_END_R;
            var _2W_C = (function (_super) {
                __extends(_2W_C, _super);
                function _2W_C() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 1000);
                    //this.hndlLocH.SetCurrent(this, "HndlLocH", this.h.GetCurrent(this) / 2);
                }
                _2W_C.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "핸들높이",
                        Category: this.PropertyCategory,
                        Label: "핸들높이",
                        GetValueFunc: function (p_) { return _this.HndlLocH; },
                        SetValueFunc: function (p_, v_) {
                            _this.HndlLocH = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_C;
            }(Models.WcWinElement));
            Models._2W_C = _2W_C;
            var _2W_PI = (function (_super) {
                __extends(_2W_PI, _super);
                function _2W_PI() {
                    _super.apply(this, arguments);
                }
                _2W_PI.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_PI;
            }(Models.WcWinElement));
            Models._2W_PI = _2W_PI;
            var _2W_I_PJ = (function (_super) {
                __extends(_2W_I_PJ, _super);
                function _2W_I_PJ() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_I_PJ.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_I_PJ;
            }(Models.WcWinElement));
            Models._2W_I_PJ = _2W_I_PJ;
            Models.WinCreater[Models.WcWinTypeEnums._2W_Left] = _2W_Left;
            Models.WinCreater[Models.WcWinTypeEnums._2W_Right] = _2W_Right;
            Models.WinCreater[Models.WcWinTypeEnums._2W_UB_Left] = _2W_UB_Left;
            Models.WinCreater[Models.WcWinTypeEnums._2W_UB_Right] = _2W_UB_Right;
            Models.WinCreater[Models.WcWinTypeEnums._2W_I] = _2W_I;
            Models.WinCreater[Models.WcWinTypeEnums._2W_P] = _2W_P;
            Models.WinCreater[Models.WcWinTypeEnums._2W_CS_L] = _2W_CS_Left;
            Models.WinCreater[Models.WcWinTypeEnums._2W_CS_R] = _2W_CS_Right;
            Models.WinCreater[Models.WcWinTypeEnums._2W_UB_CS_L] = _2W_UB_CS_Left;
            Models.WinCreater[Models.WcWinTypeEnums._2W_UB_CS_R] = _2W_UB_CS_Right;
            Models.WinCreater[Models.WcWinTypeEnums._2W_U_END_L] = _2W_U_END_L;
            Models.WinCreater[Models.WcWinTypeEnums._2W_U_END_R] = _2W_U_END_R;
            Models.WinCreater[Models.WcWinTypeEnums._2W_C] = _2W_C;
            Models.WinCreater[Models.WcWinTypeEnums._2W_PI] = _2W_PI;
            Models.WinCreater[Models.WcWinTypeEnums._2W_I_PJ] = _2W_I_PJ;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _3W_1_2_1 = (function (_super) {
                __extends(_3W_1_2_1, _super);
                function _3W_1_2_1() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                }
                return _3W_1_2_1;
            }(Models.WcWinElement));
            Models._3W_1_2_1 = _3W_1_2_1;
            var _3W_1_1_1 = (function (_super) {
                __extends(_3W_1_1_1, _super);
                function _3W_1_1_1() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 3000);
                }
                return _3W_1_1_1;
            }(Models.WcWinElement));
            Models._3W_1_1_1 = _3W_1_1_1;
            var _3W_UB = (function (_super) {
                __extends(_3W_UB, _super);
                function _3W_UB() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 3000);
                }
                _3W_UB.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _3W_UB;
            }(Models.WcWinElement));
            Models._3W_UB = _3W_UB;
            var _3W_UB_CS = (function (_super) {
                __extends(_3W_UB_CS, _super);
                function _3W_UB_CS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 3000);
                }
                _3W_UB_CS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _3W_UB_CS;
            }(Models.WcWinElement));
            Models._3W_UB_CS = _3W_UB_CS;
            Models.WinCreater[Models.WcWinTypeEnums._3W_1_2_1] = _3W_1_2_1;
            Models.WinCreater[Models.WcWinTypeEnums._3W_1_1_1] = _3W_1_1_1;
            Models.WinCreater[Models.WcWinTypeEnums._3W_UB] = _3W_UB;
            Models.WinCreater[Models.WcWinTypeEnums._3W_UB_CS] = _3W_UB_CS;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _4W_Center = (function (_super) {
                __extends(_4W_Center, _super);
                function _4W_Center() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                }
                return _4W_Center;
            }(Models.WcWinElement));
            Models._4W_Center = _4W_Center;
            var _4W_LR = (function (_super) {
                __extends(_4W_LR, _super);
                function _4W_LR() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                }
                return _4W_LR;
            }(Models.WcWinElement));
            Models._4W_LR = _4W_LR;
            var _4W_I_L_SS = (function (_super) {
                __extends(_4W_I_L_SS, _super);
                function _4W_I_L_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_I_L_SS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_I_L_SS;
            }(Models.WcWinElement));
            Models._4W_I_L_SS = _4W_I_L_SS;
            var _4W_I_R_SS = (function (_super) {
                __extends(_4W_I_R_SS, _super);
                function _4W_I_R_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_I_R_SS.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_I_R_SS;
            }(Models.WcWinElement));
            Models._4W_I_R_SS = _4W_I_R_SS;
            var _4W_L_SS = (function (_super) {
                __extends(_4W_L_SS, _super);
                function _4W_L_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _4W_L_SS;
            }(Models.WcWinElement));
            Models._4W_L_SS = _4W_L_SS;
            var _4W_R_SS = (function (_super) {
                __extends(_4W_R_SS, _super);
                function _4W_R_SS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 1000);
                }
                return _4W_R_SS;
            }(Models.WcWinElement));
            Models._4W_R_SS = _4W_R_SS;
            var _4W_CS_I_L = (function (_super) {
                __extends(_4W_CS_I_L, _super);
                function _4W_CS_I_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_CS_I_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_CS_I_L;
            }(Models.WcWinElement));
            Models._4W_CS_I_L = _4W_CS_I_L;
            var _4W_CS_I_R = (function (_super) {
                __extends(_4W_CS_I_R, _super);
                function _4W_CS_I_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_CS_I_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_CS_I_R;
            }(Models.WcWinElement));
            Models._4W_CS_I_R = _4W_CS_I_R;
            var _2W_2W_CS_I_L = (function (_super) {
                __extends(_2W_2W_CS_I_L, _super);
                function _2W_2W_CS_I_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_2W_CS_I_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2W_CS_I_L;
            }(Models.WcWinElement));
            Models._2W_2W_CS_I_L = _2W_2W_CS_I_L;
            var _2W_2W_CS_I_R = (function (_super) {
                __extends(_2W_2W_CS_I_R, _super);
                function _2W_2W_CS_I_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 2000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _2W_2W_CS_I_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _2W_2W_CS_I_R;
            }(Models.WcWinElement));
            Models._2W_2W_CS_I_R = _2W_2W_CS_I_R;
            var _4W_CS = (function (_super) {
                __extends(_4W_CS, _super);
                function _4W_CS() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                }
                return _4W_CS;
            }(Models.WcWinElement));
            Models._4W_CS = _4W_CS;
            var _4W_4W_SS_L = (function (_super) {
                __extends(_4W_4W_SS_L, _super);
                function _4W_4W_SS_L() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_4W_SS_L.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_4W_SS_L;
            }(Models.WcWinElement));
            Models._4W_4W_SS_L = _4W_4W_SS_L;
            var _4W_4W_SS_R = (function (_super) {
                __extends(_4W_4W_SS_R, _super);
                function _4W_4W_SS_R() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 2000);
                    this.h1.SetCurrent(this, "H1", 1000);
                }
                _4W_4W_SS_R.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "H1",
                        Category: this.PropertyCategory,
                        Label: "H1",
                        GetValueFunc: function (p_) { return _this.H1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.H)
                                return;
                            _this.H1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_4W_SS_R;
            }(Models.WcWinElement));
            Models._4W_4W_SS_R = _4W_4W_SS_R;
            var _4W_UB_CENTER = (function (_super) {
                __extends(_4W_UB_CENTER, _super);
                function _4W_UB_CENTER() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 4000);
                    this.h.SetCurrent(this, "H", 1000);
                    this.w1.SetCurrent(this, "W1", 1000);
                }
                _4W_UB_CENTER.prototype.GetProperties = function () {
                    var _this = this;
                    var uprops = _super.prototype.GetProperties.call(this);
                    uprops.push(new U1.UPropInt({
                        Source: this,
                        SourceProperty: "W1",
                        Category: this.PropertyCategory,
                        Label: "W1",
                        GetValueFunc: function (p_) { return _this.W1; },
                        SetValueFunc: function (p_, v_) {
                            if (v_ >= _this.W)
                                return;
                            _this.W1 = v_;
                        }
                    }));
                    return uprops;
                };
                return _4W_UB_CENTER;
            }(Models.WcWinElement));
            Models._4W_UB_CENTER = _4W_UB_CENTER;
            Models.WinCreater[Models.WcWinTypeEnums._4W_Center] = _4W_Center;
            Models.WinCreater[Models.WcWinTypeEnums._4W_LR] = _4W_LR;
            Models.WinCreater[Models.WcWinTypeEnums._4W_I_L_SS] = _4W_I_L_SS;
            Models.WinCreater[Models.WcWinTypeEnums._4W_I_R_SS] = _4W_I_R_SS;
            Models.WinCreater[Models.WcWinTypeEnums._4W_L_SS] = _4W_L_SS;
            Models.WinCreater[Models.WcWinTypeEnums._4W_R_SS] = _4W_R_SS;
            Models.WinCreater[Models.WcWinTypeEnums._4W_CS_I_L] = _4W_CS_I_L;
            Models.WinCreater[Models.WcWinTypeEnums._4W_CS_I_R] = _4W_CS_I_R;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2W_CS_I_L] = _2W_2W_CS_I_L;
            Models.WinCreater[Models.WcWinTypeEnums._2W_2W_CS_I_R] = _2W_2W_CS_I_R;
            Models.WinCreater[Models.WcWinTypeEnums._4W_CS] = _4W_CS;
            Models.WinCreater[Models.WcWinTypeEnums._4W_4W_SS_L] = _4W_4W_SS_L;
            Models.WinCreater[Models.WcWinTypeEnums._4W_4W_SS_R] = _4W_4W_SS_R;
            Models.WinCreater[Models.WcWinTypeEnums._4W_UB_CENTER] = _4W_UB_CENTER;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelement.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Models;
        (function (Models) {
            var _WH = (function (_super) {
                __extends(_WH, _super);
                function _WH() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                }
                _WH.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _WH;
            }(Models.WcWinElement));
            Models._WH = _WH;
            var _1W_SF = (function (_super) {
                __extends(_1W_SF, _super);
                function _1W_SF() {
                    _super.call(this);
                    this.w.SetCurrent(this, "W", 1000);
                }
                _1W_SF.prototype.CanHaveInsectNet = function () {
                    return false;
                };
                return _1W_SF;
            }(Models.WcWinElement));
            Models._1W_SF = _1W_SF;
            Models.WinCreater[Models.WcWinTypeEnums._WH] = _WH;
            Models.WinCreater[Models.WcWinTypeEnums._1W_SF] = _1W_SF;
        })(Models = WinCad.Models || (WinCad.Models = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Panels;
        (function (Panels) {
            var PropertyPanel = (function (_super) {
                __extends(PropertyPanel, _super);
                function PropertyPanel() {
                    _super.call(this);
                    this.HtmlPage = './WinCad/Panels/PropertyPanel.html';
                    WinCad.Services.LgWinService.Current.ActiveDocument.AfterChanged.Add(this, this.OnDocumentChanged);
                }
                Object.defineProperty(PropertyPanel, "Current", {
                    get: function () {
                        if (PropertyPanel._current == null) {
                            PropertyPanel._current = new PropertyPanel();
                            PropertyPanel._current.Init();
                        }
                        return PropertyPanel._current;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PropertyPanel.prototype, "WcDoc", {
                    get: function () {
                        return WinCad.Services.LgWinService.Current.ActiveDocument;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PropertyPanel.prototype, "WinTypes", {
                    get: function () {
                        return WinCad.Services.LgWinService.Current.WinTypes;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PropertyPanel.prototype, "ActiveWinType", {
                    get: function () {
                        return this.activeWinType;
                    },
                    set: function (value) {
                        if (this.activeWinType == value)
                            return;
                        this.activeWinType = value;
                        WinCad.Services.LgWinService.Current.SetWindowType(this.activeWinType);
                        this.InvokePropertyChanged("ActiveWinType");
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PropertyPanel.prototype, "ActWin", {
                    get: function () {
                        return this._actWin;
                    },
                    set: function (value) {
                        if (this._actWin == value)
                            return;
                        this._actWin = value;
                        this.InvokePropertyChanged("ActWin");
                        this.InvokePropertyChanged("Properties");
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(PropertyPanel.prototype, "Properties", {
                    get: function () {
                        if (this.old_props != null) {
                            for (var _i = 0, _a = this.old_props; _i < _a.length; _i++) {
                                var p = _a[_i];
                                p.Dispose();
                            }
                        }
                        if (this._actWin != null)
                            this.old_props = this._actWin.GetProperties();
                        else
                            this.old_props = [];
                        return this.old_props;
                    },
                    enumerable: true,
                    configurable: true
                });
                PropertyPanel.prototype.Show = function (panel) {
                    panel.appendChild(this.Root);
                };
                PropertyPanel.prototype.InitBinders = function () {
                    //this.binders["bi_wintypes"] = new UIControls.BiComboBox()
                    //    .setItems(this.WinTypes)
                    //    .setTarget($(this.Root).find("#bi_wintypes").get(0) as HTMLSelectElement)
                    //    .setSelectedItemSource("ActiveWinType")
                    //    .setSource(this); 
                    this.binders["bi_wintypes"] = new U1.UIControls.BiListBox()
                        .setItemsSource("WinTypes")
                        .setTarget($(this.Root).find("#bi_wintypes").get(0))
                        .setSelectedItemSource("ActiveWinType")
                        .setSource(this)
                        .setItemRenderer(function (li, item, selected) {
                        var style = "list-group-item" + (selected ? " active" : "");
                        $(li).attr("class", style);
                        li.textContent = item;
                        //var h = UIControls.BiBase.GetOrSetChild(HTMLSpanElement, li, "span");
                        //h.textContent = item;
                        //li.appendChild(h);
                        return null;
                    });
                    this.binders["bi_properties"] = new U1.UIControls.BiPropertyGrid()
                        .setSource(this)
                        .setTarget($(this._root).find("#bi_properties").get(0))
                        .setItemsSource("Properties");
                };
                PropertyPanel.prototype.OnDocumentChanged = function (doc) {
                    var wcdoc = this.WcDoc;
                    this.ActWin = wcdoc.ActWin;
                };
                return PropertyPanel;
            }(U1.UIControls.PanelBase));
            Panels.PropertyPanel = PropertyPanel;
        })(Panels = WinCad.Panels || (WinCad.Panels = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="../../u1/views/presenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var WcDocumentPresenter = (function (_super) {
                __extends(WcDocumentPresenter, _super);
                function WcDocumentPresenter() {
                    _super.apply(this, arguments);
                    this.isInvalid = true;
                }
                WcDocumentPresenter.prototype.CreatePresenter = function (elm_) {
                    this.isInvalid = true;
                    if (elm_ instanceof WinCad.Models.WcWinElement) {
                        var winType = WinCad.Models.FindWinType(elm_);
                        var ctor = Presenters.PresenterCreater[winType];
                        if (ctor != null)
                            return new ctor();
                    }
                    return _super.prototype.CreatePresenter.call(this, elm_);
                };
                WcDocumentPresenter.prototype.Update = function () {
                    var _this = this;
                    _super.prototype.Update.call(this);
                    if (this.isInvalid) {
                        U1.UDispatcher.BeginInvoke(function () {
                            _this.View.ZoomFit();
                        });
                        this.isInvalid = false;
                    }
                };
                WcDocumentPresenter.prototype.OnAfterAbortTransaction = function (doc) {
                    _super.prototype.OnAfterAbortTransaction.call(this, doc);
                    this.InvalidateAll();
                };
                WcDocumentPresenter.prototype.OnAfterEndTransaction = function (doc) {
                    _super.prototype.OnAfterEndTransaction.call(this, doc);
                    this.InvalidateAll();
                    this.isInvalid = true;
                };
                WcDocumentPresenter.prototype.OnAfterUndoRedo = function (doc, isUndo) {
                    _super.prototype.OnAfterUndoRedo.call(this, doc, isUndo);
                    this.InvalidateAll();
                };
                WcDocumentPresenter.prototype.OnAfterLoaded = function (doc) {
                    _super.prototype.OnAfterLoaded.call(this, doc);
                    this.View.ZoomFit();
                };
                return WcDocumentPresenter;
            }(U1.Views.UDocumentPresenter));
            Presenters.WcDocumentPresenter = WcDocumentPresenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="../../u1/views/presenter.ts" />
/// <reference path="../models/wcwintypeenums.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            Presenters.PresenterCreater = {};
            var WcWinElementPresenter = (function (_super) {
                __extends(WcWinElementPresenter, _super);
                function WcWinElementPresenter() {
                    _super.apply(this, arguments);
                    this._dims = [];
                }
                WcWinElementPresenter.prototype.frameThick = function () {
                    return 50;
                };
                WcWinElementPresenter.prototype.frameFill = function () {
                    return U1.Colors.Gray;
                };
                WcWinElementPresenter.prototype.frameStroke = function () {
                    return U1.Colors.Black;
                };
                WcWinElementPresenter.prototype.barThick = function () {
                    return 50;
                };
                WcWinElementPresenter.prototype.barFill = function () {
                    return U1.Colors.Gray;
                };
                WcWinElementPresenter.prototype.barStroke = function () {
                    return U1.Colors.Black;
                };
                WcWinElementPresenter.prototype.dimFontSize = function () {
                    // 2016-08-16 폰트 사이즈 가변으로 변경하면서 크기 조정함
                    return 35;
                    //return 80;
                };
                WcWinElementPresenter.prototype.dimOffset = function () {
                    return 120;
                };
                WcWinElementPresenter.prototype.winFrameThick = function () {
                    return 50;
                };
                WcWinElementPresenter.prototype.winFrameFill = function () {
                    return U1.Colors.Gray;
                };
                WcWinElementPresenter.prototype.winFrameStroke = function () {
                    return U1.Colors.Black;
                };
                WcWinElementPresenter.prototype.winFill = function () {
                    // 2016-08-04 창 색상 변경
                    //return Colors.AliceBlue;
                    return U1.Colors.White;
                };
                WcWinElementPresenter.prototype.winStroke = function () {
                    return U1.Colors.Black;
                };
                WcWinElementPresenter.prototype.gbThick = function () {
                    return 5;
                };
                WcWinElementPresenter.prototype.gbFill = function () {
                    return U1.Colors.LightGray;
                };
                WcWinElementPresenter.prototype.gbStroke = function () {
                    return U1.Colors.Black;
                };
                WcWinElementPresenter.prototype.hndlStroke = function () {
                    return U1.Colors.Black;
                };
                WcWinElementPresenter.prototype.hndlFill = function () {
                    return U1.Colors.Black;
                };
                Object.defineProperty(WcWinElementPresenter.prototype, "WcDoc", {
                    get: function () {
                        return this.Element.Document;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WcWinElementPresenter.prototype, "WcDocPresenter", {
                    get: function () {
                        return this.DocumentPresesnter;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(WcWinElementPresenter.prototype, "WinElem", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                WcWinElementPresenter.prototype.Update = function () {
                    this.OnClear();
                    _super.prototype.Update.call(this);
                };
                WcWinElementPresenter.prototype.OnClear = function () {
                    if (this._rootEntity != null)
                        this._rootEntity.Delete();
                    this._rootEntity = null;
                    for (var _i = 0, _a = this._dims; _i < _a.length; _i++) {
                        var dim = _a[_i];
                        dim.Dispose();
                    }
                    this._dims = [];
                };
                WcWinElementPresenter.prototype.addEntity = function (entity) {
                    this.rootEntity().AddChild(entity);
                };
                WcWinElementPresenter.prototype.rootEntity = function () {
                    if (this._rootEntity == null) {
                        this._rootEntity = this.Scene.newGroup();
                        this.Scene.World.AddChild(this._rootEntity);
                    }
                    return this._rootEntity;
                };
                WcWinElementPresenter.prototype.addFrame = function (rect, top, left, bottom, right) {
                    if (top === void 0) { top = true; }
                    if (left === void 0) { left = true; }
                    if (bottom === void 0) { bottom = true; }
                    if (right === void 0) { right = true; }
                    if (top)
                        this.addTopFrame(rect, left, right);
                    if (left)
                        this.addLeftFrame(rect, top, bottom);
                    if (bottom)
                        this.addBottomFrame(rect, left, right);
                    if (right)
                        this.addRightFrame(rect, top, bottom);
                };
                WcWinElementPresenter.prototype.addLeftFrame = function (rect, top, bottom) {
                    if (top === void 0) { top = true; }
                    if (bottom === void 0) { bottom = true; }
                    return this.addLSide(rect, this.frameThick(), this.frameStroke(), this.frameFill(), top, bottom);
                };
                WcWinElementPresenter.prototype.addRightFrame = function (rect, top, bottom) {
                    if (top === void 0) { top = true; }
                    if (bottom === void 0) { bottom = true; }
                    return this.addRSide(rect, this.frameThick(), this.frameStroke(), this.frameFill(), top, bottom);
                };
                WcWinElementPresenter.prototype.addTopFrame = function (rect, left, right) {
                    if (left === void 0) { left = true; }
                    if (right === void 0) { right = true; }
                    return this.addTSide(rect, this.frameThick(), this.frameStroke(), this.frameFill(), left, right);
                };
                WcWinElementPresenter.prototype.addBottomFrame = function (rect, left, right) {
                    if (left === void 0) { left = true; }
                    if (right === void 0) { right = true; }
                    return this.addBSide(rect, this.frameThick(), this.frameStroke(), this.frameFill(), left, right);
                };
                WcWinElementPresenter.prototype.addBox = function (rect, stroke, fill) {
                    var box = this.Scene.newPolygon();
                    box.Fill = fill;
                    box.Stroke = stroke;
                    var lt = new U1.Vector3(rect.X, rect.Y);
                    var lb = new U1.Vector3(rect.X, rect.Bottom);
                    var rb = new U1.Vector3(rect.Right, rect.Bottom);
                    var rt = new U1.Vector3(rect.Right, rect.Y);
                    box.Points = [lt, lb, rb, rt];
                    this.addEntity(box);
                    return box;
                };
                WcWinElementPresenter.prototype.addVBar = function (topLoc, height, top, botttom) {
                    if (top === void 0) { top = false; }
                    if (botttom === void 0) { botttom = false; }
                    var halfT = this.barThick() / 2;
                    var lt = new U1.Vector3(topLoc.X - halfT, topLoc.Y);
                    var ct = new U1.Vector3(topLoc.X, topLoc.Y);
                    var rt = new U1.Vector3(topLoc.X + halfT, topLoc.Y);
                    var lb = new U1.Vector3(topLoc.X - halfT, topLoc.Y + height);
                    var cb = new U1.Vector3(topLoc.X, topLoc.Y + height);
                    var rb = new U1.Vector3(topLoc.X + halfT, topLoc.Y + height);
                    if (top) {
                        ct.Y -= halfT - halfT / 4;
                    }
                    if (botttom) {
                        cb.Y += halfT - halfT / 4;
                    }
                    var bar = this.Scene.newPolygon();
                    bar.Fill = this.barFill();
                    bar.Stroke = this.barStroke();
                    bar.Points = [lt, lb, cb, rb, rt, ct];
                    this.addEntity(bar);
                    return bar;
                };
                WcWinElementPresenter.prototype.addHBar = function (leftLoc, width, left, right) {
                    if (left === void 0) { left = false; }
                    if (right === void 0) { right = false; }
                    var halfT = this.barThick() / 2;
                    var y = leftLoc.Y;
                    var x0 = leftLoc.X;
                    var x1 = x0 + width;
                    var lt = new U1.Vector3(x0, y - halfT);
                    var lc = new U1.Vector3(x0, y);
                    var lb = new U1.Vector3(x0, y + halfT);
                    var rt = new U1.Vector3(x1, y - halfT);
                    var rc = new U1.Vector3(x1, y);
                    var rb = new U1.Vector3(x1, y + halfT);
                    if (left) {
                        lc.X -= halfT - halfT / 4;
                    }
                    if (right) {
                        rc.X += halfT - halfT / 4;
                    }
                    var bar = this.Scene.newPolygon();
                    bar.Fill = this.barFill();
                    bar.Stroke = this.barStroke();
                    bar.Points = [lt, lc, lb, rb, rc, rt];
                    this.addEntity(bar);
                    return bar;
                };
                WcWinElementPresenter.prototype.CreateVcDim = function () {
                    var ndim = this.View.Controls.AddControl(U1.Views.VcDimension);
                    ndim.Transform = this.Scene.World.Transform;
                    ndim.AfterMouseUp.Add(this, function (cv, ev_) {
                        ndim.BeginEdit();
                    });
                    ndim.FontSize = this.dimFontSize();
                    ndim.ReadOnly = true;
                    return ndim;
                };
                WcWinElementPresenter.prototype.addLeftDim = function (orign, topY, btmY, step) {
                    if (step === void 0) { step = 0; }
                    if (!this.WinElem.ShowDim)
                        return;
                    var dim = this.CreateVcDim();
                    this._dims.push(dim);
                    var len = btmY - topY;
                    // 2016-08-16 진G 요청사항으로 확대/축소에 따라 폰트 사이즈를 변경함
                    var bodySizeW = 600;
                    var bodySizeH = 450;
                    if (this.WinElem.W / bodySizeW > this.WinElem.H / bodySizeH) {
                        dim.FontSize = this.dimFontSize() * this.WinElem.W / bodySizeW;
                    }
                    else {
                        dim.FontSize = this.dimFontSize() * this.WinElem.H / bodySizeH;
                    }
                    //dim.FontSize = this.dimFontSize();
                    dim.Start = new U1.Vector3(orign.X, orign.Y + topY);
                    dim.End = new U1.Vector3(orign.X, orign.Y + btmY);
                    dim.Offset = this.dimOffset() * (step + 1);
                    dim.Text = "" + len.toFixed(0);
                    return dim;
                };
                WcWinElementPresenter.prototype.addRightDim = function (orign, topY, btmY, step) {
                    if (step === void 0) { step = 0; }
                    if (!this.WinElem.ShowDim)
                        return;
                    var dim = this.CreateVcDim();
                    this._dims.push(dim);
                    var len = btmY - topY;
                    dim.FontSize = this.dimFontSize();
                    dim.End = new U1.Vector3(orign.X, orign.Y + topY);
                    dim.Start = new U1.Vector3(orign.X, orign.Y + btmY);
                    dim.Offset = this.dimOffset() * (step + 1);
                    dim.Text = "" + len.toFixed(0);
                    return dim;
                };
                WcWinElementPresenter.prototype.addBottomDim = function (orign, leftX, rightX, step) {
                    if (step === void 0) { step = 0; }
                    if (!this.WinElem.ShowDim)
                        return;
                    var dim = this.CreateVcDim();
                    this._dims.push(dim);
                    var len = rightX - leftX;
                    // 2016-08-16 진G 요청사항으로 확대/축소에 따라 폰트 사이즈를 변경함
                    var bodySizeW = 600;
                    var bodySizeH = 450;
                    if (this.WinElem.W / bodySizeW > this.WinElem.H / bodySizeH) {
                        dim.FontSize = this.dimFontSize() * this.WinElem.W / bodySizeW;
                    }
                    else {
                        dim.FontSize = this.dimFontSize() * this.WinElem.H / bodySizeH;
                    }
                    //dim.FontSize = this.dimFontSize();
                    dim.Start = new U1.Vector3(orign.X + leftX, orign.Y);
                    dim.End = new U1.Vector3(orign.X + rightX, orign.Y);
                    dim.Offset = this.dimOffset() * (step + 1);
                    dim.Text = "" + len.toFixed(0);
                    return dim;
                };
                WcWinElementPresenter.prototype.addTopDim = function (orign, leftX, rightX, step) {
                    if (step === void 0) { step = 0; }
                    if (!this.WinElem.ShowDim)
                        return;
                    var dim = this.CreateVcDim();
                    this._dims.push(dim);
                    var len = rightX - leftX;
                    dim.FontSize = this.dimFontSize();
                    dim.Start = new U1.Vector3(orign.X + leftX, orign.Y);
                    dim.End = new U1.Vector3(orign.X + rightX, orign.Y);
                    dim.Offset = -this.dimOffset() * (step + 1);
                    //dim.TextAlign = System.Windows.VerticalAlignment.Bottom;
                    dim.Text = "" + len.toFixed(0);
                    return dim;
                };
                WcWinElementPresenter.prototype.addWindow = function (rect, frame, gb) {
                    if (frame === void 0) { frame = true; }
                    if (gb === void 0) { gb = true; }
                    var box = this.Scene.newPolygon();
                    box.Fill = this.winFill();
                    box.Stroke = this.winStroke();
                    var lt = new U1.Vector3(rect.X, rect.Y);
                    var lb = new U1.Vector3(rect.X, rect.Bottom);
                    var rb = new U1.Vector3(rect.Right, rect.Bottom);
                    var rt = new U1.Vector3(rect.Right, rect.Y);
                    if (frame) {
                        var frThick = this.winFrameThick();
                        var frStroke = this.winFrameStroke();
                        var frFill = this.winFrameFill();
                        this.addLSide(rect, frThick, frStroke, frFill);
                        this.addRSide(rect, frThick, frStroke, frFill);
                        this.addTSide(rect, frThick, frStroke, frFill);
                        this.addBSide(rect, frThick, frStroke, frFill);
                        lt.X += frThick;
                        lb.X += frThick;
                        rt.X -= frThick;
                        rb.X -= frThick;
                        lt.Y += frThick;
                        rt.Y += frThick;
                        lb.Y -= frThick;
                        rb.Y -= frThick;
                        rect = new U1.Rectangle(lt.X, lt.Y, rt.X - lt.X, lb.Y - lt.Y);
                    }
                    box.Points = [lt, lb, rb, rt];
                    this.addEntity(box);
                    if (gb) {
                        var gbThick = this.gbThick();
                        var gbStroke = this.gbStroke();
                        var gbFill = this.gbFill();
                        this.addLSide(rect, gbThick, gbStroke, gbFill);
                        this.addRSide(rect, gbThick, gbStroke, gbFill);
                        this.addTSide(rect, gbThick, gbStroke, gbFill);
                        this.addBSide(rect, gbThick, gbStroke, gbFill);
                    }
                };
                WcWinElementPresenter.prototype.addLSide = function (rect, thick, stroke, fill, top, bottom) {
                    if (top === void 0) { top = true; }
                    if (bottom === void 0) { bottom = true; }
                    var lSide = this.Scene.newPolygon();
                    lSide.Fill = fill;
                    lSide.Stroke = stroke;
                    var lt = new U1.Vector3(rect.X, rect.Y);
                    var lb = new U1.Vector3(rect.X, rect.Bottom);
                    var rb = new U1.Vector3(rect.X + thick, rect.Bottom);
                    if (bottom) {
                        rb.Y -= thick;
                    }
                    var rt = new U1.Vector3(rect.X + thick, rect.Y);
                    if (top) {
                        rt.Y += thick;
                    }
                    lSide.Points = [lt, lb, rb, rt];
                    this.addEntity(lSide);
                    return lSide;
                };
                WcWinElementPresenter.prototype.addRSide = function (rect, thick, stroke, fill, top, bottom) {
                    if (top === void 0) { top = true; }
                    if (bottom === void 0) { bottom = true; }
                    var rSide = this.Scene.newPolygon();
                    rSide.Fill = fill;
                    rSide.Stroke = stroke;
                    var lt = new U1.Vector3(rect.Right - thick, rect.Y);
                    if (top) {
                        lt.Y += thick;
                    }
                    var lb = new U1.Vector3(rect.Right - thick, rect.Bottom);
                    if (bottom) {
                        lb.Y -= thick;
                    }
                    var rb = new U1.Vector3(rect.Right, rect.Bottom);
                    var rt = new U1.Vector3(rect.Right, rect.Top);
                    rSide.Points = [lt, lb, rb, rt];
                    this.addEntity(rSide);
                    return rSide;
                };
                WcWinElementPresenter.prototype.addTSide = function (rect, thick, stroke, fill, left, right) {
                    if (left === void 0) { left = true; }
                    if (right === void 0) { right = true; }
                    var tSide = this.Scene.newPolygon();
                    tSide.Fill = fill;
                    tSide.Stroke = stroke;
                    var lt = new U1.Vector3(rect.X, rect.Y);
                    var lb = new U1.Vector3(rect.X, rect.Y + thick);
                    if (left)
                        lb.X += thick;
                    var rb = new U1.Vector3(rect.Right, rect.Y + thick);
                    if (right)
                        rb.X -= thick;
                    var rt = new U1.Vector3(rect.Right, rect.Y);
                    tSide.Points = [lt, lb, rb, rt];
                    this.addEntity(tSide);
                    return tSide;
                };
                WcWinElementPresenter.prototype.addBSide = function (rect, thick, stroke, fill, left, right) {
                    if (left === void 0) { left = true; }
                    if (right === void 0) { right = true; }
                    var bSide = this.Scene.newPolygon();
                    bSide.Fill = fill;
                    bSide.Stroke = stroke;
                    var lt = new U1.Vector3(rect.X, rect.Bottom - thick);
                    if (left)
                        lt.X += thick;
                    var lb = new U1.Vector3(rect.X, rect.Bottom);
                    var rb = new U1.Vector3(rect.Right, rect.Bottom);
                    var rt = new U1.Vector3(rect.Right, rect.Bottom - thick);
                    if (right)
                        rt.X -= thick;
                    bSide.Points = [lt, lb, rb, rt];
                    this.addEntity(bSide);
                    return bSide;
                };
                WcWinElementPresenter.prototype.addOpenTrangle = function (rect, pading, dir, stroke) {
                    if (stroke === void 0) { stroke = U1.Colors.Black; }
                    var p0 = U1.Vector3.Zero;
                    var p1 = U1.Vector3.Zero;
                    var p2 = U1.Vector3.Zero;
                    var x1 = rect.X + pading;
                    var x2 = rect.Right - pading;
                    var y1 = rect.Y + pading;
                    var y2 = rect.Bottom - pading;
                    if (dir === "U") {
                        p0.Set(x1, y2, 0);
                        p1.Set((x1 + x2) / 2, y1, 0);
                        p2.Set(x2, y2, 0);
                    }
                    else if (dir === "D") {
                        p0.Set(x1, y1, 0);
                        p1.Set((x1 + x2) / 2, y2, 0);
                        p2.Set(x2, y1, 0);
                    }
                    else if (dir === "L") {
                        p0.Set(x2, y1, 0);
                        p1.Set(x1, (y1 + y2) / 2, 0);
                        p2.Set(x2, y2, 0);
                    }
                    else if (dir === "R") {
                        p0.Set(x1, y1, 0);
                        p1.Set(x2, (y1 + y2) / 2, 0);
                        p2.Set(x1, y2, 0);
                    }
                    else {
                        return;
                    }
                    var triangle = this.Scene.newPolyLine();
                    triangle.Stroke = stroke;
                    triangle.Points = [p0, p1, p2];
                    this.addEntity(triangle);
                    return triangle;
                };
                WcWinElementPresenter.prototype.addCenterPlus = function (rect, size, thick, stroke) {
                    if (size === void 0) { size = 40; }
                    if (thick === void 0) { thick = 1; }
                    if (stroke === void 0) { stroke = U1.Colors.Black; }
                    var x1 = rect.X;
                    var x2 = rect.Right;
                    var y1 = rect.Y;
                    var y2 = rect.Bottom;
                    var half_s = size / 2;
                    var cy = (y1 + y2) / 2;
                    var cx = (x1 + x2) / 2;
                    var p1 = new U1.Vector3(cx - half_s, cy);
                    var p2 = new U1.Vector3(cx + half_s, cy);
                    var p3 = new U1.Vector3(cx, cy - half_s);
                    var p4 = new U1.Vector3(cx, cy + half_s);
                    var group = this.Scene.newGroup();
                    var line1 = this.Scene.newPolyLine();
                    line1.Stroke = stroke;
                    line1.Points = [p1, p2];
                    line1.StrokeThickness = thick;
                    group.AddChild(line1);
                    var line2 = this.Scene.newPolyLine();
                    line2.Stroke = stroke;
                    line2.Points = [p3, p4];
                    line2.StrokeThickness = thick;
                    group.AddChild(line2);
                    this.addEntity(group);
                    return group;
                };
                WcWinElementPresenter.prototype.addX = function (rect, thick, stroke) {
                    if (thick === void 0) { thick = 1; }
                    if (stroke === void 0) { stroke = U1.Colors.Black; }
                    var x1 = rect.X;
                    var x2 = rect.Right;
                    var y1 = rect.Y;
                    var y2 = rect.Bottom;
                    var cy = (y1 + y2) / 2;
                    var cx = (x1 + x2) / 2;
                    var p1 = new U1.Vector3(x1, y1);
                    var p2 = new U1.Vector3(x2, y2);
                    var p3 = new U1.Vector3(x2, y1);
                    var p4 = new U1.Vector3(x1, y2);
                    var group = this.Scene.newGroup();
                    var line1 = this.Scene.newPolyLine();
                    line1.Stroke = stroke;
                    line1.Points = [p1, p2];
                    group.AddChild(line1);
                    var line2 = this.Scene.newPolyLine();
                    line2.Stroke = stroke;
                    line2.Points = [p3, p4];
                    group.AddChild(line2);
                    this.addEntity(group);
                    return group;
                };
                WcWinElementPresenter.prototype.addCenterText = function (rect, text, fontSize, fill) {
                    if (fontSize === void 0) { fontSize = 80; }
                    if (fill === void 0) { fill = U1.Colors.Black; }
                    var mp = new U1.Vector3(rect.X + rect.Width / 2, rect.Y + rect.Height / 2);
                    var txt = this.Scene.newText();
                    txt.Text = text;
                    txt.FontSize = fontSize;
                    txt.Fill = fill;
                    txt.Width = text.length * fontSize;
                    var w = txt.ActualWidth;
                    txt.Transform =
                        U1.Matrix4.CreateTranslation(new U1.Vector3(-w / 2, -fontSize, 0))
                            .Multiply(U1.Matrix4.CreateTranslation(mp));
                };
                WcWinElementPresenter.prototype.addCenterArrowL = function (rect, h, w, thick, stroke) {
                    if (h === void 0) { h = 30; }
                    if (w === void 0) { w = 150; }
                    if (thick === void 0) { thick = 1; }
                    if (stroke === void 0) { stroke = U1.Colors.Black; }
                    var x1 = rect.X;
                    var x2 = rect.Right;
                    var y1 = rect.Y;
                    var y2 = rect.Bottom;
                    var half_s = w / 2;
                    var cy = (y1 + y2) / 2;
                    var cx = (x1 + x2) / 2;
                    var p1 = new U1.Vector3(cx - half_s, cy);
                    var p2 = new U1.Vector3(cx + half_s, cy);
                    var p3 = new U1.Vector3(p1.X + h, p1.Y - h);
                    var p4 = new U1.Vector3(p1.X + h, p1.Y + h);
                    var group = this.Scene.newGroup();
                    var line1 = this.Scene.newPolyLine();
                    line1.Stroke = stroke;
                    line1.Points = [p1, p2];
                    group.AddChild(line1);
                    var line2 = this.Scene.newPolyLine();
                    line2.Stroke = stroke;
                    line2.Points = [p3, p1, p4];
                    group.AddChild(line2);
                    this.addEntity(group);
                    return group;
                };
                WcWinElementPresenter.prototype.addCenterArrowR = function (rect, h, w, thick, stroke) {
                    if (h === void 0) { h = 30; }
                    if (w === void 0) { w = 150; }
                    if (thick === void 0) { thick = 1; }
                    if (stroke === void 0) { stroke = U1.Colors.Black; }
                    var x1 = rect.X;
                    var x2 = rect.Right;
                    var y1 = rect.Y;
                    var y2 = rect.Bottom;
                    var half_s = w / 2;
                    var cy = (y1 + y2) / 2;
                    var cx = (x1 + x2) / 2;
                    var p1 = new U1.Vector3(cx - half_s, cy);
                    var p2 = new U1.Vector3(cx + half_s, cy);
                    var p3 = new U1.Vector3(p2.X - h, p2.Y - h);
                    var p4 = new U1.Vector3(p2.X - h, p2.Y + h);
                    var group = this.Scene.newGroup();
                    var line1 = this.Scene.newPolyLine();
                    line1.Stroke = stroke;
                    line1.Points = [p1, p2];
                    group.AddChild(line1);
                    var line2 = this.Scene.newPolyLine();
                    line2.Stroke = stroke;
                    line2.Points = [p3, p2, p4];
                    group.AddChild(line2);
                    this.addEntity(group);
                    return group;
                };
                WcWinElementPresenter.prototype.addCenterArrowLR = function (rect, h, w, thick, stroke) {
                    if (h === void 0) { h = 30; }
                    if (w === void 0) { w = 150; }
                    if (thick === void 0) { thick = 1; }
                    if (stroke === void 0) { stroke = U1.Colors.Black; }
                    var x1 = rect.X;
                    var x2 = rect.Right;
                    var y1 = rect.Y;
                    var y2 = rect.Bottom;
                    var half_s = w / 2;
                    var cy = (y1 + y2) / 2;
                    var cx = (x1 + x2) / 2;
                    var p1 = new U1.Vector3(cx - half_s, cy);
                    var p2 = new U1.Vector3(cx + half_s, cy);
                    var p3 = new U1.Vector3(p1.X + h, p1.Y - h);
                    var p4 = new U1.Vector3(p1.X + h, p1.Y + h);
                    var p5 = new U1.Vector3(p2.X - h, p2.Y - h);
                    var p6 = new U1.Vector3(p2.X - h, p2.Y + h);
                    var group = this.Scene.newGroup();
                    var line1 = this.Scene.newPolyLine();
                    line1.Stroke = stroke;
                    line1.Points = [p1, p2];
                    group.AddChild(line1);
                    var line2 = this.Scene.newPolyLine();
                    line2.Stroke = stroke;
                    line2.Points = [p3, p1, p4];
                    group.AddChild(line2);
                    var line3 = this.Scene.newPolyLine();
                    line3.Stroke = stroke;
                    line3.Points = [p5, p2, p6];
                    group.AddChild(line3);
                    this.addEntity(group);
                    return group;
                };
                WcWinElementPresenter.prototype.addVent = function (rect, size, thick, stroke) {
                    if (size === void 0) { size = 40; }
                    if (thick === void 0) { thick = 1; }
                    if (stroke === void 0) { stroke = U1.Colors.Black; }
                    var x1 = rect.X;
                    var x2 = rect.Right;
                    var y1 = rect.Y;
                    var y2 = rect.Bottom;
                    var half_s = size / 2;
                    var cy = (y1 + y2) / 2;
                    var cx = (x1 + x2) / 2;
                    var p1 = new U1.Vector3(cx - half_s, cy - size - half_s);
                    var p2 = new U1.Vector3(cx, cy - half_s);
                    var p3 = new U1.Vector3(cx + half_s, cy - size - half_s);
                    //var p4 = new Vector3(cx, cy + half_s);
                    var group = this.Scene.newGroup();
                    var line1 = this.Scene.newPolyLine();
                    line1.Stroke = stroke;
                    line1.Points = [p1, p2];
                    line1.StrokeThickness = thick;
                    group.AddChild(line1);
                    var line2 = this.Scene.newPolyLine();
                    line2.Stroke = stroke;
                    line2.Points = [p2, p3];
                    line2.StrokeThickness = thick;
                    group.AddChild(line2);
                    this.addEntity(group);
                    return group;
                };
                /**
                 *
                 * @param rect
                 * @param margin
                 * @param angle 각도(degree)
                 * @param span  라인 간격
                 * @param thick
                 * @param stroke
                 */
                WcWinElementPresenter.prototype.addLines = function (rect, margin, angle, span, thick, stroke) {
                    if (margin === void 0) { margin = 0; }
                    if (angle === void 0) { angle = 0; }
                    if (span === void 0) { span = 100; }
                    if (thick === void 0) { thick = 1; }
                    if (stroke === void 0) { stroke = U1.Colors.Black; }
                    var group = this.Scene.newGroup();
                    angle = angle / 180 * Math.PI;
                    var dir = new U1.Vector3();
                    dir.X = Math.cos(angle);
                    dir.Y = Math.sin(angle);
                    var left = new U1.Vector3(-dir.Y, dir.X);
                    var len = Math.max(rect.Width, rect.Height);
                    var min_s = -len;
                    var max_s = len;
                    var x0 = rect.X + margin;
                    var x1 = rect.Right - margin;
                    var y0 = rect.Y + margin;
                    var y1 = rect.Bottom - margin;
                    var cp = new U1.Vector3((x0 + x1) / 2, (y0 + y1) / 2);
                    for (var s = min_s; s < max_s; s += span) {
                        var p0 = U1.Vector3.ScaleAdd(cp, s, left);
                        var s0 = -len;
                        var s1 = len;
                        if (dir.X != 0) {
                            s0 = Math.max((x0 - p0.X) / dir.X, s0);
                            s1 = Math.min((x1 - p0.X) / dir.X, s1);
                        }
                        if (dir.Y != 0) {
                            s0 = Math.max((y0 - p0.Y) / dir.Y, s0);
                            s1 = Math.min((y1 - p0.Y) / dir.Y, s1);
                        }
                        var p1 = U1.Vector3.ScaleAdd(p0, s0, dir);
                        var p2 = U1.Vector3.ScaleAdd(p0, s1, dir);
                        if (p1.X < x0 || p1.X > x1 || p2.X < x0 || p2.X > x1)
                            continue;
                        if (p1.Y < y0 || p1.Y > y1 || p2.Y < y0 || p2.Y > y1)
                            continue;
                        var scPLine = this.Scene.newPolyLine();
                        scPLine.Stroke = stroke;
                        scPLine.StrokeThickness = thick;
                        scPLine.Points = [p1, p2];
                        group.AddChild(scPLine);
                    }
                    this.addEntity(group);
                    return group;
                };
                WcWinElementPresenter.prototype.addInsectNet = function (winregion, loc) {
                    if (!this.WinElem.ShowInsectNet)
                        return;
                    var canvas = this.Scene.newGroup();
                    var thick = this.winFrameThick() + this.gbThick() * 2;
                    var win_w = winregion.Width - thick * 2;
                    var win_h = winregion.Height - thick * 2;
                    var start = new U1.Vector3(thick + winregion.X, thick + winregion.Y, 0);
                    var span = 40;
                    var count = 8;
                    var net_w = Math.min(win_w, count * span);
                    var net_h = Math.min(win_h, count * span);
                    var is_left_win = loc == "L";
                    if (!is_left_win) {
                        start.X = winregion.Right - thick - count * span;
                    }
                    for (var i = 1; i < count && i * span < net_w; i++) {
                        var vline = this.Scene.newPolyLine();
                        var p0 = start.Clone();
                        p0.X += i * span;
                        var p1 = p0.Clone();
                        if (is_left_win)
                            p1.Y += Math.min(net_h, (count - i + 0.5) * span);
                        else
                            p1.Y += Math.min(net_h, (i + 0.5) * span);
                        vline.Points = [p0, p1];
                        canvas.AddChild(vline);
                    }
                    for (var i = 1; i < count && i * span < net_h; i++) {
                        var vline = this.Scene.newPolyLine();
                        var p0 = start.Clone();
                        p0.Y += i * span;
                        if (!is_left_win)
                            p0.X += Math.min(net_w, (i - 1) * span);
                        var p1 = p0.Clone();
                        p1.X += Math.min(net_w, (count - i + 0.5) * span);
                        vline.Points = [p0, p1];
                        canvas.AddChild(vline);
                    }
                    this.addEntity(canvas);
                    return canvas;
                };
                WcWinElementPresenter.prototype.addCs = function (winregion, rate) {
                    if (rate === void 0) { rate = 0.75; }
                    var canvas = this.Scene.newGroup();
                    var thick = this.winFrameThick() + this.gbThick() * 2;
                    var win_w = winregion.Width - thick * 2;
                    var win_h = winregion.Height - thick * 2;
                    var start = new U1.Vector3(thick + winregion.X, thick + winregion.Y, 0);
                    var vline = this.Scene.newPolyLine();
                    var p0 = start.Clone();
                    p0.Y = p0.Y + win_h * rate;
                    var p1 = p0.Clone();
                    p1.X = p0.X + win_w;
                    vline.Points = [p0, p1];
                    canvas.AddChild(vline);
                    this.addEntity(canvas);
                    return canvas;
                };
                return WcWinElementPresenter;
            }(U1.Views.UElementPresenter));
            Presenters.WcWinElementPresenter = WcWinElementPresenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelementpresenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _2W_1FIX_I_L_Presenter = (function (_super) {
                __extends(_2W_1FIX_I_L_Presenter, _super);
                function _2W_1FIX_I_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_1FIX_I_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = w / 2 - fr_thick;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w + bar_thick, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    //this.addVBar(new Vector2(fr_thick + dwinw + bar_thick / 2, fr_thick + uwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_l_rect, "L");
                };
                return _2W_1FIX_I_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_1FIX_I_L_Presenter = _2W_1FIX_I_L_Presenter;
            var _2W_2FIX_I_Presenter = (function (_super) {
                __extends(_2W_2FIX_I_Presenter, _super);
                function _2W_2FIX_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2FIX_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = (h1 - fr_thick - bar_thick - bar_thick / 2) / 2;
                    var cwinw = w - fr_thick * 2;
                    var cwinh = (h1 - fr_thick - bar_thick - bar_thick / 2) / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = w / 2 - fr_thick;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var c_x = fr_thick;
                    var c_y = fr_thick + uwinh + bar_thick;
                    var c_w = cwinw;
                    var c_h = cwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, c_y, c_w, c_h);
                    var c_rect = new U1.Rectangle(c_x, u_y, u_w, u_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w + bar_thick, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(c_rect, false);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), uwinw, true, true);
                    //this.addVBar(new Vector2(fr_thick + dwinw + bar_thick / 2, fr_thick + uwinh + bar_thick + cwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterPlus(c_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_l_rect, "L");
                };
                return _2W_2FIX_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2FIX_I_Presenter = _2W_2FIX_I_Presenter;
            var _2W_1FIX_I_Presenter = (function (_super) {
                __extends(_2W_1FIX_I_Presenter, _super);
                function _2W_1FIX_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_1FIX_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = (h - fr_thick * 2 - bar_thick - h1) / 2;
                    var cwinw = w - fr_thick * 2;
                    var cwinh = h1 - bar_thick;
                    var dwinw = w - fr_thick * 2;
                    var dwinh = (h - fr_thick * 2 - bar_thick - h1) / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var c_x = fr_thick;
                    var c_y = fr_thick + uwinh + bar_thick;
                    var c_w = cwinw;
                    var c_h = cwinh;
                    var d_x = fr_thick;
                    var d_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_w = dwinw;
                    var d_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var c_rect = new U1.Rectangle(c_x, c_y, c_w, c_h);
                    var d_rect = new U1.Rectangle(d_x, d_y, d_w, d_h);
                    this.addWindow(u_rect);
                    this.addWindow(c_rect, false);
                    this.addWindow(d_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), uwinw, false, false);
                    this.addOpenTrangle(u_rect, bar_thick + this.gbThick(), "U");
                    this.addCenterPlus(c_rect, 80);
                    this.addOpenTrangle(d_rect, bar_thick + this.gbThick(), "U");
                    this.addLeftDim(lt, fr_thick + uwinh + bar_thick / 2, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    //this.addInsectNet(d_l_rect, "L");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, hndlSizeH / 2 + uwinh, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, hndlSizeH / 2 + d_rect.Bottom, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _2W_1FIX_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_1FIX_I_Presenter = _2W_1FIX_I_Presenter;
            var _2W_3FIX_I_Presenter = (function (_super) {
                __extends(_2W_3FIX_I_Presenter, _super);
                function _2W_3FIX_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_3FIX_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = (h1 - fr_thick - bar_thick * 2 - bar_thick / 2) / 3;
                    var c_uwinw = w - fr_thick * 2;
                    var c_uwinh = (h1 - fr_thick - bar_thick * 2 - bar_thick / 2) / 3;
                    var c_dwinw = w - fr_thick * 2;
                    var c_dwinh = (h1 - fr_thick - bar_thick * 2 - bar_thick / 2) / 3;
                    var dwinw = w / 2 - fr_thick;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var c_u_x = fr_thick;
                    var c_u_y = fr_thick + uwinh + bar_thick;
                    var c_u_w = c_uwinw;
                    var c_u_h = c_uwinh;
                    var c_d_x = fr_thick;
                    var c_d_y = fr_thick + uwinh + bar_thick + c_uwinh + bar_thick;
                    var c_d_w = c_dwinw;
                    var c_d_h = c_dwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var c_u_rect = new U1.Rectangle(c_u_x, c_u_y, c_u_w, c_u_h);
                    var c_d_rect = new U1.Rectangle(c_d_x, c_d_y, c_d_w, c_d_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w + bar_thick, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(c_u_rect, false);
                    this.addWindow(c_d_rect, false);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + c_uwinh + bar_thick / 2), uwinw, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + c_uwinh + bar_thick + c_dwinh + bar_thick / 2), uwinw, true, true);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterPlus(c_u_rect, 80);
                    this.addCenterPlus(c_d_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_l_rect, "L");
                };
                return _2W_3FIX_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_3FIX_I_Presenter = _2W_3FIX_I_Presenter;
            var _2W_2FIX_Presenter = (function (_super) {
                __extends(_2W_2FIX_Presenter, _super);
                function _2W_2FIX_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2FIX_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var u_r_x = fr_thick + uwinw + bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), dwinw * 2 - bar_thick, true, true);
                    this.addVBar(new U1.Vector2(fr_thick + uwinw + bar_thick / 2, fr_thick), uwinh, true, true);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_l_rect, "L");
                };
                return _2W_2FIX_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2FIX_Presenter = _2W_2FIX_Presenter;
            var _2W_4FIX_Presenter = (function (_super) {
                __extends(_2W_4FIX_Presenter, _super);
                function _2W_4FIX_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_4FIX_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick) / 2;
                    var uwinh = (h1 - fr_thick - bar_thick - bar_thick / 2) / 2;
                    var cwinw = (w - fr_thick * 2 - bar_thick) / 2;
                    var cwinh = (h1 - fr_thick - bar_thick - bar_thick / 2) / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var u_r_x = fr_thick + uwinw + bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinw;
                    var u_r_h = uwinh;
                    var c_l_x = fr_thick;
                    var c_l_y = fr_thick + uwinh + bar_thick;
                    var c_l_w = cwinw;
                    var c_l_h = cwinh;
                    var c_r_x = fr_thick + uwinw + bar_thick;
                    var c_r_y = fr_thick + uwinh + bar_thick;
                    var c_r_w = uwinw;
                    var c_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var c_l_rect = new U1.Rectangle(c_l_x, c_l_y, c_l_w, c_l_h);
                    var c_r_rect = new U1.Rectangle(c_r_x, c_r_y, c_r_w, c_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(c_l_rect, false);
                    this.addWindow(c_r_rect, false);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), dwinw * 2 - bar_thick, true, true);
                    this.addVBar(new U1.Vector2(fr_thick + uwinw + bar_thick / 2, fr_thick), uwinh + bar_thick + cwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addHBar(new U1.Vector2(fr_thick + uwinw + bar_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterPlus(c_l_rect, 80);
                    this.addCenterPlus(c_r_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_l_rect, "L");
                };
                return _2W_4FIX_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_4FIX_Presenter = _2W_4FIX_Presenter;
            var _2W_2FIX_I_L_Presenter = (function (_super) {
                __extends(_2W_2FIX_I_L_Presenter, _super);
                function _2W_2FIX_I_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2FIX_I_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var cwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    //var cwinh = h - h1 * 2 - bar_thick;
                    var cwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = w - fr_thick * 2;
                    //var dwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var c_l_x = fr_thick;
                    var c_l_y = fr_thick + uwinh + bar_thick;
                    var c_l_w = cwinw;
                    var c_l_h = cwinh;
                    var c_r_x = fr_thick + cwinw - wfr_thick;
                    var c_r_y = fr_thick + uwinh + bar_thick;
                    var c_r_w = cwinw;
                    var c_r_h = cwinh;
                    var d_x = fr_thick;
                    var d_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_w = dwinw;
                    var d_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var c_l_rect = new U1.Rectangle(c_l_x, c_l_y, c_l_w, c_l_h);
                    var c_r_rect = new U1.Rectangle(c_r_x, c_r_y, c_r_w, c_r_h);
                    var d_rect = new U1.Rectangle(d_x, d_y, d_w, d_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(c_r_rect);
                    this.addWindow(c_l_rect);
                    this.addWindow(d_rect, false);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), uwinw, true, true);
                    //this.addVBar(new Vector2(fr_thick + dwinw + bar_thick / 2, fr_thick + uwinh + bar_thick + cwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterArrowR(c_l_rect);
                    this.addCenterArrowL(c_r_rect);
                    this.addCenterPlus(d_rect, 80);
                    this.addVent(c_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    //this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(c_l_rect, "L");
                };
                return _2W_2FIX_I_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2FIX_I_L_Presenter = _2W_2FIX_I_L_Presenter;
            var _2W_1FIX_I_R_Presenter = (function (_super) {
                __extends(_2W_1FIX_I_R_Presenter, _super);
                function _2W_1FIX_I_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_1FIX_I_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    //this.addVBar(new Vector2(fr_thick + dwinw + bar_thick / 2, fr_thick + uwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_r_rect, "R");
                };
                return _2W_1FIX_I_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_1FIX_I_R_Presenter = _2W_1FIX_I_R_Presenter;
            var _2W_2FIX_FS_Presenter = (function (_super) {
                __extends(_2W_2FIX_FS_Presenter, _super);
                function _2W_2FIX_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2FIX_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var u_r_x = fr_thick + uwinw + bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw * 2 + bar_thick, true, true);
                    this.addVBar(new U1.Vector2(fr_thick + uwinw + bar_thick / 2, fr_thick), uwinh, true, true);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_r_rect, "R");
                };
                return _2W_2FIX_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2FIX_FS_Presenter = _2W_2FIX_FS_Presenter;
            var _2W_2FIX_I_R_Presenter = (function (_super) {
                __extends(_2W_2FIX_I_R_Presenter, _super);
                function _2W_2FIX_I_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2FIX_I_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var cwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    //var cwinh = h - h1 * 2 - bar_thick;
                    var cwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = w - fr_thick * 2;
                    //var dwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var c_l_x = fr_thick;
                    var c_l_y = fr_thick + uwinh + bar_thick;
                    var c_l_w = cwinw;
                    var c_l_h = cwinh;
                    var c_r_x = fr_thick + cwinw - wfr_thick;
                    var c_r_y = fr_thick + uwinh + bar_thick;
                    var c_r_w = cwinw;
                    var c_r_h = cwinh;
                    var d_x = fr_thick;
                    var d_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_w = dwinw;
                    var d_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var c_l_rect = new U1.Rectangle(c_l_x, c_l_y, c_l_w, c_l_h);
                    var c_r_rect = new U1.Rectangle(c_r_x, c_r_y, c_r_w, c_r_h);
                    var d_rect = new U1.Rectangle(d_x, d_y, d_w, d_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(c_r_rect);
                    this.addWindow(c_l_rect);
                    this.addWindow(d_rect, false);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), uwinw, true, true);
                    //this.addVBar(new Vector2(fr_thick + dwinw + bar_thick / 2, fr_thick + uwinh + bar_thick + cwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterArrowL(c_r_rect);
                    this.addCenterArrowR(c_l_rect);
                    this.addCenterPlus(d_rect, 80);
                    this.addVent(c_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    //this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(c_r_rect, "R");
                };
                return _2W_2FIX_I_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2FIX_I_R_Presenter = _2W_2FIX_I_R_Presenter;
            var _2W_2FIX_LR_L_Presenter = (function (_super) {
                __extends(_2W_2FIX_LR_L_Presenter, _super);
                function _2W_2FIX_LR_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2FIX_LR_L_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var w1 = winElm.W1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var winwFix = (w - w1 - fr_thick * 2 - wfr_thick) / 2;
                    var winwVent = (w1) / 2;
                    var winh = h - fr_thick * 2;
                    var l_l_x = fr_thick;
                    var l_l_y = fr_thick;
                    var l_l_w = winwFix;
                    var l_l_h = winh;
                    var l_r_x = l_l_x + l_l_w + wfr_thick;
                    var l_r_y = fr_thick;
                    var l_r_w = winwVent;
                    var l_r_h = winh;
                    var r_l_x = l_r_x + l_r_w - wfr_thick;
                    var r_l_y = fr_thick;
                    var r_l_w = winwVent;
                    var r_l_h = winh;
                    var r_r_x = r_l_x + r_l_w + wfr_thick;
                    var r_r_y = fr_thick;
                    var r_r_w = winwFix;
                    var r_r_h = winh;
                    var llwinRect = new U1.Rectangle(l_l_x, l_l_y, l_l_w, l_l_h);
                    var lrwinRect = new U1.Rectangle(l_r_x, l_r_y, l_r_w, l_r_h);
                    var rlwinRect = new U1.Rectangle(r_l_x, r_l_y, r_l_w, r_l_h);
                    var rrwinRect = new U1.Rectangle(r_r_x, r_r_y, r_r_w, r_r_h);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, wfr_thick + winwFix + wfr_thick / 2, r_r_x - wfr_thick / 2, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addWindow(llwinRect);
                    this.addWindow(rlwinRect);
                    this.addWindow(lrwinRect);
                    this.addWindow(rrwinRect);
                    this.addCenterPlus(llwinRect, 80);
                    this.addCenterArrowR(lrwinRect);
                    this.addCenterArrowL(rlwinRect);
                    this.addCenterPlus(rrwinRect, 80);
                    this.addVBar(new U1.Vector2(wfr_thick + winwFix + wfr_thick / 2, fr_thick), winh, true, true);
                    this.addVBar(new U1.Vector2(r_r_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addVent(lrwinRect, 80);
                    this.addInsectNet(lrwinRect, "L");
                };
                return _2W_2FIX_LR_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2FIX_LR_L_Presenter = _2W_2FIX_LR_L_Presenter;
            var _2W_2FIX_LR_R_Presenter = (function (_super) {
                __extends(_2W_2FIX_LR_R_Presenter, _super);
                function _2W_2FIX_LR_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2FIX_LR_R_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var w1 = winElm.W1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var winwFix = (w - w1 - fr_thick * 2 - wfr_thick) / 2;
                    var winwVent = (w1) / 2;
                    var winh = h - fr_thick * 2;
                    var l_l_x = fr_thick;
                    var l_l_y = fr_thick;
                    var l_l_w = winwFix;
                    var l_l_h = winh;
                    var l_r_x = l_l_x + l_l_w + wfr_thick;
                    var l_r_y = fr_thick;
                    var l_r_w = winwVent;
                    var l_r_h = winh;
                    var r_l_x = l_r_x + l_r_w - wfr_thick;
                    var r_l_y = fr_thick;
                    var r_l_w = winwVent;
                    var r_l_h = winh;
                    var r_r_x = r_l_x + r_l_w + wfr_thick;
                    var r_r_y = fr_thick;
                    var r_r_w = winwFix;
                    var r_r_h = winh;
                    var llwinRect = new U1.Rectangle(l_l_x, l_l_y, l_l_w, l_l_h);
                    var lrwinRect = new U1.Rectangle(l_r_x, l_r_y, l_r_w, l_r_h);
                    var rlwinRect = new U1.Rectangle(r_l_x, r_l_y, r_l_w, r_l_h);
                    var rrwinRect = new U1.Rectangle(r_r_x, r_r_y, r_r_w, r_r_h);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, wfr_thick + winwFix + wfr_thick / 2, r_r_x - wfr_thick / 2, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addWindow(llwinRect);
                    this.addWindow(lrwinRect);
                    this.addWindow(rlwinRect);
                    this.addWindow(rrwinRect);
                    this.addCenterPlus(llwinRect, 80);
                    this.addCenterArrowR(lrwinRect);
                    this.addCenterArrowL(rlwinRect);
                    this.addCenterPlus(rrwinRect, 80);
                    this.addVBar(new U1.Vector2(wfr_thick + winwFix + wfr_thick / 2, fr_thick), winh, true, true);
                    this.addVBar(new U1.Vector2(r_r_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addVent(rlwinRect, 80);
                    this.addInsectNet(rlwinRect, "R");
                };
                return _2W_2FIX_LR_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2FIX_LR_R_Presenter = _2W_2FIX_LR_R_Presenter;
            var _1F_2W_1F_I_L_Presenter = (function (_super) {
                __extends(_1F_2W_1F_I_L_Presenter, _super);
                function _1F_2W_1F_I_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_2W_1F_I_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var cwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    //var cwinh = h - h1 * 2 - bar_thick;
                    var cwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = w - fr_thick * 2;
                    //var dwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var c_l_x = fr_thick;
                    var c_l_y = fr_thick + uwinh + bar_thick;
                    var c_l_w = cwinw;
                    var c_l_h = cwinh;
                    var c_r_x = fr_thick + cwinw - wfr_thick;
                    var c_r_y = fr_thick + uwinh + bar_thick;
                    var c_r_w = cwinw;
                    var c_r_h = cwinh;
                    var d_x = fr_thick;
                    var d_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_w = dwinw;
                    var d_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var c_l_rect = new U1.Rectangle(c_l_x, c_l_y, c_l_w, c_l_h);
                    var c_r_rect = new U1.Rectangle(c_r_x, c_r_y, c_r_w, c_r_h);
                    var d_rect = new U1.Rectangle(d_x, d_y, d_w, d_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(c_r_rect);
                    this.addWindow(c_l_rect);
                    this.addWindow(d_rect, false);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), uwinw, true, true);
                    //this.addVBar(new Vector2(fr_thick + dwinw + bar_thick / 2, fr_thick + uwinh + bar_thick + cwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterArrowR(c_l_rect);
                    this.addCenterArrowL(c_r_rect);
                    this.addCenterPlus(d_rect, 80);
                    this.addVent(c_l_rect, 80);
                    //this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(c_l_rect, "L");
                };
                return _1F_2W_1F_I_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_2W_1F_I_L_Presenter = _1F_2W_1F_I_L_Presenter;
            var _1F_2W_1F_I_R_Presenter = (function (_super) {
                __extends(_1F_2W_1F_I_R_Presenter, _super);
                function _1F_2W_1F_I_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_2W_1F_I_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var cwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    //var cwinh = h - h1 * 2 - bar_thick;
                    var cwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = w - fr_thick * 2;
                    //var dwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var c_l_x = fr_thick;
                    var c_l_y = fr_thick + uwinh + bar_thick;
                    var c_l_w = cwinw;
                    var c_l_h = cwinh;
                    var c_r_x = fr_thick + cwinw - wfr_thick;
                    var c_r_y = fr_thick + uwinh + bar_thick;
                    var c_r_w = cwinw;
                    var c_r_h = cwinh;
                    var d_x = fr_thick;
                    var d_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_w = dwinw;
                    var d_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var c_l_rect = new U1.Rectangle(c_l_x, c_l_y, c_l_w, c_l_h);
                    var c_r_rect = new U1.Rectangle(c_r_x, c_r_y, c_r_w, c_r_h);
                    var d_rect = new U1.Rectangle(d_x, d_y, d_w, d_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(c_l_rect);
                    this.addWindow(c_r_rect);
                    this.addWindow(d_rect, false);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), uwinw, true, true);
                    //this.addVBar(new Vector2(fr_thick + dwinw + bar_thick / 2, fr_thick + uwinh + bar_thick + cwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterArrowR(c_l_rect);
                    this.addCenterArrowL(c_r_rect);
                    this.addCenterPlus(d_rect, 80);
                    this.addVent(c_r_rect, 80);
                    //this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(c_r_rect, "R");
                };
                return _1F_2W_1F_I_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_2W_1F_I_R_Presenter = _1F_2W_1F_I_R_Presenter;
            var _1F_1F_2W_I_L_Presenter = (function (_super) {
                __extends(_1F_1F_2W_I_L_Presenter, _super);
                function _1F_1F_2W_I_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_1F_2W_I_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var cwinw = w - fr_thick * 2;
                    //var cwinh = h - h1 * 2 - bar_thick;
                    var cwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    //var dwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var c_x = fr_thick;
                    var c_y = fr_thick + uwinh + bar_thick;
                    var c_w = cwinw;
                    var c_h = cwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - wfr_thick;
                    var d_r_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var c_rect = new U1.Rectangle(c_x, c_y, c_w, c_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(c_rect, false);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), uwinw, true, true);
                    //this.addVBar(new Vector2(fr_thick + dwinw + bar_thick / 2, fr_thick + uwinh + bar_thick + cwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterPlus(c_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_l_rect, 80);
                    //this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_l_rect, "L");
                };
                return _1F_1F_2W_I_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_1F_2W_I_L_Presenter = _1F_1F_2W_I_L_Presenter;
            var _1F_1F_2W_I_R_Presenter = (function (_super) {
                __extends(_1F_1F_2W_I_R_Presenter, _super);
                function _1F_1F_2W_I_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_1F_2W_I_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var cwinw = w - fr_thick * 2;
                    //var cwinh = h - h1 * 2 - bar_thick;
                    var cwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    //var dwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var c_x = fr_thick;
                    var c_y = fr_thick + uwinh + bar_thick;
                    var c_w = cwinw;
                    var c_h = cwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - wfr_thick;
                    var d_r_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var c_rect = new U1.Rectangle(c_x, c_y, c_w, c_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(c_rect, false);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), uwinw, true, true);
                    //this.addVBar(new Vector2(fr_thick + dwinw + bar_thick / 2, fr_thick + uwinh + bar_thick + cwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterPlus(c_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_r_rect, 80);
                    //this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_r_rect, "R");
                };
                return _1F_1F_2W_I_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_1F_2W_I_R_Presenter = _1F_1F_2W_I_R_Presenter;
            var _1F_2V_A_Presenter = (function (_super) {
                __extends(_1F_2V_A_Presenter, _super);
                function _1F_2V_A_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_2V_A_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var w1 = winElm.W1;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dlwinw = w1 - fr_thick - bar_thick / 2;
                    var drwinw = w - w1 - fr_thick - bar_thick / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h - h1 + bar_thick / 2;
                    var d_l_w = dlwinw;
                    var d_l_h = dwinh;
                    var d_r_x = d_l_x + dlwinw + bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = drwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, false, false);
                    this.addVBar(new U1.Vector2(fr_thick + dlwinw + bar_thick / 2, fr_thick + uwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addOpenTrangle(d_l_rect, bar_thick + this.gbThick(), "U");
                    this.addOpenTrangle(d_r_rect, bar_thick + this.gbThick(), "U");
                    //this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    //this.addInsectNet(d_r_rect, "R");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle((w1 + bar_thick / 2 - hndlSizeW) / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    var rHndlRect = new U1.Rectangle((w + w1 - bar_thick / 2 - hndlSizeW) / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                    this.addBox(rHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1F_2V_A_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_2V_A_Presenter = _1F_2V_A_Presenter;
            var _1F_2V_J_Presenter = (function (_super) {
                __extends(_1F_2V_J_Presenter, _super);
                function _1F_2V_J_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_2V_J_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var w1 = winElm.W1;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dlwinw = w1 - fr_thick - bar_thick / 2;
                    var drwinw = w - w1 - fr_thick - bar_thick / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h - h1 + bar_thick / 2;
                    var d_l_w = dlwinw;
                    var d_l_h = dwinh;
                    var d_r_x = d_l_x + dlwinw + bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = drwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, false, false);
                    this.addVBar(new U1.Vector2(fr_thick + dlwinw + bar_thick / 2, fr_thick + uwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addOpenTrangle(d_l_rect, bar_thick + this.gbThick(), "U");
                    this.addOpenTrangle(d_r_rect, bar_thick + this.gbThick(), "U");
                    //this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    //this.addInsectNet(d_r_rect, "R");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle((w1 + bar_thick / 2 - hndlSizeW) / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    var rHndlRect = new U1.Rectangle((w + w1 - bar_thick / 2 - hndlSizeW) / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                    this.addBox(rHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1F_2V_J_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_2V_J_Presenter = _1F_2V_J_Presenter;
            var _1F_2V_V_Presenter = (function (_super) {
                __extends(_1F_2V_V_Presenter, _super);
                function _1F_2V_V_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_2V_V_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var w1 = winElm.W1;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dlwinw = w1 - fr_thick - bar_thick / 2;
                    var drwinw = w - w1 - fr_thick - bar_thick / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h - h1 + bar_thick / 2;
                    var d_l_w = dlwinw;
                    var d_l_h = dwinh;
                    var d_r_x = d_l_x + dlwinw + bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = drwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addVBar(new U1.Vector2(fr_thick + dlwinw + bar_thick / 2, fr_thick + uwinh + bar_thick), dwinh, true, true);
                    this.addCenterPlus(u_rect, 80);
                    this.addOpenTrangle(d_l_rect, bar_thick + this.gbThick(), "U");
                    this.addOpenTrangle(d_r_rect, bar_thick + this.gbThick(), "U");
                    //this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    //this.addInsectNet(d_r_rect, "R");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle((w1 + bar_thick / 2 - hndlSizeW) / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    var rHndlRect = new U1.Rectangle((w + w1 - bar_thick / 2 - hndlSizeW) / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                    this.addBox(rHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1F_2V_V_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_2V_V_Presenter = _1F_2V_V_Presenter;
            var _2W_2F_UB_L_Presenter = (function (_super) {
                __extends(_2W_2F_UB_L_Presenter, _super);
                function _2W_2F_UB_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2F_UB_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var w1 = winElm.W1;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dlwinw = w1 - fr_thick + bar_thick / 2;
                    var drwinw = w - dlwinw - fr_thick * 2 + wfr_thick;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = uwinw;
                    var u_l_h = uwinh;
                    var u_r_x = u_l_x + u_l_w + bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = u_l_w;
                    var u_r_h = u_l_h;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dlwinw;
                    var d_l_h = dwinh;
                    var d_r_x = d_l_x + d_l_w - wfr_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = drwinw;
                    var d_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_l_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw * 2 + bar_thick, true, true);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh, true, true);
                    this.addCenterPlus(u_l_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(d_l_rect, "L");
                };
                return _2W_2F_UB_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2F_UB_L_Presenter = _2W_2F_UB_L_Presenter;
            var _2W_2F_UB_R_Presenter = (function (_super) {
                __extends(_2W_2F_UB_R_Presenter, _super);
                function _2W_2F_UB_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2F_UB_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var w1 = winElm.W1;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var drwinw = w1 - fr_thick + bar_thick / 2;
                    var dlwinw = w - drwinw - fr_thick * 2 + wfr_thick;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = uwinw;
                    var u_l_h = uwinh;
                    var u_r_x = u_l_x + u_l_w + bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = u_l_w;
                    var u_r_h = u_l_h;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dlwinw;
                    var d_l_h = dwinh;
                    var d_r_x = d_l_x + d_l_w - wfr_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = drwinw;
                    var d_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_l_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw * 2 + bar_thick, true, true);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh, true, true);
                    this.addCenterPlus(u_l_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, w - w1, w, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(d_r_rect, "R");
                };
                return _2W_2F_UB_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2F_UB_R_Presenter = _2W_2F_UB_R_Presenter;
            var _2W_1F_PI_Presenter = (function (_super) {
                __extends(_2W_1F_PI_Presenter, _super);
                function _2W_1F_PI_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_1F_PI_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var w1 = winElm.W1;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dlwinw = w1 - fr_thick - bar_thick / 2;
                    var drwinw = w - w1 - fr_thick - bar_thick / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h - h1 + bar_thick / 2;
                    var d_l_w = dlwinw;
                    var d_l_h = dwinh;
                    var d_r_x = d_l_x + dlwinw + bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = drwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, false, false);
                    this.addVBar(new U1.Vector2(fr_thick + dlwinw + bar_thick / 2, fr_thick + uwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addOpenTrangle(d_l_rect, bar_thick + this.gbThick(), "D");
                    this.addOpenTrangle(d_r_rect, bar_thick + this.gbThick(), "D");
                    //this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    //this.addInsectNet(d_r_rect, "R");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle((w1 + bar_thick / 2 - hndlSizeW) / 2, h - h1 + bar_thick / 2 + wfr_thick / 2 - hndlSizeH / 2, hndlSizeW, hndlSizeH);
                    var rHndlRect = new U1.Rectangle((w + w1 - bar_thick / 2 - hndlSizeW) / 2, h - h1 + bar_thick / 2 + wfr_thick / 2 - hndlSizeH / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                    this.addBox(rHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _2W_1F_PI_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_1F_PI_Presenter = _2W_1F_PI_Presenter;
            var _2W_UB_2F_UB_L_FS_Presenter = (function (_super) {
                __extends(_2W_UB_2F_UB_L_FS_Presenter, _super);
                function _2W_UB_2F_UB_L_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_UB_2F_UB_L_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var w1 = winElm.W1;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var ulwinw = w1 - fr_thick - bar_thick / 2;
                    var urwinw = w - ulwinw - fr_thick * 2 - bar_thick;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dlwinw = w1 - fr_thick + bar_thick / 2;
                    var drwinw = w - dlwinw - fr_thick * 2 + wfr_thick;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = ulwinw;
                    var u_l_h = uwinh;
                    var u_r_x = u_l_x + u_l_w + bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = urwinw;
                    var u_r_h = u_l_h;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dlwinw;
                    var d_l_h = dwinh;
                    var d_r_x = d_l_x + d_l_w - wfr_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = drwinw;
                    var d_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_l_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(fr_thick + dlwinw - bar_thick / 2, fr_thick), uwinh, true, true);
                    this.addCenterPlus(u_l_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(d_l_rect, "L");
                };
                return _2W_UB_2F_UB_L_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_UB_2F_UB_L_FS_Presenter = _2W_UB_2F_UB_L_FS_Presenter;
            var _2W_UB_2F_UB_R_FS_Presenter = (function (_super) {
                __extends(_2W_UB_2F_UB_R_FS_Presenter, _super);
                function _2W_UB_2F_UB_R_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_UB_2F_UB_R_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var w1 = winElm.W1;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var urwinw = w1 - fr_thick - bar_thick / 2;
                    var ulwinw = w - urwinw - fr_thick * 2 - bar_thick;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var drwinw = w1 - fr_thick + bar_thick / 2;
                    var dlwinw = w - drwinw - fr_thick * 2 + wfr_thick;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = ulwinw;
                    var u_l_h = uwinh;
                    var u_r_x = u_l_x + u_l_w + bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = urwinw;
                    var u_r_h = u_l_h;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dlwinw;
                    var d_l_h = dwinh;
                    var d_r_x = d_l_x + d_l_w - wfr_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = drwinw;
                    var d_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_l_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(fr_thick + dlwinw - bar_thick / 2, fr_thick), uwinh, true, true);
                    this.addCenterPlus(u_l_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, w - w1, w, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(d_r_rect, "R");
                };
                return _2W_UB_2F_UB_R_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_UB_2F_UB_R_FS_Presenter = _2W_UB_2F_UB_R_FS_Presenter;
            var _2W_2F_FP_Presenter = (function (_super) {
                __extends(_2W_2F_FP_Presenter, _super);
                function _2W_2F_FP_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2F_FP_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var w1 = winElm.W1;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var ulwinw = w1 - fr_thick - bar_thick / 2;
                    var urwinw = w - w1 - fr_thick - bar_thick / 2;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dlwinw = w1 - fr_thick - bar_thick / 2;
                    var drwinw = w - w1 - fr_thick - bar_thick / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = ulwinw;
                    var u_l_h = uwinh;
                    var u_r_x = u_l_x + ulwinw + bar_thick;
                    var u_r_y = u_l_y;
                    var u_r_w = urwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h - h1 + bar_thick / 2;
                    var d_l_w = dlwinw;
                    var d_l_h = dwinh;
                    var d_r_x = d_l_x + dlwinw + bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = drwinw;
                    var d_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_l_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addVBar(new U1.Vector2(fr_thick + ulwinw + bar_thick / 2, fr_thick), h - fr_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), ulwinw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick + ulwinw + bar_thick, fr_thick + uwinh + bar_thick / 2), urwinw, false, false);
                    //this.addVBar(new Vector2(w / 2, fr_thick), uwinh, false, false);
                    this.addCenterPlus(u_l_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addOpenTrangle(d_l_rect, bar_thick + this.gbThick(), "U");
                    this.addOpenTrangle(d_r_rect, bar_thick + this.gbThick(), "U");
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle((w1 + bar_thick / 2 - hndlSizeW) / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    var rHndlRect = new U1.Rectangle((w + w1 - bar_thick / 2 - hndlSizeW) / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                    this.addBox(rHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _2W_2F_FP_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2F_FP_Presenter = _2W_2F_FP_Presenter;
            var _2W_2F_T_L_FS_Presenter = (function (_super) {
                __extends(_2W_2F_T_L_FS_Presenter, _super);
                function _2W_2F_T_L_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2F_T_L_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var uwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick) / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = uwinw;
                    var u_l_h = uwinh;
                    var u_r_x = u_l_x + u_l_w - wfr_thick;
                    var u_r_y = u_l_y;
                    var u_r_w = u_l_w;
                    var u_r_h = u_l_h;
                    var ulwinRect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var urwinRect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var dlwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, dwinw, dwinh);
                    var drwinRect = new U1.Rectangle(fr_thick + dwinw + bar_thick, h - h1 + bar_thick / 2, dwinw, dwinh);
                    this.addWindow(urwinRect);
                    this.addWindow(ulwinRect);
                    this.addWindow(dlwinRect, false);
                    this.addWindow(drwinRect, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(w / 2, h - h1 + bar_thick / 2), dwinh, true, true);
                    this.addCenterArrowR(ulwinRect);
                    this.addCenterArrowL(urwinRect);
                    this.addCenterPlus(dlwinRect, 80);
                    this.addCenterPlus(drwinRect, 80);
                    this.addVent(ulwinRect, 80);
                    this.addInsectNet(ulwinRect, "L");
                };
                return _2W_2F_T_L_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2F_T_L_FS_Presenter = _2W_2F_T_L_FS_Presenter;
            var _2W_2F_T_R_FS_Presenter = (function (_super) {
                __extends(_2W_2F_T_R_FS_Presenter, _super);
                function _2W_2F_T_R_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2F_T_R_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var uwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick) / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = uwinw;
                    var u_l_h = uwinh;
                    var u_r_x = u_l_x + u_l_w - wfr_thick;
                    var u_r_y = u_l_y;
                    var u_r_w = u_l_w;
                    var u_r_h = u_l_h;
                    var ulwinRect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var urwinRect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var dlwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, dwinw, dwinh);
                    var drwinRect = new U1.Rectangle(fr_thick + dwinw + bar_thick, h - h1 + bar_thick / 2, dwinw, dwinh);
                    this.addWindow(ulwinRect);
                    this.addWindow(urwinRect);
                    this.addWindow(dlwinRect, false);
                    this.addWindow(drwinRect, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(w / 2, h - h1 + bar_thick / 2), dwinh, true, true);
                    this.addCenterArrowR(ulwinRect);
                    this.addCenterArrowL(urwinRect);
                    this.addCenterPlus(dlwinRect, 80);
                    this.addCenterPlus(drwinRect, 80);
                    this.addVent(urwinRect, 80);
                    this.addInsectNet(urwinRect, "R");
                };
                return _2W_2F_T_R_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2F_T_R_FS_Presenter = _2W_2F_T_R_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_1FIX_I_L] = _2W_1FIX_I_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2FIX_I] = _2W_2FIX_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_1FIX_I] = _2W_1FIX_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_3FIX_I] = _2W_3FIX_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2FIX] = _2W_2FIX_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_4FIX] = _2W_4FIX_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2FIX_I_L] = _2W_2FIX_I_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_1FIX_I_R] = _2W_1FIX_I_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2FIX_FS] = _2W_2FIX_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2FIX_I_R] = _2W_2FIX_I_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2FIX_LR_L] = _2W_2FIX_LR_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2FIX_LR_R] = _2W_2FIX_LR_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_2W_1F_I_L] = _1F_2W_1F_I_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_2W_1F_I_R] = _1F_2W_1F_I_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_1F_2W_I_L] = _1F_1F_2W_I_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_1F_2W_I_R] = _1F_1F_2W_I_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_2V_A] = _1F_2V_A_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_2V_J] = _1F_2V_J_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_2V_V] = _1F_2V_V_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2F_UB_L] = _2W_2F_UB_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2F_UB_R] = _2W_2F_UB_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_1F_PI] = _2W_1F_PI_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_UB_2F_UB_L_FS] = _2W_UB_2F_UB_L_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_UB_2F_UB_R_FS] = _2W_UB_2F_UB_R_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2F_FP] = _2W_2F_FP_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2F_T_L_FS] = _2W_2F_T_L_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2F_T_R_FS] = _2W_2F_T_R_FS_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelementpresenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _1W_FIX_Presenter = (function (_super) {
                __extends(_1W_FIX_Presenter, _super);
                function _1W_FIX_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_FIX_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var w1 = winelm.W1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    var lwin_w = w1 - fr_thick - bar_thick / 2;
                    var rwin_w = w - w1 - fr_thick - bar_thick / 2;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lwin_w, winh);
                    var rwinRect = new U1.Rectangle(w1 + bar_thick / 2, fr_thick, rwin_w, winh);
                    this.addWindow(lwinRect);
                    this.addWindow(rwinRect, false);
                    this.addVBar(new U1.Vector2(w1, fr_thick), winh, false, false);
                    this.addOpenTrangle(lwinRect, bar_thick + this.gbThick(), "L");
                    this.addCenterPlus(rwinRect, 80);
                    //this.addInsectNet(lwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.WinElem.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var lHndlRect = new U1.Rectangle(lwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_FIX_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_FIX_Presenter = _1W_FIX_Presenter;
            var _1W_FIX_I_Presenter = (function (_super) {
                __extends(_1W_FIX_I_Presenter, _super);
                function _1W_FIX_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_FIX_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "R");
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.WinElem.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h1 / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var lHndlRect = new U1.Rectangle(dwinRect.Left - hndlSizeW / 2 + this.winFrameThick() / 2, h - (hndlLocH + hndlSizeH / 2), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_FIX_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_FIX_I_Presenter = _1W_FIX_I_Presenter;
            var _1W_1FIX_I_Presenter = (function (_super) {
                __extends(_1W_1FIX_I_Presenter, _super);
                function _1W_1FIX_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_1FIX_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "U");
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_1FIX_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_1FIX_I_Presenter = _1W_1FIX_I_Presenter;
            var _1W_2FIX_I_Presenter = (function (_super) {
                __extends(_1W_2FIX_I_Presenter, _super);
                function _1W_2FIX_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_2FIX_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = (h - h1) / 2 - fr_thick - bar_thick / 2;
                    var cwin_h = (h - h1) / 2 - bar_thick;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var cwinRect = new U1.Rectangle(fr_thick, uwin_h + fr_thick + bar_thick, winw, cwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(cwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, (h - h1) / 2), winw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addCenterPlus(cwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "U");
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_2FIX_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_2FIX_I_Presenter = _1W_2FIX_I_Presenter;
            var _1W_3FIX_I_Presenter = (function (_super) {
                __extends(_1W_3FIX_I_Presenter, _super);
                function _1W_3FIX_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_3FIX_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = (h - h1) / 3 - fr_thick - bar_thick / 2;
                    var cuwin_h = (h - h1) / 3 - bar_thick;
                    var cdwin_h = (h - h1) / 3 - bar_thick;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var cuwinRect = new U1.Rectangle(fr_thick, uwin_h + fr_thick + bar_thick, winw, cuwin_h);
                    var cdwinRect = new U1.Rectangle(fr_thick, uwin_h + cuwin_h + fr_thick + bar_thick * 2, winw, cdwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(cuwinRect, false);
                    this.addWindow(cdwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, (h - h1) / 3), winw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, (h - h1) / 3 * 2), winw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addCenterPlus(cuwinRect, 80);
                    this.addCenterPlus(cdwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "U");
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_3FIX_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_3FIX_I_Presenter = _1W_3FIX_I_Presenter;
            var _1W_4FIX_I_Presenter = (function (_super) {
                __extends(_1W_4FIX_I_Presenter, _super);
                function _1W_4FIX_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_4FIX_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = (h - h1) / 4 - fr_thick - bar_thick / 2;
                    var cuwin_h = (h - h1) / 4 - bar_thick;
                    var cwin_h = (h - h1) / 4 - bar_thick;
                    var cdwin_h = (h - h1) / 4 - bar_thick;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var cuwinRect = new U1.Rectangle(fr_thick, uwin_h + fr_thick + bar_thick, winw, cuwin_h);
                    var cwinRect = new U1.Rectangle(fr_thick, uwin_h + fr_thick + cuwin_h + bar_thick * 2, winw, cwin_h);
                    var cdwinRect = new U1.Rectangle(fr_thick, uwin_h + fr_thick + cuwin_h + cwin_h + bar_thick * 3, winw, cdwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(cuwinRect, false);
                    this.addWindow(cwinRect, false);
                    this.addWindow(cdwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, (h - h1) / 4), winw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, (h - h1) / 4 * 2), winw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, (h - h1) / 4 * 3), winw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addCenterPlus(cuwinRect, 80);
                    this.addCenterPlus(cwinRect, 80);
                    this.addCenterPlus(cdwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "U");
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_4FIX_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_4FIX_I_Presenter = _1W_4FIX_I_Presenter;
            var _1F_1W_TD_L_Presenter = (function (_super) {
                __extends(_1F_1W_TD_L_Presenter, _super);
                function _1F_1W_TD_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_1W_TD_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "R");
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.WinElem.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h1 / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var lHndlRect = new U1.Rectangle(dwinRect.Left - hndlSizeW / 2 + this.winFrameThick() / 2, h - (hndlLocH + hndlSizeH / 2), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1F_1W_TD_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_1W_TD_L_Presenter = _1F_1W_TD_L_Presenter;
            var _1F_1W_TD_R_Presenter = (function (_super) {
                __extends(_1F_1W_TD_R_Presenter, _super);
                function _1F_1W_TD_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_1W_TD_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "L");
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.WinElem.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h1 / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var lHndlRect = new U1.Rectangle(dwinRect.Right - hndlSizeW / 2 - this.winFrameThick() / 2, h - (hndlLocH + hndlSizeH / 2), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1F_1W_TD_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_1W_TD_R_Presenter = _1F_1W_TD_R_Presenter;
            var _1F_1W_TD_D_L_Presenter = (function (_super) {
                __extends(_1F_1W_TD_D_L_Presenter, _super);
                function _1F_1W_TD_D_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_1W_TD_D_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "R");
                    //this.addInsectNet(dwinRect, "L");
                    //this.addCs(dwinRect, 0.5);
                    this.addHBar(new U1.Vector2(fr_thick + bar_thick, h - h1 + bar_thick / 2 + dwin_h * 0.5), winw - bar_thick * 2, false, false);
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.WinElem.HndlLocH;
                    //console.log("B W:" + w + " H:" + h + " H1:" + h1 + " HL:" + hndlLocH);
                    if (hndlLocH <= 0)
                        hndlLocH = h1 / 2;
                    //console.log("A W:" + w + " H:" + h + " H1:" + h1 + " HL:" + hndlLocH);
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var lHndlRect = new U1.Rectangle(dwinRect.Left - hndlSizeW / 2 + this.winFrameThick() / 2, h - (hndlLocH + hndlSizeH / 2), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1F_1W_TD_D_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_1W_TD_D_L_Presenter = _1F_1W_TD_D_L_Presenter;
            var _1F_1W_TD_D_R_Presenter = (function (_super) {
                __extends(_1F_1W_TD_D_R_Presenter, _super);
                function _1F_1W_TD_D_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_1W_TD_D_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "L");
                    //this.addInsectNet(dwinRect, "L");
                    //this.addCs(dwinRect, 0.5);
                    this.addHBar(new U1.Vector2(fr_thick + bar_thick, h - h1 + bar_thick / 2 + dwin_h * 0.5), winw - bar_thick * 2, false, false);
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.WinElem.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h1 / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var lHndlRect = new U1.Rectangle(dwinRect.Right - hndlSizeW / 2 - this.winFrameThick() / 2, h - (hndlLocH + hndlSizeH / 2), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1F_1W_TD_D_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_1W_TD_D_R_Presenter = _1F_1W_TD_D_R_Presenter;
            var _1F_1W_1F_I_A_Presenter = (function (_super) {
                __extends(_1F_1W_1F_I_A_Presenter, _super);
                function _1F_1W_1F_I_A_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_1W_1F_I_A_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = (h - h1) / 2 - fr_thick - bar_thick / 2;
                    var cwin_h = (h - h1) / 2 - bar_thick;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var cwinRect = new U1.Rectangle(fr_thick, uwin_h + fr_thick + bar_thick, winw, cwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(cwinRect);
                    this.addWindow(dwinRect, false);
                    this.addHBar(new U1.Vector2(fr_thick, (h - h1) / 2), winw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(cwinRect, bar_thick + this.gbThick(), "U");
                    this.addCenterPlus(dwinRect, 80);
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - dwin_h - bar_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1F_1W_1F_I_A_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_1W_1F_I_A_Presenter = _1F_1W_1F_I_A_Presenter;
            var _1F_1V_1F_I_J_Presenter = (function (_super) {
                __extends(_1F_1V_1F_I_J_Presenter, _super);
                function _1F_1V_1F_I_J_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_1V_1F_I_J_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = (h - h1) / 2 - fr_thick - bar_thick / 2;
                    var cwin_h = (h - h1) / 2 - bar_thick;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var cwinRect = new U1.Rectangle(fr_thick, uwin_h + fr_thick + bar_thick, winw, cwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(cwinRect);
                    this.addWindow(dwinRect, false);
                    this.addHBar(new U1.Vector2(fr_thick, (h - h1) / 2), winw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(cwinRect, bar_thick + this.gbThick(), "U");
                    this.addCenterPlus(dwinRect, 80);
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - dwin_h - bar_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1F_1V_1F_I_J_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_1V_1F_I_J_Presenter = _1F_1V_1F_I_J_Presenter;
            var _1F_1V_1F_I_V_Presenter = (function (_super) {
                __extends(_1F_1V_1F_I_V_Presenter, _super);
                function _1F_1V_1F_I_V_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_1V_1F_I_V_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = (h - h1) / 2 - fr_thick - bar_thick / 2;
                    var cwin_h = (h - h1) / 2 - bar_thick;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var cwinRect = new U1.Rectangle(fr_thick, uwin_h + fr_thick + bar_thick, winw, cwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(cwinRect);
                    this.addWindow(dwinRect, false);
                    this.addHBar(new U1.Vector2(fr_thick, (h - h1) / 2), winw, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, true, true);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(cwinRect, bar_thick + this.gbThick(), "U");
                    this.addCenterPlus(dwinRect, 80);
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - dwin_h - bar_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1F_1V_1F_I_V_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_1V_1F_I_V_Presenter = _1F_1V_1F_I_V_Presenter;
            var _1V_1F_1V_I_FP_Presenter = (function (_super) {
                __extends(_1V_1F_1V_I_FP_Presenter, _super);
                function _1V_1F_1V_I_FP_Presenter() {
                    _super.apply(this, arguments);
                }
                _1V_1F_1V_I_FP_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var cwinw = w - fr_thick * 2;
                    var cwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var dwinw = w - fr_thick * 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var c_x = fr_thick;
                    var c_y = fr_thick + uwinh + bar_thick;
                    var c_w = cwinw;
                    var c_h = cwinh;
                    var d_x = fr_thick;
                    var d_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_w = dwinw;
                    var d_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var c_rect = new U1.Rectangle(c_x, c_y, c_w, c_h);
                    var d_rect = new U1.Rectangle(d_x, d_y, d_w, d_h);
                    this.addWindow(u_rect);
                    this.addWindow(c_rect, false);
                    this.addWindow(d_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), uwinw, false, false);
                    this.addOpenTrangle(u_rect, bar_thick + this.gbThick(), "U");
                    this.addCenterPlus(c_rect, 80);
                    this.addOpenTrangle(d_rect, bar_thick + this.gbThick(), "U");
                    //this.addVent(d_l_rect, 80);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    //this.addInsectNet(d_l_rect, "L");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - h1 - cwinh - bar_thick - bar_thick, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1V_1F_1V_I_FP_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1V_1F_1V_I_FP_Presenter = _1V_1F_1V_I_FP_Presenter;
            var _1W_1F_T_L_Presenter = (function (_super) {
                __extends(_1W_1F_T_L_Presenter, _super);
                function _1W_1F_T_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_1F_T_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "R");
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.WinElem.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h1 / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var lHndlRect = new U1.Rectangle(dwinRect.Left - hndlSizeW / 2 + this.winFrameThick() / 2, h - (hndlLocH + hndlSizeH / 2), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_1F_T_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_1F_T_L_Presenter = _1W_1F_T_L_Presenter;
            var _1W_1F_T_R_Presenter = (function (_super) {
                __extends(_1W_1F_T_R_Presenter, _super);
                function _1W_1F_T_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_1F_T_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "L");
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.WinElem.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h1 / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var lHndlRect = new U1.Rectangle(dwinRect.Right - hndlSizeW / 2 - this.winFrameThick() / 2, h - (hndlLocH + hndlSizeH / 2), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_1F_T_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_1F_T_R_Presenter = _1W_1F_T_R_Presenter;
            var _1W_1F_T_D_L_Presenter = (function (_super) {
                __extends(_1W_1F_T_D_L_Presenter, _super);
                function _1W_1F_T_D_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_1F_T_D_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "R");
                    //this.addInsectNet(dwinRect, "L");
                    //this.addCs(dwinRect, 0.5);
                    this.addHBar(new U1.Vector2(fr_thick + bar_thick, h - h1 + bar_thick / 2 + dwin_h * 0.5), winw - bar_thick * 2, false, false);
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.WinElem.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h1 / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var lHndlRect = new U1.Rectangle(dwinRect.Left - hndlSizeW / 2 + this.winFrameThick() / 2, h - (hndlLocH + hndlSizeH / 2), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_1F_T_D_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_1F_T_D_L_Presenter = _1W_1F_T_D_L_Presenter;
            var _1W_1F_T_D_R_Presenter = (function (_super) {
                __extends(_1W_1F_T_D_R_Presenter, _super);
                function _1W_1F_T_D_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_1F_T_D_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "L");
                    //this.addInsectNet(dwinRect, "L");
                    //this.addCs(dwinRect, 0.5);
                    this.addHBar(new U1.Vector2(fr_thick + bar_thick, h - h1 + bar_thick / 2 + dwin_h * 0.5), winw - bar_thick * 2, false, false);
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.WinElem.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h1 / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var lHndlRect = new U1.Rectangle(dwinRect.Right - hndlSizeW / 2 - this.winFrameThick() / 2, h - (hndlLocH + hndlSizeH / 2), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_1F_T_D_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_1F_T_D_R_Presenter = _1W_1F_T_D_R_Presenter;
            var _1W_1F_PI_Presenter = (function (_super) {
                __extends(_1W_1F_PI_Presenter, _super);
                function _1W_1F_PI_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_1F_PI_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "D");
                    //this.addInsectNet(dwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var uHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - h1 - bar_thick / 2 + (fr_thick + bar_thick / 2 - hndlSizeH / 2), hndlSizeW, hndlSizeH);
                    this.addBox(uHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_1F_PI_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_1F_PI_Presenter = _1W_1F_PI_Presenter;
            var _1W_1F_L_PJ_Presenter = (function (_super) {
                __extends(_1W_1F_L_PJ_Presenter, _super);
                function _1W_1F_L_PJ_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_1F_L_PJ_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var w1 = winelm.W1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    var lwin_w = w1 - fr_thick - bar_thick / 2;
                    var rwin_w = w - w1 - fr_thick - bar_thick / 2;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lwin_w, winh);
                    var rwinRect = new U1.Rectangle(w1 + bar_thick / 2, fr_thick, rwin_w, winh);
                    this.addWindow(lwinRect);
                    this.addWindow(rwinRect, false);
                    this.addVBar(new U1.Vector2(w1, fr_thick), winh, false, false);
                    this.addOpenTrangle(lwinRect, bar_thick + this.gbThick(), "U");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle((w1 + bar_thick / 2 - hndlSizeW) / 2, h - (fr_thick + bar_thick - hndlSizeH / 2), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_1F_L_PJ_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_1F_L_PJ_Presenter = _1W_1F_L_PJ_Presenter;
            var _1W_1F_R_PJ_Presenter = (function (_super) {
                __extends(_1W_1F_R_PJ_Presenter, _super);
                function _1W_1F_R_PJ_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_1F_R_PJ_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var w1 = winelm.W1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, w - w1, w, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    var lwin_w = w - w1 - fr_thick - bar_thick / 2;
                    var rwin_w = w1 - fr_thick - bar_thick / 2;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lwin_w, winh);
                    var rwinRect = new U1.Rectangle(w - (w1 + bar_thick / 2) + bar_thick, fr_thick, rwin_w, winh);
                    this.addWindow(lwinRect, false);
                    this.addWindow(rwinRect);
                    this.addVBar(new U1.Vector2(w - w1, fr_thick), winh, false, false);
                    this.addOpenTrangle(rwinRect, bar_thick + this.gbThick(), "U");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w - ((w1 + bar_thick / 2 - hndlSizeW) / 2) - bar_thick - fr_thick, h - (fr_thick + bar_thick - hndlSizeH / 2), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_1F_R_PJ_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_1F_R_PJ_Presenter = _1W_1F_R_PJ_Presenter;
            var _1W_1F_1F_1F_UB_FP_Presenter = (function (_super) {
                __extends(_1W_1F_1F_1F_UB_FP_Presenter, _super);
                function _1W_1F_1F_1F_UB_FP_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_1F_1F_1F_UB_FP_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var w1 = winElm.W1;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var ulwinw = w1 - fr_thick - bar_thick / 2;
                    var urwinw = w - ulwinw - fr_thick * 2 - bar_thick;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dlwinw = w1 - fr_thick - bar_thick / 2;
                    var drwinw = w - dlwinw - fr_thick * 2 - bar_thick;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = ulwinw;
                    var u_l_h = uwinh;
                    var u_r_x = u_l_x + u_l_w + bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = urwinw;
                    var u_r_h = u_l_h;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dlwinw;
                    var d_l_h = dwinh;
                    var d_r_x = d_l_x + d_l_w + bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = drwinw;
                    var d_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_l_rect);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_r_rect, false);
                    this.addWindow(d_l_rect, false);
                    this.addVBar(new U1.Vector2(fr_thick + dlwinw + bar_thick / 2, fr_thick), h - fr_thick * 2, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), u_l_w, true, true);
                    this.addHBar(new U1.Vector2(u_r_x, fr_thick + uwinh + bar_thick / 2), u_r_w, true, true);
                    this.addOpenTrangle(u_l_rect, bar_thick + this.gbThick(), "U");
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterPlus(d_l_rect, 80);
                    this.addCenterPlus(d_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(u_l_x + u_l_w / 2 - hndlSizeW / 2, u_l_y + u_l_h - hndlSizeH / 2 - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_1F_1F_1F_UB_FP_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_1F_1F_1F_UB_FP_Presenter = _1W_1F_1F_1F_UB_FP_Presenter;
            var _1W_1F_I_PJ_Presenter = (function (_super) {
                __extends(_1W_1F_I_PJ_Presenter, _super);
                function _1W_1F_I_PJ_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_1F_I_PJ_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect);
                    this.addWindow(dwinRect, false);
                    this.addHBar(new U1.Vector2(fr_thick, h1), winw, false, false);
                    this.addOpenTrangle(uwinRect, bar_thick + this.gbThick(), "U");
                    this.addCenterPlus(dwinRect, 80);
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var uHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, dwinRect.Y - hndlSizeH / 2 - bar_thick / 2 - bar_thick, hndlSizeW, hndlSizeH);
                    this.addBox(uHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_1F_I_PJ_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_1F_I_PJ_Presenter = _1W_1F_I_PJ_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_FIX] = _1W_FIX_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_FIX_I] = _1W_FIX_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_1FIX_I] = _1W_1FIX_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_2FIX_I] = _1W_2FIX_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_3FIX_I] = _1W_3FIX_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_4FIX_I] = _1W_4FIX_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_1W_TD_L] = _1F_1W_TD_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_1W_TD_R] = _1F_1W_TD_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_1W_TD_D_L] = _1F_1W_TD_D_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_1W_TD_D_R] = _1F_1W_TD_D_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_1W_1F_I_A] = _1F_1W_1F_I_A_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_1V_1F_I_J] = _1F_1V_1F_I_J_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_1V_1F_I_V] = _1F_1V_1F_I_V_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1V_1F_1V_I_FP] = _1V_1F_1V_I_FP_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_1F_T_L] = _1W_1F_T_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_1F_T_R] = _1W_1F_T_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_1F_T_D_L] = _1W_1F_T_D_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_1F_T_D_R] = _1W_1F_T_D_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_1F_PI] = _1W_1F_PI_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_1F_L_PJ] = _1W_1F_L_PJ_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_1F_R_PJ] = _1W_1F_R_PJ_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_1F_1F_1F_UB_FP] = _1W_1F_1F_1F_UB_FP_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_1F_I_PJ] = _1W_1F_I_PJ_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelementpresenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _1W_Presenter = (function (_super) {
                __extends(_1W_Presenter, _super);
                function _1W_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_Presenter.prototype, "Win_1W", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var winh = h - fr_thick * 2;
                    var cwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W.HndlLocH;
                    //console.log("B W:" + w + " H:" + h  + " HL:" + hndlLocH);
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    //console.log("A W:" + w + " H:" + h + " HL:" + hndlLocH);
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var hHndlRect = new U1.Rectangle(cwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_Presenter = _1W_Presenter;
            var _1W_MF_Presenter = (function (_super) {
                __extends(_1W_MF_Presenter, _super);
                function _1W_MF_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_MF_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _1W_MF_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_MF_Presenter = _1W_MF_Presenter;
            var _1W_PJ_Presenter = (function (_super) {
                __extends(_1W_PJ_Presenter, _super);
                function _1W_PJ_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_PJ_Presenter.prototype, "Win_1W_PJ", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_PJ_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var winh = h - fr_thick * 2;
                    var cwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "U");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_PJ_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_PJ_Presenter = _1W_PJ_Presenter;
            var _1W_TD_L_Presenter = (function (_super) {
                __extends(_1W_TD_L_Presenter, _super);
                function _1W_TD_L_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_TD_L_Presenter.prototype, "Win_1W_TD_L", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_TD_L_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var winh = h - fr_thick * 2;
                    var cwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "R");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_TD_L.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var hHndlRect = new U1.Rectangle(cwinRect.Left - (hndlSizeW / 2 - this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_TD_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_TD_L_Presenter = _1W_TD_L_Presenter;
            var _1W_TD_R_Presenter = (function (_super) {
                __extends(_1W_TD_R_Presenter, _super);
                function _1W_TD_R_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_TD_R_Presenter.prototype, "Win_1W_TD_R", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_TD_R_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var winh = h - fr_thick * 2;
                    var cwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_TD_R.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var hHndlRect = new U1.Rectangle(cwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_TD_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_TD_R_Presenter = _1W_TD_R_Presenter;
            var _1W_TD_D_L_Presenter = (function (_super) {
                __extends(_1W_TD_D_L_Presenter, _super);
                function _1W_TD_D_L_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_TD_D_L_Presenter.prototype, "Win_1W_TD_D_L", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_TD_D_L_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var winh = h - fr_thick * 2;
                    var cwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "R");
                    //this.addCs(cwinRect, 0.5);
                    this.addHBar(new U1.Vector2(fr_thick + wf_thick, h * 0.5), winw - wf_thick * 2, false, false);
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_TD_D_L.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var hHndlRect = new U1.Rectangle(cwinRect.Left - (hndlSizeW / 2 - this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_TD_D_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_TD_D_L_Presenter = _1W_TD_D_L_Presenter;
            var _1W_TD_D_R_Presenter = (function (_super) {
                __extends(_1W_TD_D_R_Presenter, _super);
                function _1W_TD_D_R_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_TD_D_R_Presenter.prototype, "Win_1W_TD_D_R", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_TD_D_R_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var winh = h - fr_thick * 2;
                    var cwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "L");
                    //this.addCs(cwinRect, 0.5);
                    this.addHBar(new U1.Vector2(fr_thick + wf_thick, h * 0.5), winw - wf_thick * 2, false, false);
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_TD_D_R.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var hHndlRect = new U1.Rectangle(cwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_TD_D_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_TD_D_R_Presenter = _1W_TD_D_R_Presenter;
            var _1W_U_END_CB_PJ_Presenter = (function (_super) {
                __extends(_1W_U_END_CB_PJ_Presenter, _super);
                function _1W_U_END_CB_PJ_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_U_END_CB_PJ_Presenter.prototype, "Win_1W_PJ", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_U_END_CB_PJ_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addFrame(new U1.Rectangle(fr_thick, fr_thick, w - fr_thick * 2, h - fr_thick * 2));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 4;
                    var winh = h - fr_thick * 4;
                    var cwinRect = new U1.Rectangle(fr_thick * 2, fr_thick * 2, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "U");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_U_END_CB_PJ_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_U_END_CB_PJ_Presenter = _1W_U_END_CB_PJ_Presenter;
            var _1W_U_CB_PJ_Presenter = (function (_super) {
                __extends(_1W_U_CB_PJ_Presenter, _super);
                function _1W_U_CB_PJ_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_U_CB_PJ_Presenter.prototype, "Win_1W_PJ", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_U_CB_PJ_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h), true, true, false, true);
                    this.addFrame(new U1.Rectangle(fr_thick, fr_thick, w - fr_thick * 2, h - fr_thick));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 4;
                    var winh = h - fr_thick * 3;
                    var cwinRect = new U1.Rectangle(fr_thick * 2, fr_thick * 2, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "U");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_U_CB_PJ_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_U_CB_PJ_Presenter = _1W_U_CB_PJ_Presenter;
            var _1W_T_L_Presenter = (function (_super) {
                __extends(_1W_T_L_Presenter, _super);
                function _1W_T_L_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_T_L_Presenter.prototype, "Win_1W_TD_L", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_T_L_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var winh = h - fr_thick * 2;
                    var cwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "R");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_TD_L.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var hHndlRect = new U1.Rectangle(cwinRect.Left - (hndlSizeW / 2 - this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_T_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_T_L_Presenter = _1W_T_L_Presenter;
            var _1W_T_R_Presenter = (function (_super) {
                __extends(_1W_T_R_Presenter, _super);
                function _1W_T_R_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_T_R_Presenter.prototype, "Win_1W_TD_R", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_T_R_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var winh = h - fr_thick * 2;
                    var cwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_TD_R.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var hHndlRect = new U1.Rectangle(cwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_T_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_T_R_Presenter = _1W_T_R_Presenter;
            var _1W_T_D_L_Presenter = (function (_super) {
                __extends(_1W_T_D_L_Presenter, _super);
                function _1W_T_D_L_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_T_D_L_Presenter.prototype, "Win_1W_TD_D_L", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_T_D_L_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var winh = h - fr_thick * 2;
                    var cwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "R");
                    //this.addCs(cwinRect, 0.5);
                    this.addHBar(new U1.Vector2(fr_thick + wf_thick, h * 0.5), winw - wf_thick * 2, false, false);
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_TD_D_L.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var hHndlRect = new U1.Rectangle(cwinRect.Left - (hndlSizeW / 2 - this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_T_D_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_T_D_L_Presenter = _1W_T_D_L_Presenter;
            var _1W_T_D_R_Presenter = (function (_super) {
                __extends(_1W_T_D_R_Presenter, _super);
                function _1W_T_D_R_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_T_D_R_Presenter.prototype, "Win_1W_TD_D_R", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_T_D_R_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var winh = h - fr_thick * 2;
                    var cwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "L");
                    //this.addCs(cwinRect, 0.5);
                    this.addHBar(new U1.Vector2(fr_thick + wf_thick, h * 0.5), winw - wf_thick * 2, false, false);
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_TD_D_R.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var hHndlRect = new U1.Rectangle(cwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_T_D_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_T_D_R_Presenter = _1W_T_D_R_Presenter;
            var _1W_PI_Presenter = (function (_super) {
                __extends(_1W_PI_Presenter, _super);
                function _1W_PI_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_PI_Presenter.prototype, "Win_1W_PJ", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_PI_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var winh = h - fr_thick * 2;
                    var cwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    this.addWindow(cwinRect);
                    this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "D");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var uHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, fr_thick + wf_thick / 2 - hndlSizeH / 2, hndlSizeW, hndlSizeH);
                    this.addBox(uHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_PI_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_PI_Presenter = _1W_PI_Presenter;
            var _1W_L_V_H_Presenter = (function (_super) {
                __extends(_1W_L_V_H_Presenter, _super);
                function _1W_L_V_H_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_L_V_H_Presenter.prototype, "Win_1W_L_V_H", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_L_V_H_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    //this.addFrame(new Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    //var winw = w - fr_thick * 2;
                    //var winh = h - fr_thick * 2;
                    var winw = w;
                    var winh = h;
                    //var cwinRect = new Rectangle(fr_thick, fr_thick, winw, winh);
                    var cwinRect = new U1.Rectangle(0, 0, winw, winh);
                    this.addWindow(cwinRect);
                    //this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "R");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_L_V_H.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var hHndlRect = new U1.Rectangle(cwinRect.Left - (hndlSizeW / 2 - this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_L_V_H_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_L_V_H_Presenter = _1W_L_V_H_Presenter;
            var _1W_R_V_H_Presenter = (function (_super) {
                __extends(_1W_R_V_H_Presenter, _super);
                function _1W_R_V_H_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_R_V_H_Presenter.prototype, "Win_1W_R_V_H", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_R_V_H_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    //this.addFrame(new Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    //var winw = w - fr_thick * 2;
                    //var winh = h - fr_thick * 2;
                    var winw = w;
                    var winh = h;
                    //var cwinRect = new Rectangle(fr_thick, fr_thick, winw, winh);
                    var cwinRect = new U1.Rectangle(0, 0, winw, winh);
                    this.addWindow(cwinRect);
                    //this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_R_V_H.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var hHndlRect = new U1.Rectangle(cwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_R_V_H_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_R_V_H_Presenter = _1W_R_V_H_Presenter;
            var _1W_L_N_H_Presenter = (function (_super) {
                __extends(_1W_L_N_H_Presenter, _super);
                function _1W_L_N_H_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_L_N_H_Presenter.prototype, "Win_1W_L_N_H", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_L_N_H_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    //this.addFrame(new Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    //var winw = w - fr_thick * 2;
                    //var winh = h - fr_thick * 2;
                    var winw = w;
                    var winh = h;
                    //var cwinRect = new Rectangle(fr_thick, fr_thick, winw, winh);
                    var cwinRect = new U1.Rectangle(0, 0, winw, winh);
                    this.addWindow(cwinRect);
                    //this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "R");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_L_N_H.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    //var hndlSizeH = 100;
                    var hndlSizeH = 50;
                    var hHndlRect = new U1.Rectangle(cwinRect.Left - (hndlSizeW / 2 - this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_L_N_H_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_L_N_H_Presenter = _1W_L_N_H_Presenter;
            var _1W_R_N_H_Presenter = (function (_super) {
                __extends(_1W_R_N_H_Presenter, _super);
                function _1W_R_N_H_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_R_N_H_Presenter.prototype, "Win_1W_R_N_H", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_R_N_H_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    //this.addFrame(new Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    //var winw = w - fr_thick * 2;
                    //var winh = h - fr_thick * 2;
                    var winw = w;
                    var winh = h;
                    //var cwinRect = new Rectangle(fr_thick, fr_thick, winw, winh);
                    var cwinRect = new U1.Rectangle(0, 0, winw, winh);
                    this.addWindow(cwinRect);
                    //this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_R_N_H.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    //var hndlSizeH = 100;
                    var hndlSizeH = 50;
                    var hHndlRect = new U1.Rectangle(cwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_R_N_H_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_R_N_H_Presenter = _1W_R_N_H_Presenter;
            var _1W_C_N_H_Presenter = (function (_super) {
                __extends(_1W_C_N_H_Presenter, _super);
                function _1W_C_N_H_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_C_N_H_Presenter.prototype, "Win_1W_R_N_H", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_C_N_H_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    //this.addFrame(new Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    //var winw = w - fr_thick * 2;
                    //var winh = h - fr_thick * 2;
                    var winw = w;
                    var winh = h;
                    //var cwinRect = new Rectangle(fr_thick, fr_thick, winw, winh);
                    var cwinRect = new U1.Rectangle(0, 0, winw, winh);
                    this.addWindow(cwinRect);
                    //this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "L");
                    /**
                     * 핸들
                     */
                    //var hndlLocH = this.Win_1W_R_N_H.HndlLocH;
                    //var hndlSizeW = 30;
                    //var hndlSizeH = 100;
                    //var hHndlRect = new Rectangle(cwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    //this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_C_N_H_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_C_N_H_Presenter = _1W_C_N_H_Presenter;
            var _1W_L_V_C_Presenter = (function (_super) {
                __extends(_1W_L_V_C_Presenter, _super);
                function _1W_L_V_C_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_L_V_C_Presenter.prototype, "Win_1W_R_V_H", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_L_V_C_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    //this.addFrame(new Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    //var winw = w - fr_thick * 2;
                    //var winh = h - fr_thick * 2;
                    var winw = w;
                    var winh = h;
                    //var cwinRect = new Rectangle(fr_thick, fr_thick, winw, winh);
                    var cwinRect = new U1.Rectangle(0, 0, winw, winh);
                    this.addWindow(cwinRect);
                    //this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_R_V_H.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    //var hHndlRect = new Rectangle(cwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    var hHndlRect = new U1.Rectangle(cwinRect.Right, h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_L_V_C_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_L_V_C_Presenter = _1W_L_V_C_Presenter;
            var _1W_R_V_C_Presenter = (function (_super) {
                __extends(_1W_R_V_C_Presenter, _super);
                function _1W_R_V_C_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_R_V_C_Presenter.prototype, "Win_1W_L_V_H", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_R_V_C_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    //this.addFrame(new Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    //var winw = w - fr_thick * 2;
                    //var winh = h - fr_thick * 2;
                    var winw = w;
                    var winh = h;
                    //var cwinRect = new Rectangle(fr_thick, fr_thick, winw, winh);
                    var cwinRect = new U1.Rectangle(0, 0, winw, winh);
                    this.addWindow(cwinRect);
                    //this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "R");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.Win_1W_L_V_H.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    //var hHndlRect = new Rectangle(cwinRect.Left - (hndlSizeW / 2 - this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    var hHndlRect = new U1.Rectangle(cwinRect.Left - hndlSizeW, h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_R_V_C_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_R_V_C_Presenter = _1W_R_V_C_Presenter;
            var _1W_L_N_C_Presenter = (function (_super) {
                __extends(_1W_L_N_C_Presenter, _super);
                function _1W_L_N_C_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_L_N_C_Presenter.prototype, "Win_1W_R_N_H", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_L_N_C_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    //this.addFrame(new Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    //var winw = w - fr_thick * 2;
                    //var winh = h - fr_thick * 2;
                    var winw = w;
                    var winh = h;
                    //var cwinRect = new Rectangle(fr_thick, fr_thick, winw, winh);
                    var cwinRect = new U1.Rectangle(0, 0, winw, winh);
                    this.addWindow(cwinRect);
                    //this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "L");
                    /**
                     * 핸들
                     */
                    //var hndlLocH = this.Win_1W_R_N_H.HndlLocH;
                    //if (hndlLocH <= 0)
                    //    hndlLocH = h / 2;
                    //var hndlSizeW = 30;
                    ////var hndlSizeH = 100;
                    //var hndlSizeH = 50;
                    ////var hHndlRect = new Rectangle(cwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    //var hHndlRect = new Rectangle(cwinRect.Right, h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    //this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_L_N_C_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_L_N_C_Presenter = _1W_L_N_C_Presenter;
            var _1W_R_N_C_Presenter = (function (_super) {
                __extends(_1W_R_N_C_Presenter, _super);
                function _1W_R_N_C_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_R_N_C_Presenter.prototype, "Win_1W_L_N_H", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_R_N_C_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    //this.addFrame(new Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    //var winw = w - fr_thick * 2;
                    //var winh = h - fr_thick * 2;
                    var winw = w;
                    var winh = h;
                    //var cwinRect = new Rectangle(fr_thick, fr_thick, winw, winh);
                    var cwinRect = new U1.Rectangle(0, 0, winw, winh);
                    this.addWindow(cwinRect);
                    //this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "R");
                    /**
                     * 핸들
                     */
                    //var hndlLocH = this.Win_1W_L_N_H.HndlLocH;
                    //if (hndlLocH <= 0)
                    //    hndlLocH = h / 2;
                    //var hndlSizeW = 30;
                    ////var hndlSizeH = 100;
                    //var hndlSizeH = 50;
                    ////var hHndlRect = new Rectangle(cwinRect.Left - (hndlSizeW / 2 - this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    //var hHndlRect = new Rectangle(cwinRect.Left - hndlSizeW, h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    //this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_R_N_C_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_R_N_C_Presenter = _1W_R_N_C_Presenter;
            var _1W_C_N_C_Presenter = (function (_super) {
                __extends(_1W_C_N_C_Presenter, _super);
                function _1W_C_N_C_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_1W_C_N_C_Presenter.prototype, "Win_1W_R_N_H", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _1W_C_N_C_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wf_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    //this.addFrame(new Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    //var winw = w - fr_thick * 2;
                    //var winh = h - fr_thick * 2;
                    var winw = w;
                    var winh = h;
                    //var cwinRect = new Rectangle(fr_thick, fr_thick, winw, winh);
                    var cwinRect = new U1.Rectangle(0, 0, winw, winh);
                    this.addWindow(cwinRect);
                    //this.addOpenTrangle(cwinRect, wf_thick + this.gbThick(), "L");
                    /**
                     * 핸들
                     */
                    //var hndlLocH = this.Win_1W_R_N_H.HndlLocH;
                    //var hndlSizeW = 30;
                    //var hndlSizeH = 100;
                    //var hHndlRect = new Rectangle(cwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    //this.addBox(hHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _1W_C_N_C_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_C_N_C_Presenter = _1W_C_N_C_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W] = _1W_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_MF] = _1W_MF_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_PJ] = _1W_PJ_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_TD_L] = _1W_TD_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_TD_R] = _1W_TD_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_TD_D_L] = _1W_TD_D_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_TD_D_R] = _1W_TD_D_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_U_END_CB_PJ] = _1W_U_END_CB_PJ_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_U_CB_PJ] = _1W_U_CB_PJ_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_T_L] = _1W_T_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_T_R] = _1W_T_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_T_D_L] = _1W_T_D_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_T_D_R] = _1W_T_D_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_PI] = _1W_PI_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_L_V_H] = _1W_L_V_H_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_R_V_H] = _1W_R_V_H_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_L_N_H] = _1W_L_N_H_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_R_N_H] = _1W_R_N_H_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_C_N_H] = _1W_C_N_H_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_L_V_C] = _1W_L_V_C_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_R_V_C] = _1W_R_V_C_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_L_N_C] = _1W_L_N_C_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_R_N_C] = _1W_R_N_C_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_C_N_C] = _1W_C_N_C_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelementpresenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _2W_Left_Presenter = (function (_super) {
                __extends(_2W_Left_Presenter, _super);
                function _2W_Left_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_2W_Left_Presenter.prototype, "Win_2W_Left", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _2W_Left_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var w = this.Win_2W_Left.W;
                    var h = this.Win_2W_Left.H;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w / 2 - fr_thick;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, winw + bar_thick, winh);
                    var rwinRect = new U1.Rectangle(w / 2, fr_thick, winw, winh);
                    this.addWindow(rwinRect);
                    this.addWindow(lwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addVent(lwinRect, 80);
                    this.addInsectNet(lwinRect, "L");
                    /**
                     * 핸들
                     */
                    //var hndlLocH = this.Win_2W_Left.HndlLocH;
                    //var hndlSizeW = 30;
                    //var hndlSizeH = 100;
                    //var lHndlRect = new Rectangle(lwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    //this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _2W_Left_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_Left_Presenter = _2W_Left_Presenter;
            var _2W_Right_Presenter = (function (_super) {
                __extends(_2W_Right_Presenter, _super);
                function _2W_Right_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_2W_Right_Presenter.prototype, "Win_2W_Right", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _2W_Right_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var w = this.Win_2W_Right.W;
                    var h = this.Win_2W_Right.H;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w / 2 - fr_thick;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    var rwinRect = new U1.Rectangle(w / 2 - bar_thick, fr_thick, winw + bar_thick, winh);
                    this.addWindow(lwinRect);
                    this.addWindow(rwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addVent(rwinRect, 80);
                    this.addInsectNet(rwinRect, "R");
                };
                return _2W_Right_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_Right_Presenter = _2W_Right_Presenter;
            var _2W_UB_Left_Presenter = (function (_super) {
                __extends(_2W_UB_Left_Presenter, _super);
                function _2W_UB_Left_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_UB_Left_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var w1 = winelm.W1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, fr_thick, w1 + fr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    var lwin_w = w1 - fr_thick + bar_thick;
                    var rwin_w = w - w1 - fr_thick;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lwin_w, winh);
                    var rwinRect = new U1.Rectangle(w1, fr_thick, rwin_w, winh);
                    this.addWindow(rwinRect);
                    this.addWindow(lwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addVent(lwinRect, 80);
                    this.addInsectNet(lwinRect, "L");
                };
                return _2W_UB_Left_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_UB_Left_Presenter = _2W_UB_Left_Presenter;
            var _2W_UB_Right_Presenter = (function (_super) {
                __extends(_2W_UB_Right_Presenter, _super);
                function _2W_UB_Right_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_UB_Right_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var w1 = winelm.W1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var rwin_w = w1 - fr_thick + wfr_thick;
                    var lwin_w = w - w1 - fr_thick;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lwin_w, winh);
                    var rwinRect = new U1.Rectangle(w - w1 - wfr_thick, fr_thick, rwin_w, winh);
                    this.addWindow(lwinRect);
                    this.addWindow(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, w - w1 - wfr_thick, w - wfr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addVent(rwinRect, 80);
                    this.addInsectNet(rwinRect, "R");
                };
                return _2W_UB_Right_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_UB_Right_Presenter = _2W_UB_Right_Presenter;
            var _2W_I_Presenter = (function (_super) {
                __extends(_2W_I_Presenter, _super);
                function _2W_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var winh = h / 2 - fr_thick;
                    var winw = w - fr_thick * 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_h = h / 2 - fr_thick - bar_thick / 2;
                    var d_x = fr_thick;
                    var d_y = h / 2 + bar_thick / 2;
                    var d_w = u_h;
                    var u_rect = new U1.Rectangle(u_x, u_y, winw, u_h);
                    var d_rect = new U1.Rectangle(d_x, d_y, winw, u_h);
                    this.addWindow(u_rect);
                    this.addWindow(d_rect);
                    this.addHBar(new U1.Vector2(fr_thick, h / 2), winw, false, false);
                    this.addOpenTrangle(u_rect, bar_thick + this.gbThick(), "U");
                    this.addOpenTrangle(d_rect, bar_thick + this.gbThick(), "U");
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick / 2 - bar_thick / 2 - h / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _2W_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_I_Presenter = _2W_I_Presenter;
            var _2W_P_Presenter = (function (_super) {
                __extends(_2W_P_Presenter, _super);
                function _2W_P_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_P_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var w1 = winelm.W1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    var lwin_w = w1 - fr_thick - bar_thick / 2;
                    var rwin_w = w - w1 - fr_thick - bar_thick / 2;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lwin_w, winh);
                    var rwinRect = new U1.Rectangle(w1 + bar_thick / 2, fr_thick, rwin_w, winh);
                    this.addWindow(lwinRect);
                    this.addWindow(rwinRect);
                    this.addVBar(new U1.Vector2(w1, fr_thick), winh, false, false);
                    this.addOpenTrangle(lwinRect, bar_thick + this.gbThick(), "U");
                    this.addOpenTrangle(rwinRect, bar_thick + this.gbThick(), "U");
                    //this.addInsectNet(lwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle((w1 + bar_thick / 2 - hndlSizeW) / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    var rHndlRect = new U1.Rectangle((w + w1 - bar_thick / 2 - hndlSizeW) / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                    this.addBox(rHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _2W_P_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_P_Presenter = _2W_P_Presenter;
            var _2W_CS_Left_Presenter = (function (_super) {
                __extends(_2W_CS_Left_Presenter, _super);
                function _2W_CS_Left_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_2W_CS_Left_Presenter.prototype, "Win_2W_Left", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _2W_CS_Left_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var w = this.Win_2W_Left.W;
                    var h = this.Win_2W_Left.H;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w / 2 - fr_thick;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, winw + bar_thick, winh);
                    var rwinRect = new U1.Rectangle(w / 2, fr_thick, winw, winh);
                    this.addWindow(rwinRect);
                    this.addWindow(lwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addVent(lwinRect, 80);
                    //this.addCs(lwinRect);
                    //this.addCs(rwinRect);
                    this.addHBar(new U1.Vector2(fr_thick + bar_thick, fr_thick + winh * 0.75 - bar_thick / 2), winw - bar_thick, false, false);
                    this.addHBar(new U1.Vector2(w / 2 + bar_thick, fr_thick + winh * 0.75 - bar_thick / 2), winw - bar_thick * 2, false, false);
                    this.addInsectNet(lwinRect, "L");
                };
                return _2W_CS_Left_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_CS_Left_Presenter = _2W_CS_Left_Presenter;
            var _2W_CS_Right_Presenter = (function (_super) {
                __extends(_2W_CS_Right_Presenter, _super);
                function _2W_CS_Right_Presenter() {
                    _super.apply(this, arguments);
                }
                Object.defineProperty(_2W_CS_Right_Presenter.prototype, "Win_2W_Right", {
                    get: function () {
                        return this.Element;
                    },
                    enumerable: true,
                    configurable: true
                });
                _2W_CS_Right_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var w = this.Win_2W_Right.W;
                    var h = this.Win_2W_Right.H;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w / 2 - fr_thick;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, winh);
                    var rwinRect = new U1.Rectangle(w / 2 - bar_thick, fr_thick, winw + bar_thick, winh);
                    this.addWindow(lwinRect);
                    this.addWindow(rwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addVent(rwinRect, 80);
                    //this.addCs(lwinRect);
                    //this.addCs(rwinRect);
                    this.addHBar(new U1.Vector2(fr_thick + bar_thick, fr_thick + winh * 0.75 - bar_thick / 2), winw - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(w / 2, fr_thick + winh * 0.75 - bar_thick / 2), winw - bar_thick, false, false);
                    this.addInsectNet(rwinRect, "R");
                };
                return _2W_CS_Right_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_CS_Right_Presenter = _2W_CS_Right_Presenter;
            var _2W_UB_CS_Left_Presenter = (function (_super) {
                __extends(_2W_UB_CS_Left_Presenter, _super);
                function _2W_UB_CS_Left_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_UB_CS_Left_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var w1 = winelm.W1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, fr_thick, w1 + fr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    var lwin_w = w1 - fr_thick + bar_thick;
                    var rwin_w = w - w1 - fr_thick;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lwin_w, winh);
                    var rwinRect = new U1.Rectangle(w1, fr_thick, rwin_w, winh);
                    this.addWindow(rwinRect);
                    this.addWindow(lwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addVent(lwinRect, 80);
                    //this.addCs(lwinRect);
                    //this.addCs(rwinRect);
                    this.addHBar(new U1.Vector2(fr_thick + bar_thick, fr_thick + winh * 0.75 - bar_thick / 2), lwin_w - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(w / 2 + bar_thick, fr_thick + winh * 0.75 - bar_thick / 2), rwin_w - bar_thick * 2, false, false);
                    this.addInsectNet(lwinRect, "L");
                };
                return _2W_UB_CS_Left_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_UB_CS_Left_Presenter = _2W_UB_CS_Left_Presenter;
            var _2W_UB_CS_Right_Presenter = (function (_super) {
                __extends(_2W_UB_CS_Right_Presenter, _super);
                function _2W_UB_CS_Right_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_UB_CS_Right_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var w1 = winelm.W1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var rwin_w = w1 - fr_thick + wfr_thick;
                    var lwin_w = w - w1 - fr_thick;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lwin_w, winh);
                    var rwinRect = new U1.Rectangle(w - w1 - wfr_thick, fr_thick, rwin_w, winh);
                    this.addWindow(lwinRect);
                    this.addWindow(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, w - w1 - wfr_thick, w - wfr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addVent(rwinRect, 80);
                    //this.addCs(lwinRect);
                    //this.addCs(rwinRect);
                    this.addHBar(new U1.Vector2(fr_thick + bar_thick, fr_thick + winh * 0.75 - bar_thick / 2), lwin_w - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(w / 2, fr_thick + winh * 0.75 - bar_thick / 2), rwin_w - bar_thick * 2, false, false);
                    this.addInsectNet(rwinRect, "R");
                };
                return _2W_UB_CS_Right_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_UB_CS_Right_Presenter = _2W_UB_CS_Right_Presenter;
            var _2W_U_END_L_Presenter = (function (_super) {
                __extends(_2W_U_END_L_Presenter, _super);
                function _2W_U_END_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_U_END_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addFrame(new U1.Rectangle(fr_thick, fr_thick, w - fr_thick * 2, h - fr_thick * 2));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = (w - fr_thick * 2 * 2 + bar_thick) / 2;
                    var winh = h - fr_thick * 2 * 2;
                    var lwinRect = new U1.Rectangle(fr_thick * 2, fr_thick * 2, winw, winh);
                    var rwinRect = new U1.Rectangle(fr_thick * 2 + winw - bar_thick, fr_thick * 2, winw, winh);
                    this.addWindow(rwinRect);
                    this.addWindow(lwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addVent(lwinRect, 80);
                    this.addInsectNet(lwinRect, "L");
                };
                return _2W_U_END_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_U_END_L_Presenter = _2W_U_END_L_Presenter;
            var _2W_U_END_R_Presenter = (function (_super) {
                __extends(_2W_U_END_R_Presenter, _super);
                function _2W_U_END_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_U_END_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addFrame(new U1.Rectangle(fr_thick, fr_thick, w - fr_thick * 2, h - fr_thick * 2));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = (w - fr_thick * 2 * 2 + bar_thick) / 2;
                    var winh = h - fr_thick * 2 * 2;
                    var lwinRect = new U1.Rectangle(fr_thick * 2, fr_thick * 2, winw, winh);
                    var rwinRect = new U1.Rectangle(fr_thick * 2 + winw - bar_thick, fr_thick * 2, winw, winh);
                    this.addWindow(lwinRect);
                    this.addWindow(rwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addVent(rwinRect, 80);
                    this.addInsectNet(rwinRect, "R");
                };
                return _2W_U_END_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_U_END_R_Presenter = _2W_U_END_R_Presenter;
            var _2W_C_Presenter = (function (_super) {
                __extends(_2W_C_Presenter, _super);
                function _2W_C_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_C_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w, 1);
                    var lwin_w = (w - fr_thick * 2 - bar_thick) / 2;
                    var rwin_w = lwin_w;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lwin_w, winh);
                    var rwinRect = new U1.Rectangle(fr_thick + lwin_w + bar_thick, fr_thick, rwin_w, winh);
                    this.addWindow(lwinRect);
                    this.addWindow(rwinRect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), winh, false, false);
                    this.addOpenTrangle(lwinRect, bar_thick + this.gbThick(), "L");
                    this.addOpenTrangle(rwinRect, bar_thick + this.gbThick(), "R");
                    //this.addInsectNet(lwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.WinElem.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var lHndlRect = new U1.Rectangle(lwinRect.Right - (hndlSizeW / 2 + this.winFrameThick() / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                    /**
                     * 핸들
                     */
                    var hndlLocH = this.WinElem.HndlLocH;
                    if (hndlLocH <= 0)
                        hndlLocH = h / 2;
                    var hndlSizeW = 30;
                    var hndlSizeH = 100;
                    var lHndlRect = new U1.Rectangle(rwinRect.Left - (hndlSizeW / 2 - bar_thick / 2), h - (hndlLocH + (hndlSizeH / 2)), hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _2W_C_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_C_Presenter = _2W_C_Presenter;
            var _2W_PI_Presenter = (function (_super) {
                __extends(_2W_PI_Presenter, _super);
                function _2W_PI_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_PI_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var w1 = winelm.W1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    var lwin_w = w1 - fr_thick - bar_thick / 2;
                    var rwin_w = w - w1 - fr_thick - bar_thick / 2;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lwin_w, winh);
                    var rwinRect = new U1.Rectangle(w1 + bar_thick / 2, fr_thick, rwin_w, winh);
                    this.addWindow(lwinRect);
                    this.addWindow(rwinRect);
                    this.addVBar(new U1.Vector2(w1, fr_thick), winh, false, false);
                    this.addOpenTrangle(lwinRect, bar_thick + this.gbThick(), "D");
                    this.addOpenTrangle(rwinRect, bar_thick + this.gbThick(), "D");
                    //this.addInsectNet(lwinRect, "L");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var lHndlRect = new U1.Rectangle((w1 + bar_thick / 2 - hndlSizeW) / 2, fr_thick + bar_thick / 2 - hndlSizeH / 2, hndlSizeW, hndlSizeH);
                    var rHndlRect = new U1.Rectangle((w + w1 - bar_thick / 2 - hndlSizeW) / 2, fr_thick + bar_thick / 2 - hndlSizeH / 2, hndlSizeW, hndlSizeH);
                    this.addBox(lHndlRect, this.hndlStroke(), this.hndlFill());
                    this.addBox(rHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _2W_PI_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_PI_Presenter = _2W_PI_Presenter;
            var _2W_I_PJ_Presenter = (function (_super) {
                __extends(_2W_I_PJ_Presenter, _super);
                function _2W_I_PJ_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_I_PJ_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect);
                    this.addWindow(dwinRect);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addOpenTrangle(uwinRect, bar_thick + this.gbThick(), "U");
                    this.addOpenTrangle(dwinRect, bar_thick + this.gbThick(), "U");
                    /**
                     * 핸들
                     */
                    var hndlSizeW = 100;
                    var hndlSizeH = 30;
                    var uHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, dwinRect.Y - hndlSizeH / 2 - bar_thick / 2 - bar_thick, hndlSizeW, hndlSizeH);
                    var dHndlRect = new U1.Rectangle(w / 2 - hndlSizeW / 2, h - hndlSizeH / 2 - fr_thick - bar_thick / 2, hndlSizeW, hndlSizeH);
                    this.addBox(uHndlRect, this.hndlStroke(), this.hndlFill());
                    this.addBox(dHndlRect, this.hndlStroke(), this.hndlFill());
                };
                return _2W_I_PJ_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_I_PJ_Presenter = _2W_I_PJ_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_Right] = _2W_Right_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_Left] = _2W_Left_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_UB_Left] = _2W_UB_Left_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_UB_Right] = _2W_UB_Right_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_I] = _2W_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_P] = _2W_P_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_CS_L] = _2W_CS_Left_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_CS_R] = _2W_CS_Right_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_UB_CS_L] = _2W_UB_CS_Left_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_UB_CS_R] = _2W_UB_CS_Right_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_U_END_L] = _2W_U_END_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_U_END_R] = _2W_U_END_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_C] = _2W_C_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_PI] = _2W_PI_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_I_PJ] = _2W_I_PJ_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelementpresenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _12W_I_UB_SS_L_Presenter = (function (_super) {
                __extends(_12W_I_UB_SS_L_Presenter, _super);
                function _12W_I_UB_SS_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _12W_I_UB_SS_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 + wfr_thick * 2 - bar_thick) / 4;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var cwinw = uwinw;
                    var cwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var dwinw = uwinw;
                    var dwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - wfr_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var c_l_l_x = fr_thick;
                    var c_l_l_y = fr_thick + uwinh + bar_thick;
                    var c_l_l_w = cwinw;
                    var c_l_l_h = cwinh;
                    var c_l_r_x = fr_thick + cwinw - wfr_thick;
                    var c_l_r_y = fr_thick + uwinh + bar_thick;
                    var c_l_r_w = cwinw;
                    var c_l_r_h = cwinh;
                    var d_l_l_x = fr_thick;
                    var d_l_l_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_l_l_w = dwinw;
                    var d_l_l_h = dwinh;
                    var d_l_r_x = fr_thick + dwinw - wfr_thick;
                    var d_l_r_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_l_r_w = dwinw;
                    var d_l_r_h = dwinh;
                    var u_r_l_x = u_l_r_x + u_l_r_w + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + u_r_l_w - wfr_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var c_r_l_x = c_l_r_x + c_l_r_w + bar_thick;
                    var c_r_l_y = fr_thick + uwinh + bar_thick;
                    var c_r_l_w = cwinw;
                    var c_r_l_h = cwinh;
                    var c_r_r_x = c_r_l_x + c_r_l_w - wfr_thick;
                    var c_r_r_y = fr_thick + uwinh + bar_thick;
                    var c_r_r_w = cwinw;
                    var c_r_r_h = cwinh;
                    var d_r_l_x = d_l_r_x + d_l_r_w + bar_thick;
                    var d_r_l_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_r_l_w = dwinw;
                    var d_r_l_h = dwinh;
                    var d_r_r_x = d_r_l_x + d_r_l_w - wfr_thick;
                    var d_r_r_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_r_r_w = dwinw;
                    var d_r_r_h = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var c_l_l_rect = new U1.Rectangle(c_l_l_x, c_l_l_y, c_l_l_w, c_l_l_h);
                    var c_l_r_rect = new U1.Rectangle(c_l_r_x, c_l_r_y, c_l_r_w, c_l_r_h);
                    var d_l_l_rect = new U1.Rectangle(d_l_l_x, d_l_l_y, d_l_l_w, d_l_l_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_r_x, d_l_r_y, d_l_r_w, d_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var c_r_l_rect = new U1.Rectangle(c_r_l_x, c_r_l_y, c_r_l_w, c_r_l_h);
                    var c_r_r_rect = new U1.Rectangle(c_r_r_x, c_r_r_y, c_r_r_w, c_r_r_h);
                    var d_r_l_rect = new U1.Rectangle(d_r_l_x, d_r_l_y, d_r_l_w, d_r_l_h);
                    var d_r_r_rect = new U1.Rectangle(d_r_r_x, d_r_r_y, d_r_r_w, d_r_r_h);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(c_l_r_rect);
                    this.addWindow(c_l_l_rect);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(d_l_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(c_r_r_rect);
                    this.addWindow(c_r_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_r_l_rect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), h - fr_thick * 2, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), (w - fr_thick * 2 - bar_thick) / 2, true, true);
                    this.addHBar(new U1.Vector2(w / 2 + bar_thick / 2, fr_thick + uwinh + bar_thick / 2), (w - fr_thick * 2 - bar_thick) / 2, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), (w - fr_thick * 2 - bar_thick) / 2, true, true);
                    this.addHBar(new U1.Vector2(w / 2 + bar_thick / 2, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), (w - fr_thick * 2 - bar_thick) / 2, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(c_l_l_rect);
                    this.addCenterArrowL(c_l_r_rect);
                    this.addCenterArrowR(d_l_l_rect);
                    this.addCenterArrowL(d_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(c_r_l_rect);
                    this.addCenterArrowL(c_r_r_rect);
                    this.addCenterArrowR(d_r_l_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_l_rect, 80);
                    this.addVent(c_l_l_rect, 80);
                    this.addVent(d_l_l_rect, 80);
                    this.addVent(u_r_l_rect, 80);
                    this.addVent(c_r_l_rect, 80);
                    this.addVent(d_r_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_l_rect, "L");
                    this.addInsectNet(c_l_l_rect, "L");
                    this.addInsectNet(d_l_l_rect, "L");
                    this.addInsectNet(u_r_l_rect, "L");
                    this.addInsectNet(c_r_l_rect, "L");
                    this.addInsectNet(d_r_l_rect, "L");
                };
                return _12W_I_UB_SS_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._12W_I_UB_SS_L_Presenter = _12W_I_UB_SS_L_Presenter;
            var _12W_I_UB_SS_R_Presenter = (function (_super) {
                __extends(_12W_I_UB_SS_R_Presenter, _super);
                function _12W_I_UB_SS_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _12W_I_UB_SS_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 + wfr_thick * 2 - bar_thick) / 4;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var cwinw = uwinw;
                    var cwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var dwinw = uwinw;
                    var dwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - wfr_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var c_l_l_x = fr_thick;
                    var c_l_l_y = fr_thick + uwinh + bar_thick;
                    var c_l_l_w = cwinw;
                    var c_l_l_h = cwinh;
                    var c_l_r_x = fr_thick + cwinw - wfr_thick;
                    var c_l_r_y = fr_thick + uwinh + bar_thick;
                    var c_l_r_w = cwinw;
                    var c_l_r_h = cwinh;
                    var d_l_l_x = fr_thick;
                    var d_l_l_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_l_l_w = dwinw;
                    var d_l_l_h = dwinh;
                    var d_l_r_x = fr_thick + dwinw - wfr_thick;
                    var d_l_r_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_l_r_w = dwinw;
                    var d_l_r_h = dwinh;
                    var u_r_l_x = u_l_r_x + u_l_r_w + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + u_r_l_w - wfr_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var c_r_l_x = c_l_r_x + c_l_r_w + bar_thick;
                    var c_r_l_y = fr_thick + uwinh + bar_thick;
                    var c_r_l_w = cwinw;
                    var c_r_l_h = cwinh;
                    var c_r_r_x = c_r_l_x + c_r_l_w - wfr_thick;
                    var c_r_r_y = fr_thick + uwinh + bar_thick;
                    var c_r_r_w = cwinw;
                    var c_r_r_h = cwinh;
                    var d_r_l_x = d_l_r_x + d_l_r_w + bar_thick;
                    ;
                    var d_r_l_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_r_l_w = dwinw;
                    var d_r_l_h = dwinh;
                    var d_r_r_x = d_r_l_x + d_r_l_w - wfr_thick;
                    var d_r_r_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_r_r_w = dwinw;
                    var d_r_r_h = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var c_l_l_rect = new U1.Rectangle(c_l_l_x, c_l_l_y, c_l_l_w, c_l_l_h);
                    var c_l_r_rect = new U1.Rectangle(c_l_r_x, c_l_r_y, c_l_r_w, c_l_r_h);
                    var d_l_l_rect = new U1.Rectangle(d_l_l_x, d_l_l_y, d_l_l_w, d_l_l_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_r_x, d_l_r_y, d_l_r_w, d_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var c_r_l_rect = new U1.Rectangle(c_r_l_x, c_r_l_y, c_r_l_w, c_r_l_h);
                    var c_r_r_rect = new U1.Rectangle(c_r_r_x, c_r_r_y, c_r_r_w, c_r_r_h);
                    var d_r_l_rect = new U1.Rectangle(d_r_l_x, d_r_l_y, d_r_l_w, d_r_l_h);
                    var d_r_r_rect = new U1.Rectangle(d_r_r_x, d_r_r_y, d_r_r_w, d_r_r_h);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(c_l_l_rect);
                    this.addWindow(c_l_r_rect);
                    this.addWindow(d_l_l_rect);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(c_r_l_rect);
                    this.addWindow(c_r_r_rect);
                    this.addWindow(d_r_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), h - fr_thick * 2, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), (w - fr_thick * 2 - bar_thick) / 2, true, true);
                    this.addHBar(new U1.Vector2(w / 2 + bar_thick / 2, fr_thick + uwinh + bar_thick / 2), (w - fr_thick * 2 - bar_thick) / 2, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), (w - fr_thick * 2 - bar_thick) / 2, true, true);
                    this.addHBar(new U1.Vector2(w / 2 + bar_thick / 2, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), (w - fr_thick * 2 - bar_thick) / 2, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(c_l_l_rect);
                    this.addCenterArrowL(c_l_r_rect);
                    this.addCenterArrowR(d_l_l_rect);
                    this.addCenterArrowL(d_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(c_r_l_rect);
                    this.addCenterArrowL(c_r_r_rect);
                    this.addCenterArrowR(d_r_l_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_r_rect, 80);
                    this.addVent(c_l_r_rect, 80);
                    this.addVent(d_l_r_rect, 80);
                    this.addVent(u_r_r_rect, 80);
                    this.addVent(c_r_r_rect, 80);
                    this.addVent(d_r_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_r_rect, "R");
                    this.addInsectNet(c_l_r_rect, "R");
                    this.addInsectNet(d_l_r_rect, "R");
                    this.addInsectNet(u_r_r_rect, "R");
                    this.addInsectNet(c_r_r_rect, "R");
                    this.addInsectNet(d_r_r_rect, "R");
                };
                return _12W_I_UB_SS_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._12W_I_UB_SS_R_Presenter = _12W_I_UB_SS_R_Presenter;
            var _12W_UB_L_SS_Presenter = (function (_super) {
                __extends(_12W_UB_L_SS_Presenter, _super);
                function _12W_UB_L_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _12W_UB_L_SS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick * 2 + wfr_thick * 3) / 6;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinw = uwinw;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_c_l_x = u_l_r_x + u_l_r_w + bar_thick;
                    var u_c_l_y = u_l_r_y;
                    var u_c_l_w = uwinw;
                    var u_c_l_h = uwinh;
                    var u_c_r_x = u_c_l_x + u_c_l_w - wfr_thick;
                    var u_c_r_y = u_c_l_y;
                    var u_c_r_w = u_c_l_w;
                    var u_c_r_h = u_c_l_h;
                    var u_r_l_x = u_c_r_x + uwinw + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + uwinw - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_l_x = fr_thick;
                    var d_l_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_l_w = dwinw;
                    var d_l_l_h = dwinh;
                    var d_l_r_x = fr_thick + dwinw - bar_thick;
                    var d_l_r_y = d_l_l_y;
                    var d_l_r_w = dwinw;
                    var d_l_r_h = dwinh;
                    var d_c_l_x = d_l_r_x + d_l_r_w + bar_thick;
                    var d_c_l_y = d_l_r_y;
                    var d_c_l_w = d_l_r_w;
                    var d_c_l_h = d_l_r_h;
                    var d_c_r_x = d_c_l_x + d_c_l_w - wfr_thick;
                    var d_c_r_y = d_c_l_y;
                    var d_c_r_w = d_c_l_w;
                    var d_c_r_h = d_c_l_h;
                    var d_r_l_x = d_c_r_x + dwinw + bar_thick;
                    var d_r_l_y = d_c_r_y;
                    var d_r_l_w = dwinw;
                    var d_r_l_h = dwinh;
                    var d_r_r_x = d_r_l_x + dwinw - bar_thick;
                    var d_r_r_y = d_r_l_y;
                    var d_r_r_w = dwinw;
                    var d_r_r_h = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_c_l_rect = new U1.Rectangle(u_c_l_x, u_c_l_y, u_c_l_w, u_c_l_h);
                    var u_c_r_rect = new U1.Rectangle(u_c_r_x, u_c_r_y, u_c_r_w, u_c_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_l_rect = new U1.Rectangle(d_l_l_x, d_l_l_y, d_l_l_w, d_l_l_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_r_x, d_l_r_y, d_l_r_w, d_l_r_h);
                    var d_c_l_rect = new U1.Rectangle(d_c_l_x, d_c_l_y, d_c_l_w, d_c_l_h);
                    var d_c_r_rect = new U1.Rectangle(d_c_r_x, d_c_r_y, d_c_r_w, d_c_r_h);
                    var d_r_l_rect = new U1.Rectangle(d_r_l_x, d_r_l_y, d_r_l_w, d_r_l_h);
                    var d_r_r_rect = new U1.Rectangle(d_r_r_x, d_r_r_y, d_r_r_w, d_r_r_h);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_c_r_rect);
                    this.addWindow(u_c_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(d_l_l_rect);
                    this.addWindow(d_c_r_rect);
                    this.addWindow(d_c_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_r_l_rect);
                    this.addVBar(new U1.Vector2(u_c_l_x - bar_thick / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addVBar(new U1.Vector2(u_r_l_x - bar_thick / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addHBar(new U1.Vector2(u_c_l_x, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addHBar(new U1.Vector2(u_r_l_x, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_c_l_rect);
                    this.addCenterArrowL(u_c_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_l_rect);
                    this.addCenterArrowL(d_l_r_rect);
                    this.addCenterArrowR(d_c_l_rect);
                    this.addCenterArrowL(d_c_r_rect);
                    this.addCenterArrowR(d_r_l_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_l_rect, 80);
                    this.addVent(u_c_l_rect, 80);
                    this.addVent(u_r_l_rect, 80);
                    this.addVent(d_l_l_rect, 80);
                    this.addVent(d_c_l_rect, 80);
                    this.addVent(d_r_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_l_rect, "L");
                    this.addInsectNet(u_c_l_rect, "L");
                    this.addInsectNet(u_r_l_rect, "L");
                    this.addInsectNet(d_l_l_rect, "L");
                    this.addInsectNet(d_c_l_rect, "L");
                    this.addInsectNet(d_r_l_rect, "L");
                };
                return _12W_UB_L_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._12W_UB_L_SS_Presenter = _12W_UB_L_SS_Presenter;
            var _12W_UB_R_SS_Presenter = (function (_super) {
                __extends(_12W_UB_R_SS_Presenter, _super);
                function _12W_UB_R_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _12W_UB_R_SS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick * 2 + wfr_thick * 3) / 6;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinw = uwinw;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_c_l_x = u_l_r_x + u_l_r_w + bar_thick;
                    var u_c_l_y = u_l_r_y;
                    var u_c_l_w = uwinw;
                    var u_c_l_h = uwinh;
                    var u_c_r_x = u_c_l_x + u_c_l_w - wfr_thick;
                    var u_c_r_y = u_c_l_y;
                    var u_c_r_w = u_c_l_w;
                    var u_c_r_h = u_c_l_h;
                    var u_r_l_x = u_c_r_x + uwinw + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + uwinw - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_l_x = fr_thick;
                    var d_l_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_l_w = dwinw;
                    var d_l_l_h = dwinh;
                    var d_l_r_x = fr_thick + dwinw - bar_thick;
                    var d_l_r_y = d_l_l_y;
                    var d_l_r_w = dwinw;
                    var d_l_r_h = dwinh;
                    var d_c_l_x = d_l_r_x + d_l_r_w + bar_thick;
                    var d_c_l_y = d_l_r_y;
                    var d_c_l_w = d_l_r_w;
                    var d_c_l_h = d_l_r_h;
                    var d_c_r_x = d_c_l_x + d_c_l_w - wfr_thick;
                    var d_c_r_y = d_c_l_y;
                    var d_c_r_w = d_c_l_w;
                    var d_c_r_h = d_c_l_h;
                    var d_r_l_x = d_c_r_x + dwinw + bar_thick;
                    var d_r_l_y = d_c_r_y;
                    var d_r_l_w = dwinw;
                    var d_r_l_h = dwinh;
                    var d_r_r_x = d_r_l_x + dwinw - bar_thick;
                    var d_r_r_y = d_r_l_y;
                    var d_r_r_w = dwinw;
                    var d_r_r_h = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_c_l_rect = new U1.Rectangle(u_c_l_x, u_c_l_y, u_c_l_w, u_c_l_h);
                    var u_c_r_rect = new U1.Rectangle(u_c_r_x, u_c_r_y, u_c_r_w, u_c_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_l_rect = new U1.Rectangle(d_l_l_x, d_l_l_y, d_l_l_w, d_l_l_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_r_x, d_l_r_y, d_l_r_w, d_l_r_h);
                    var d_c_l_rect = new U1.Rectangle(d_c_l_x, d_c_l_y, d_c_l_w, d_c_l_h);
                    var d_c_r_rect = new U1.Rectangle(d_c_r_x, d_c_r_y, d_c_r_w, d_c_r_h);
                    var d_r_l_rect = new U1.Rectangle(d_r_l_x, d_r_l_y, d_r_l_w, d_r_l_h);
                    var d_r_r_rect = new U1.Rectangle(d_r_r_x, d_r_r_y, d_r_r_w, d_r_r_h);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_c_l_rect);
                    this.addWindow(u_c_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(d_l_l_rect);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(d_c_l_rect);
                    this.addWindow(d_c_r_rect);
                    this.addWindow(d_r_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addVBar(new U1.Vector2(u_c_l_x - bar_thick / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addVBar(new U1.Vector2(u_r_l_x - bar_thick / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addHBar(new U1.Vector2(u_c_l_x, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addHBar(new U1.Vector2(u_r_l_x, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_c_l_rect);
                    this.addCenterArrowL(u_c_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_l_rect);
                    this.addCenterArrowL(d_l_r_rect);
                    this.addCenterArrowR(d_c_l_rect);
                    this.addCenterArrowL(d_c_r_rect);
                    this.addCenterArrowR(d_r_l_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_r_rect, 80);
                    this.addVent(u_c_r_rect, 80);
                    this.addVent(u_r_r_rect, 80);
                    this.addVent(d_l_r_rect, 80);
                    this.addVent(d_c_r_rect, 80);
                    this.addVent(d_r_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_r_rect, "R");
                    this.addInsectNet(u_c_r_rect, "R");
                    this.addInsectNet(u_r_r_rect, "R");
                    this.addInsectNet(d_l_r_rect, "R");
                    this.addInsectNet(d_c_r_rect, "R");
                    this.addInsectNet(d_r_r_rect, "R");
                };
                return _12W_UB_R_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._12W_UB_R_SS_Presenter = _12W_UB_R_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._12W_I_UB_SS_L] = _12W_I_UB_SS_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._12W_I_UB_SS_R] = _12W_I_UB_SS_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._12W_UB_L_SS] = _12W_UB_L_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._12W_UB_R_SS] = _12W_UB_R_SS_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelementpresenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _6W_1F_I_L_FS_Presenter = (function (_super) {
                __extends(_6W_1F_I_L_FS_Presenter, _super);
                function _6W_1F_I_L_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _6W_1F_I_L_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick * 2 + wfr_thick * 3) / 6;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var d_l_l_x = fr_thick;
                    var d_l_l_y = h1 + bar_thick / 2;
                    var d_l_l_w = dwinw;
                    var d_l_l_h = dwinh;
                    var d_l_r_x = d_l_l_x + d_l_l_w - wfr_thick;
                    var d_l_r_y = d_l_l_y;
                    var d_l_r_w = dwinw;
                    var d_l_r_h = dwinh;
                    var d_c_l_x = d_l_r_x + d_l_r_w + bar_thick;
                    var d_c_l_y = d_l_r_y;
                    var d_c_l_w = dwinw;
                    var d_c_l_h = dwinh;
                    var d_c_r_x = d_c_l_x + d_c_l_w - wfr_thick;
                    var d_c_r_y = d_c_l_y;
                    var d_c_r_w = dwinw;
                    var d_c_r_h = dwinh;
                    var d_r_l_x = d_c_r_x + d_c_r_w + bar_thick;
                    var d_r_l_y = d_c_r_y;
                    var d_r_l_w = dwinw;
                    var d_r_l_h = dwinh;
                    var d_r_r_x = d_r_l_x + d_r_l_w - wfr_thick;
                    var d_r_r_y = d_c_l_y;
                    var d_r_r_w = dwinw;
                    var d_r_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var d_l_l_rect = new U1.Rectangle(d_l_l_x, d_l_l_y, d_l_l_w, d_l_l_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_r_x, d_l_r_y, d_l_r_w, d_l_r_h);
                    var d_c_l_rect = new U1.Rectangle(d_c_l_x, d_c_l_y, d_c_l_w, d_c_l_h);
                    var d_c_r_rect = new U1.Rectangle(d_c_r_x, d_c_r_y, d_c_r_w, d_c_r_h);
                    var d_r_l_rect = new U1.Rectangle(d_r_l_x, d_r_l_y, d_r_l_w, d_r_l_h);
                    var d_r_r_rect = new U1.Rectangle(d_r_r_x, d_r_r_y, d_r_r_w, d_r_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(d_l_l_rect);
                    this.addWindow(d_c_r_rect);
                    this.addWindow(d_c_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_r_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addVBar(new U1.Vector2(d_c_l_x - bar_thick / 2, fr_thick + uwinh + bar_thick), dwinh, true, true);
                    this.addVBar(new U1.Vector2(d_r_l_x - bar_thick / 2, fr_thick + uwinh + bar_thick), dwinh, true, true);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterArrowR(d_l_l_rect);
                    this.addCenterArrowL(d_l_r_rect);
                    this.addCenterArrowR(d_c_l_rect);
                    this.addCenterArrowL(d_c_r_rect);
                    this.addCenterArrowR(d_r_l_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(d_l_l_rect, 80);
                    this.addVent(d_c_l_rect, 80);
                    this.addVent(d_r_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_l_l_rect, "L");
                    this.addInsectNet(d_c_l_rect, "L");
                    this.addInsectNet(d_r_l_rect, "L");
                };
                return _6W_1F_I_L_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._6W_1F_I_L_FS_Presenter = _6W_1F_I_L_FS_Presenter;
            var _6W_1F_I_R_FS_Presenter = (function (_super) {
                __extends(_6W_1F_I_R_FS_Presenter, _super);
                function _6W_1F_I_R_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _6W_1F_I_R_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick * 2 + wfr_thick * 3) / 6;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var d_l_l_x = fr_thick;
                    var d_l_l_y = h1 + bar_thick / 2;
                    var d_l_l_w = dwinw;
                    var d_l_l_h = dwinh;
                    var d_l_r_x = d_l_l_x + d_l_l_w - wfr_thick;
                    var d_l_r_y = d_l_l_y;
                    var d_l_r_w = dwinw;
                    var d_l_r_h = dwinh;
                    var d_c_l_x = d_l_r_x + d_l_r_w + bar_thick;
                    var d_c_l_y = d_l_r_y;
                    var d_c_l_w = dwinw;
                    var d_c_l_h = dwinh;
                    var d_c_r_x = d_c_l_x + d_c_l_w - wfr_thick;
                    var d_c_r_y = d_c_l_y;
                    var d_c_r_w = dwinw;
                    var d_c_r_h = dwinh;
                    var d_r_l_x = d_c_r_x + d_c_r_w + bar_thick;
                    var d_r_l_y = d_c_r_y;
                    var d_r_l_w = dwinw;
                    var d_r_l_h = dwinh;
                    var d_r_r_x = d_r_l_x + d_r_l_w - wfr_thick;
                    var d_r_r_y = d_c_l_y;
                    var d_r_r_w = dwinw;
                    var d_r_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var d_l_l_rect = new U1.Rectangle(d_l_l_x, d_l_l_y, d_l_l_w, d_l_l_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_r_x, d_l_r_y, d_l_r_w, d_l_r_h);
                    var d_c_l_rect = new U1.Rectangle(d_c_l_x, d_c_l_y, d_c_l_w, d_c_l_h);
                    var d_c_r_rect = new U1.Rectangle(d_c_r_x, d_c_r_y, d_c_r_w, d_c_r_h);
                    var d_r_l_rect = new U1.Rectangle(d_r_l_x, d_r_l_y, d_r_l_w, d_r_l_h);
                    var d_r_r_rect = new U1.Rectangle(d_r_r_x, d_r_r_y, d_r_r_w, d_r_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_l_l_rect);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(d_c_l_rect);
                    this.addWindow(d_c_r_rect);
                    this.addWindow(d_r_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addVBar(new U1.Vector2(d_c_l_x - bar_thick / 2, fr_thick + uwinh + bar_thick), dwinh, true, true);
                    this.addVBar(new U1.Vector2(d_r_l_x - bar_thick / 2, fr_thick + uwinh + bar_thick), dwinh, true, true);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterArrowR(d_l_l_rect);
                    this.addCenterArrowL(d_l_r_rect);
                    this.addCenterArrowR(d_c_l_rect);
                    this.addCenterArrowL(d_c_r_rect);
                    this.addCenterArrowR(d_r_l_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(d_l_r_rect, 80);
                    this.addVent(d_c_r_rect, 80);
                    this.addVent(d_r_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_l_r_rect, "R");
                    this.addInsectNet(d_c_r_rect, "R");
                    this.addInsectNet(d_r_r_rect, "R");
                };
                return _6W_1F_I_R_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._6W_1F_I_R_FS_Presenter = _6W_1F_I_R_FS_Presenter;
            var _6W_3F_L_FS_Presenter = (function (_super) {
                __extends(_6W_3F_L_FS_Presenter, _super);
                function _6W_3F_L_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _6W_3F_L_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var w1 = winElm.W1;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var ulrwinw = w1 - fr_thick - bar_thick / 2;
                    var ucwinw = w - w1 * 2 - bar_thick;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dlrwinw = ulrwinw;
                    var dlrwinwhalf = (dlrwinw + wfr_thick) / 2;
                    var dcwinw = ucwinw;
                    var dcwinwhalf = (dcwinw + wfr_thick) / 2;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = ulrwinw;
                    var u_l_h = uwinh;
                    var u_c_x = u_l_x + u_l_w + bar_thick;
                    var u_c_y = u_l_y;
                    var u_c_w = ucwinw;
                    var u_c_h = uwinh;
                    var u_r_x = u_c_x + u_c_w + bar_thick;
                    var u_r_y = u_c_y;
                    var u_r_w = ulrwinw;
                    var u_r_h = uwinh;
                    var d_l_l_x = fr_thick;
                    var d_l_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_l_w = dlrwinwhalf;
                    var d_l_l_h = dwinh;
                    var d_l_r_x = d_l_l_x + d_l_l_w - wfr_thick;
                    var d_l_r_y = d_l_l_y;
                    var d_l_r_w = dlrwinwhalf;
                    var d_l_r_h = dwinh;
                    var d_c_l_x = d_l_r_x + d_l_r_w + bar_thick;
                    var d_c_l_y = d_l_r_y;
                    var d_c_l_w = dcwinwhalf;
                    var d_c_l_h = dwinh;
                    var d_c_r_x = d_c_l_x + d_c_l_w - wfr_thick;
                    var d_c_r_y = d_c_l_y;
                    var d_c_r_w = dcwinwhalf;
                    var d_c_r_h = dwinh;
                    var d_r_l_x = d_c_r_x + d_c_r_w + bar_thick;
                    var d_r_l_y = d_c_r_y;
                    var d_r_l_w = dlrwinwhalf;
                    var d_r_l_h = dwinh;
                    var d_r_r_x = d_r_l_x + d_r_l_w - wfr_thick;
                    var d_r_r_y = d_r_l_y;
                    var d_r_r_w = dlrwinwhalf;
                    var d_r_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_c_rect = new U1.Rectangle(u_c_x, u_c_y, u_c_w, u_c_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_l_rect = new U1.Rectangle(d_l_l_x, d_l_l_y, d_l_l_w, d_l_l_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_r_x, d_l_r_y, d_l_r_w, d_l_r_h);
                    var d_c_l_rect = new U1.Rectangle(d_c_l_x, d_c_l_y, d_c_l_w, d_c_l_h);
                    var d_c_r_rect = new U1.Rectangle(d_c_r_x, d_c_r_y, d_c_r_w, d_c_r_h);
                    var d_r_l_rect = new U1.Rectangle(d_r_l_x, d_r_l_y, d_r_l_w, d_r_l_h);
                    var d_r_r_rect = new U1.Rectangle(d_r_r_x, d_r_r_y, d_r_r_w, d_r_r_h);
                    this.addWindow(u_l_rect);
                    this.addWindow(u_c_rect);
                    this.addWindow(u_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(d_l_l_rect);
                    this.addWindow(d_c_r_rect);
                    this.addWindow(d_c_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_r_l_rect);
                    this.addVBar(new U1.Vector2(u_c_x - bar_thick / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addVBar(new U1.Vector2(u_r_x - bar_thick / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(u_l_x, fr_thick + uwinh + bar_thick / 2), ulrwinw, true, true);
                    this.addHBar(new U1.Vector2(u_c_x, fr_thick + uwinh + bar_thick / 2), ucwinw, true, true);
                    this.addHBar(new U1.Vector2(u_r_x, fr_thick + uwinh + bar_thick / 2), ulrwinw, true, true);
                    this.addCenterPlus(u_l_rect, 80);
                    this.addCenterPlus(u_c_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterArrowR(d_l_l_rect);
                    this.addCenterArrowL(d_l_r_rect);
                    this.addCenterArrowR(d_c_l_rect);
                    this.addCenterArrowL(d_c_r_rect);
                    this.addCenterArrowR(d_r_l_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(d_l_l_rect, 80);
                    this.addVent(d_c_l_rect, 80);
                    this.addVent(d_r_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, w - w1, w, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(d_l_l_rect, "L");
                    this.addInsectNet(d_c_l_rect, "L");
                    this.addInsectNet(d_r_l_rect, "L");
                };
                return _6W_3F_L_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._6W_3F_L_FS_Presenter = _6W_3F_L_FS_Presenter;
            var _6W_3F_R_FS_Presenter = (function (_super) {
                __extends(_6W_3F_R_FS_Presenter, _super);
                function _6W_3F_R_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _6W_3F_R_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var w1 = winElm.W1;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var ulrwinw = w1 - fr_thick - bar_thick / 2;
                    var ucwinw = w - w1 * 2 - bar_thick;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dlrwinw = ulrwinw;
                    var dlrwinwhalf = (dlrwinw + wfr_thick) / 2;
                    var dcwinw = ucwinw;
                    var dcwinwhalf = (dcwinw + wfr_thick) / 2;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = ulrwinw;
                    var u_l_h = uwinh;
                    var u_c_x = u_l_x + u_l_w + bar_thick;
                    var u_c_y = u_l_y;
                    var u_c_w = ucwinw;
                    var u_c_h = uwinh;
                    var u_r_x = u_c_x + u_c_w + bar_thick;
                    var u_r_y = u_c_y;
                    var u_r_w = ulrwinw;
                    var u_r_h = uwinh;
                    var d_l_l_x = fr_thick;
                    var d_l_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_l_w = dlrwinwhalf;
                    var d_l_l_h = dwinh;
                    var d_l_r_x = d_l_l_x + d_l_l_w - wfr_thick;
                    var d_l_r_y = d_l_l_y;
                    var d_l_r_w = dlrwinwhalf;
                    var d_l_r_h = dwinh;
                    var d_c_l_x = d_l_r_x + d_l_r_w + bar_thick;
                    var d_c_l_y = d_l_r_y;
                    var d_c_l_w = dcwinwhalf;
                    var d_c_l_h = dwinh;
                    var d_c_r_x = d_c_l_x + d_c_l_w - wfr_thick;
                    var d_c_r_y = d_c_l_y;
                    var d_c_r_w = dcwinwhalf;
                    var d_c_r_h = dwinh;
                    var d_r_l_x = d_c_r_x + d_c_r_w + bar_thick;
                    var d_r_l_y = d_c_r_y;
                    var d_r_l_w = dlrwinwhalf;
                    var d_r_l_h = dwinh;
                    var d_r_r_x = d_r_l_x + d_r_l_w - wfr_thick;
                    var d_r_r_y = d_r_l_y;
                    var d_r_r_w = dlrwinwhalf;
                    var d_r_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_c_rect = new U1.Rectangle(u_c_x, u_c_y, u_c_w, u_c_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_l_rect = new U1.Rectangle(d_l_l_x, d_l_l_y, d_l_l_w, d_l_l_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_r_x, d_l_r_y, d_l_r_w, d_l_r_h);
                    var d_c_l_rect = new U1.Rectangle(d_c_l_x, d_c_l_y, d_c_l_w, d_c_l_h);
                    var d_c_r_rect = new U1.Rectangle(d_c_r_x, d_c_r_y, d_c_r_w, d_c_r_h);
                    var d_r_l_rect = new U1.Rectangle(d_r_l_x, d_r_l_y, d_r_l_w, d_r_l_h);
                    var d_r_r_rect = new U1.Rectangle(d_r_r_x, d_r_r_y, d_r_r_w, d_r_r_h);
                    this.addWindow(u_l_rect);
                    this.addWindow(u_c_rect);
                    this.addWindow(u_r_rect);
                    this.addWindow(d_l_l_rect);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(d_c_l_rect);
                    this.addWindow(d_c_r_rect);
                    this.addWindow(d_r_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addVBar(new U1.Vector2(u_c_x - bar_thick / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addVBar(new U1.Vector2(u_r_x - bar_thick / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(u_l_x, fr_thick + uwinh + bar_thick / 2), ulrwinw, true, true);
                    this.addHBar(new U1.Vector2(u_c_x, fr_thick + uwinh + bar_thick / 2), ucwinw, true, true);
                    this.addHBar(new U1.Vector2(u_r_x, fr_thick + uwinh + bar_thick / 2), ulrwinw, true, true);
                    this.addCenterPlus(u_l_rect, 80);
                    this.addCenterPlus(u_c_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterArrowR(d_l_l_rect);
                    this.addCenterArrowL(d_l_r_rect);
                    this.addCenterArrowR(d_c_l_rect);
                    this.addCenterArrowL(d_c_r_rect);
                    this.addCenterArrowR(d_r_l_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(d_l_r_rect, 80);
                    this.addVent(d_c_r_rect, 80);
                    this.addVent(d_r_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w1, 0);
                    this.addBottomDim(lb, w - w1, w, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(d_l_r_rect, "R");
                    this.addInsectNet(d_c_r_rect, "R");
                    this.addInsectNet(d_r_r_rect, "R");
                };
                return _6W_3F_R_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._6W_3F_R_FS_Presenter = _6W_3F_R_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._6W_1F_I_L_FS] = _6W_1F_I_L_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._6W_1F_I_R_FS] = _6W_1F_I_R_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._6W_3F_L_FS] = _6W_3F_L_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._6W_3F_R_FS] = _6W_3F_R_FS_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelementpresenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _8W_L_Presenter = (function (_super) {
                __extends(_8W_L_Presenter, _super);
                function _8W_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _8W_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    //var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = (h - fr_thick * 2 - bar_thick) / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var dwinh = uwinh;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = u_l_r_x + uwinw + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + uwinw - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw + bar_thick;
                    var d_l_y_r = d_l_y;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = d_l_y;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addHBar(new U1.Vector2(u_r_l_x, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_l_rect, 80);
                    this.addVent(u_r_l_rect, 80);
                    this.addVent(d_l_rect, 80);
                    this.addVent(d_l_r_rect, 80);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_l_rect, "L");
                    this.addInsectNet(u_r_l_rect, "L");
                    this.addInsectNet(d_l_rect, "L");
                    this.addInsectNet(d_l_r_rect, "L");
                };
                return _8W_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._8W_L_Presenter = _8W_L_Presenter;
            var _8W_R_Presenter = (function (_super) {
                __extends(_8W_R_Presenter, _super);
                function _8W_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _8W_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    //var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = (h - fr_thick * 2 - bar_thick) / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var dwinh = uwinh;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = u_l_r_x + uwinw + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + uwinw - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw + bar_thick;
                    var d_l_y_r = d_l_y;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = d_l_y;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(d_r_r_rect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addHBar(new U1.Vector2(u_r_l_x, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_r_rect, 80);
                    this.addVent(u_r_r_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addVent(d_r_r_rect, 80);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_r_rect, "R");
                    this.addInsectNet(u_r_r_rect, "R");
                    this.addInsectNet(d_r_rect, "R");
                    this.addInsectNet(d_r_r_rect, "R");
                };
                return _8W_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._8W_R_Presenter = _8W_R_Presenter;
            var _8W_CS_L_Presenter = (function (_super) {
                __extends(_8W_CS_L_Presenter, _super);
                function _8W_CS_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _8W_CS_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = u_l_r_x + uwinw + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + uwinw - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw + bar_thick;
                    var d_l_y_r = d_l_y;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = d_l_y;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addHBar(new U1.Vector2(u_r_l_x, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_l_rect, 80);
                    this.addVent(u_r_l_rect, 80);
                    this.addVent(d_l_rect, 80);
                    this.addVent(d_l_r_rect, 80);
                    //this.addCs(d_l_rect);
                    //this.addCs(d_r_rect);
                    //this.addCs(d_l_r_rect);
                    //this.addCs(d_r_r_rect);
                    this.addHBar(new U1.Vector2(d_l_x + wfr_thick, d_l_y + d_l_h * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(d_r_x + wfr_thick, d_r_y + d_r_h * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(d_l_x_r + wfr_thick, d_l_y_r + d_l_h_r * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(d_r_x_r + wfr_thick, d_r_y_r + d_r_h_r * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_l_rect, "L");
                    this.addInsectNet(u_r_l_rect, "L");
                    this.addInsectNet(d_l_rect, "L");
                    this.addInsectNet(d_l_r_rect, "L");
                };
                return _8W_CS_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._8W_CS_L_Presenter = _8W_CS_L_Presenter;
            var _8W_CS_R_Presenter = (function (_super) {
                __extends(_8W_CS_R_Presenter, _super);
                function _8W_CS_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _8W_CS_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = u_l_r_x + uwinw + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + uwinw - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw + bar_thick;
                    var d_l_y_r = d_l_y;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = d_l_y;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(d_r_r_rect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addHBar(new U1.Vector2(u_r_l_x, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_r_rect, 80);
                    this.addVent(u_r_r_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addVent(d_r_r_rect, 80);
                    //this.addCs(d_l_rect);
                    //this.addCs(d_r_rect);
                    //this.addCs(d_l_r_rect);
                    //this.addCs(d_r_r_rect);
                    this.addHBar(new U1.Vector2(d_l_x + wfr_thick, d_l_y + d_l_h * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(d_r_x + wfr_thick, d_r_y + d_r_h * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(d_l_x_r + wfr_thick, d_l_y_r + d_l_h_r * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(d_r_x_r + wfr_thick, d_r_y_r + d_r_h_r * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_r_rect, "R");
                    this.addInsectNet(u_r_r_rect, "R");
                    this.addInsectNet(d_r_rect, "R");
                    this.addInsectNet(d_r_r_rect, "R");
                };
                return _8W_CS_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._8W_CS_R_Presenter = _8W_CS_R_Presenter;
            var _8W_UB_L_Presenter = (function (_super) {
                __extends(_8W_UB_L_Presenter, _super);
                function _8W_UB_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _8W_UB_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = u_l_r_x + uwinw + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + uwinw - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw + bar_thick;
                    var d_l_y_r = d_l_y;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = d_l_y;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addHBar(new U1.Vector2(u_r_l_x, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_l_rect, 80);
                    this.addVent(u_r_l_rect, 80);
                    this.addVent(d_l_rect, 80);
                    this.addVent(d_l_r_rect, 80);
                    //this.addCs(d_l_rect);
                    //this.addCs(d_r_rect);
                    //this.addCs(d_l_r_rect);
                    //this.addCs(d_r_r_rect);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_l_rect, "L");
                    this.addInsectNet(u_r_l_rect, "L");
                    this.addInsectNet(d_l_rect, "L");
                    this.addInsectNet(d_l_r_rect, "L");
                };
                return _8W_UB_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._8W_UB_L_Presenter = _8W_UB_L_Presenter;
            var _8W_UB_R_Presenter = (function (_super) {
                __extends(_8W_UB_R_Presenter, _super);
                function _8W_UB_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _8W_UB_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = u_l_r_x + uwinw + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + uwinw - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw + bar_thick;
                    var d_l_y_r = d_l_y;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = d_l_y;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(d_r_r_rect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addHBar(new U1.Vector2(u_r_l_x, fr_thick + uwinh + bar_thick / 2), uwinw * 2 - bar_thick, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_r_rect, 80);
                    this.addVent(u_r_r_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addVent(d_r_r_rect, 80);
                    //this.addCs(d_l_rect);
                    //this.addCs(d_r_rect);
                    //this.addCs(d_l_r_rect);
                    //this.addCs(d_r_r_rect);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_r_rect, "R");
                    this.addInsectNet(u_r_r_rect, "R");
                    this.addInsectNet(d_r_rect, "R");
                    this.addInsectNet(d_r_r_rect, "R");
                };
                return _8W_UB_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._8W_UB_R_Presenter = _8W_UB_R_Presenter;
            var _8W_L_SS_Presenter = (function (_super) {
                __extends(_8W_L_SS_Presenter, _super);
                function _8W_L_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _8W_L_SS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = (w - fr_thick * 2 - wfr_thick * 2 + wfr_thick * 3) / 8;
                    var winh = h - fr_thick * 2;
                    var l_l_l_x = fr_thick;
                    var l_l_r_x = l_l_l_x + winw - wfr_thick;
                    var l_r_l_x = l_l_r_x + winw + wfr_thick;
                    var l_r_r_x = l_r_l_x + winw - wfr_thick;
                    var r_l_l_x = l_r_r_x + winw + wfr_thick;
                    var r_l_r_x = r_l_l_x + winw - wfr_thick;
                    var r_r_l_x = r_l_r_x + winw + wfr_thick;
                    var r_r_r_x = r_r_l_x + winw - wfr_thick;
                    var l_l_l_winRect = new U1.Rectangle(l_l_l_x, fr_thick, winw, winh);
                    var l_l_r_winRect = new U1.Rectangle(l_l_r_x, fr_thick, winw, winh);
                    var l_r_l_winRect = new U1.Rectangle(l_r_l_x, fr_thick, winw, winh);
                    var l_r_r_winRect = new U1.Rectangle(l_r_r_x, fr_thick, winw, winh);
                    var r_l_l_winRect = new U1.Rectangle(r_l_l_x, fr_thick, winw, winh);
                    var r_l_r_winRect = new U1.Rectangle(r_l_r_x, fr_thick, winw, winh);
                    var r_r_l_winRect = new U1.Rectangle(r_r_l_x, fr_thick, winw, winh);
                    var r_r_r_winRect = new U1.Rectangle(r_r_r_x, fr_thick, winw, winh);
                    this.addWindow(l_l_r_winRect);
                    this.addWindow(l_l_l_winRect);
                    this.addWindow(l_r_r_winRect);
                    this.addWindow(l_r_l_winRect);
                    this.addWindow(r_l_r_winRect);
                    this.addWindow(r_l_l_winRect);
                    this.addWindow(r_r_r_winRect);
                    this.addWindow(r_r_l_winRect);
                    this.addVBar(new U1.Vector2(l_r_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addVBar(new U1.Vector2(r_l_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addVBar(new U1.Vector2(r_r_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addCenterArrowR(l_l_l_winRect);
                    this.addCenterArrowL(l_l_r_winRect);
                    this.addCenterArrowR(l_r_l_winRect);
                    this.addCenterArrowL(l_r_r_winRect);
                    this.addCenterArrowR(r_l_l_winRect);
                    this.addCenterArrowL(r_l_r_winRect);
                    this.addCenterArrowR(r_r_l_winRect);
                    this.addCenterArrowL(r_r_r_winRect);
                    this.addVent(l_l_l_winRect, 80);
                    this.addVent(l_r_l_winRect, 80);
                    this.addVent(r_l_l_winRect, 80);
                    this.addVent(r_r_l_winRect, 80);
                    this.addInsectNet(l_l_l_winRect, "L");
                    this.addInsectNet(l_r_l_winRect, "L");
                    this.addInsectNet(r_l_l_winRect, "L");
                    this.addInsectNet(r_r_l_winRect, "L");
                };
                return _8W_L_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._8W_L_SS_Presenter = _8W_L_SS_Presenter;
            var _8W_R_SS_Presenter = (function (_super) {
                __extends(_8W_R_SS_Presenter, _super);
                function _8W_R_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _8W_R_SS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = (w - fr_thick * 2 - wfr_thick * 2 + wfr_thick * 3) / 8;
                    var winh = h - fr_thick * 2;
                    var l_l_l_x = fr_thick;
                    var l_l_r_x = l_l_l_x + winw - wfr_thick;
                    var l_r_l_x = l_l_r_x + winw + wfr_thick;
                    var l_r_r_x = l_r_l_x + winw - wfr_thick;
                    var r_l_l_x = l_r_r_x + winw + wfr_thick;
                    var r_l_r_x = r_l_l_x + winw - wfr_thick;
                    var r_r_l_x = r_l_r_x + winw + wfr_thick;
                    var r_r_r_x = r_r_l_x + winw - wfr_thick;
                    var l_l_l_winRect = new U1.Rectangle(l_l_l_x, fr_thick, winw, winh);
                    var l_l_r_winRect = new U1.Rectangle(l_l_r_x, fr_thick, winw, winh);
                    var l_r_l_winRect = new U1.Rectangle(l_r_l_x, fr_thick, winw, winh);
                    var l_r_r_winRect = new U1.Rectangle(l_r_r_x, fr_thick, winw, winh);
                    var r_l_l_winRect = new U1.Rectangle(r_l_l_x, fr_thick, winw, winh);
                    var r_l_r_winRect = new U1.Rectangle(r_l_r_x, fr_thick, winw, winh);
                    var r_r_l_winRect = new U1.Rectangle(r_r_l_x, fr_thick, winw, winh);
                    var r_r_r_winRect = new U1.Rectangle(r_r_r_x, fr_thick, winw, winh);
                    this.addWindow(l_l_l_winRect);
                    this.addWindow(l_l_r_winRect);
                    this.addWindow(l_r_l_winRect);
                    this.addWindow(l_r_r_winRect);
                    this.addWindow(r_l_l_winRect);
                    this.addWindow(r_l_r_winRect);
                    this.addWindow(r_r_l_winRect);
                    this.addWindow(r_r_r_winRect);
                    this.addVBar(new U1.Vector2(l_r_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addVBar(new U1.Vector2(r_l_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addVBar(new U1.Vector2(r_r_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addCenterArrowR(l_l_l_winRect);
                    this.addCenterArrowL(l_l_r_winRect);
                    this.addCenterArrowR(l_r_l_winRect);
                    this.addCenterArrowL(l_r_r_winRect);
                    this.addCenterArrowR(r_l_l_winRect);
                    this.addCenterArrowL(r_l_r_winRect);
                    this.addCenterArrowR(r_r_l_winRect);
                    this.addCenterArrowL(r_r_r_winRect);
                    this.addVent(l_l_r_winRect, 80);
                    this.addVent(l_r_r_winRect, 80);
                    this.addVent(r_l_r_winRect, 80);
                    this.addVent(r_r_r_winRect, 80);
                    this.addInsectNet(l_l_r_winRect, "R");
                    this.addInsectNet(l_r_r_winRect, "R");
                    this.addInsectNet(r_l_r_winRect, "R");
                    this.addInsectNet(r_r_r_winRect, "R");
                };
                return _8W_R_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._8W_R_SS_Presenter = _8W_R_SS_Presenter;
            var _4W_4W_L_SS_Presenter = (function (_super) {
                __extends(_4W_4W_L_SS_Presenter, _super);
                function _4W_4W_L_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_4W_L_SS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 + wfr_thick * 2) / 4;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + wfr_thick * 2) / 4;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - wfr_thick;
                    var u_l_r_y = u_l_l_y;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = u_l_r_x + u_l_r_w;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + u_r_l_w - wfr_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw;
                    var d_l_y_r = h1 + bar_thick / 2;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = h1 + bar_thick / 2;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_r_rect, 80);
                    this.addVent(u_r_l_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addVent(d_l_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_r_rect, "R");
                    this.addInsectNet(u_r_l_rect, "L");
                    this.addInsectNet(d_r_rect, "R");
                    this.addInsectNet(d_l_r_rect, "L");
                };
                return _4W_4W_L_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_4W_L_SS_Presenter = _4W_4W_L_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._8W_L] = _8W_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._8W_R] = _8W_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._8W_CS_L] = _8W_CS_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._8W_CS_R] = _8W_CS_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._8W_UB_L] = _8W_UB_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._8W_UB_R] = _8W_UB_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._8W_L_SS] = _8W_L_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._8W_R_SS] = _8W_R_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_4W_L_SS] = _4W_4W_L_SS_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelementpresenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _4W_1FIX_I_Presenter = (function (_super) {
                __extends(_4W_1FIX_I_Presenter, _super);
                function _4W_1FIX_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_1FIX_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw + bar_thick;
                    var d_l_y_r = h1 + bar_thick / 2;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = h1 + bar_thick / 2;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick + uwinh + bar_thick), dwinh, true, true);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addVent(d_l_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_l_rect, "L");
                    this.addInsectNet(d_l_r_rect, "L");
                };
                return _4W_1FIX_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_1FIX_I_Presenter = _4W_1FIX_I_Presenter;
            var _4W_2FIX_L_Presenter = (function (_super) {
                __extends(_4W_2FIX_L_Presenter, _super);
                function _4W_2FIX_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_2FIX_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinwHalf = (w - fr_thick * 2 - bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinwHalf;
                    var u_h = uwinh;
                    var u_r_x = fr_thick + uwinwHalf + bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinwHalf;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw + bar_thick;
                    var d_l_y_r = h1 + bar_thick / 2;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = h1 + bar_thick / 2;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinwHalf, true, true);
                    this.addHBar(new U1.Vector2(fr_thick + uwinwHalf + bar_thick, fr_thick + uwinh + bar_thick / 2), uwinwHalf, true, true);
                    //this.addVBar(new Vector2(w / 2, fr_thick + uwinh + bar_thick), dwinh, true, true);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addVent(d_l_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_l_rect, "L");
                    this.addInsectNet(d_l_r_rect, "L");
                };
                return _4W_2FIX_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_2FIX_L_Presenter = _4W_2FIX_L_Presenter;
            var _4W_1FIX_I_R_Presenter = (function (_super) {
                __extends(_4W_1FIX_I_R_Presenter, _super);
                function _4W_1FIX_I_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_1FIX_I_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw + bar_thick;
                    var d_l_y_r = h1 + bar_thick / 2;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = h1 + bar_thick / 2;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(d_r_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick + uwinh + bar_thick), dwinh, true, true);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(d_r_rect, 80);
                    this.addVent(d_r_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_r_rect, "R");
                    this.addInsectNet(d_r_r_rect, "R");
                };
                return _4W_1FIX_I_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_1FIX_I_R_Presenter = _4W_1FIX_I_R_Presenter;
            var _4W_2FIX_R_Presenter = (function (_super) {
                __extends(_4W_2FIX_R_Presenter, _super);
                function _4W_2FIX_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_2FIX_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinwHalf = (w - fr_thick * 2 - bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinwHalf;
                    var u_h = uwinh;
                    var u_r_x = fr_thick + uwinwHalf + bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinwHalf;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw + bar_thick;
                    var d_l_y_r = h1 + bar_thick / 2;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = h1 + bar_thick / 2;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addWindow(d_r_r_rect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinwHalf, true, true);
                    this.addHBar(new U1.Vector2(fr_thick + uwinwHalf + bar_thick, fr_thick + uwinh + bar_thick / 2), uwinwHalf, true, true);
                    //this.addVBar(new Vector2(w / 2, fr_thick + uwinh + bar_thick), dwinh, true, true);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(d_r_rect, 80);
                    this.addVent(d_r_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_r_rect, "R");
                    this.addInsectNet(d_r_r_rect, "R");
                };
                return _4W_2FIX_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_2FIX_R_Presenter = _4W_2FIX_R_Presenter;
            var _4W_4FIX_L_Presenter = (function (_super) {
                __extends(_4W_4FIX_L_Presenter, _super);
                function _4W_4FIX_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_4FIX_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinwHalf = (w - fr_thick * 2 - bar_thick) / 2;
                    var uwinwQuarter = (w - fr_thick * 2 - bar_thick * 3) / 4;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinwQuarter;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinwQuarter + bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinwQuarter;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = fr_thick + uwinwQuarter + bar_thick + uwinwQuarter + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinwQuarter;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = fr_thick + uwinwQuarter + bar_thick + uwinwQuarter + bar_thick + uwinwQuarter + bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinwQuarter;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw + bar_thick;
                    var d_l_y_r = h1 + bar_thick / 2;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = h1 + bar_thick / 2;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_l_l_rect, false);
                    this.addWindow(u_l_r_rect, false);
                    this.addWindow(u_r_l_rect, false);
                    this.addWindow(u_r_r_rect, false);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinwHalf, true, true);
                    this.addHBar(new U1.Vector2(fr_thick + uwinwHalf + bar_thick, fr_thick + uwinh + bar_thick / 2), uwinwHalf, true, true);
                    this.addVBar(new U1.Vector2(fr_thick + uwinwQuarter + bar_thick / 2, fr_thick), uwinh, true, true);
                    this.addVBar(new U1.Vector2(fr_thick + uwinwQuarter + bar_thick + uwinwQuarter + bar_thick + uwinwQuarter + bar_thick / 2, fr_thick), uwinh, true, true);
                    //this.addVBar(new Vector2(w / 2, fr_thick + uwinh + bar_thick), dwinh, true, true);
                    this.addCenterPlus(u_l_l_rect, 80);
                    this.addCenterPlus(u_l_r_rect, 80);
                    this.addCenterPlus(u_r_l_rect, 80);
                    this.addCenterPlus(u_r_r_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addVent(d_l_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_l_rect, "L");
                    this.addInsectNet(d_l_r_rect, "L");
                };
                return _4W_4FIX_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_4FIX_L_Presenter = _4W_4FIX_L_Presenter;
            var _4W_4FIX_R_Presenter = (function (_super) {
                __extends(_4W_4FIX_R_Presenter, _super);
                function _4W_4FIX_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_4FIX_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinwHalf = (w - fr_thick * 2 - bar_thick) / 2;
                    var uwinwQuarter = (w - fr_thick * 2 - bar_thick * 3) / 4;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinwQuarter;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinwQuarter + bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinwQuarter;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = fr_thick + uwinwQuarter + bar_thick + uwinwQuarter + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinwQuarter;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = fr_thick + uwinwQuarter + bar_thick + uwinwQuarter + bar_thick + uwinwQuarter + bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinwQuarter;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw + bar_thick;
                    var d_l_y_r = h1 + bar_thick / 2;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = h1 + bar_thick / 2;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_l_l_rect, false);
                    this.addWindow(u_l_r_rect, false);
                    this.addWindow(u_r_l_rect, false);
                    this.addWindow(u_r_r_rect, false);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh + bar_thick + dwinh, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinwHalf, true, true);
                    this.addHBar(new U1.Vector2(fr_thick + uwinwHalf + bar_thick, fr_thick + uwinh + bar_thick / 2), uwinwHalf, true, true);
                    this.addVBar(new U1.Vector2(fr_thick + uwinwQuarter + bar_thick / 2, fr_thick), uwinh, true, true);
                    this.addVBar(new U1.Vector2(fr_thick + uwinwQuarter + bar_thick + uwinwQuarter + bar_thick + uwinwQuarter + bar_thick / 2, fr_thick), uwinh, true, true);
                    //this.addVBar(new Vector2(w / 2, fr_thick + uwinh + bar_thick), dwinh, true, true);
                    this.addCenterPlus(u_l_l_rect, 80);
                    this.addCenterPlus(u_l_r_rect, 80);
                    this.addCenterPlus(u_r_l_rect, 80);
                    this.addCenterPlus(u_r_r_rect, 80);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(d_r_rect, 80);
                    this.addVent(d_r_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_r_rect, "R");
                    this.addInsectNet(d_r_r_rect, "R");
                };
                return _4W_4FIX_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_4FIX_R_Presenter = _4W_4FIX_R_Presenter;
            var _4W_2F_T_L_FS_Presenter = (function (_super) {
                __extends(_4W_2F_T_L_FS_Presenter, _super);
                function _4W_2F_T_L_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_2F_T_L_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick) / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = u_l_l_x + u_l_l_w - wfr_thick;
                    var u_l_r_y = u_l_l_y;
                    var u_l_r_w = u_l_l_w;
                    var u_l_r_h = u_l_l_h;
                    var u_r_l_x = u_l_r_x + u_l_r_w + bar_thick;
                    var u_r_l_y = u_l_r_y;
                    var u_r_l_w = u_l_r_w;
                    var u_r_l_h = u_l_r_h;
                    var u_r_r_x = u_r_l_x + u_r_l_w - wfr_thick;
                    var u_r_r_y = u_r_l_y;
                    var u_r_r_w = u_r_l_w;
                    var u_r_r_h = u_r_l_h;
                    var ullwinRect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var ulrwinRect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var urlwinRect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var urrwinRect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var dlwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, dwinw, dwinh);
                    var drwinRect = new U1.Rectangle(fr_thick + dwinw + bar_thick, h - h1 + bar_thick / 2, dwinw, dwinh);
                    this.addWindow(ulrwinRect);
                    this.addWindow(ullwinRect);
                    this.addWindow(urrwinRect);
                    this.addWindow(urlwinRect);
                    this.addWindow(dlwinRect, false);
                    this.addWindow(drwinRect, false);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), h - fr_thick * 2, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), uwinw * 2 - wfr_thick, true, true);
                    this.addHBar(new U1.Vector2(u_r_l_x, h - h1), uwinw * 2 - wfr_thick, true, true);
                    this.addCenterArrowR(ullwinRect);
                    this.addCenterArrowL(ulrwinRect);
                    this.addCenterArrowR(urlwinRect);
                    this.addCenterArrowL(urrwinRect);
                    this.addCenterPlus(dlwinRect, 80);
                    this.addCenterPlus(drwinRect, 80);
                    this.addVent(ullwinRect, 80);
                    this.addVent(urlwinRect, 80);
                    this.addInsectNet(ullwinRect, "L");
                    this.addInsectNet(urlwinRect, "L");
                };
                return _4W_2F_T_L_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_2F_T_L_FS_Presenter = _4W_2F_T_L_FS_Presenter;
            var _4W_2F_T_R_FS_Presenter = (function (_super) {
                __extends(_4W_2F_T_R_FS_Presenter, _super);
                function _4W_2F_T_R_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_2F_T_R_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick) / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = u_l_l_x + u_l_l_w - wfr_thick;
                    var u_l_r_y = u_l_l_y;
                    var u_l_r_w = u_l_l_w;
                    var u_l_r_h = u_l_l_h;
                    var u_r_l_x = u_l_r_x + u_l_r_w + bar_thick;
                    var u_r_l_y = u_l_r_y;
                    var u_r_l_w = u_l_r_w;
                    var u_r_l_h = u_l_r_h;
                    var u_r_r_x = u_r_l_x + u_r_l_w - wfr_thick;
                    var u_r_r_y = u_r_l_y;
                    var u_r_r_w = u_r_l_w;
                    var u_r_r_h = u_r_l_h;
                    var ullwinRect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var ulrwinRect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var urlwinRect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var urrwinRect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var dlwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, dwinw, dwinh);
                    var drwinRect = new U1.Rectangle(fr_thick + dwinw + bar_thick, h - h1 + bar_thick / 2, dwinw, dwinh);
                    this.addWindow(ullwinRect);
                    this.addWindow(ulrwinRect);
                    this.addWindow(urlwinRect);
                    this.addWindow(urrwinRect);
                    this.addWindow(dlwinRect, false);
                    this.addWindow(drwinRect, false);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), h - fr_thick * 2, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), uwinw * 2 - wfr_thick, true, true);
                    this.addHBar(new U1.Vector2(u_r_l_x, h - h1), uwinw * 2 - wfr_thick, true, true);
                    this.addCenterArrowR(ullwinRect);
                    this.addCenterArrowL(ulrwinRect);
                    this.addCenterArrowR(urlwinRect);
                    this.addCenterArrowL(urrwinRect);
                    this.addCenterPlus(dlwinRect, 80);
                    this.addCenterPlus(drwinRect, 80);
                    this.addVent(ulrwinRect, 80);
                    this.addVent(urrwinRect, 80);
                    this.addInsectNet(ulrwinRect, "R");
                    this.addInsectNet(urrwinRect, "R");
                };
                return _4W_2F_T_R_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_2F_T_R_FS_Presenter = _4W_2F_T_R_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_1FIX_I] = _4W_1FIX_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_2FIX_L] = _4W_2FIX_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_1FIX_I_R] = _4W_1FIX_I_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_2FIX_R] = _4W_2FIX_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_4FIX_L] = _4W_4FIX_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_4FIX_R] = _4W_4FIX_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_2F_T_L_FS] = _4W_2F_T_L_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_2F_T_R_FS] = _4W_2F_T_R_FS_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelementpresenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _3W_1FIX_I_Presenter = (function (_super) {
                __extends(_3W_1FIX_I_Presenter, _super);
                function _3W_1FIX_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _3W_1FIX_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + wfr_thick * 2) / 3;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_c_x = fr_thick + dwinw - bar_thick;
                    var d_c_y = h1 + bar_thick / 2;
                    var d_c_w = dwinw;
                    var d_c_h = dwinh;
                    var d_r_x = fr_thick + dwinw + dwinw - bar_thick * 2;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_c_rect = new U1.Rectangle(d_c_x, d_c_y, d_c_w, d_c_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_c_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    //this.addVBar(new Vector2(fr_thick + dwinw + bar_thick / 2, fr_thick + uwinh + bar_thick), dwinh, false, false);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterArrowLR(d_c_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(d_l_rect, "L");
                    this.addInsectNet(d_r_rect, "R");
                };
                return _3W_1FIX_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3W_1FIX_I_Presenter = _3W_1FIX_I_Presenter;
            var _3W_UB_1FIX_I_Presenter = (function (_super) {
                __extends(_3W_UB_1FIX_I_Presenter, _super);
                function _3W_UB_1FIX_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _3W_UB_1FIX_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var w1 = winElm.W1;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dcwinw = w - w1 * 2;
                    var dlrwinw = w1;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dlrwinw;
                    var d_l_h = dwinh;
                    var d_c_x = fr_thick + dlrwinw - bar_thick;
                    var d_c_y = h1 + bar_thick / 2;
                    var d_c_w = dcwinw;
                    var d_c_h = dwinh;
                    var d_r_x = fr_thick + dlrwinw + dcwinw - bar_thick * 2;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dlrwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_c_rect = new U1.Rectangle(d_c_x, d_c_y, d_c_w, d_c_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_c_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), uwinw, true, true);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterArrowLR(d_c_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, fr_thick, w1 + fr_thick, 0);
                    this.addBottomDim(lb, w - w1 - fr_thick, w - fr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(d_l_rect, "L");
                    this.addInsectNet(d_r_rect, "R");
                    //console.log(w + "," + w1 + "," + h + "," + h1);
                };
                return _3W_UB_1FIX_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3W_UB_1FIX_I_Presenter = _3W_UB_1FIX_I_Presenter;
            var _3W_UB_2F_I_U_FS_Presenter = (function (_super) {
                __extends(_3W_UB_2F_I_U_FS_Presenter, _super);
                function _3W_UB_2F_I_U_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _3W_UB_2F_I_U_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var w1 = winElm.W1;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dcwinw = w - w1 * 2;
                    var dlrwinw = w1;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = uwinw;
                    var u_l_h = uwinh;
                    var u_r_x = u_l_x + uwinw + bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dlrwinw;
                    var d_l_h = dwinh;
                    var d_c_x = fr_thick + dlrwinw - bar_thick;
                    var d_c_y = h1 + bar_thick / 2;
                    var d_c_w = dcwinw;
                    var d_c_h = dwinh;
                    var d_r_x = fr_thick + dlrwinw + dcwinw - bar_thick * 2;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dlrwinw;
                    var d_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_c_rect = new U1.Rectangle(d_c_x, d_c_y, d_c_w, d_c_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_l_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_c_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh, true, true);
                    this.addCenterPlus(u_l_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterArrowLR(d_c_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, fr_thick, w1 + fr_thick, 0);
                    this.addBottomDim(lb, w - w1 - fr_thick, w - fr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(d_l_rect, "L");
                    this.addInsectNet(d_r_rect, "R");
                    //console.log(w + "," + w1 + "," + h + "," + h1);
                };
                return _3W_UB_2F_I_U_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3W_UB_2F_I_U_FS_Presenter = _3W_UB_2F_I_U_FS_Presenter;
            var _3W_4F_UB_FS_Presenter = (function (_super) {
                __extends(_3W_4F_UB_FS_Presenter, _super);
                function _3W_4F_UB_FS_Presenter() {
                    _super.apply(this, arguments);
                }
                _3W_4F_UB_FS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var w1 = winElm.W1;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var ucwinw = w - w1 * 2;
                    var ulrwinw = w1;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick * 3) / 4;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = ulrwinw;
                    var u_l_h = uwinh;
                    var u_c_x = fr_thick + ulrwinw - bar_thick;
                    var u_c_y = u_l_y;
                    var u_c_w = ucwinw;
                    var u_c_h = uwinh;
                    var u_r_x = fr_thick + ulrwinw + ucwinw - bar_thick * 2;
                    var u_r_y = u_c_y;
                    var u_r_w = ulrwinw;
                    var u_r_h = uwinh;
                    var d_l_l_x = fr_thick;
                    var d_l_l_y = h - h1 + bar_thick / 2;
                    var d_l_l_w = dwinw;
                    var d_l_l_h = dwinh;
                    var d_l_r_x = d_l_l_x + dwinw + bar_thick;
                    var d_l_r_y = d_l_l_y;
                    var d_l_r_w = dwinw;
                    var d_l_r_h = dwinh;
                    var d_r_l_x = d_l_r_x + dwinw + bar_thick;
                    var d_r_l_y = d_l_l_y;
                    var d_r_l_w = dwinw;
                    var d_r_l_h = dwinh;
                    var d_r_r_x = d_r_l_x + dwinw + bar_thick;
                    var d_r_r_y = d_l_l_y;
                    var d_r_r_w = dwinw;
                    var d_r_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_c_rect = new U1.Rectangle(u_c_x, u_c_y, u_c_w, u_c_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_l_rect = new U1.Rectangle(d_l_l_x, d_l_l_y, d_l_l_w, d_l_l_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_r_x, d_l_r_y, d_l_r_w, d_l_r_h);
                    var d_r_l_rect = new U1.Rectangle(d_r_l_x, d_r_l_y, d_r_l_w, d_r_l_h);
                    var d_r_r_rect = new U1.Rectangle(d_r_r_x, d_r_r_y, d_r_r_w, d_r_r_h);
                    this.addWindow(u_c_rect);
                    this.addWindow(u_r_rect);
                    this.addWindow(u_l_rect);
                    this.addWindow(d_l_l_rect, false);
                    this.addWindow(d_l_r_rect, false);
                    this.addWindow(d_r_l_rect, false);
                    this.addWindow(d_r_r_rect, false);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(d_l_l_x + dwinw + bar_thick / 2, d_l_l_y), dwinh, true, true);
                    this.addVBar(new U1.Vector2(w / 2, d_l_l_y), dwinh, true, true);
                    this.addVBar(new U1.Vector2(d_r_l_x + dwinw + bar_thick / 2, d_l_l_y), dwinh, true, true);
                    this.addCenterArrowLR(u_c_rect);
                    this.addCenterArrowR(u_l_rect);
                    this.addCenterArrowL(u_r_rect);
                    this.addCenterPlus(d_l_l_rect, 80);
                    this.addCenterPlus(d_l_r_rect, 80);
                    this.addCenterPlus(d_r_l_rect, 80);
                    this.addCenterPlus(d_r_r_rect, 80);
                    this.addVent(u_l_rect, 80);
                    this.addVent(u_r_rect, 80);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, fr_thick, w1 + fr_thick, 0);
                    this.addBottomDim(lb, w - w1 - fr_thick, w - fr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(u_l_rect, "L");
                    this.addInsectNet(u_r_rect, "R");
                };
                return _3W_4F_UB_FS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3W_4F_UB_FS_Presenter = _3W_4F_UB_FS_Presenter;
            var _3W_3W_UB_SS_Presenter = (function (_super) {
                __extends(_3W_3W_UB_SS_Presenter, _super);
                function _3W_3W_UB_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _3W_3W_UB_SS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var w1 = winElm.W1;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var ucwinw = w - w1 * 2;
                    var ulrwinw = w1;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dcwinw = w - w1 * 2;
                    var dlrwinw = w1;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = ulrwinw;
                    var u_l_h = uwinh;
                    var u_c_x = fr_thick + ulrwinw - bar_thick;
                    var u_c_y = u_l_y;
                    var u_c_w = ucwinw;
                    var u_c_h = uwinh;
                    var u_r_x = fr_thick + ulrwinw + ucwinw - bar_thick * 2;
                    var u_r_y = u_c_y;
                    var u_r_w = ulrwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h - h1 + bar_thick / 2;
                    var d_l_w = dlrwinw;
                    var d_l_h = dwinh;
                    var d_c_x = d_l_x + dlrwinw - bar_thick;
                    var d_c_y = d_l_y;
                    var d_c_w = dcwinw;
                    var d_c_h = dwinh;
                    var d_r_x = d_c_x + d_c_w - bar_thick;
                    var d_r_y = d_c_y;
                    var d_r_w = dlrwinw;
                    var d_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_c_rect = new U1.Rectangle(u_c_x, u_c_y, u_c_w, u_c_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_c_rect = new U1.Rectangle(d_c_x, d_c_y, d_c_w, d_c_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_c_rect);
                    this.addWindow(u_l_rect);
                    this.addWindow(u_r_rect);
                    this.addWindow(d_c_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addCenterArrowLR(u_c_rect);
                    this.addCenterArrowR(u_l_rect);
                    this.addCenterArrowL(u_r_rect);
                    this.addCenterArrowLR(d_c_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(u_l_rect, 80);
                    this.addVent(u_r_rect, 80);
                    this.addVent(d_l_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, fr_thick, w1 + fr_thick, 0);
                    this.addBottomDim(lb, w - w1 - fr_thick, w - fr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(u_l_rect, "L");
                    this.addInsectNet(u_r_rect, "R");
                    this.addInsectNet(d_l_rect, "L");
                    this.addInsectNet(d_r_rect, "R");
                };
                return _3W_3W_UB_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3W_3W_UB_SS_Presenter = _3W_3W_UB_SS_Presenter;
            var _3W_3F_D_Presenter = (function (_super) {
                __extends(_3W_3F_D_Presenter, _super);
                function _3W_3F_D_Presenter() {
                    _super.apply(this, arguments);
                }
                _3W_3F_D_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var w1 = winElm.W1;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var ulrwinw = w1;
                    var ucwinw = w - (fr_thick * 2 + ulrwinw * 2 - wfr_thick * 2);
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dlrwinw = w1 - bar_thick / 2;
                    var dcwinw = w - (fr_thick * 2 + dlrwinw * 2 + bar_thick * 2);
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = ulrwinw;
                    var u_l_h = uwinh;
                    var u_c_x = fr_thick + ulrwinw - bar_thick;
                    var u_c_y = u_l_y;
                    var u_c_w = ucwinw;
                    var u_c_h = uwinh;
                    var u_r_x = u_c_x + u_c_w - bar_thick;
                    var u_r_y = u_c_y;
                    var u_r_w = ulrwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h - h1 + bar_thick / 2;
                    var d_l_w = dlrwinw;
                    var d_l_h = dwinh;
                    var d_c_x = d_l_x + dlrwinw + bar_thick;
                    var d_c_y = d_l_y;
                    var d_c_w = dcwinw;
                    var d_c_h = dwinh;
                    var d_r_x = d_c_x + d_c_w + bar_thick;
                    var d_r_y = d_c_y;
                    var d_r_w = dlrwinw;
                    var d_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_c_rect = new U1.Rectangle(u_c_x, u_c_y, u_c_w, u_c_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_c_rect = new U1.Rectangle(d_c_x, d_c_y, d_c_w, d_c_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_c_rect);
                    this.addWindow(u_l_rect);
                    this.addWindow(u_r_rect);
                    this.addWindow(d_c_rect, false);
                    this.addWindow(d_l_rect, false);
                    this.addWindow(d_r_rect, false);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(d_c_x - bar_thick / 2, d_c_y), d_c_h, true, true);
                    this.addVBar(new U1.Vector2(d_r_x - bar_thick / 2, d_c_y), d_c_h, true, true);
                    this.addCenterArrowLR(u_c_rect);
                    this.addCenterArrowR(u_l_rect);
                    this.addCenterArrowL(u_r_rect);
                    this.addCenterPlus(d_c_rect, 80);
                    this.addCenterPlus(d_l_rect, 80);
                    this.addCenterPlus(d_r_rect, 80);
                    this.addVent(u_l_rect, 80);
                    this.addVent(u_r_rect, 80);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, fr_thick, fr_thick + w1, 0);
                    this.addBottomDim(lb, w - w1 - fr_thick, w - fr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(u_l_rect, "L");
                    this.addInsectNet(u_r_rect, "R");
                    //this.OnClear();
                    //var winElm = this.WinElem;
                    //var w = winElm.W;
                    //var w1 = winElm.W1;
                    //var h = winElm.H;
                    //var h1 = winElm.H1;
                    //var fr_thick = this.frameThick();
                    //var wfr_thick = this.winFrameThick();
                    //var bar_thick = this.barThick();
                    //var lt = new Vector2(0, 0);
                    //var rt = new Vector2(w, 0);
                    //var lb = new Vector2(0, h);
                    //var rb = new Vector2(w, h);
                    //this.addFrame(new Rectangle(0, 0, w, h));
                    //var ulrwinw = w1 - bar_thick / 2;
                    //var ucwinw = w - w1 * 2 + bar_thick;
                    //var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    //var dlrwinw = w1 - fr_thick - bar_thick / 2;
                    //var dcwinw = w - w1 * 2 - bar_thick;
                    //var dwinh = h1 - fr_thick - bar_thick / 2;
                    //var u_l_x = fr_thick;
                    //var u_l_y = fr_thick;
                    //var u_l_w = ulrwinw;
                    //var u_l_h = uwinh;
                    //var u_c_x = fr_thick + ulrwinw - bar_thick;
                    //var u_c_y = u_l_y
                    //var u_c_w = ucwinw;
                    //var u_c_h = uwinh;
                    //var u_r_x = u_c_x + u_c_w - bar_thick;
                    //var u_r_y = u_c_y;
                    //var u_r_w = ulrwinw;
                    //var u_r_h = uwinh;
                    //var d_l_x = fr_thick;
                    //var d_l_y = h - h1 + bar_thick / 2;
                    //var d_l_w = dlrwinw;
                    //var d_l_h = dwinh;
                    //var d_c_x = d_l_x + dlrwinw + bar_thick;
                    //var d_c_y = d_l_y;
                    //var d_c_w = dcwinw;
                    //var d_c_h = dwinh;
                    //var d_r_x = d_c_x + d_c_w + bar_thick;
                    //var d_r_y = d_c_y;
                    //var d_r_w = dlrwinw;
                    //var d_r_h = dwinh;
                    //var u_l_rect = new Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    //var u_c_rect = new Rectangle(u_c_x, u_c_y, u_c_w, u_c_h);
                    //var u_r_rect = new Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    //var d_l_rect = new Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    //var d_c_rect = new Rectangle(d_c_x, d_c_y, d_c_w, d_c_h);
                    //var d_r_rect = new Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    //this.addWindow(u_c_rect);
                    //this.addWindow(u_l_rect);
                    //this.addWindow(u_r_rect);
                    //this.addWindow(d_c_rect, false);
                    //this.addWindow(d_l_rect, false);
                    //this.addWindow(d_r_rect, false);
                    //this.addHBar(new Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    //this.addVBar(new Vector2(w1, d_c_y), d_c_h, true, true);
                    //this.addVBar(new Vector2(d_r_x - bar_thick / 2, d_c_y), d_c_h, true, true);
                    //this.addCenterArrowLR(u_c_rect);
                    //this.addCenterArrowR(u_l_rect);
                    //this.addCenterArrowL(u_r_rect);
                    //this.addCenterPlus(d_c_rect, 80);
                    //this.addCenterPlus(d_l_rect, 80);
                    //this.addCenterPlus(d_r_rect, 80);
                    //this.addVent(u_l_rect, 80);
                    //this.addVent(u_r_rect, 80);
                    //this.addLeftDim(lt, h - h1, h, 0);
                    //this.addLeftDim(lt, 0, h, 1);
                    //this.addBottomDim(lb, 0, w1, 0);
                    //this.addBottomDim(lb, w - w1, w, 0);
                    //this.addBottomDim(lb, 0, w, 1);
                    //this.addInsectNet(u_l_rect, "L");
                    //this.addInsectNet(u_r_rect, "R");
                };
                return _3W_3F_D_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3W_3F_D_Presenter = _3W_3F_D_Presenter;
            var _3W_3F_U_Presenter = (function (_super) {
                __extends(_3W_3F_U_Presenter, _super);
                function _3W_3F_U_Presenter() {
                    _super.apply(this, arguments);
                }
                _3W_3F_U_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var w1 = winElm.W1;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var ulrwinw = w1 - bar_thick / 2;
                    var ucwinw = w - (fr_thick * 2 + ulrwinw * 2 + bar_thick * 2);
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dlrwinw = w1;
                    var dcwinw = w - (fr_thick * 2 + dlrwinw * 2 - wfr_thick * 2);
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = ulrwinw;
                    var u_l_h = uwinh;
                    var u_c_x = u_l_x + u_l_w + bar_thick;
                    var u_c_y = fr_thick;
                    var u_c_w = ucwinw;
                    var u_c_h = uwinh;
                    var u_r_x = u_c_x + u_c_w + bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = ulrwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dlrwinw;
                    var d_l_h = dwinh;
                    var d_c_x = d_l_x + d_l_w - bar_thick;
                    var d_c_y = h1 + bar_thick / 2;
                    var d_c_w = dcwinw;
                    var d_c_h = dwinh;
                    var d_r_x = d_c_x + d_c_w - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dlrwinw;
                    var d_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_c_rect = new U1.Rectangle(u_c_x, u_c_y, u_c_w, u_c_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_c_rect = new U1.Rectangle(d_c_x, d_c_y, d_c_w, d_c_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_l_rect, false);
                    this.addWindow(u_c_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_c_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(u_c_x - bar_thick / 2, fr_thick), uwinh, true, true);
                    this.addVBar(new U1.Vector2(u_r_x - bar_thick / 2, fr_thick), uwinh, true, true);
                    this.addCenterPlus(u_l_rect, 80);
                    this.addCenterPlus(u_c_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterArrowLR(d_c_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(d_l_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, fr_thick, fr_thick + w1, 0);
                    this.addBottomDim(lb, w - w1 - fr_thick, w - fr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(d_l_rect, "L");
                    this.addInsectNet(d_r_rect, "R");
                    //this.OnClear();
                    //var winElm = this.WinElem;
                    //var w = winElm.W;
                    //var w1 = winElm.W1;
                    //var h = winElm.H;
                    //var h1 = winElm.H1;
                    //var fr_thick = this.frameThick();
                    //var wfr_thick = this.winFrameThick();
                    //var bar_thick = this.barThick();
                    //var lt = new Vector2(0, 0);
                    //var rt = new Vector2(w, 0);
                    //var lb = new Vector2(0, h);
                    //var rb = new Vector2(w, h);
                    //this.addFrame(new Rectangle(0, 0, w, h));
                    //var ulrwinw = w1 - fr_thick - bar_thick / 2;
                    //var ucwinw = w - w1 * 2 - bar_thick;
                    //var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dlrwinw = w1 - bar_thick / 2;
                    //var dcwinw = w - w1 * 2 + bar_thick;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    //var u_l_x = fr_thick;
                    //var u_l_y = fr_thick;
                    //var u_l_w = ulrwinw;
                    //var u_l_h = uwinh;
                    //var u_c_x = u_l_x + u_l_w + bar_thick;
                    //var u_c_y = fr_thick;
                    //var u_c_w = ucwinw;
                    //var u_c_h = uwinh;
                    //var u_r_x = u_c_x + u_c_w + bar_thick;
                    //var u_r_y = fr_thick;
                    //var u_r_w = ulrwinw;
                    //var u_r_h = uwinh;
                    //var d_l_x = fr_thick;
                    //var d_l_y = h1 + bar_thick / 2;
                    //var d_l_w = dlrwinw;
                    //var d_l_h = dwinh;
                    //var d_c_x = d_l_x + d_l_w - bar_thick;
                    //var d_c_y = h1 + bar_thick / 2;
                    //var d_c_w = dcwinw;
                    //var d_c_h = dwinh;
                    //var d_r_x = d_c_x + d_c_w - bar_thick;
                    //var d_r_y = h1 + bar_thick / 2;
                    //var d_r_w = dlrwinw;
                    //var d_r_h = dwinh;
                    //var u_l_rect = new Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    //var u_c_rect = new Rectangle(u_c_x, u_c_y, u_c_w, u_c_h);
                    //var u_r_rect = new Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    //var d_l_rect = new Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    //var d_c_rect = new Rectangle(d_c_x, d_c_y, d_c_w, d_c_h);
                    //var d_r_rect = new Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    //this.addWindow(u_l_rect, false);
                    //this.addWindow(u_c_rect, false);
                    //this.addWindow(u_r_rect, false);
                    //this.addWindow(d_c_rect);
                    //this.addWindow(d_r_rect);
                    //this.addWindow(d_l_rect);
                    //this.addHBar(new Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    //this.addVBar(new Vector2(w1, fr_thick), uwinh, true, true);
                    //this.addVBar(new Vector2(u_r_x - bar_thick / 2, fr_thick), uwinh, true, true);
                    //this.addCenterPlus(u_l_rect, 80);
                    //this.addCenterPlus(u_c_rect, 80);
                    //this.addCenterPlus(u_r_rect, 80);
                    //this.addCenterArrowLR(d_c_rect);
                    //this.addCenterArrowR(d_l_rect);
                    //this.addCenterArrowL(d_r_rect);
                    //this.addVent(d_l_rect, 80);
                    //this.addVent(d_r_rect, 80);
                    //this.addLeftDim(lt, 0, h1, 0);
                    //this.addLeftDim(lt, 0, h, 1);
                    //this.addBottomDim(lb, 0, w1, 0);
                    //this.addBottomDim(lb, w - w1, w, 0);
                    //this.addBottomDim(lb, 0, w, 1);
                    //this.addInsectNet(d_l_rect, "L");
                    //this.addInsectNet(d_r_rect, "R");
                };
                return _3W_3F_U_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3W_3F_U_Presenter = _3W_3F_U_Presenter;
            var _3W_4W_UB_SS_Presenter = (function (_super) {
                __extends(_3W_4W_UB_SS_Presenter, _super);
                function _3W_4W_UB_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _3W_4W_UB_SS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var w1 = winElm.W1;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dcwinw = w - w1 * 2;
                    var dlrwinw = w1;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = u_l_l_x + u_l_l_w - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = u_l_r_x + u_l_r_w + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + u_r_l_w - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    //var d_l_y = u_l_l_y + uwinh + bar_thick;
                    var d_l_y = h - h1 + bar_thick / 2;
                    var d_l_w = dlrwinw;
                    var d_l_h = dwinh;
                    var d_c_x = fr_thick + dlrwinw - bar_thick;
                    var d_c_y = d_l_y;
                    var d_c_w = dcwinw;
                    var d_c_h = dwinh;
                    var d_r_x = fr_thick + dlrwinw + dcwinw - bar_thick * 2;
                    var d_r_y = d_c_y;
                    var d_r_w = dlrwinw;
                    var d_r_h = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_c_rect = new U1.Rectangle(d_c_x, d_c_y, d_c_w, d_c_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(d_c_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowLR(d_c_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(u_l_l_rect, 80);
                    this.addVent(u_r_r_rect, 80);
                    this.addVent(d_l_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, fr_thick, w1 + fr_thick, 0);
                    this.addBottomDim(lb, w - w1 - fr_thick, w - fr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(u_l_l_rect, "L");
                    this.addInsectNet(u_r_r_rect, "R");
                    this.addInsectNet(d_l_rect, "L");
                    this.addInsectNet(d_r_rect, "R");
                };
                return _3W_4W_UB_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3W_4W_UB_SS_Presenter = _3W_4W_UB_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3W_1FIX_I] = _3W_1FIX_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3W_UB_1FIX_I] = _3W_UB_1FIX_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3W_UB_2F_I_U_FS] = _3W_UB_2F_I_U_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3W_4F_UB_FS] = _3W_4F_UB_FS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3W_3W_UB_SS] = _3W_3W_UB_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3W_3F_D] = _3W_3F_D_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3W_3F_U] = _3W_3F_U_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3W_4W_UB_SS] = _3W_4W_UB_SS_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelementpresenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _3W_1_2_1_Presenter = (function (_super) {
                __extends(_3W_1_2_1_Presenter, _super);
                function _3W_1_2_1_Presenter() {
                    _super.apply(this, arguments);
                }
                _3W_1_2_1_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w / 2 - fr_thick;
                    var winh = h - fr_thick * 2;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, w / 4 - fr_thick + wfr_thick, winh);
                    var rwinRect = new U1.Rectangle(w / 4 * 3 - wfr_thick, fr_thick, w / 4 - fr_thick + wfr_thick, winh);
                    var cwinRect = new U1.Rectangle(w / 4, fr_thick, w / 2, winh);
                    this.addWindow(cwinRect);
                    this.addWindow(rwinRect);
                    this.addWindow(lwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addCenterArrowLR(cwinRect);
                    this.addVent(lwinRect, 80);
                    this.addVent(rwinRect, 80);
                    this.addInsectNet(rwinRect, "R");
                    this.addInsectNet(lwinRect, "L");
                };
                return _3W_1_2_1_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3W_1_2_1_Presenter = _3W_1_2_1_Presenter;
            var _3W_1_1_1_Presenter = (function (_super) {
                __extends(_3W_1_1_1_Presenter, _super);
                function _3W_1_1_1_Presenter() {
                    _super.apply(this, arguments);
                }
                _3W_1_1_1_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winh = h - fr_thick * 2;
                    var y = fr_thick;
                    var l_x = fr_thick;
                    var r_x = w / 3 * 2 - wfr_thick;
                    var c_x = w / 3;
                    var lr_w = w / 3 - fr_thick + wfr_thick;
                    var c_w = w / 3;
                    var lwinRect = new U1.Rectangle(l_x, y, lr_w, winh);
                    var rwinRect = new U1.Rectangle(r_x, y, lr_w, winh);
                    var cwinRect = new U1.Rectangle(c_x, y, c_w, winh);
                    this.addWindow(cwinRect);
                    this.addWindow(rwinRect);
                    this.addWindow(lwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addCenterArrowLR(cwinRect);
                    this.addVent(lwinRect, 80);
                    this.addVent(rwinRect, 80);
                    this.addInsectNet(rwinRect, "R");
                    this.addInsectNet(lwinRect, "L");
                };
                return _3W_1_1_1_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3W_1_1_1_Presenter = _3W_1_1_1_Presenter;
            var _3W_UB_Presenter = (function (_super) {
                __extends(_3W_UB_Presenter, _super);
                function _3W_UB_Presenter() {
                    _super.apply(this, arguments);
                }
                _3W_UB_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var w1 = winElm.W1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var winh = h - fr_thick * 2;
                    var y = fr_thick;
                    var l_x = fr_thick;
                    var r_x = w - w1 - wfr_thick;
                    var c_x = w1;
                    var lr_w = w1 - fr_thick + wfr_thick;
                    var c_w = w - w1 * 2;
                    var lwinRect = new U1.Rectangle(l_x, y, lr_w, winh);
                    var rwinRect = new U1.Rectangle(r_x, y, lr_w, winh);
                    var cwinRect = new U1.Rectangle(c_x, y, c_w, winh);
                    this.addWindow(cwinRect);
                    this.addWindow(rwinRect);
                    this.addWindow(lwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addCenterArrowLR(cwinRect);
                    this.addVent(lwinRect, 80);
                    this.addVent(rwinRect, 80);
                    this.addInsectNet(rwinRect, "R");
                    this.addInsectNet(lwinRect, "L");
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, wfr_thick, w1 + wfr_thick, 0);
                    this.addBottomDim(lb, w - w1 - wfr_thick, w - wfr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                };
                return _3W_UB_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3W_UB_Presenter = _3W_UB_Presenter;
            var _3W_UB_CS_Presenter = (function (_super) {
                __extends(_3W_UB_CS_Presenter, _super);
                function _3W_UB_CS_Presenter() {
                    _super.apply(this, arguments);
                }
                _3W_UB_CS_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var w1 = winElm.W1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var winh = h - fr_thick * 2;
                    var y = fr_thick;
                    var l_x = fr_thick;
                    var r_x = w - w1 - wfr_thick;
                    var c_x = w1;
                    var lr_w = w1 - fr_thick + wfr_thick;
                    var c_w = w - w1 * 2;
                    var lwinRect = new U1.Rectangle(l_x, y, lr_w, winh);
                    var rwinRect = new U1.Rectangle(r_x, y, lr_w, winh);
                    var cwinRect = new U1.Rectangle(c_x, y, c_w, winh);
                    this.addWindow(cwinRect);
                    this.addWindow(rwinRect);
                    this.addWindow(lwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addCenterArrowLR(cwinRect);
                    this.addVent(lwinRect, 80);
                    this.addVent(rwinRect, 80);
                    //this.addCs(lwinRect);
                    //this.addCs(cwinRect);
                    //this.addCs(rwinRect);
                    this.addHBar(new U1.Vector2(fr_thick + wfr_thick, fr_thick + winh * 0.75 - wfr_thick / 2), lr_w - wfr_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(fr_thick + lr_w, fr_thick + winh * 0.75 - wfr_thick / 2), c_w - wfr_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(w - lr_w, fr_thick + winh * 0.75 - wfr_thick / 2), lr_w - wfr_thick * 2, false, false);
                    this.addInsectNet(rwinRect, "R");
                    this.addInsectNet(lwinRect, "L");
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, wfr_thick, w1 + wfr_thick, 0);
                    this.addBottomDim(lb, w - w1 - wfr_thick, w - wfr_thick, 0);
                    this.addBottomDim(lb, 0, w, 1);
                };
                return _3W_UB_CS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3W_UB_CS_Presenter = _3W_UB_CS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3W_1_2_1] = _3W_1_2_1_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3W_1_1_1] = _3W_1_1_1_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3W_UB] = _3W_UB_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3W_UB_CS] = _3W_UB_CS_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelementpresenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _6W_L_SS_Presenter = (function (_super) {
                __extends(_6W_L_SS_Presenter, _super);
                function _6W_L_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _6W_L_SS_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = (w - fr_thick * 2 - wfr_thick * 2 + wfr_thick * 3) / 6;
                    var winh = h - fr_thick * 2;
                    var l_l_x = fr_thick;
                    var l_r_x = l_l_x + winw - wfr_thick;
                    var c_l_x = l_r_x + winw + wfr_thick;
                    var c_r_x = c_l_x + winw - wfr_thick;
                    var r_l_x = c_r_x + winw + wfr_thick;
                    var r_r_x = r_l_x + winw - wfr_thick;
                    var llwinRect = new U1.Rectangle(l_l_x, fr_thick, winw, winh);
                    var lrwinRect = new U1.Rectangle(l_r_x, fr_thick, winw, winh);
                    var clwinRect = new U1.Rectangle(c_l_x, fr_thick, winw, winh);
                    var crwinRect = new U1.Rectangle(c_r_x, fr_thick, winw, winh);
                    var rlwinRect = new U1.Rectangle(r_l_x, fr_thick, winw, winh);
                    var rrwinRect = new U1.Rectangle(r_r_x, fr_thick, winw, winh);
                    this.addWindow(lrwinRect);
                    this.addWindow(llwinRect);
                    this.addWindow(crwinRect);
                    this.addWindow(clwinRect);
                    this.addWindow(rrwinRect);
                    this.addWindow(rlwinRect);
                    this.addVBar(new U1.Vector2(c_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addVBar(new U1.Vector2(r_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addCenterArrowR(llwinRect);
                    this.addCenterArrowL(lrwinRect);
                    this.addCenterArrowR(clwinRect);
                    this.addCenterArrowL(crwinRect);
                    this.addCenterArrowR(rlwinRect);
                    this.addCenterArrowL(rrwinRect);
                    this.addVent(llwinRect, 80);
                    this.addVent(clwinRect, 80);
                    this.addVent(rlwinRect, 80);
                    this.addInsectNet(llwinRect, "L");
                    this.addInsectNet(clwinRect, "L");
                    this.addInsectNet(rlwinRect, "L");
                };
                return _6W_L_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._6W_L_SS_Presenter = _6W_L_SS_Presenter;
            var _6W_R_SS_Presenter = (function (_super) {
                __extends(_6W_R_SS_Presenter, _super);
                function _6W_R_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _6W_R_SS_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = (w - fr_thick * 2 - wfr_thick * 2 + wfr_thick * 3) / 6;
                    var winh = h - fr_thick * 2;
                    var l_l_x = fr_thick;
                    var l_r_x = l_l_x + winw - wfr_thick;
                    var c_l_x = l_r_x + winw + wfr_thick;
                    var c_r_x = c_l_x + winw - wfr_thick;
                    var r_l_x = c_r_x + winw + wfr_thick;
                    var r_r_x = r_l_x + winw - wfr_thick;
                    var llwinRect = new U1.Rectangle(l_l_x, fr_thick, winw, winh);
                    var lrwinRect = new U1.Rectangle(l_r_x, fr_thick, winw, winh);
                    var clwinRect = new U1.Rectangle(c_l_x, fr_thick, winw, winh);
                    var crwinRect = new U1.Rectangle(c_r_x, fr_thick, winw, winh);
                    var rlwinRect = new U1.Rectangle(r_l_x, fr_thick, winw, winh);
                    var rrwinRect = new U1.Rectangle(r_r_x, fr_thick, winw, winh);
                    this.addWindow(llwinRect);
                    this.addWindow(lrwinRect);
                    this.addWindow(clwinRect);
                    this.addWindow(crwinRect);
                    this.addWindow(rlwinRect);
                    this.addWindow(rrwinRect);
                    this.addVBar(new U1.Vector2(c_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addVBar(new U1.Vector2(r_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addCenterArrowR(llwinRect);
                    this.addCenterArrowL(lrwinRect);
                    this.addCenterArrowR(clwinRect);
                    this.addCenterArrowL(crwinRect);
                    this.addCenterArrowR(rlwinRect);
                    this.addCenterArrowL(rrwinRect);
                    this.addVent(lrwinRect, 80);
                    this.addVent(crwinRect, 80);
                    this.addVent(rrwinRect, 80);
                    this.addInsectNet(lrwinRect, "R");
                    this.addInsectNet(crwinRect, "R");
                    this.addInsectNet(rrwinRect, "R");
                };
                return _6W_R_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._6W_R_SS_Presenter = _6W_R_SS_Presenter;
            var _6W_UB_I_L_Presenter = (function (_super) {
                __extends(_6W_UB_I_L_Presenter, _super);
                function _6W_UB_I_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _6W_UB_I_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var cwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    var cwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var dwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    var dwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = uwinw;
                    var u_l_h = uwinh;
                    var u_r_x = fr_thick + uwinw - wfr_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinw;
                    var u_r_h = uwinh;
                    var c_l_x = fr_thick;
                    var c_l_y = fr_thick + uwinh + bar_thick;
                    var c_l_w = cwinw;
                    var c_l_h = cwinh;
                    var c_r_x = fr_thick + cwinw - wfr_thick;
                    var c_r_y = fr_thick + uwinh + bar_thick;
                    var c_r_w = cwinw;
                    var c_r_h = cwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - wfr_thick;
                    var d_r_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var c_l_rect = new U1.Rectangle(c_l_x, c_l_y, c_l_w, c_l_h);
                    var c_r_rect = new U1.Rectangle(c_r_x, c_r_y, c_r_w, c_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_r_rect);
                    this.addWindow(u_l_rect);
                    this.addWindow(c_r_rect);
                    this.addWindow(c_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addCenterArrowR(u_l_rect);
                    this.addCenterArrowL(u_r_rect);
                    this.addCenterArrowR(c_l_rect);
                    this.addCenterArrowL(c_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(u_l_rect, 80);
                    this.addVent(c_l_rect, 80);
                    this.addVent(d_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_rect, "L");
                    this.addInsectNet(c_l_rect, "L");
                    this.addInsectNet(d_l_rect, "L");
                };
                return _6W_UB_I_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._6W_UB_I_L_Presenter = _6W_UB_I_L_Presenter;
            var _6W_UB_I_R_Presenter = (function (_super) {
                __extends(_6W_UB_I_R_Presenter, _super);
                function _6W_UB_I_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _6W_UB_I_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var cwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    var cwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var dwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    var dwinh = (h - h1 - bar_thick / 2 - bar_thick - fr_thick) / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_l_w = uwinw;
                    var u_l_h = uwinh;
                    var u_r_x = fr_thick + uwinw - wfr_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinw;
                    var u_r_h = uwinh;
                    var c_l_x = fr_thick;
                    var c_l_y = fr_thick + uwinh + bar_thick;
                    var c_l_w = cwinw;
                    var c_l_h = cwinh;
                    var c_r_x = fr_thick + cwinw - wfr_thick;
                    var c_r_y = fr_thick + uwinh + bar_thick;
                    var c_r_w = cwinw;
                    var c_r_h = cwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - wfr_thick;
                    var d_r_y = fr_thick + uwinh + bar_thick + cwinh + bar_thick;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, u_l_w, u_l_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var c_l_rect = new U1.Rectangle(c_l_x, c_l_y, c_l_w, c_l_h);
                    var c_r_rect = new U1.Rectangle(c_r_x, c_r_y, c_r_w, c_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_l_rect);
                    this.addWindow(u_r_rect);
                    this.addWindow(c_l_rect);
                    this.addWindow(c_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick + cwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addCenterArrowR(u_l_rect);
                    this.addCenterArrowL(u_r_rect);
                    this.addCenterArrowR(c_l_rect);
                    this.addCenterArrowL(c_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(u_r_rect, 80);
                    this.addVent(c_r_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_r_rect, "R");
                    this.addInsectNet(c_r_rect, "R");
                    this.addInsectNet(d_r_rect, "R");
                };
                return _6W_UB_I_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._6W_UB_I_R_Presenter = _6W_UB_I_R_Presenter;
            var _2W_4W_L_SS_Presenter = (function (_super) {
                __extends(_2W_4W_L_SS_Presenter, _super);
                function _2W_4W_L_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_4W_L_SS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = u_l_r_x + uwinw + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + uwinw - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(u_l_l_rect, 80);
                    this.addVent(u_r_l_rect, 80);
                    this.addVent(d_l_rect, 80);
                    //this.addCs(d_l_rect);
                    //this.addCs(d_r_rect);
                    //this.addCs(d_l_r_rect);
                    //this.addCs(d_r_r_rect);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_l_rect, "L");
                    this.addInsectNet(u_r_l_rect, "L");
                    this.addInsectNet(d_l_rect, "L");
                };
                return _2W_4W_L_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_4W_L_SS_Presenter = _2W_4W_L_SS_Presenter;
            var _2W_4W_R_SS_Presenter = (function (_super) {
                __extends(_2W_4W_R_SS_Presenter, _super);
                function _2W_4W_R_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_4W_R_SS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + wfr_thick) / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = u_l_r_x + uwinw + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + uwinw - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), uwinh, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(u_l_r_rect, 80);
                    this.addVent(u_r_r_rect, 80);
                    this.addVent(d_r_rect, 80);
                    //this.addCs(d_l_rect);
                    //this.addCs(d_r_rect);
                    //this.addCs(d_l_r_rect);
                    //this.addCs(d_r_r_rect);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_r_rect, "R");
                    this.addInsectNet(u_r_r_rect, "R");
                    this.addInsectNet(d_r_rect, "R");
                };
                return _2W_4W_R_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_4W_R_SS_Presenter = _2W_4W_R_SS_Presenter;
            var _6W_L_Presenter = (function (_super) {
                __extends(_6W_L_Presenter, _super);
                function _6W_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _6W_L_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = (w - fr_thick * 2 - wfr_thick * 2 + wfr_thick * 3) / 6;
                    var winh = h - fr_thick * 2;
                    var l_l_x = fr_thick;
                    var l_r_x = l_l_x + winw - wfr_thick;
                    var c_l_x = l_r_x + winw + wfr_thick;
                    var c_r_x = c_l_x + winw - wfr_thick;
                    var r_l_x = c_r_x + winw + wfr_thick;
                    var r_r_x = r_l_x + winw - wfr_thick;
                    var llwinRect = new U1.Rectangle(l_l_x, fr_thick, winw, winh);
                    var lrwinRect = new U1.Rectangle(l_r_x, fr_thick, winw, winh);
                    var clwinRect = new U1.Rectangle(c_l_x, fr_thick, winw, winh);
                    var crwinRect = new U1.Rectangle(c_r_x, fr_thick, winw, winh);
                    var rlwinRect = new U1.Rectangle(r_l_x, fr_thick, winw, winh);
                    var rrwinRect = new U1.Rectangle(r_r_x, fr_thick, winw, winh);
                    this.addWindow(lrwinRect);
                    this.addWindow(llwinRect);
                    this.addWindow(crwinRect);
                    this.addWindow(clwinRect);
                    this.addWindow(rrwinRect);
                    this.addWindow(rlwinRect);
                    this.addVBar(new U1.Vector2(c_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addVBar(new U1.Vector2(r_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addCenterArrowR(llwinRect);
                    this.addCenterArrowL(lrwinRect);
                    this.addCenterArrowR(clwinRect);
                    this.addCenterArrowL(crwinRect);
                    this.addCenterArrowR(rlwinRect);
                    this.addCenterArrowL(rrwinRect);
                    this.addVent(llwinRect, 80);
                    this.addVent(clwinRect, 80);
                    this.addVent(rlwinRect, 80);
                    this.addInsectNet(llwinRect, "L");
                    this.addInsectNet(clwinRect, "L");
                    this.addInsectNet(rlwinRect, "L");
                };
                return _6W_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._6W_L_Presenter = _6W_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._6W_L_SS] = _6W_L_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._6W_R_SS] = _6W_R_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._6W_UB_I_L] = _6W_UB_I_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._6W_UB_I_R] = _6W_UB_I_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_4W_L_SS] = _2W_4W_L_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_4W_R_SS] = _2W_4W_R_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._6W_L] = _6W_L_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
/// <reference path="wcwinelementpresenter.ts" />
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _4W_Center_Presenter = (function (_super) {
                __extends(_4W_Center_Presenter, _super);
                function _4W_Center_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_Center_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w / 2 - fr_thick;
                    var winh = h - fr_thick * 2;
                    var lrwin_w = w / 4 - fr_thick;
                    var cwin_w = w / 4 + wfr_thick;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lrwin_w, winh);
                    var rwinRect = new U1.Rectangle(w / 4 * 3, fr_thick, lrwin_w, winh);
                    var clwinRect = new U1.Rectangle(w / 4 - wfr_thick, fr_thick, cwin_w, winh);
                    var crwinRect = new U1.Rectangle(w / 2, fr_thick, cwin_w, winh);
                    this.addWindow(rwinRect);
                    this.addWindow(lwinRect);
                    this.addWindow(clwinRect);
                    this.addWindow(crwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addCenterArrowL(clwinRect);
                    this.addCenterArrowR(crwinRect);
                    this.addVent(clwinRect, 80);
                    this.addVent(crwinRect, 80);
                    this.addInsectNet(crwinRect, "R");
                    this.addInsectNet(clwinRect, "L");
                };
                return _4W_Center_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_Center_Presenter = _4W_Center_Presenter;
            var _4W_LR_Presenter = (function (_super) {
                __extends(_4W_LR_Presenter, _super);
                function _4W_LR_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_LR_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w / 2 - fr_thick;
                    var winh = h - fr_thick * 2;
                    var cwin_w = w / 4;
                    var lrwin_w = w / 4 - fr_thick + wfr_thick;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lrwin_w, winh);
                    var rwinRect = new U1.Rectangle(w / 4 * 3 - wfr_thick, fr_thick, lrwin_w, winh);
                    var clwinRect = new U1.Rectangle(w / 4, fr_thick, cwin_w, winh);
                    var crwinRect = new U1.Rectangle(w / 2, fr_thick, cwin_w, winh);
                    this.addWindow(clwinRect);
                    this.addWindow(crwinRect);
                    this.addWindow(rwinRect);
                    this.addWindow(lwinRect);
                    this.addCenterArrowL(clwinRect);
                    this.addCenterArrowR(crwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addVent(lwinRect, 80);
                    this.addVent(rwinRect, 80);
                    this.addInsectNet(rwinRect, "R");
                    this.addInsectNet(lwinRect, "L");
                };
                return _4W_LR_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_LR_Presenter = _4W_LR_Presenter;
            var _4W_I_L_SS_Presenter = (function (_super) {
                __extends(_4W_I_L_SS_Presenter, _super);
                function _4W_I_L_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_I_L_SS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var u_r_x = fr_thick + uwinw - bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_r_rect);
                    this.addWindow(u_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), dwinw * 2 - bar_thick, true, true);
                    //this.addVBar(new Vector2(fr_thick + uwinw + bar_thick / 2, fr_thick), uwinh, true, true);
                    this.addCenterArrowR(u_rect);
                    this.addCenterArrowL(u_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(u_rect, 80);
                    this.addVent(d_l_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_rect, "L");
                    this.addInsectNet(d_l_rect, "L");
                };
                return _4W_I_L_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_I_L_SS_Presenter = _4W_I_L_SS_Presenter;
            var _4W_I_R_SS_Presenter = (function (_super) {
                __extends(_4W_I_R_SS_Presenter, _super);
                function _4W_I_R_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_I_R_SS_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var u_r_x = fr_thick + uwinw - bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect);
                    this.addWindow(u_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), dwinw * 2 - bar_thick, true, true);
                    //this.addVBar(new Vector2(fr_thick + uwinw + bar_thick / 2, fr_thick), uwinh, true, true);
                    this.addCenterArrowR(u_rect);
                    this.addCenterArrowL(u_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(u_r_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_r_rect, "R");
                    this.addInsectNet(d_r_rect, "R");
                };
                return _4W_I_R_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_I_R_SS_Presenter = _4W_I_R_SS_Presenter;
            var _4W_L_SS_Presenter = (function (_super) {
                __extends(_4W_L_SS_Presenter, _super);
                function _4W_L_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_L_SS_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = (w - fr_thick * 2 - wfr_thick + wfr_thick * 2) / 4;
                    var winh = h - fr_thick * 2;
                    var l_l_x = fr_thick;
                    var l_r_x = l_l_x + winw - wfr_thick;
                    var r_l_x = l_r_x + winw + wfr_thick;
                    var r_r_x = r_l_x + winw - wfr_thick;
                    var llwinRect = new U1.Rectangle(l_l_x, fr_thick, winw, winh);
                    var lrwinRect = new U1.Rectangle(l_r_x, fr_thick, winw, winh);
                    var rlwinRect = new U1.Rectangle(r_l_x, fr_thick, winw, winh);
                    var rrwinRect = new U1.Rectangle(r_r_x, fr_thick, winw, winh);
                    this.addWindow(lrwinRect);
                    this.addWindow(llwinRect);
                    this.addWindow(rrwinRect);
                    this.addWindow(rlwinRect);
                    this.addVBar(new U1.Vector2(r_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addCenterArrowR(llwinRect);
                    this.addCenterArrowL(lrwinRect);
                    this.addCenterArrowR(rlwinRect);
                    this.addCenterArrowL(rrwinRect);
                    this.addVent(llwinRect, 80);
                    this.addVent(rlwinRect, 80);
                    this.addInsectNet(llwinRect, "L");
                    this.addInsectNet(rlwinRect, "L");
                };
                return _4W_L_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_L_SS_Presenter = _4W_L_SS_Presenter;
            var _4W_R_SS_Presenter = (function (_super) {
                __extends(_4W_R_SS_Presenter, _super);
                function _4W_R_SS_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_R_SS_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = (w - fr_thick * 2 - wfr_thick + wfr_thick * 2) / 4;
                    var winh = h - fr_thick * 2;
                    var l_l_x = fr_thick;
                    var l_r_x = l_l_x + winw - wfr_thick;
                    var r_l_x = l_r_x + winw + wfr_thick;
                    var r_r_x = r_l_x + winw - wfr_thick;
                    var llwinRect = new U1.Rectangle(l_l_x, fr_thick, winw, winh);
                    var lrwinRect = new U1.Rectangle(l_r_x, fr_thick, winw, winh);
                    var rlwinRect = new U1.Rectangle(r_l_x, fr_thick, winw, winh);
                    var rrwinRect = new U1.Rectangle(r_r_x, fr_thick, winw, winh);
                    this.addWindow(llwinRect);
                    this.addWindow(lrwinRect);
                    this.addWindow(rlwinRect);
                    this.addWindow(rrwinRect);
                    this.addVBar(new U1.Vector2(r_l_x - wfr_thick / 2, fr_thick), winh, true, true);
                    this.addCenterArrowR(llwinRect);
                    this.addCenterArrowL(lrwinRect);
                    this.addCenterArrowR(rlwinRect);
                    this.addCenterArrowL(rrwinRect);
                    this.addVent(lrwinRect, 80);
                    this.addVent(rrwinRect, 80);
                    this.addInsectNet(lrwinRect, "R");
                    this.addInsectNet(rrwinRect, "R");
                };
                return _4W_R_SS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_R_SS_Presenter = _4W_R_SS_Presenter;
            var _4W_CS_I_L_Presenter = (function (_super) {
                __extends(_4W_CS_I_L_Presenter, _super);
                function _4W_CS_I_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_CS_I_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var u_r_x = fr_thick + uwinw - bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_r_rect);
                    this.addWindow(u_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), dwinw * 2 - bar_thick, true, true);
                    //this.addVBar(new Vector2(fr_thick + uwinw + bar_thick / 2, fr_thick), uwinh, true, true);
                    this.addCenterArrowR(u_rect);
                    this.addCenterArrowL(u_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(u_rect, 80);
                    this.addVent(d_l_rect, 80);
                    //this.addCs(d_l_rect);
                    //this.addCs(d_r_rect);
                    this.addHBar(new U1.Vector2(d_l_x + wfr_thick, d_l_y + d_l_h * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(d_r_x + wfr_thick, d_r_y + d_r_h * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_rect, "L");
                    this.addInsectNet(d_l_rect, "L");
                };
                return _4W_CS_I_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_CS_I_L_Presenter = _4W_CS_I_L_Presenter;
            var _4W_CS_I_R_Presenter = (function (_super) {
                __extends(_4W_CS_I_R_Presenter, _super);
                function _4W_CS_I_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_CS_I_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var u_r_x = fr_thick + uwinw - bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect);
                    this.addWindow(u_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), dwinw * 2 - bar_thick, true, true);
                    this.addCenterArrowR(u_rect);
                    this.addCenterArrowL(u_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(u_r_rect, 80);
                    this.addVent(d_r_rect, 80);
                    //this.addCs(d_l_rect);
                    //this.addCs(d_r_rect);
                    this.addHBar(new U1.Vector2(d_l_x + wfr_thick, d_l_y + d_l_h * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(d_r_x + wfr_thick, d_r_y + d_r_h * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_r_rect, "R");
                    this.addInsectNet(d_r_rect, "R");
                };
                return _4W_CS_I_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_CS_I_R_Presenter = _4W_CS_I_R_Presenter;
            var _2W_2W_CS_I_L_Presenter = (function (_super) {
                __extends(_2W_2W_CS_I_L_Presenter, _super);
                function _2W_2W_CS_I_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2W_CS_I_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    //var dwinw = w / 2 - fr_thick - bar_thick / 2;
                    //var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var u_r_x = fr_thick + uwinw - bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_r_rect);
                    this.addWindow(u_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_l_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), dwinw * 2 - bar_thick, true, true);
                    //this.addVBar(new Vector2(fr_thick + uwinw + bar_thick / 2, fr_thick), uwinh, true, true);
                    this.addCenterArrowR(u_rect);
                    this.addCenterArrowL(u_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(u_rect, 80);
                    this.addVent(d_l_rect, 80);
                    //this.addCs(d_l_rect);
                    //this.addCs(d_r_rect);
                    this.addHBar(new U1.Vector2(d_l_x + wfr_thick, d_l_y + d_l_h * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(d_r_x + wfr_thick, d_r_y + d_r_h * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_rect, "L");
                    this.addInsectNet(d_l_rect, "L");
                };
                return _2W_2W_CS_I_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2W_CS_I_L_Presenter = _2W_2W_CS_I_L_Presenter;
            var _2W_2W_CS_I_R_Presenter = (function (_super) {
                __extends(_2W_2W_CS_I_R_Presenter, _super);
                function _2W_2W_CS_I_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _2W_2W_CS_I_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var uwinh = h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + bar_thick) / 2;
                    var dwinh = h - h1 - fr_thick - bar_thick / 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_w = uwinw;
                    var u_h = uwinh;
                    var u_r_x = fr_thick + uwinw - bar_thick;
                    var u_r_y = fr_thick;
                    var u_r_w = uwinw;
                    var u_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = h1 + bar_thick / 2;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = h1 + bar_thick / 2;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var u_rect = new U1.Rectangle(u_x, u_y, u_w, u_h);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, u_r_w, u_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    this.addWindow(u_rect);
                    this.addWindow(u_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), dwinw * 2 - bar_thick, true, true);
                    this.addCenterArrowR(u_rect);
                    this.addCenterArrowL(u_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addVent(u_r_rect, 80);
                    this.addVent(d_r_rect, 80);
                    //this.addCs(d_l_rect);
                    //this.addCs(d_r_rect);
                    this.addHBar(new U1.Vector2(d_l_x + wfr_thick, d_l_y + d_l_h * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(d_r_x + wfr_thick, d_r_y + d_r_h * 0.75 - bar_thick / 2), dwinw - bar_thick * 2, false, false);
                    this.addLeftDim(lt, 0, h1, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_r_rect, "R");
                    this.addInsectNet(d_r_rect, "R");
                };
                return _2W_2W_CS_I_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2W_2W_CS_I_R_Presenter = _2W_2W_CS_I_R_Presenter;
            var _4W_CS_Presenter = (function (_super) {
                __extends(_4W_CS_Presenter, _super);
                function _4W_CS_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_CS_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                    var winw = w / 2 - fr_thick;
                    var winh = h - fr_thick * 2;
                    var lrwin_w = w / 4 - fr_thick;
                    var cwin_w = w / 4 + wfr_thick;
                    var lwinRect = new U1.Rectangle(fr_thick, fr_thick, lrwin_w, winh);
                    var rwinRect = new U1.Rectangle(w / 4 * 3, fr_thick, lrwin_w, winh);
                    var clwinRect = new U1.Rectangle(w / 4 - wfr_thick, fr_thick, cwin_w, winh);
                    var crwinRect = new U1.Rectangle(w / 2, fr_thick, cwin_w, winh);
                    this.addWindow(rwinRect);
                    this.addWindow(lwinRect);
                    this.addWindow(clwinRect);
                    this.addWindow(crwinRect);
                    this.addCenterArrowL(rwinRect);
                    this.addCenterArrowR(lwinRect);
                    this.addCenterArrowL(clwinRect);
                    this.addCenterArrowR(crwinRect);
                    this.addVent(clwinRect, 80);
                    this.addVent(crwinRect, 80);
                    //this.addCs(lwinRect);
                    //this.addCs(clwinRect);
                    //this.addCs(crwinRect);
                    //this.addCs(rwinRect);
                    this.addHBar(new U1.Vector2(fr_thick + wfr_thick, fr_thick + winh * 0.75 - wfr_thick / 2), lrwin_w - wfr_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(fr_thick + lrwin_w, fr_thick + winh * 0.75 - wfr_thick / 2), cwin_w - wfr_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(fr_thick + lrwin_w + cwin_w, fr_thick + winh * 0.75 - wfr_thick / 2), cwin_w - wfr_thick * 2, false, false);
                    this.addHBar(new U1.Vector2(fr_thick + lrwin_w + cwin_w + cwin_w - wfr_thick, fr_thick + winh * 0.75 - wfr_thick / 2), lrwin_w - wfr_thick * 2, false, false);
                    this.addInsectNet(crwinRect, "R");
                    this.addInsectNet(clwinRect, "L");
                };
                return _4W_CS_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_CS_Presenter = _4W_CS_Presenter;
            var _4W_4W_SS_L_Presenter = (function (_super) {
                __extends(_4W_4W_SS_L_Presenter, _super);
                function _4W_4W_SS_L_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_4W_SS_L_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + wfr_thick * 2) / 4;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = u_l_r_x + uwinw + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + uwinw - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw;
                    var d_l_y_r = d_l_y;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = d_l_y;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), h - h1 - fr_thick - bar_thick / 2, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_l_rect, 80);
                    this.addVent(u_r_l_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addVent(d_l_r_rect, 80);
                    //this.addCs(d_l_rect);
                    //this.addCs(d_r_rect);
                    //this.addCs(d_l_r_rect);
                    //this.addCs(d_r_r_rect);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_l_rect, "L");
                    this.addInsectNet(u_r_l_rect, "L");
                    this.addInsectNet(d_r_rect, "R");
                    this.addInsectNet(d_l_r_rect, "L");
                };
                return _4W_4W_SS_L_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_4W_SS_L_Presenter = _4W_4W_SS_L_Presenter;
            var _4W_4W_SS_R_Presenter = (function (_super) {
                __extends(_4W_4W_SS_R_Presenter, _super);
                function _4W_4W_SS_R_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_4W_SS_R_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var h1 = winElm.H1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var uwinw = (w - fr_thick * 2 - bar_thick + wfr_thick * 2) / 4;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 + wfr_thick * 2) / 4;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var u_l_l_x = fr_thick;
                    var u_l_l_y = fr_thick;
                    var u_l_l_w = uwinw;
                    var u_l_l_h = uwinh;
                    var u_l_r_x = fr_thick + uwinw - bar_thick;
                    var u_l_r_y = fr_thick;
                    var u_l_r_w = uwinw;
                    var u_l_r_h = uwinh;
                    var u_r_l_x = u_l_r_x + uwinw + bar_thick;
                    var u_r_l_y = fr_thick;
                    var u_r_l_w = uwinw;
                    var u_r_l_h = uwinh;
                    var u_r_r_x = u_r_l_x + uwinw - bar_thick;
                    var u_r_r_y = fr_thick;
                    var u_r_r_w = uwinw;
                    var u_r_r_h = uwinh;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + uwinh + bar_thick;
                    var d_l_w = dwinw;
                    var d_l_h = dwinh;
                    var d_r_x = fr_thick + dwinw - bar_thick;
                    var d_r_y = d_l_y;
                    var d_r_w = dwinw;
                    var d_r_h = dwinh;
                    var d_l_x_r = d_r_x + dwinw;
                    var d_l_y_r = d_l_y;
                    var d_l_w_r = dwinw;
                    var d_l_h_r = dwinh;
                    var d_r_x_r = d_l_x_r + dwinw - bar_thick;
                    var d_r_y_r = d_l_y;
                    var d_r_w_r = dwinw;
                    var d_r_h_r = dwinh;
                    var u_l_l_rect = new U1.Rectangle(u_l_l_x, u_l_l_y, u_l_l_w, u_l_l_h);
                    var u_l_r_rect = new U1.Rectangle(u_l_r_x, u_l_r_y, u_l_r_w, u_l_r_h);
                    var u_r_l_rect = new U1.Rectangle(u_r_l_x, u_r_l_y, u_r_l_w, u_r_l_h);
                    var u_r_r_rect = new U1.Rectangle(u_r_r_x, u_r_r_y, u_r_r_w, u_r_r_h);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, d_l_w, d_l_h);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, d_r_w, d_r_h);
                    var d_l_r_rect = new U1.Rectangle(d_l_x_r, d_l_y_r, d_l_w_r, d_l_h_r);
                    var d_r_r_rect = new U1.Rectangle(d_r_x_r, d_r_y_r, d_r_w_r, d_r_h_r);
                    this.addWindow(u_l_l_rect);
                    this.addWindow(u_l_r_rect);
                    this.addWindow(u_r_l_rect);
                    this.addWindow(u_r_r_rect);
                    this.addWindow(d_l_rect);
                    this.addWindow(d_r_rect);
                    this.addWindow(d_r_r_rect);
                    this.addWindow(d_l_r_rect);
                    this.addHBar(new U1.Vector2(fr_thick, fr_thick + uwinh + bar_thick / 2), w - fr_thick * 2, true, true);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), h - h1 - fr_thick - bar_thick / 2, true, true);
                    this.addCenterArrowR(u_l_l_rect);
                    this.addCenterArrowL(u_l_r_rect);
                    this.addCenterArrowR(u_r_l_rect);
                    this.addCenterArrowL(u_r_r_rect);
                    this.addCenterArrowR(d_l_rect);
                    this.addCenterArrowL(d_r_rect);
                    this.addCenterArrowR(d_l_r_rect);
                    this.addCenterArrowL(d_r_r_rect);
                    this.addVent(u_l_r_rect, 80);
                    this.addVent(u_r_r_rect, 80);
                    this.addVent(d_r_rect, 80);
                    this.addVent(d_l_r_rect, 80);
                    //this.addCs(d_l_rect);
                    //this.addCs(d_r_rect);
                    //this.addCs(d_l_r_rect);
                    //this.addCs(d_r_r_rect);
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    this.addInsectNet(u_l_r_rect, "R");
                    this.addInsectNet(u_r_r_rect, "R");
                    this.addInsectNet(d_r_rect, "R");
                    this.addInsectNet(d_l_r_rect, "L");
                };
                return _4W_4W_SS_R_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_4W_SS_R_Presenter = _4W_4W_SS_R_Presenter;
            var _4W_UB_CENTER_Presenter = (function (_super) {
                __extends(_4W_UB_CENTER_Presenter, _super);
                function _4W_UB_CENTER_Presenter() {
                    _super.apply(this, arguments);
                }
                _4W_UB_CENTER_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var w1 = winElm.W1;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var lrwinw = (w - fr_thick * 2 - w1 * 2 + wfr_thick * 2) / 2;
                    var lrwinh = h - fr_thick * 2;
                    var cwinw = w1;
                    var cwinh = lrwinh;
                    var l_l_x = fr_thick;
                    var l_l_y = fr_thick;
                    var l_l_w = lrwinw;
                    var l_l_h = lrwinh;
                    var l_r_x = l_l_x + lrwinw - wfr_thick;
                    var l_r_y = l_l_y;
                    var l_r_w = cwinw;
                    var l_r_h = cwinh;
                    var r_l_x = l_r_x + cwinw;
                    var r_l_y = l_r_y;
                    var r_l_w = l_r_w;
                    var r_l_h = l_r_h;
                    var r_r_x = r_l_x + cwinw - wfr_thick;
                    var r_r_y = r_l_y;
                    var r_r_w = lrwinw;
                    var r_r_h = lrwinh;
                    var l_l_Rect = new U1.Rectangle(l_l_x, l_l_y, l_l_w, l_l_h);
                    var l_r_Rect = new U1.Rectangle(l_r_x, l_r_y, l_r_w, l_r_h);
                    var r_l_Rect = new U1.Rectangle(r_l_x, r_l_y, r_l_w, r_l_h);
                    var r_r_Rect = new U1.Rectangle(r_r_x, r_r_y, r_r_w, r_r_h);
                    this.addWindow(l_l_Rect);
                    this.addWindow(l_r_Rect);
                    this.addWindow(r_r_Rect);
                    this.addWindow(r_l_Rect);
                    this.addCenterArrowR(l_l_Rect);
                    this.addCenterArrowL(l_r_Rect);
                    this.addCenterArrowR(r_l_Rect);
                    this.addCenterArrowL(r_r_Rect);
                    this.addVent(l_r_Rect, 80);
                    this.addVent(r_l_Rect, 80);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, l_r_x, l_r_x + w1, 0);
                    this.addBottomDim(lb, r_l_x, r_l_x + w1, 0);
                    this.addBottomDim(lb, 0, w, 1);
                    this.addInsectNet(l_r_Rect, "R");
                    this.addInsectNet(r_l_Rect, "L");
                };
                return _4W_UB_CENTER_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4W_UB_CENTER_Presenter = _4W_UB_CENTER_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_Center] = _4W_Center_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_LR] = _4W_LR_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_I_L_SS] = _4W_I_L_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_I_R_SS] = _4W_I_R_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_L_SS] = _4W_L_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_R_SS] = _4W_R_SS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_CS_I_L] = _4W_CS_I_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_CS_I_R] = _4W_CS_I_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2W_CS_I_L] = _2W_2W_CS_I_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2W_2W_CS_I_R] = _2W_2W_CS_I_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_CS] = _4W_CS_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_4W_SS_L] = _4W_4W_SS_L_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_4W_SS_R] = _4W_4W_SS_R_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4W_UB_CENTER] = _4W_UB_CENTER_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _Fix_Presenter = (function (_super) {
                __extends(_Fix_Presenter, _super);
                function _Fix_Presenter() {
                    _super.apply(this, arguments);
                }
                _Fix_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var winh = h - fr_thick * 2;
                    var c_x = fr_thick;
                    var c_y = fr_thick;
                    var c_w = w - fr_thick * 2;
                    var cwinRect = new U1.Rectangle(c_x, c_y, c_w, winh);
                    this.addWindow(cwinRect, false);
                    //this.addX(cwinRect); 
                    this.addCenterPlus(cwinRect, 80);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _Fix_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._Fix_Presenter = _Fix_Presenter;
            var _2Fix_Presenter = (function (_super) {
                __extends(_2Fix_Presenter, _super);
                function _2Fix_Presenter() {
                    _super.apply(this, arguments);
                }
                _2Fix_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var winh = h - fr_thick * 2;
                    var l_x = fr_thick;
                    var l_y = fr_thick;
                    var l_w = w / 2 - fr_thick - bar_thick / 2;
                    var r_x = w / 2 + bar_thick / 2;
                    var r_y = fr_thick;
                    var r_w = l_w;
                    var l_rect = new U1.Rectangle(l_x, l_y, l_w, winh);
                    var r_rect = new U1.Rectangle(r_x, r_y, r_w, winh);
                    this.addWindow(l_rect, false);
                    this.addWindow(r_rect, false);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), winh, false, false);
                    //this.addX(l_rect); 
                    //this.addX(r_rect);
                    this.addCenterPlus(l_rect, 80);
                    this.addCenterPlus(r_rect, 80);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _2Fix_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2Fix_Presenter = _2Fix_Presenter;
            var _3Fix_Presenter = (function (_super) {
                __extends(_3Fix_Presenter, _super);
                function _3Fix_Presenter() {
                    _super.apply(this, arguments);
                }
                _3Fix_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var winh = h - fr_thick * 2;
                    var w3 = w / 3;
                    var l_x = fr_thick;
                    var l_y = fr_thick;
                    var l_w = w3 - fr_thick - bar_thick / 2;
                    var r_x = w - w3 + bar_thick / 2;
                    var r_y = l_y;
                    var r_w = l_w;
                    var c_x = w3 + bar_thick / 2;
                    var c_y = l_y;
                    var c_w = w3 - bar_thick;
                    var l_rect = new U1.Rectangle(l_x, l_y, l_w, winh);
                    var r_rect = new U1.Rectangle(r_x, r_y, r_w, winh);
                    var c_rect = new U1.Rectangle(c_x, c_y, c_w, winh);
                    this.addWindow(c_rect, false);
                    this.addWindow(l_rect, false);
                    this.addWindow(r_rect, false);
                    this.addVBar(new U1.Vector2(w3, fr_thick), winh, false, false);
                    this.addVBar(new U1.Vector2(w - w3, fr_thick), winh, false, false);
                    //this.addX(c_rect);
                    //this.addX(l_rect);
                    //this.addX(r_rect);
                    this.addCenterPlus(c_rect, 80);
                    this.addCenterPlus(l_rect, 80);
                    this.addCenterPlus(r_rect, 80);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _3Fix_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3Fix_Presenter = _3Fix_Presenter;
            var _4Fix_Presenter = (function (_super) {
                __extends(_4Fix_Presenter, _super);
                function _4Fix_Presenter() {
                    _super.apply(this, arguments);
                }
                _4Fix_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var winh = h - fr_thick * 2;
                    var w4 = w / 4;
                    var w2 = w / 2;
                    var l_x = fr_thick;
                    var l_y = fr_thick;
                    var l_w = w4 - fr_thick - bar_thick / 2;
                    var r_x = w - w4 + bar_thick / 2;
                    var r_y = l_y;
                    var r_w = l_w;
                    var cl_x = w4 + bar_thick / 2;
                    var cl_y = l_y;
                    var cl_w = w4 - bar_thick;
                    var cr_x = w2 + bar_thick / 2;
                    var cr_y = l_y;
                    var cr_w = w4 - bar_thick;
                    var l_rect = new U1.Rectangle(l_x, l_y, l_w, winh);
                    var r_rect = new U1.Rectangle(r_x, r_y, r_w, winh);
                    var cl_rect = new U1.Rectangle(cl_x, cl_y, cl_w, winh);
                    var cr_rect = new U1.Rectangle(cr_x, cr_y, cr_w, winh);
                    this.addWindow(cl_rect, false);
                    this.addWindow(cr_rect, false);
                    this.addWindow(l_rect, false);
                    this.addWindow(r_rect, false);
                    this.addVBar(new U1.Vector2(w4, fr_thick), winh, false, false);
                    this.addVBar(new U1.Vector2(w2, fr_thick), winh, false, false);
                    this.addVBar(new U1.Vector2(w - w4, fr_thick), winh, false, false);
                    this.addCenterPlus(cl_rect, 80);
                    this.addCenterPlus(cr_rect, 80);
                    this.addCenterPlus(l_rect, 80);
                    this.addCenterPlus(r_rect, 80);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _4Fix_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4Fix_Presenter = _4Fix_Presenter;
            var _2Fix_I_Presenter = (function (_super) {
                __extends(_2Fix_I_Presenter, _super);
                function _2Fix_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _2Fix_I_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var winh = h / 2 - fr_thick;
                    var winw = w - fr_thick * 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_h = h / 2 - fr_thick - bar_thick / 2;
                    var d_x = fr_thick;
                    var d_y = h / 2 + bar_thick / 2;
                    var d_w = u_h;
                    var u_rect = new U1.Rectangle(u_x, u_y, winw, u_h);
                    var d_rect = new U1.Rectangle(d_x, d_y, winw, u_h);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_rect, false);
                    this.addHBar(new U1.Vector2(fr_thick, h / 2), winw, false, false);
                    //this.addX(u_rect);
                    //this.addX(d_rect);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterPlus(d_rect, 80);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _2Fix_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2Fix_I_Presenter = _2Fix_I_Presenter;
            var _3Fix_I_Presenter = (function (_super) {
                __extends(_3Fix_I_Presenter, _super);
                function _3Fix_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _3Fix_I_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var h3 = h / 3;
                    var winh = h3 - fr_thick;
                    var winw = w - fr_thick * 2;
                    var u_x = fr_thick;
                    var u_y = fr_thick;
                    var u_h = h3 - fr_thick - bar_thick / 2;
                    var c_x = fr_thick;
                    var c_y = h3 + bar_thick / 2;
                    var c_h = h3 - bar_thick;
                    var d_x = fr_thick;
                    var d_y = h - h3 + bar_thick / 2;
                    var d_w = u_h;
                    var c_rect = new U1.Rectangle(c_x, c_y, winw, c_h);
                    var u_rect = new U1.Rectangle(u_x, u_y, winw, u_h);
                    var d_rect = new U1.Rectangle(d_x, d_y, winw, u_h);
                    this.addWindow(c_rect, false);
                    this.addWindow(u_rect, false);
                    this.addWindow(d_rect, false);
                    this.addHBar(new U1.Vector2(fr_thick, h3), winw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h3), winw, false, false);
                    //this.addX(c_rect);
                    //this.addX(u_rect);
                    //this.addX(d_rect);
                    this.addCenterPlus(c_rect, 80);
                    this.addCenterPlus(u_rect, 80);
                    this.addCenterPlus(d_rect, 80);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _3Fix_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._3Fix_I_Presenter = _3Fix_I_Presenter;
            var _4Fix_Rect_Presenter = (function (_super) {
                __extends(_4Fix_Rect_Presenter, _super);
                function _4Fix_Rect_Presenter() {
                    _super.apply(this, arguments);
                }
                _4Fix_Rect_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var bar_thick = this.barThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    var winw = w / 2 - fr_thick - bar_thick / 2;
                    var winh = h / 2 - fr_thick - bar_thick / 2;
                    var u_l_x = fr_thick;
                    var u_l_y = fr_thick;
                    var u_r_x = fr_thick + winw + bar_thick;
                    var u_r_y = fr_thick;
                    var d_l_x = fr_thick;
                    var d_l_y = fr_thick + winh + bar_thick;
                    var d_r_x = fr_thick + winw + bar_thick;
                    var d_r_y = fr_thick + winh + bar_thick;
                    var u_l_rect = new U1.Rectangle(u_l_x, u_l_y, winw, winh);
                    var u_r_rect = new U1.Rectangle(u_r_x, u_r_y, winw, winh);
                    var d_l_rect = new U1.Rectangle(d_l_x, d_l_y, winw, winh);
                    var d_r_rect = new U1.Rectangle(d_r_x, d_r_y, winw, winh);
                    this.addWindow(u_l_rect, false);
                    this.addWindow(u_r_rect, false);
                    this.addWindow(d_l_rect, false);
                    this.addWindow(d_r_rect, false);
                    this.addVBar(new U1.Vector2(w / 2, fr_thick), winh * 2 + bar_thick, false, false);
                    this.addHBar(new U1.Vector2(fr_thick, h / 2), winw, false, false);
                    this.addHBar(new U1.Vector2(fr_thick + winw + bar_thick, h / 2), winw, false, false);
                    this.addCenterPlus(u_l_rect, 80);
                    this.addCenterPlus(u_r_rect, 80);
                    this.addCenterPlus(d_l_rect, 80);
                    this.addCenterPlus(d_r_rect, 80);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _4Fix_Rect_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._4Fix_Rect_Presenter = _4Fix_Rect_Presenter;
            var _1FIX_U_4_Presenter = (function (_super) {
                __extends(_1FIX_U_4_Presenter, _super);
                function _1FIX_U_4_Presenter() {
                    _super.apply(this, arguments);
                }
                _1FIX_U_4_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addCenterPlus(new U1.Rectangle(0, 0, w, h), 80);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _1FIX_U_4_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1FIX_U_4_Presenter = _1FIX_U_4_Presenter;
            var _1FIX_U_3_Presenter = (function (_super) {
                __extends(_1FIX_U_3_Presenter, _super);
                function _1FIX_U_3_Presenter() {
                    _super.apply(this, arguments);
                }
                _1FIX_U_3_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h), true, true, false, true);
                    this.addCenterPlus(new U1.Rectangle(0, 0, w, h), 80);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _1FIX_U_3_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1FIX_U_3_Presenter = _1FIX_U_3_Presenter;
            var _2F_I_A_Presenter = (function (_super) {
                __extends(_2F_I_A_Presenter, _super);
                function _2F_I_A_Presenter() {
                    _super.apply(this, arguments);
                }
                _2F_I_A_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addCenterPlus(dwinRect, 80);
                    //this.addInsectNet(dwinRect, "L");
                };
                return _2F_I_A_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2F_I_A_Presenter = _2F_I_A_Presenter;
            var _2F_I_J_Presenter = (function (_super) {
                __extends(_2F_I_J_Presenter, _super);
                function _2F_I_J_Presenter() {
                    _super.apply(this, arguments);
                }
                _2F_I_J_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, false, false);
                    this.addCenterPlus(uwinRect, 80);
                    this.addCenterPlus(dwinRect, 80);
                    //this.addInsectNet(dwinRect, "L");
                };
                return _2F_I_J_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2F_I_J_Presenter = _2F_I_J_Presenter;
            var _2F_I_V_Presenter = (function (_super) {
                __extends(_2F_I_V_Presenter, _super);
                function _2F_I_V_Presenter() {
                    _super.apply(this, arguments);
                }
                _2F_I_V_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, true, true);
                    this.addCenterPlus(uwinRect, 80);
                    this.addCenterPlus(dwinRect, 80);
                    //this.addInsectNet(dwinRect, "L");
                };
                return _2F_I_V_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2F_I_V_Presenter = _2F_I_V_Presenter;
            var _2F_UB_I_Presenter = (function (_super) {
                __extends(_2F_UB_I_Presenter, _super);
                function _2F_UB_I_Presenter() {
                    _super.apply(this, arguments);
                }
                _2F_UB_I_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var winw = w - fr_thick * 2;
                    var uwin_h = h - h1 - fr_thick - bar_thick / 2;
                    var dwin_h = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, winw, uwin_h);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, winw, dwin_h);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), winw, true, true);
                    this.addCenterPlus(uwinRect, 80);
                    this.addCenterPlus(dwinRect, 80);
                };
                return _2F_UB_I_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._2F_UB_I_Presenter = _2F_UB_I_Presenter;
            var _1F_2_Presenter = (function (_super) {
                __extends(_1F_2_Presenter, _super);
                function _1F_2_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_2_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = (w - fr_thick * 2 - bar_thick) / 2;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, uwinw, uwinh);
                    var dlwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, dwinw, dwinh);
                    var drwinRect = new U1.Rectangle(fr_thick + dwinw + bar_thick, h - h1 + bar_thick / 2, dwinw, dwinh);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dlwinRect, false);
                    this.addWindow(drwinRect, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), uwinw, true, true);
                    this.addVBar(new U1.Vector2(w / 2, h - h1 + bar_thick / 2), dwinh, true, true);
                    this.addCenterPlus(uwinRect, 80);
                };
                return _1F_2_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_2_Presenter = _1F_2_Presenter;
            var _1F_1_Presenter = (function (_super) {
                __extends(_1F_1_Presenter, _super);
                function _1F_1_Presenter() {
                    _super.apply(this, arguments);
                }
                _1F_1_Presenter.prototype.OnUpdate = function () {
                    this.OnClear();
                    var winelm = this.WinElem;
                    var w = winelm.W;
                    var h = winelm.H;
                    var h1 = winelm.H1;
                    var fr_thick = this.frameThick();
                    var bar_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, h - h1, h, 0);
                    this.addLeftDim(lt, 0, h, 1);
                    this.addBottomDim(lb, 0, w);
                    var uwinw = w - fr_thick * 2;
                    var uwinh = h - h1 - fr_thick - bar_thick / 2;
                    var dwinw = uwinw;
                    var dwinh = h1 - fr_thick - bar_thick / 2;
                    var uwinRect = new U1.Rectangle(fr_thick, fr_thick, uwinw, uwinh);
                    var dwinRect = new U1.Rectangle(fr_thick, h - h1 + bar_thick / 2, dwinw, dwinh);
                    this.addWindow(uwinRect, false);
                    this.addWindow(dwinRect, false);
                    this.addHBar(new U1.Vector2(fr_thick, h - h1), uwinw, true, true);
                    this.addCenterPlus(uwinRect, 80);
                };
                return _1F_1_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1F_1_Presenter = _1F_1_Presenter;
            var _WH_N_Presenter = (function (_super) {
                __extends(_WH_N_Presenter, _super);
                function _WH_N_Presenter() {
                    _super.apply(this, arguments);
                }
                _WH_N_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h), true, true, false, true);
                    //this.addCenterPlus(new Rectangle(0, 0, w, h), 80);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _WH_N_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._WH_N_Presenter = _WH_N_Presenter;
            var _WH_C_Presenter = (function (_super) {
                __extends(_WH_C_Presenter, _super);
                function _WH_C_Presenter() {
                    _super.apply(this, arguments);
                }
                _WH_C_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h), true, true, true, false);
                    //this.addCenterPlus(new Rectangle(0, 0, w, h), 80);
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _WH_C_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._WH_C_Presenter = _WH_C_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._Fix] = _Fix_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2Fix] = _2Fix_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3Fix] = _3Fix_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4Fix] = _4Fix_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2Fix_I] = _2Fix_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._3Fix_I] = _3Fix_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._4Fix_Rect] = _4Fix_Rect_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1FIX_U_4] = _1FIX_U_4_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1FIX_U_3] = _1FIX_U_3_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2F_I_A] = _2F_I_A_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2F_I_J] = _2F_I_J_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2F_I_V] = _2F_I_V_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._2F_UB_I] = _2F_UB_I_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_2] = _1F_2_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1F_1] = _1F_1_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._WH_N] = _WH_N_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._WH_C] = _WH_C_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Presenters;
        (function (Presenters) {
            var _WH_Presenter = (function (_super) {
                __extends(_WH_Presenter, _super);
                function _WH_Presenter() {
                    _super.apply(this, arguments);
                }
                _WH_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _WH_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._WH_Presenter = _WH_Presenter;
            var _1W_SF_Presenter = (function (_super) {
                __extends(_1W_SF_Presenter, _super);
                function _1W_SF_Presenter() {
                    _super.apply(this, arguments);
                }
                _1W_SF_Presenter.prototype.OnUpdate = function () {
                    var winElm = this.WinElem;
                    var w = winElm.W;
                    var h = winElm.H;
                    var fr_thick = this.frameThick();
                    var wfr_thick = this.winFrameThick();
                    var lt = new U1.Vector2(0, 0);
                    var rt = new U1.Vector2(w, 0);
                    var lb = new U1.Vector2(0, h);
                    var rb = new U1.Vector2(w, h);
                    this.addFrame(new U1.Rectangle(0, 0, w, h));
                    this.addLeftDim(lt, 0, h);
                    this.addBottomDim(lb, 0, w);
                };
                return _1W_SF_Presenter;
            }(Presenters.WcWinElementPresenter));
            Presenters._1W_SF_Presenter = _1W_SF_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._WH] = _WH_Presenter;
            Presenters.PresenterCreater[WinCad.Models.WcWinTypeEnums._1W_SF] = _1W_SF_Presenter;
        })(Presenters = WinCad.Presenters || (WinCad.Presenters = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
var U1;
(function (U1) {
    var WinCad;
    (function (WinCad) {
        var Services;
        (function (Services) {
            var LgWinService = (function () {
                function LgWinService() {
                    this._activeDocument = new WinCad.Models.WcDocument();
                }
                Object.defineProperty(LgWinService, "Current", {
                    get: function () {
                        if (LgWinService._current == null) {
                            LgWinService._current = new LgWinService();
                        }
                        return LgWinService._current;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(LgWinService.prototype, "ActiveDocument", {
                    get: function () {
                        return this._activeDocument;
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(LgWinService.prototype, "ActiveView", {
                    get: function () {
                        return this._activeView;
                    },
                    enumerable: true,
                    configurable: true
                });
                LgWinService.prototype.Init = function (canvas, board) {
                    if (this._isInit)
                        return;
                    this._isInit = true;
                    if (this._activeView == null) {
                        this._activeView = new U1.Views.View2Canvas(canvas);
                        this._activeView.Board = board;
                        this._activeView.Scene.World.Transform = U1.Matrix4.CreateScale(new U1.Vector3(1, -1, 1));
                        this._activeView.Document = this.ActiveDocument;
                        this._activeView.DocumentPresenter = new U1.WinCad.Presenters.WcDocumentPresenter();
                        this._activeView.Activate();
                    }
                };
                Object.defineProperty(LgWinService.prototype, "WinTypes", {
                    get: function () {
                        var wintypes = [];
                        for (var idx in WinCad.Models.WinCreater) {
                            var num = parseInt(idx);
                            var name = WinCad.Models.WcWinTypeConverter.ToSting(num);
                            wintypes.push(name);
                        }
                        return wintypes;
                    },
                    enumerable: true,
                    configurable: true
                });
                LgWinService.prototype.SetWindowType = function (wintype) {
                    var actDoc = this.ActiveDocument;
                    var typeenum = WinCad.Models.WcWinTypeConverter.FromSting(wintype);
                    actDoc.Clear();
                    var ctor = WinCad.Models.WinCreater[typeenum];
                    if (ctor != null) {
                        actDoc.BeginTransaction();
                        var winModel = actDoc.AddElement(ctor);
                        actDoc.EndTransaction();
                    }
                };
                LgWinService.prototype.SetW = function (w) {
                    if (w == null)
                        return;
                    var actWin = Services.LgWinService.Current.ActiveDocument.ActWin;
                    actWin.W = w;
                };
                LgWinService.prototype.SetH = function (h) {
                    if (h == null)
                        return;
                    var actWin = Services.LgWinService.Current.ActiveDocument.ActWin;
                    actWin.H = h;
                };
                LgWinService.prototype.SetW1 = function (w1) {
                    if (w1 == null)
                        return;
                    var actWin = Services.LgWinService.Current.ActiveDocument.ActWin;
                    actWin.W1 = w1;
                };
                LgWinService.prototype.SetH1 = function (h1) {
                    if (h1 == null || h1 == undefined || h1.toString() == "" || h1 == 0)
                        return;
                    var actWin = Services.LgWinService.Current.ActiveDocument.ActWin;
                    actWin.H1 = h1;
                };
                LgWinService.prototype.SetHndlLoc = function (hndlLoc) {
                    if (hndlLoc == null)
                        return;
                    var actWin = Services.LgWinService.Current.ActiveDocument.ActWin;
                    actWin.HndlLocH = hndlLoc;
                };
                LgWinService.prototype.SetNet = function (net) {
                    if (net == null)
                        return;
                    var actWin = Services.LgWinService.Current.ActiveDocument.ActWin;
                    actWin.ShowInsectNet = net;
                };
                LgWinService.prototype.parseNum = function (v) {
                    if (v == "null" || v == null || v == NaN || v == "NaN" || v == "")
                        return null;
                    return v | 0;
                };
                LgWinService.prototype.parseBool = function (v) {
                    if (v == "null" || v == null || v == NaN || v == "NaN" || v == "")
                        return false;
                    return v == "true" || v == true || v == "True";
                };
                LgWinService.prototype.SetParams = function (winType, w, h, w1, h1, hndlLoc, net) {
                    var _this = this;
                    w = this.parseNum(w);
                    h = this.parseNum(h);
                    w1 = this.parseNum(w1);
                    h1 = this.parseNum(h1);
                    hndlLoc = this.parseNum(hndlLoc);
                    net = this.parseBool(net);
                    var actDoc = this.ActiveDocument;
                    var typeenum = WinCad.Models.WcWinTypeConverter.FromSting(winType);
                    var ctor = WinCad.Models.WinCreater[typeenum];
                    actDoc.Clear();
                    if (ctor == null) {
                        return false;
                    }
                    // 2016-08-04 처음 실행 시 창이 생성되기 전에 파라미터가 먼저 넘어와서 추가함
                    var actWin = Services.LgWinService.Current.ActiveDocument.ActWin;
                    if (actWin == null) {
                        U1.UDispatcher.BeginInvokeDelay(function () {
                            //this.ActiveDocument.BeginTransaction(); 
                            _this.SetWindowType(winType);
                            _this.SetW(w);
                            _this.SetH(h);
                            _this.SetW1(w1);
                            _this.SetH1(h1);
                            _this.SetHndlLoc(hndlLoc);
                            _this.SetNet(net);
                            //this.ActiveDocument.EndTransaction();
                        }, 1600);
                    }
                    else {
                        //this.ActiveDocument.BeginTransaction(); 
                        this.SetWindowType(winType);
                        this.SetW(w);
                        this.SetH(h);
                        this.SetW1(w1);
                        this.SetH1(h1);
                        this.SetHndlLoc(hndlLoc);
                        this.SetNet(net);
                    }
                    return true;
                };
                LgWinService.prototype.SaveImage = function (estNo, estNos, clSn, windLocSn) {
                    var canvas = document.getElementById("ViewArea");
                    var imgUrl = canvas.toDataURL("image/png");
                    imgUrl = imgUrl.replace("data:image/png;base64,", "");
                    //img_url = img_url.replace("data:image/png;base64,", "");
                    var data = {};
                    data["jpgFile"] = imgUrl;
                    data["estNo"] = estNo;
                    data["estNos"] = estNos;
                    data["clSn"] = clSn;
                    data["windLocSn"] = windLocSn;
                    //alert("\n location.host: " + location.host
                    //    + "\n location.hostname: " + location.hostname
                    //    + "\n location.href: " + location.href
                    //    + "\n location.origin: " + location.origin
                    //    + "\n location.pathname: " + location.pathname
                    //    + "\n location.port: " + location.port
                    //    + "\n location.protocol: " + location.protocol
                    //    + "\n location.hash: " + location.hash
                    //);
                    var uri = location.protocol + "//" + location.hostname; // + ":" + location.port + "/";
                    var reqUri;
                    if (uri.localeCompare("http://wins2-d.lghausys.com") == 0)
                        reqUri = "http://wins2-d.lghausys.com/esti/sitg/NwinsEstiSysWindCalBomDo/NwinsEstiSysWindCalSaveImageDo.do";
                    else if (uri.localeCompare("http://wins2-d.hausyswindow.com") == 0)
                        reqUri = "http://wins2-d.hausyswindow.com/esti/sitg/NwinsEstiSysWindCalBomDo/NwinsEstiSysWindCalSaveImageDo.do";
                    else if (uri.localeCompare("http://165.244.161.97") == 0)
                        reqUri = "http://165.244.161.97:5083/esti/sitg/NwinsEstiSysWindCalBomDo/NwinsEstiSysWindCalSaveImageDo.do";
                    else if (uri.localeCompare("http://localhost") == 0)
                        reqUri = "http://localhost:8080/iris/esti/sitg/NwinsEstiSysWindCalBomDo/NwinsEstiSysWindCalSaveImageDo.do";
                    // 운영 서버
                    //var reqUri = "http://wins2-d.lghausys.com/esti/sitg/NwinsEstiSysWindCalBomDo/NwinsEstiSysWindCalSaveImageDo.do";
                    // 개발 서버
                    //var reqUri = "http://165.244.161.97:5083/esti/sitg/NwinsEstiSysWindCalBomDo/NwinsEstiSysWindCalSaveImageDo.do";
                    // 로컬
                    //var reqUri = "http://localhost:8080/iris/esti/sitg/NwinsEstiSysWindCalBomDo/NwinsEstiSysWindCalSaveImageDo.do";
                    //alert("\n uri: " + uri
                    //    + "\n reqUri: " + reqUri
                    //);
                    $.post(reqUri, data)
                        .done(function (arg) {
                        //MessageBox.Show("저장 성공");
                    })
                        .fail(function (e) {
                        //MessageBox.Show("서버와 접속이 끊어졌습니다.");
                    });
                };
                return LgWinService;
            }());
            Services.LgWinService = LgWinService;
        })(Services = WinCad.Services || (WinCad.Services = {}));
    })(WinCad = U1.WinCad || (U1.WinCad = {}));
})(U1 || (U1 = {}));
//# sourceMappingURL=LGWinCad.js.map