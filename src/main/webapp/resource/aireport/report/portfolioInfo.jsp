<%
/************************************************************************************
Generated by AIDesigner 6.0.0.1
************************************************************************************
보고서 제목 : test
작성일 : 2017년12월22일 19시49분41초
수정일 : 2018년5월15일 11시37분51초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private volatile ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_ptfloFunding
	StringBuilder sql_ptfloFunding = new StringBuilder();
	sql_ptfloFunding.setLength(0);
	sql_ptfloFunding.append("WITH EXP_LIST AS ( ");
	sql_ptfloFunding.append("		    SELECT BIZ_DPT_CD, ROUND(PLN_EXP,2) as PLN_EXP , SUM(PLN_EXP) OVER() AS PLN_EXP_SUM ");
	sql_ptfloFunding.append("		         , ROUND(ARSL_EXP, 2) as ARSL_EXP, SUM(ARSL_EXP) OVER() AS ARSL_EXP_SUM ");
	sql_ptfloFunding.append("		      FROM (SELECT A.BIZ_DPT_CD, SUM(B.PLN_EXP) AS PLN_EXP, SUM(B.ARSL_EXP) AS ARSL_EXP ");
	sql_ptfloFunding.append("		              FROM IRIS_TSS_MGMT_MST A ");
	sql_ptfloFunding.append("		              JOIN (SELECT TSS_CD, SUM(ISNULL(PLN_EXP,0)) AS PLN_EXP, SUM(ISNULL(ARSL_EXP, 0)) AS ARSL_EXP ");
	sql_ptfloFunding.append("		                      FROM IRIS_TSS_GEN_TRWI_BUDG_LIST ");
	sql_ptfloFunding.append("		                     WHERE YY_MM BETWEEN '^startYymm^' AND  '^endYymm^' ");
	sql_ptfloFunding.append("		                     GROUP BY TSS_CD) B ");
	sql_ptfloFunding.append("		                ON B.TSS_CD = A.TSS_CD ");
	sql_ptfloFunding.append("		             WHERE A.TSS_SCN_CD = 'G' ");
	sql_ptfloFunding.append("		               AND A.PGS_STEP_CD = 'PG' ");
	sql_ptfloFunding.append("		             GROUP BY A.BIZ_DPT_CD) X ");
	sql_ptfloFunding.append("		) ");
	sql_ptfloFunding.append("		, CLS_LIST AS ( ");
	sql_ptfloFunding.append("		    SELECT BIZ_DPT_CD, ROUND(PROD_G_MM, 2 ) AS PROD_G_MM, SUM(PROD_G_MM) OVER() AS PROD_G_SUM ");
	sql_ptfloFunding.append("		      FROM (SELECT C.BIZ_DPT_CD ");
	sql_ptfloFunding.append("		                 , SUM(ROUND((A.PTC_PRO / 100),2)) AS PROD_G_MM ");
	sql_ptfloFunding.append("		              FROM IRIS_MM_CLS A ");
	sql_ptfloFunding.append("		             INNER JOIN IRIS_TSS_MGMT_MST C ");
	sql_ptfloFunding.append("		             ON  A.TSS_CD = C.TSS_CD ");
	sql_ptfloFunding.append("						   AND C.TSS_SCN_CD = 'G' ");
	sql_ptfloFunding.append("						   AND C.DEL_YN = 'N' ");
	sql_ptfloFunding.append("						   and  '^searchStartYymm^' between left(c.TSS_STRT_DD, 7) and left(c.TSS_FNH_DD, 7) ");
	sql_ptfloFunding.append("						   and c.PGS_STEP_CD ='PG' ");
	sql_ptfloFunding.append("		             WHERE A.MM_YYMM BETWEEN '^searchStartYymm^' AND  '^searchEndYymm^' ");
	sql_ptfloFunding.append("		             GROUP BY C.BIZ_DPT_CD) X ");
	sql_ptfloFunding.append("		) ");
	sql_ptfloFunding.append("		SELECT A.COM_DTL_CD AS comDelCd ");
	sql_ptfloFunding.append("		     , A.COM_DTL_NM AS comDelNm ");
	sql_ptfloFunding.append("		     , ISNULL(EL.ARSL_EXP,0) AS arslExp ");
	sql_ptfloFunding.append("		     , ISNULL(CONVERT(NUMERIC(5,2), ROUND((EL.ARSL_EXP/CASE WHEN EL.ARSL_EXP_SUM = 0 THEN 1 ELSE EL.ARSL_EXP_SUM END)*100,2)),0) AS arslExpSum ");
	sql_ptfloFunding.append("		     , ISNULL(CL.PROD_G_MM,0) AS prodGMm ");
	sql_ptfloFunding.append("		     , ISNULL(CONVERT(NUMERIC(5,2),ROUND((CL.PROD_G_MM/CASE WHEN CL.PROD_G_SUM = 0 THEN 1 ELSE CL.PROD_G_SUM END)*100,2)), 0) AS prodGMmSum ");
	sql_ptfloFunding.append("		  FROM IRIS_ADM_COM_CD A ");
	sql_ptfloFunding.append("		  LEFT JOIN EXP_LIST EL ");
	sql_ptfloFunding.append("		    ON A.COM_DTL_CD = EL.BIZ_DPT_CD ");
	sql_ptfloFunding.append("		  LEFT JOIN CLS_LIST CL ");
	sql_ptfloFunding.append("		    ON A.COM_DTL_CD = CL.BIZ_DPT_CD ");
	sql_ptfloFunding.append("		 WHERE A.COM_CD_CD = 'BIZ_DPT_CD' ");
	initializer.prepareQuery("sql_ptfloFunding", sql_ptfloFunding.toString());

	//sql_ptfloTrm
	StringBuilder sql_ptfloTrm = new StringBuilder();
	sql_ptfloTrm.setLength(0);
	sql_ptfloTrm.append("WITH EXP_LIST AS ( ");
	sql_ptfloTrm.append("		    SELECT DAY_DIFF_TYPE ");
	sql_ptfloTrm.append("		         , ROUND(ARSL_EXP, 2) AS ARSL_EXP ");
	sql_ptfloTrm.append("		         , SUM(ARSL_EXP) OVER() AS ARSL_EXP_SUM ");
	sql_ptfloTrm.append("		      FROM (SELECT (CASE WHEN ISNULL(DATEDIFF(DAY, A.TSS_STRT_DD, A.TSS_FNH_DD ),0) <= 730 THEN '01' ELSE '02' END) AS DAY_DIFF_TYPE ");
	sql_ptfloTrm.append("		                 , SUM(B.ARSL_EXP) AS ARSL_EXP ");
	sql_ptfloTrm.append("		              FROM IRIS_TSS_MGMT_MST A ");
	sql_ptfloTrm.append("		              JOIN (SELECT TSS_CD, SUM(ISNULL(PLN_EXP,0)) AS PLN_EXP, SUM(ISNULL(ARSL_EXP, 0)) AS ARSL_EXP ");
	sql_ptfloTrm.append("		                      FROM IRIS_TSS_GEN_TRWI_BUDG_LIST ");
	sql_ptfloTrm.append("		                     WHERE YY_MM BETWEEN  '^startYymm^' AND  '^endYymm^' ");
	sql_ptfloTrm.append("		                     GROUP BY TSS_CD) B ");
	sql_ptfloTrm.append("		                ON B.TSS_CD = A.TSS_CD ");
	sql_ptfloTrm.append("		             WHERE A.TSS_SCN_CD = 'G' ");
	sql_ptfloTrm.append("		               AND A.PGS_STEP_CD = 'PG' ");
	sql_ptfloTrm.append("		               AND A.DEL_YN = 'N' ");
	sql_ptfloTrm.append("		             GROUP BY (CASE WHEN ISNULL(DATEDIFF(DAY, A.TSS_STRT_DD, A.TSS_FNH_DD ),0) <= 730 THEN '01' ELSE '02' END)) X ");
	sql_ptfloTrm.append("		) ");
	sql_ptfloTrm.append("		, CLS_LIST AS ( ");
	sql_ptfloTrm.append("		    SELECT DAY_DIFF_TYPE ");
	sql_ptfloTrm.append("		         , ROUND(PROD_G_MM, 2) AS PROD_G_MM ");
	sql_ptfloTrm.append("		         , SUM(PROD_G_MM) OVER() AS PROD_G_SUM ");
	sql_ptfloTrm.append("		      FROM (SELECT (CASE WHEN ISNULL(DATEDIFF(DAY, C.TSS_STRT_DD , C.TSS_FNH_DD ),0) <= 730 THEN '01' ELSE '02' END) AS DAY_DIFF_TYPE ");
	sql_ptfloTrm.append("		                 , SUM(ROUND((A.PTC_PRO / 100),2)) AS PROD_G_MM ");
	sql_ptfloTrm.append("		             FROM IRIS_MM_CLS A ");
	sql_ptfloTrm.append("				            INNER JOIN IRIS_TSS_MGMT_MST C ");
	sql_ptfloTrm.append("				            ON  A.TSS_CD = C.TSS_CD ");
	sql_ptfloTrm.append("								   AND C.TSS_SCN_CD = 'G' ");
	sql_ptfloTrm.append("								   AND C.DEL_YN = 'N' ");
	sql_ptfloTrm.append("								   and  '^searchStartYymm^'  between left(c.TSS_STRT_DD, 7) and left(c.TSS_FNH_DD, 7) ");
	sql_ptfloTrm.append("								   and c.PGS_STEP_CD ='PG' ");
	sql_ptfloTrm.append("		            WHERE A.MM_YYMM BETWEEN  '^searchStartYymm^' AND  '^searchEndYymm^' ");
	sql_ptfloTrm.append("		            GROUP BY (CASE WHEN ISNULL(DATEDIFF(DAY, C.TSS_STRT_DD , C.TSS_FNH_DD ),0) <= 730 THEN '01' ELSE '02' END)) X ");
	sql_ptfloTrm.append("		) ");
	sql_ptfloTrm.append("		SELECT A.COM_DTL_CD AS comDelCd ");
	sql_ptfloTrm.append("		     , A.COM_DTL_NM AS comDelNm ");
	sql_ptfloTrm.append("		     , ISNULL(EL.ARSL_EXP,0) AS arslExp ");
	sql_ptfloTrm.append("		     , ISNULL(CONVERT(NUMERIC(5,2), ROUND((EL.ARSL_EXP/CASE WHEN EL.ARSL_EXP_SUM = 0 THEN 1 ELSE EL.ARSL_EXP_SUM END)*100,2)),0) AS arslExpSum ");
	sql_ptfloTrm.append("		     , ISNULL(CL.PROD_G_MM,0) AS prodGMm ");
	sql_ptfloTrm.append("		     , ISNULL(CONVERT(NUMERIC(5,2),ROUND((CL.PROD_G_MM/CASE WHEN CL.PROD_G_SUM = 0 THEN 1 ELSE CL.PROD_G_SUM END)*100,2)), 0) AS prodGMmSum ");
	sql_ptfloTrm.append("		  FROM (SELECT '01' AS COM_DTL_CD, '단기' AS COM_DTL_NM UNION ALL SELECT '02', '장기' ) A ");
	sql_ptfloTrm.append("		  LEFT JOIN EXP_LIST EL ");
	sql_ptfloTrm.append("		    ON A.COM_DTL_CD = EL.DAY_DIFF_TYPE ");
	sql_ptfloTrm.append("		  LEFT JOIN CLS_LIST CL ");
	sql_ptfloTrm.append("		    ON A.COM_DTL_CD = CL.DAY_DIFF_TYPE ");
	sql_ptfloTrm.append(" ");
	initializer.prepareQuery("sql_ptfloTrm", sql_ptfloTrm.toString());

	//sql_ptfloAttr
	StringBuilder sql_ptfloAttr = new StringBuilder();
	sql_ptfloAttr.setLength(0);
	sql_ptfloAttr.append("WITH EXP_LIST AS ( ");
	sql_ptfloAttr.append("		    SELECT TSS_ATTR_CD, ROUND(PLN_EXP, 2) AS PLN_EXP, SUM(PLN_EXP) OVER() AS PLN_EXP_SUM ");
	sql_ptfloAttr.append("		         , ROUND(ARSL_EXP, 2) AS ARSL_EXP, SUM(ARSL_EXP) OVER() AS ARSL_EXP_SUM ");
	sql_ptfloAttr.append("		      FROM (SELECT A.TSS_ATTR_CD, SUM(B.PLN_EXP) AS PLN_EXP, SUM(B.ARSL_EXP) AS ARSL_EXP ");
	sql_ptfloAttr.append("		              FROM IRIS_TSS_MGMT_MST A ");
	sql_ptfloAttr.append("		              JOIN (SELECT TSS_CD, SUM(ISNULL(PLN_EXP,0)) AS PLN_EXP, SUM(ISNULL(ARSL_EXP, 0)) AS ARSL_EXP ");
	sql_ptfloAttr.append("		                      FROM IRIS_TSS_GEN_TRWI_BUDG_LIST ");
	sql_ptfloAttr.append("		                     WHERE YY_MM BETWEEN '^startYymm^' AND  '^endYymm^' ");
	sql_ptfloAttr.append("		                     GROUP BY TSS_CD) B ");
	sql_ptfloAttr.append("		                ON B.TSS_CD = A.TSS_CD ");
	sql_ptfloAttr.append("		             WHERE A.TSS_SCN_CD = 'G' ");
	sql_ptfloAttr.append("		               AND A.PGS_STEP_CD = 'PG' ");
	sql_ptfloAttr.append("		               AND A.TSS_ATTR_CD != '  ' ");
	sql_ptfloAttr.append("		             GROUP BY A.TSS_ATTR_CD) X ");
	sql_ptfloAttr.append("		) ");
	sql_ptfloAttr.append("		, CLS_LIST AS ( ");
	sql_ptfloAttr.append("		    SELECT TSS_ATTR_CD, ROUND(PROD_G_MM, 2) AS PROD_G_MM, SUM(PROD_G_MM) OVER() AS PROD_G_SUM ");
	sql_ptfloAttr.append("		      FROM (SELECT C.TSS_ATTR_CD ");
	sql_ptfloAttr.append("		                 , SUM(ROUND((A.PTC_PRO / 100),2)) AS PROD_G_MM ");
	sql_ptfloAttr.append("		              FROM IRIS_MM_CLS A ");
	sql_ptfloAttr.append("				             INNER JOIN IRIS_TSS_MGMT_MST C ");
	sql_ptfloAttr.append("				             ON  A.TSS_CD = C.TSS_CD ");
	sql_ptfloAttr.append("								   AND C.TSS_SCN_CD = 'G' ");
	sql_ptfloAttr.append("								   AND C.DEL_YN = 'N' ");
	sql_ptfloAttr.append("								   and c.PGS_STEP_CD ='PG' ");
	sql_ptfloAttr.append("								   and  '^searchStartYymm^' between left(c.TSS_STRT_DD, 7) and left(c.TSS_FNH_DD, 7) ");
	sql_ptfloAttr.append("		             WHERE C.TSS_ATTR_CD != '  ' ");
	sql_ptfloAttr.append("		               AND A.MM_YYMM BETWEEN  '^searchStartYymm^' AND  '^searchEndYymm^' ");
	sql_ptfloAttr.append("		             GROUP BY C.TSS_ATTR_CD) X ");
	sql_ptfloAttr.append("		) ");
	sql_ptfloAttr.append("		SELECT A.COM_DTL_CD AS comDelCd ");
	sql_ptfloAttr.append("		     , A.COM_DTL_NM AS comDelNm ");
	sql_ptfloAttr.append("		     , ISNULL(EL.ARSL_EXP,0) AS arslExp ");
	sql_ptfloAttr.append("		     , ISNULL(CONVERT(NUMERIC(5,2), ROUND((EL.ARSL_EXP/CASE WHEN EL.ARSL_EXP_SUM = 0 THEN 1 ELSE EL.ARSL_EXP_SUM END)*100,2)),0) AS arslExpSum ");
	sql_ptfloAttr.append("		     , ISNULL(CL.PROD_G_MM,0) AS prodGMm ");
	sql_ptfloAttr.append("		     , ISNULL(CONVERT(NUMERIC(5,2),ROUND((CL.PROD_G_MM/CASE WHEN CL.PROD_G_SUM = 0 THEN 1 ELSE CL.PROD_G_SUM END)*100,2)), 0) AS prodGMmSum ");
	sql_ptfloAttr.append("		  FROM IRIS_ADM_COM_CD A ");
	sql_ptfloAttr.append("		  LEFT JOIN EXP_LIST EL ");
	sql_ptfloAttr.append("		    ON A.COM_DTL_CD = EL.TSS_ATTR_CD ");
	sql_ptfloAttr.append("		  LEFT JOIN CLS_LIST CL ");
	sql_ptfloAttr.append("		    ON A.COM_DTL_CD = CL.TSS_ATTR_CD ");
	sql_ptfloAttr.append("		 WHERE A.COM_CD_CD = 'TSS_ATTR_CD' ");
	initializer.prepareQuery("sql_ptfloAttr", sql_ptfloAttr.toString());

	//sql_ptfloSphe
	StringBuilder sql_ptfloSphe = new StringBuilder();
	sql_ptfloSphe.setLength(0);
	sql_ptfloSphe.append("WITH EXP_LIST AS ( ");
	sql_ptfloSphe.append("		    SELECT RSST_SPHE, ROUND(PLN_EXP, 2) AS PLN_EXP, SUM(PLN_EXP) OVER() AS PLN_EXP_SUM ");
	sql_ptfloSphe.append("		         , ROUND(ARSL_EXP, 2) AS ARSL_EXP, SUM(ARSL_EXP) OVER() AS ARSL_EXP_SUM ");
	sql_ptfloSphe.append("		      FROM (SELECT A.RSST_SPHE, SUM(B.PLN_EXP) AS PLN_EXP, SUM(B.ARSL_EXP) AS ARSL_EXP ");
	sql_ptfloSphe.append("		              FROM IRIS_TSS_MGMT_MST A ");
	sql_ptfloSphe.append("		              JOIN (SELECT TSS_CD, SUM(ISNULL(PLN_EXP,0)) AS PLN_EXP, SUM(ISNULL(ARSL_EXP, 0)) AS ARSL_EXP ");
	sql_ptfloSphe.append("		                      FROM IRIS_TSS_GEN_TRWI_BUDG_LIST ");
	sql_ptfloSphe.append("		                     WHERE YY_MM BETWEEN  '^startYymm^' AND  '^endYymm^' ");
	sql_ptfloSphe.append("		                     GROUP BY TSS_CD) B ");
	sql_ptfloSphe.append("		                ON B.TSS_CD = A.TSS_CD ");
	sql_ptfloSphe.append("		             WHERE A.TSS_SCN_CD = 'G' ");
	sql_ptfloSphe.append("		               AND A.PGS_STEP_CD = 'PG' ");
	sql_ptfloSphe.append("		               AND A.RSST_SPHE IS NOT NULL ");
	sql_ptfloSphe.append("		             GROUP BY A.RSST_SPHE) X ");
	sql_ptfloSphe.append("		) ");
	sql_ptfloSphe.append("		, CLS_LIST AS ( ");
	sql_ptfloSphe.append("		    SELECT RSST_SPHE, ROUND(PROD_G_MM, 2) AS PROD_G_MM, SUM(PROD_G_MM) OVER() AS PROD_G_SUM ");
	sql_ptfloSphe.append("		      FROM (SELECT C.RSST_SPHE ");
	sql_ptfloSphe.append("		                 , SUM(ROUND((A.PTC_PRO / 100),2)) AS PROD_G_MM ");
	sql_ptfloSphe.append("		              FROM IRIS_MM_CLS A ");
	sql_ptfloSphe.append("		             INNER JOIN IRIS_TSS_MGMT_MST C ON A.PRJ_CD = C.PRJ_CD AND A.TSS_CD = C.TSS_CD  AND C.TSS_SCN_CD = 'G' AND C.DEL_YN = 'N' ");
	sql_ptfloSphe.append("		             WHERE C.RSST_SPHE IS NOT NULL ");
	sql_ptfloSphe.append("		               AND A.MM_YYMM BETWEEN '^searchStartYymm^' AND  '^searchEndYymm^' ");
	sql_ptfloSphe.append("		             GROUP BY C.RSST_SPHE) X ");
	sql_ptfloSphe.append("		) ");
	sql_ptfloSphe.append("		SELECT A.COM_DTL_CD AS comDelCd ");
	sql_ptfloSphe.append("		     , A.COM_DTL_NM AS comDelNm ");
	sql_ptfloSphe.append("		     , ISNULL(EL.ARSL_EXP,0) AS arslExp ");
	sql_ptfloSphe.append("		     , ISNULL(CONVERT(NUMERIC(5,2), ROUND((EL.ARSL_EXP/CASE WHEN EL.ARSL_EXP_SUM = 0 THEN 1 ELSE EL.ARSL_EXP_SUM END)*100,2)),0) AS arslExpSum ");
	sql_ptfloSphe.append("		     , ISNULL(CL.PROD_G_MM,0) AS prodGMm ");
	sql_ptfloSphe.append("		     , ISNULL(CONVERT(NUMERIC(5,2),ROUND((CL.PROD_G_MM/CASE WHEN CL.PROD_G_SUM = 0 THEN 1 ELSE CL.PROD_G_SUM END)*100,2)), 0) AS prodGMmSum ");
	sql_ptfloSphe.append("		  FROM IRIS_ADM_COM_CD A ");
	sql_ptfloSphe.append("		  LEFT JOIN EXP_LIST EL ");
	sql_ptfloSphe.append("		    ON A.COM_DTL_CD = EL.RSST_SPHE ");
	sql_ptfloSphe.append("		  LEFT JOIN CLS_LIST CL ");
	sql_ptfloSphe.append("		    ON A.COM_DTL_CD = CL.RSST_SPHE ");
	sql_ptfloSphe.append("		 WHERE A.COM_CD_CD = 'RSST_SPHE' ");
	initializer.prepareQuery("sql_ptfloSphe", sql_ptfloSphe.toString());

	//sql_ptfloType
	StringBuilder sql_ptfloType = new StringBuilder();
	sql_ptfloType.setLength(0);
	sql_ptfloType.append("WITH EXP_LIST AS ( ");
	sql_ptfloType.append("		    SELECT TSS_TYPE, ROUND(PLN_EXP, 2) AS PLN_EXP, SUM(PLN_EXP) OVER() AS PLN_EXP_SUM ");
	sql_ptfloType.append("		         , ROUND(ARSL_EXP, 2) AS ARSL_EXP, SUM(ARSL_EXP) OVER() AS ARSL_EXP_SUM ");
	sql_ptfloType.append("		      FROM (SELECT A.TSS_TYPE, SUM(B.PLN_EXP) AS PLN_EXP, SUM(B.ARSL_EXP) AS ARSL_EXP ");
	sql_ptfloType.append("		              FROM IRIS_TSS_MGMT_MST A ");
	sql_ptfloType.append("		              JOIN (SELECT TSS_CD, SUM(ISNULL(PLN_EXP,0)) AS PLN_EXP, SUM(ISNULL(ARSL_EXP, 0)) AS ARSL_EXP ");
	sql_ptfloType.append("		                      FROM IRIS_TSS_GEN_TRWI_BUDG_LIST ");
	sql_ptfloType.append("		                     WHERE YY_MM BETWEEN '^startYymm^' AND  '^endYymm^' ");
	sql_ptfloType.append("		                     GROUP BY TSS_CD) B ");
	sql_ptfloType.append("		                ON B.TSS_CD = A.TSS_CD ");
	sql_ptfloType.append("		             WHERE A.TSS_SCN_CD = 'G' ");
	sql_ptfloType.append("		               AND A.PGS_STEP_CD = 'PG' ");
	sql_ptfloType.append("		               AND A.TSS_TYPE IS NOT NULL ");
	sql_ptfloType.append("		             GROUP BY A.TSS_TYPE) X ");
	sql_ptfloType.append("		) ");
	sql_ptfloType.append("		, CLS_LIST AS ( ");
	sql_ptfloType.append("		    SELECT TSS_TYPE, ROUND(PROD_G_MM, 2) AS PROD_G_MM, SUM(PROD_G_MM) OVER() AS PROD_G_SUM ");
	sql_ptfloType.append("		      FROM (SELECT C.TSS_TYPE ");
	sql_ptfloType.append("		                 , SUM(ROUND((A.PTC_PRO / 100),2)) AS PROD_G_MM ");
	sql_ptfloType.append("		              FROM IRIS_MM_CLS A ");
	sql_ptfloType.append("		             INNER JOIN IRIS_TSS_MGMT_MST C ON A.PRJ_CD = C.PRJ_CD AND A.TSS_CD = C.TSS_CD  AND C.TSS_SCN_CD = 'G' AND C.DEL_YN = 'N' ");
	sql_ptfloType.append("		             WHERE C.TSS_TYPE IS NOT NULL ");
	sql_ptfloType.append("		               AND A.MM_YYMM BETWEEN '^searchStartYymm^' AND  '^searchEndYymm^' ");
	sql_ptfloType.append("		             GROUP BY C.TSS_TYPE) X ");
	sql_ptfloType.append("		) ");
	sql_ptfloType.append("		SELECT A.COM_DTL_CD AS comDelCd ");
	sql_ptfloType.append("		     , A.COM_DTL_NM AS comDelNm ");
	sql_ptfloType.append("		     , ISNULL(EL.ARSL_EXP,0) AS arslExp ");
	sql_ptfloType.append("		     , ISNULL(CONVERT(NUMERIC(5,2), ROUND((EL.ARSL_EXP/CASE WHEN EL.ARSL_EXP_SUM = 0 THEN 1 ELSE EL.ARSL_EXP_SUM END)*100,2)),0) AS arslExpSum ");
	sql_ptfloType.append("		     , ISNULL(CL.PROD_G_MM,0) AS prodGMm ");
	sql_ptfloType.append("		     , ISNULL(CONVERT(NUMERIC(5,2),ROUND((CL.PROD_G_MM/CASE WHEN CL.PROD_G_SUM = 0 THEN 1 ELSE CL.PROD_G_SUM END)*100,2)), 0) AS prodGMmSum ");
	sql_ptfloType.append("		  FROM IRIS_ADM_COM_CD A ");
	sql_ptfloType.append("		  LEFT JOIN EXP_LIST EL ");
	sql_ptfloType.append("		    ON A.COM_DTL_CD = EL.TSS_TYPE ");
	sql_ptfloType.append("		  LEFT JOIN CLS_LIST CL ");
	sql_ptfloType.append("		    ON A.COM_DTL_CD = CL.TSS_TYPE ");
	sql_ptfloType.append("		 WHERE A.COM_CD_CD = 'TSS_TYPE' ");
	initializer.prepareQuery("sql_ptfloType", sql_ptfloType.toString());
}

class ReportHandler{
	//공통 변수 선언
	private final Logger logger = Logger.getLogger("com.activeintra");
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String AI_CHART_OBJ22;
	String AI_CHART_OBJ23;
	String AI_CHART_OBJ6;
	String AI_CHART_OBJ7;
	String AI_CHART_OBJ8;
	String AI_CHART_OBJ9;
	String AI_CHART_OBJ12;
	String AI_CHART_OBJ13;
	String AI_CHART_OBJ14;
	String AI_CHART_OBJ15;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_irisPrd; 	 //irisPrd Connection 객체
	private java.sql.PreparedStatement stat_ptfloFunding;		//ResultSet ptfloFunding 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet ptfloFunding;		//ResultSet ptfloFunding 객체
	private java.sql.PreparedStatement stat_ptfloTrm;		//ResultSet ptfloTrm 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet ptfloTrm;		//ResultSet ptfloTrm 객체
	private java.sql.PreparedStatement stat_ptfloAttr;		//ResultSet ptfloAttr 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet ptfloAttr;		//ResultSet ptfloAttr 객체
	private java.sql.PreparedStatement stat_ptfloSphe;		//ResultSet ptfloSphe 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet ptfloSphe;		//ResultSet ptfloSphe 객체
	private java.sql.PreparedStatement stat_ptfloType;		//ResultSet ptfloType 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet ptfloType;		//ResultSet ptfloType 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_ptfloFunding = new StringBuilder();		//ResultSet ptfloFunding 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_ptfloTrm = new StringBuilder();		//ResultSet ptfloTrm 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_ptfloAttr = new StringBuilder();		//ResultSet ptfloAttr 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_ptfloSphe = new StringBuilder();		//ResultSet ptfloSphe 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_ptfloType = new StringBuilder();		//ResultSet ptfloType 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet ptfloFunding 객체에서 필드 값을 받는 쿼리 필드 변수
	private String ptfloFunding_comDelCd;
	private String ptfloFunding_comDelNm;
	private double ptfloFunding_arslExp;
	private double ptfloFunding_arslExpSum;
	private double ptfloFunding_prodGMm;
	private double ptfloFunding_prodGMmSum;

	//ResultSet ptfloTrm 객체에서 필드 값을 받는 쿼리 필드 변수
	private String ptfloTrm_comDelCd;
	private String ptfloTrm_comDelNm;
	private double ptfloTrm_arslExp;
	private double ptfloTrm_arslExpSum;
	private double ptfloTrm_prodGMm;
	private double ptfloTrm_prodGMmSum;

	//ResultSet ptfloAttr 객체에서 필드 값을 받는 쿼리 필드 변수
	private String ptfloAttr_comDelCd;
	private String ptfloAttr_comDelNm;
	private double ptfloAttr_arslExp;
	private double ptfloAttr_arslExpSum;
	private double ptfloAttr_prodGMm;
	private double ptfloAttr_prodGMmSum;

	//ResultSet ptfloSphe 객체에서 필드 값을 받는 쿼리 필드 변수
	private String ptfloSphe_comDelCd;
	private String ptfloSphe_comDelNm;
	private double ptfloSphe_arslExp;
	private double ptfloSphe_arslExpSum;
	private double ptfloSphe_prodGMm;
	private double ptfloSphe_prodGMmSum;

	//ResultSet ptfloType 객체에서 필드 값을 받는 쿼리 필드 변수
	private String ptfloType_comDelCd;
	private String ptfloType_comDelNm;
	private double ptfloType_arslExp;
	private double ptfloType_arslExpSum;
	private double ptfloType_prodGMm;
	private double ptfloType_prodGMmSum;

	//파라미터 변수 선언
	String searchStartYymm_Param;
	String searchEndYymm_Param;
	String sheetNum_Param;
	String startYymm_Param;
	String endYymm_Param;

	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replaceFirst(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "VERTICAL", "56 70 56 70");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				if(sheetNum_Param.equals("1")){
					//쉬트 함수 호출
					//SHEET=Sheet1   FRAME=0 함수 호출
					executeSheet10();
					/*

					//쉬트 함수 호출
					//SHEET=Sheet1   FRAME=0 함수 호출
					executeSheet10();
					//SHEET=Sheet2   FRAME=0 함수 호출
					executeSheet20();
					//SHEET=Sheet3   FRAME=0 함수 호출
					executeSheet30();
					//SHEET=Sheet4   FRAME=0 함수 호출
					executeSheet40();
					//SHEET=Sheet5   FRAME=0 함수 호출
					executeSheet50();
					//SHEET=Sheet6   FRAME=0 함수 호출
					executeSheet60();
					//SHEET=Sheet7   FRAME=0 함수 호출
					executeSheet70();
					//SHEET=Sheet8   FRAME=0 함수 호출
					executeSheet80();
					//SHEET=Sheet9   FRAME=0 함수 호출
					executeSheet90();
					//SHEET=Sheet10   FRAME=0 함수 호출
					executeSheet100();

					*/
				}else if(sheetNum_Param.equals("2")){
					executeSheet20();
				}else if (sheetNum_Param.equals("3")){
					executeSheet30();
				}else if (sheetNum_Param.equals("4")){
					executeSheet40();
				}else if (sheetNum_Param.equals("5")){
					executeSheet50();
				}else if (sheetNum_Param.equals("6")){
					executeSheet60();
				}else if (sheetNum_Param.equals("7")){
					executeSheet70();
				}else if (sheetNum_Param.equals("8")){
					executeSheet80();
				}else if (sheetNum_Param.equals("9")){
					executeSheet90();
				}else if (sheetNum_Param.equals("10")){
					executeSheet100();
				}

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Throwable t){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(t.toString());
			throw (new AIException(t.toString(),t.getCause()));
		}finally{    //finally 구문
			if(manager.reportFile!=null)
			manager.reportFile.close();

			//DataSet Close
			cleanup(ptfloType, stat_ptfloType, null, null);
			cleanup(ptfloSphe, stat_ptfloSphe, null, null);
			cleanup(ptfloAttr, stat_ptfloAttr, null, null);
			cleanup(ptfloTrm, stat_ptfloTrm, null, null);
			cleanup(ptfloFunding, stat_ptfloFunding, null, null);
			cleanup(null, null, null, conn_irisPrd);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "1550x900", "256", "VERTICAL", "0 0 0 0");
		initSheetVariant(0, 0, 439, 255, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrompi(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "1550x900", "256", "VERTICAL", "0 0 0 0");
		initSheetVariant(0, 0, 439, 255, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrompi_2(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "1550x900", "256", "VERTICAL", "0 0 0 0");
		initSheetVariant(0, 0, 439, 255, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrompi_3(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet4   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet40( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "1550x900", "256", "VERTICAL", "0 0 0 0");
		initSheetVariant(0, 0, 439, 255, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrompi_4(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet5   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet50( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "1550x900", "256", "VERTICAL", "0 0 0 0");
		initSheetVariant(0, 0, 439, 255, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrompi_5(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet6   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet60( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "1550x900", "256", "VERTICAL", "0 0 0 0");
		initSheetVariant(0, 0, 439, 255, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrompi_6(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet7   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet70( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "1550x900", "256", "VERTICAL", "0 0 0 0");
		initSheetVariant(0, 0, 439, 255, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrompi_7(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet8   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet80( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "1550x900", "256", "VERTICAL", "0 0 0 0");
		initSheetVariant(0, 0, 439, 255, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrompi_8(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet9   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet90( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "1550x900", "256", "VERTICAL", "0 0 0 0");
		initSheetVariant(0, 0, 439, 255, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrompi_9(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet10   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet100( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("User Define", "1550x900", "256", "VERTICAL", "0 0 0 0");
		initSheetVariant(0, 0, 439, 255, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFrompi_10(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----pi VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : pi
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompi(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=252;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ22="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ22( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptpi();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----pi_2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : pi_2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompi_2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=251;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ23="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ23( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptpi_2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----pi_3 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : pi_3
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompi_3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=253;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ6="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ6( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(30);
			}

			//스크립트 출력 함수 호출
			writeScriptpi_3();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----pi_4 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : pi_4
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompi_4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=254;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ7="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ7( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(40);
			}

			//스크립트 출력 함수 호출
			writeScriptpi_4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----pi_5 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet5    FRAME=Frame0
	//----밴드 이름 : pi_5
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompi_5(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=252;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ8="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ8( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(50);
			}

			//스크립트 출력 함수 호출
			writeScriptpi_5();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----pi_6 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet6    FRAME=Frame0
	//----밴드 이름 : pi_6
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompi_6(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=253;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ9="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ9( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(60);
			}

			//스크립트 출력 함수 호출
			writeScriptpi_6();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----pi_7 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet7    FRAME=Frame0
	//----밴드 이름 : pi_7
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompi_7(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=255;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ12="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ12( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(70);
			}

			//스크립트 출력 함수 호출
			writeScriptpi_7();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----pi_8 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet8    FRAME=Frame0
	//----밴드 이름 : pi_8
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompi_8(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=252;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ13="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ13( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(80);
			}

			//스크립트 출력 함수 호출
			writeScriptpi_8();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----pi_9 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet9    FRAME=Frame0
	//----밴드 이름 : pi_9
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompi_9(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=252;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ14="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ14( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(90);
			}

			//스크립트 출력 함수 호출
			writeScriptpi_9();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----pi_10 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet10    FRAME=Frame0
	//----밴드 이름 : pi_10
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFrompi_10(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=252;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 초기화
			AI_CHART_OBJ15="";

			//데이터 변수 할당
			getChartDataAI_CHART_OBJ15( );
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(100);
			}

			//스크립트 출력 함수 호출
			writeScriptpi_10();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----pi 스크립트 문 출력 함수----
	private void writeScriptpi( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos+3, nYCurPos+4, 417, 246, AI_CHART_OBJ22, "AI_CHART_OBJ22", "draw_style_0");
	}

	//----pi_2 스크립트 문 출력 함수----
	private void writeScriptpi_2( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos+6, nYCurPos+4, 406, 247, AI_CHART_OBJ23, "AI_CHART_OBJ23", "draw_style_1");
	}

	//----pi_3 스크립트 문 출력 함수----
	private void writeScriptpi_3( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos, 400, 250, AI_CHART_OBJ6, "AI_CHART_OBJ6", "draw_style_2");
	}

	//----pi_4 스크립트 문 출력 함수----
	private void writeScriptpi_4( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos, 400, 250, AI_CHART_OBJ7, "AI_CHART_OBJ7", "draw_style_3");
	}

	//----pi_5 스크립트 문 출력 함수----
	private void writeScriptpi_5( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos, 400, 250, AI_CHART_OBJ8, "AI_CHART_OBJ8", "draw_style_4");
	}

	//----pi_6 스크립트 문 출력 함수----
	private void writeScriptpi_6( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos, 400, 250, AI_CHART_OBJ9, "AI_CHART_OBJ9", "draw_style_5");
	}

	//----pi_7 스크립트 문 출력 함수----
	private void writeScriptpi_7( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos+6, 400, 250, AI_CHART_OBJ12, "AI_CHART_OBJ12", "draw_style_6");
	}

	//----pi_8 스크립트 문 출력 함수----
	private void writeScriptpi_8( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos, 400, 250, AI_CHART_OBJ13, "AI_CHART_OBJ13", "draw_style_7");
	}

	//----pi_9 스크립트 문 출력 함수----
	private void writeScriptpi_9( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos, 400, 250, AI_CHART_OBJ14, "AI_CHART_OBJ14", "draw_style_8");
	}

	//----pi_10 스크립트 문 출력 함수----
	private void writeScriptpi_10( ) throws Exception{
		//스크립트문 생성
		objectWrite(DRAW_OBJECT, nXCurPos, nYCurPos+2, 400, 250, AI_CHART_OBJ15, "AI_CHART_OBJ15", "draw_style_9");
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//irisPrd Connection 객체 생성
		Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
		conn_irisPrd = DriverManager.getConnection("jdbc:sqlserver://165.244.161.152:1433;databaseName=IRISDB", "irisapp", "lghausys123!");
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_ptfloFunding = initializer.configPreparedStatement("sql_ptfloFunding", mapParam, conn_irisPrd, null);

		stat_ptfloTrm = initializer.configPreparedStatement("sql_ptfloTrm", mapParam, conn_irisPrd, null);

		stat_ptfloAttr = initializer.configPreparedStatement("sql_ptfloAttr", mapParam, conn_irisPrd, null);

		stat_ptfloSphe = initializer.configPreparedStatement("sql_ptfloSphe", mapParam, conn_irisPrd, null);

		stat_ptfloType = initializer.configPreparedStatement("sql_ptfloType", mapParam, conn_irisPrd, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet ptfloFunding 객체에서 필드 값 설정 함수
	private void setFieldVariableFromptfloFunding() throws Exception{
		ptfloFunding_comDelCd = GetB(ptfloFunding.getString(1));
		ptfloFunding_comDelNm = GetB(ptfloFunding.getString(2));
		ptfloFunding_arslExp = ptfloFunding.getDouble(3);
		ptfloFunding_arslExpSum = ptfloFunding.getDouble(4);
		ptfloFunding_prodGMm = ptfloFunding.getDouble(5);
		ptfloFunding_prodGMmSum = ptfloFunding.getDouble(6);
	}

	//ResultSet ptfloFunding 객체의 필드 값 초기화 함수
	private void setFieldInitFromptfloFunding(){
		ptfloFunding_comDelCd = "";
		ptfloFunding_comDelNm = "";
		ptfloFunding_arslExp = 0;
		ptfloFunding_arslExpSum = 0;
		ptfloFunding_prodGMm = 0;
		ptfloFunding_prodGMmSum = 0;
	}

	//ResultSet ptfloFunding 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromptfloFunding() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(ptfloFunding.getObject(1));
		row.add(ptfloFunding.getObject(2));
		row.add(ptfloFunding.getDouble(3));
		row.add(ptfloFunding.getDouble(4));
		row.add(ptfloFunding.getDouble(5));
		row.add(ptfloFunding.getDouble(6));

		return row;
	}

	//ResultSet ptfloTrm 객체에서 필드 값 설정 함수
	private void setFieldVariableFromptfloTrm() throws Exception{
		ptfloTrm_comDelCd = GetB(ptfloTrm.getString(1));
		ptfloTrm_comDelNm = GetB(ptfloTrm.getString(2));
		ptfloTrm_arslExp = ptfloTrm.getDouble(3);
		ptfloTrm_arslExpSum = ptfloTrm.getDouble(4);
		ptfloTrm_prodGMm = ptfloTrm.getDouble(5);
		ptfloTrm_prodGMmSum = ptfloTrm.getDouble(6);
	}

	//ResultSet ptfloTrm 객체의 필드 값 초기화 함수
	private void setFieldInitFromptfloTrm(){
		ptfloTrm_comDelCd = "";
		ptfloTrm_comDelNm = "";
		ptfloTrm_arslExp = 0;
		ptfloTrm_arslExpSum = 0;
		ptfloTrm_prodGMm = 0;
		ptfloTrm_prodGMmSum = 0;
	}

	//ResultSet ptfloTrm 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromptfloTrm() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(ptfloTrm.getObject(1));
		row.add(ptfloTrm.getObject(2));
		row.add(ptfloTrm.getDouble(3));
		row.add(ptfloTrm.getDouble(4));
		row.add(ptfloTrm.getDouble(5));
		row.add(ptfloTrm.getDouble(6));

		return row;
	}

	//ResultSet ptfloAttr 객체에서 필드 값 설정 함수
	private void setFieldVariableFromptfloAttr() throws Exception{
		ptfloAttr_comDelCd = GetB(ptfloAttr.getString(1));
		ptfloAttr_comDelNm = GetB(ptfloAttr.getString(2));
		ptfloAttr_arslExp = ptfloAttr.getDouble(3);
		ptfloAttr_arslExpSum = ptfloAttr.getDouble(4);
		ptfloAttr_prodGMm = ptfloAttr.getDouble(5);
		ptfloAttr_prodGMmSum = ptfloAttr.getDouble(6);
	}

	//ResultSet ptfloAttr 객체의 필드 값 초기화 함수
	private void setFieldInitFromptfloAttr(){
		ptfloAttr_comDelCd = "";
		ptfloAttr_comDelNm = "";
		ptfloAttr_arslExp = 0;
		ptfloAttr_arslExpSum = 0;
		ptfloAttr_prodGMm = 0;
		ptfloAttr_prodGMmSum = 0;
	}

	//ResultSet ptfloAttr 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromptfloAttr() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(ptfloAttr.getObject(1));
		row.add(ptfloAttr.getObject(2));
		row.add(ptfloAttr.getDouble(3));
		row.add(ptfloAttr.getDouble(4));
		row.add(ptfloAttr.getDouble(5));
		row.add(ptfloAttr.getDouble(6));

		return row;
	}

	//ResultSet ptfloSphe 객체에서 필드 값 설정 함수
	private void setFieldVariableFromptfloSphe() throws Exception{
		ptfloSphe_comDelCd = GetB(ptfloSphe.getString(1));
		ptfloSphe_comDelNm = GetB(ptfloSphe.getString(2));
		ptfloSphe_arslExp = ptfloSphe.getDouble(3);
		ptfloSphe_arslExpSum = ptfloSphe.getDouble(4);
		ptfloSphe_prodGMm = ptfloSphe.getDouble(5);
		ptfloSphe_prodGMmSum = ptfloSphe.getDouble(6);
	}

	//ResultSet ptfloSphe 객체의 필드 값 초기화 함수
	private void setFieldInitFromptfloSphe(){
		ptfloSphe_comDelCd = "";
		ptfloSphe_comDelNm = "";
		ptfloSphe_arslExp = 0;
		ptfloSphe_arslExpSum = 0;
		ptfloSphe_prodGMm = 0;
		ptfloSphe_prodGMmSum = 0;
	}

	//ResultSet ptfloSphe 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromptfloSphe() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(ptfloSphe.getObject(1));
		row.add(ptfloSphe.getObject(2));
		row.add(ptfloSphe.getDouble(3));
		row.add(ptfloSphe.getDouble(4));
		row.add(ptfloSphe.getDouble(5));
		row.add(ptfloSphe.getDouble(6));

		return row;
	}

	//ResultSet ptfloType 객체에서 필드 값 설정 함수
	private void setFieldVariableFromptfloType() throws Exception{
		ptfloType_comDelCd = GetB(ptfloType.getString(1));
		ptfloType_comDelNm = GetB(ptfloType.getString(2));
		ptfloType_arslExp = ptfloType.getDouble(3);
		ptfloType_arslExpSum = ptfloType.getDouble(4);
		ptfloType_prodGMm = ptfloType.getDouble(5);
		ptfloType_prodGMmSum = ptfloType.getDouble(6);
	}

	//ResultSet ptfloType 객체의 필드 값 초기화 함수
	private void setFieldInitFromptfloType(){
		ptfloType_comDelCd = "";
		ptfloType_comDelNm = "";
		ptfloType_arslExp = 0;
		ptfloType_arslExpSum = 0;
		ptfloType_prodGMm = 0;
		ptfloType_prodGMmSum = 0;
	}

	//ResultSet ptfloType 객체에서 RowData 획득함수
	private List<Object> getAIRowDataFromptfloType() throws Exception{
		List<Object> row = new ArrayList<Object>();

		row.add(ptfloType.getObject(1));
		row.add(ptfloType.getObject(2));
		row.add(ptfloType.getDouble(3));
		row.add(ptfloType.getDouble(4));
		row.add(ptfloType.getDouble(5));
		row.add(ptfloType.getDouble(6));

		return row;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
	}

	//----AI_CHART_OBJ22 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ22( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet ptfloFunding 객체의 생성
		if(ptfloFunding==null){
			ptfloFunding = stat_ptfloFunding.executeQuery();
		}else{
			ptfloFunding.beforeFirst();
		}
		if(!ptfloFunding.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ22="\t";
		AI_CHART_OBJ22=AI_CHART_OBJ22 + "arslExp\r\n";

		while(ptfloFunding.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromptfloFunding();   //RecordSet ptfloFunding에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ22=AI_CHART_OBJ22 + ptfloFunding_comDelNm + "\t";

			//데이터 설정
			AI_CHART_OBJ22=AI_CHART_OBJ22 + ptfloFunding_arslExp + "\r\n";
		}   //while end
	}

	//----AI_CHART_OBJ23 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ23( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet ptfloFunding 객체의 생성
		if(ptfloFunding==null){
			ptfloFunding = stat_ptfloFunding.executeQuery();
		}else{
			ptfloFunding.beforeFirst();
		}
		if(!ptfloFunding.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ23="\t";
		AI_CHART_OBJ23=AI_CHART_OBJ23 + "prodGMm\r\n";

		while(ptfloFunding.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromptfloFunding();   //RecordSet ptfloFunding에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ23=AI_CHART_OBJ23 + ptfloFunding_comDelNm + "\t";

			//데이터 설정
			AI_CHART_OBJ23=AI_CHART_OBJ23 + ptfloFunding_prodGMm + "\r\n";
		}   //while end
	}

	//----AI_CHART_OBJ6 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ6( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet ptfloTrm 객체의 생성
		if(ptfloTrm==null){
			ptfloTrm = stat_ptfloTrm.executeQuery();
		}else{
			ptfloTrm.beforeFirst();
		}
		if(!ptfloTrm.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ6="\t";
		AI_CHART_OBJ6=AI_CHART_OBJ6 + "arslExp\r\n";

		while(ptfloTrm.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromptfloTrm();   //RecordSet ptfloTrm에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ6=AI_CHART_OBJ6 + ptfloTrm_comDelNm + "\t";

			//데이터 설정
			AI_CHART_OBJ6=AI_CHART_OBJ6 + ptfloTrm_arslExp + "\r\n";
		}   //while end
	}

	//----AI_CHART_OBJ7 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ7( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet ptfloTrm 객체의 생성
		if(ptfloTrm==null){
			ptfloTrm = stat_ptfloTrm.executeQuery();
		}else{
			ptfloTrm.beforeFirst();
		}
		if(!ptfloTrm.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ7="\t";
		AI_CHART_OBJ7=AI_CHART_OBJ7 + "prodGMm\r\n";

		while(ptfloTrm.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromptfloTrm();   //RecordSet ptfloTrm에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ7=AI_CHART_OBJ7 + ptfloTrm_comDelNm + "\t";

			//데이터 설정
			AI_CHART_OBJ7=AI_CHART_OBJ7 + ptfloTrm_prodGMm + "\r\n";
		}   //while end
	}

	//----AI_CHART_OBJ8 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ8( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet ptfloAttr 객체의 생성
		if(ptfloAttr==null){
			ptfloAttr = stat_ptfloAttr.executeQuery();
		}else{
			ptfloAttr.beforeFirst();
		}
		if(!ptfloAttr.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ8="\t";
		AI_CHART_OBJ8=AI_CHART_OBJ8 + "arslExp\r\n";

		while(ptfloAttr.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromptfloAttr();   //RecordSet ptfloAttr에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ8=AI_CHART_OBJ8 + ptfloAttr_comDelNm + "\t";

			//데이터 설정
			AI_CHART_OBJ8=AI_CHART_OBJ8 + ptfloAttr_arslExp + "\r\n";
		}   //while end
	}

	//----AI_CHART_OBJ9 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ9( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet ptfloAttr 객체의 생성
		if(ptfloAttr==null){
			ptfloAttr = stat_ptfloAttr.executeQuery();
		}else{
			ptfloAttr.beforeFirst();
		}
		if(!ptfloAttr.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ9="\t";
		AI_CHART_OBJ9=AI_CHART_OBJ9 + "prodGMm\r\n";

		while(ptfloAttr.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromptfloAttr();   //RecordSet ptfloAttr에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ9=AI_CHART_OBJ9 + ptfloAttr_comDelNm + "\t";

			//데이터 설정
			AI_CHART_OBJ9=AI_CHART_OBJ9 + ptfloAttr_prodGMm + "\r\n";
		}   //while end
	}

	//----AI_CHART_OBJ12 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ12( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet ptfloSphe 객체의 생성
		if(ptfloSphe==null){
			ptfloSphe = stat_ptfloSphe.executeQuery();
		}else{
			ptfloSphe.beforeFirst();
		}
		if(!ptfloSphe.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ12="\t";
		AI_CHART_OBJ12=AI_CHART_OBJ12 + "arslExp\r\n";

		while(ptfloSphe.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromptfloSphe();   //RecordSet ptfloSphe에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ12=AI_CHART_OBJ12 + ptfloSphe_comDelNm + "\t";

			//데이터 설정
			AI_CHART_OBJ12=AI_CHART_OBJ12 + ptfloSphe_arslExp + "\r\n";
		}   //while end
	}

	//----AI_CHART_OBJ13 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ13( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet ptfloSphe 객체의 생성
		if(ptfloSphe==null){
			ptfloSphe = stat_ptfloSphe.executeQuery();
		}else{
			ptfloSphe.beforeFirst();
		}
		if(!ptfloSphe.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ13="\t";
		AI_CHART_OBJ13=AI_CHART_OBJ13 + "prodGMm\r\n";

		while(ptfloSphe.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromptfloSphe();   //RecordSet ptfloSphe에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ13=AI_CHART_OBJ13 + ptfloSphe_comDelNm + "\t";

			//데이터 설정
			AI_CHART_OBJ13=AI_CHART_OBJ13 + ptfloSphe_prodGMm + "\r\n";
		}   //while end
	}

	//----AI_CHART_OBJ14 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ14( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet ptfloType 객체의 생성
		if(ptfloType==null){
			ptfloType = stat_ptfloType.executeQuery();
		}else{
			ptfloType.beforeFirst();
		}
		if(!ptfloType.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ14="\t";
		AI_CHART_OBJ14=AI_CHART_OBJ14 + "arslExp\r\n";

		while(ptfloType.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromptfloType();   //RecordSet ptfloType에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ14=AI_CHART_OBJ14 + ptfloType_comDelNm + "\t";

			//데이터 설정
			AI_CHART_OBJ14=AI_CHART_OBJ14 + ptfloType_arslExp + "\r\n";
		}   //while end
	}

	//----AI_CHART_OBJ15 챠트 데이터 함수----
	private void getChartDataAI_CHART_OBJ15( ) throws Exception{
		//DataSet 객체 생성
		//ResultSet ptfloType 객체의 생성
		if(ptfloType==null){
			ptfloType = stat_ptfloType.executeQuery();
		}else{
			ptfloType.beforeFirst();
		}
		if(!ptfloType.isBeforeFirst()){		//생성된 ResultSet에 레코드가 없으면
			return;
		}

		//계열(Series) 필드 설정
		AI_CHART_OBJ15="\t";
		AI_CHART_OBJ15=AI_CHART_OBJ15 + "prodGMm\r\n";

		while(ptfloType.next()){   //데이터 루프문
			//데이터 fetch
			setFieldVariableFromptfloType();   //RecordSet ptfloType에서 필드 값 설정

			//X축 레이블 필드 설정
			AI_CHART_OBJ15=AI_CHART_OBJ15 + ptfloType_comDelNm + "\t";

			//데이터 설정
			AI_CHART_OBJ15=AI_CHART_OBJ15 + ptfloType_prodGMm + "\r\n";
		}   //while end
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		searchStartYymm_Param=decoder.getParameterB("searchStartYymm");
		//searchStartYymm_Param=aiReplace(searchStartYymm_Param, str, "\n");
		mapParam.put("searchStartYymm", searchStartYymm_Param);

		searchEndYymm_Param=decoder.getParameterB("searchEndYymm");
		//searchEndYymm_Param=aiReplace(searchEndYymm_Param, str, "\n");
		mapParam.put("searchEndYymm", searchEndYymm_Param);

		sheetNum_Param=decoder.getParameterB("sheetNum");
		//sheetNum_Param=aiReplace(sheetNum_Param, str, "\n");
		mapParam.put("sheetNum", sheetNum_Param);

		startYymm_Param=decoder.getParameterB("startYymm");
		//startYymm_Param=aiReplace(startYymm_Param, str, "\n");
		mapParam.put("startYymm", startYymm_Param);

		endYymm_Param=decoder.getParameterB("endYymm");
		//endYymm_Param=aiReplace(endYymm_Param, str, "\n");
		mapParam.put("endYymm", endYymm_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			break;
			case 20:		//SHEET=Sheet=2   FRAME=0에서 페이지 스킵시
			break;
			case 30:		//SHEET=Sheet=3   FRAME=0에서 페이지 스킵시
			break;
			case 40:		//SHEET=Sheet=4   FRAME=0에서 페이지 스킵시
			break;
			case 50:		//SHEET=Sheet=5   FRAME=0에서 페이지 스킵시
			break;
			case 60:		//SHEET=Sheet=6   FRAME=0에서 페이지 스킵시
			break;
			case 70:		//SHEET=Sheet=7   FRAME=0에서 페이지 스킵시
			break;
			case 80:		//SHEET=Sheet=8   FRAME=0에서 페이지 스킵시
			break;
			case 90:		//SHEET=Sheet=9   FRAME=0에서 페이지 스킵시
			break;
			case 100:		//SHEET=Sheet=10   FRAME=0에서 페이지 스킵시
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|19|portfolioInfo.style|test", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(UnsupportedEncodingException e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}
}
%>
