<%
/************************************************************************************
Generated by AIDesigner 6.0.0.1
************************************************************************************
보고서 제목 : 보고서 (2017/10/19 10:13:51)
작성일 : 2017년10월19일 10시13분51초
수정일 : 2017년12월14일 17시12분37초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private volatile ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_data1
	StringBuilder sql_data1 = new StringBuilder();
	sql_data1.setLength(0);
	sql_data1.append("select ");
	sql_data1.append("				gs.SMR_SMRY_TXT ");
	sql_data1.append("				,gs.SMR_GOAL_TXT ");
	sql_data1.append("				,prm.Prj_NM ");
	sql_data1.append("				,dbo.fn_getSabunName(prm.pl_emp_no) as pl_emp_nm ");
	sql_data1.append("				,mm.TSS_STRT_DD +'~' + mm.TSS_FNH_DD as TSS_PRID ");
	sql_data1.append("				,gs.CTY_OT_PLN_M ");
	sql_data1.append("				,gs.PTC_CPSN_Y ");
	sql_data1.append("				,gs.PTC_CPSN_Y_1 ");
	sql_data1.append("				,gs.PTC_CPSN_Y_2 ");
	sql_data1.append("				,gs.PTC_CPSN_Y_3 ");
	sql_data1.append("				,gs.PTC_CPSN_Y_4 ");
	sql_data1.append("				,gs.NPROD_SALS_PLN_Y ");
	sql_data1.append("				,gs.NPROD_SALS_PLN_Y_1 ");
	sql_data1.append("				,gs.NPROD_SALS_PLN_Y_2 ");
	sql_data1.append("				,gs.NPROD_SALS_PLN_Y_3 ");
	sql_data1.append("				,gs.NPROD_SALS_PLN_Y_4 ");
	sql_data1.append("				,gs.BIZ_PRFT_PRO_Y ");
	sql_data1.append("				,gs.BIZ_PRFT_PRO_Y_1 ");
	sql_data1.append("				,gs.BIZ_PRFT_PRO_Y_2 ");
	sql_data1.append("				,gs.BIZ_PRFT_PRO_Y_3 ");
	sql_data1.append("				,gs.BIZ_PRFT_PRO_Y_4 ");
	sql_data1.append(" ");
	sql_data1.append("  from IRIS_TSS_MGMT_MST mm ");
	sql_data1.append(" inner join	IRIS_TSS_GEN_SMRY gs ");
	sql_data1.append(" 		on mm.TSS_CD  = gs.TSS_CD ");
	sql_data1.append(" inner join IRIS_PRJ_RSST_MST  prm ");
	sql_data1.append(" 		on prm.prj_cd = mm.PRJ_CD ");
	sql_data1.append(" where mm.tss_cd = '^tss_cd^' ");
	initializer.prepareQuery("sql_data1", sql_data1.toString());
}

class ReportHandler{
	//공통 변수 선언
	private final Logger logger = Logger.getLogger("com.activeintra");
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String sheet10_A1 = "";
	String sheet10_I1 = "";
	String sheet10_B9 = "";
	int[] nAutoHeight_vb1_1=new int[6];
	String sheet10_B3 = "";
	String sheet10_C3 = "";
	String sheet10_B6 = "";
	String sheet10_C6 = "";
	String sheet20_B1 = "";
	String sheet20_B3 = "";
	String sheet20_C3 = "";
	String sheet20_B4 = "";
	String sheet20_C4 = "";
	String sheet20_B5 = "";
	String sheet20_C5 = "";
	String sheet20_B6 = "";
	long sheet20_C6 = 0L;
	String sheet20_B7 = "";
	String sheet20_C7 = "";
	String sheet21_A1 = "";
	String sheet21_A2 = "";
	String sheet21_A3 = "";
	String sheet21_B3 = "";
	String sheet21_D3 = "";
	String sheet21_F3 = "";
	String sheet21_H3 = "";
	String sheet21_A4 = "";
	long sheet21_B4 = 0L;
	long sheet21_D4 = 0L;
	long sheet21_F4 = 0L;
	long sheet21_H4 = 0L;
	String sheet21_A5 = "";
	double sheet21_B5 = 0;
	double sheet21_D5 = 0;
	double sheet21_F5 = 0;
	double sheet21_H5 = 0;
	String sheet21_A7 = "";
	String sheet21_B7 = "";
	String sheet21_C7 = "";
	String sheet21_E7 = "";
	String sheet21_F7 = "";
	String sheet21_G7 = "";
	String sheet21_I7 = "";
	String sheet21_A8 = "";
	double sheet21_B8 = 0;
	double sheet21_C8 = 0;
	double sheet21_E8 = 0;
	double sheet21_F8 = 0;
	double sheet21_G8 = 0;
	double sheet21_I8 = 0;
	String sheet21_A9 = "";
	double sheet21_B9 = 0;
	double sheet21_C9 = 0;
	double sheet21_E9 = 0;
	double sheet21_F9 = 0;
	double sheet21_G9 = 0;
	double sheet21_I9 = 0;

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_test; 	 //test Connection 객체
	private java.sql.PreparedStatement stat_data1;		//ResultSet data1 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet data1;		//ResultSet data1 객체
	private java.sql.PreparedStatement stat_data2;		//ResultSet data2 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet data2;		//ResultSet data2 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_data1 = new StringBuilder();		//ResultSet data1 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_data2 = new StringBuilder();		//ResultSet data2 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet data1 객체에서 필드 값을 받는 쿼리 필드 변수
	private String data1_SMR_SMRY_TXT;
	private String data1_SMR_GOAL_TXT;
	private String data1_Prj_NM;
	private String data1_pl_emp_nm;
	private String data1_TSS_PRID;
	private String data1_CTY_OT_PLN_M;
	private long data1_PTC_CPSN_Y;
	private long data1_PTC_CPSN_Y_1;
	private long data1_PTC_CPSN_Y_2;
	private long data1_PTC_CPSN_Y_3;
	private long data1_PTC_CPSN_Y_4;
	private long data1_NPROD_SALS_PLN_Y;
	private long data1_NPROD_SALS_PLN_Y_1;
	private long data1_NPROD_SALS_PLN_Y_2;
	private long data1_NPROD_SALS_PLN_Y_3;
	private long data1_NPROD_SALS_PLN_Y_4;
	private double data1_BIZ_PRFT_PRO_Y;
	private double data1_BIZ_PRFT_PRO_Y_1;
	private double data1_BIZ_PRFT_PRO_Y_2;
	private double data1_BIZ_PRFT_PRO_Y_3;
	private double data1_BIZ_PRFT_PRO_Y_4;

	//ResultSet data2 객체에서 필드 값을 받는 쿼리 필드 변수
	private double data2_y1;
	private double data2_y2;
	private double data2_y3;
	private double data2_y4;
	private double data2_y5;

	//파라미터 변수 선언
	String year_Param;
	String tss_cd_Param;

	//-----사용자 정의 변수 및 함수-----
	int cnt = 1;
	int count = 0;


	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replaceFirst(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "HORIZONTAL", "14 28 14 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Throwable t){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(t.toString());
			throw (new AIException(t.toString(),t.getCause()));
		}finally{    //finally 구문
			if(manager.reportFile!=null)
			manager.reportFile.close();

			//DataSet Close
			cleanup(data2, stat_data2, null, null);
			cleanup(data1, stat_data1, null, null);
			cleanup(null, null, null, conn_test);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "0 0 0 0");
		initSheetVariant(12, 92, 831, 564, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//배경 이미지 함수 호출
		getBgImageScript(10);

		//밴드 함수 호출
		getScriptFromfb1_1(true, true);    //머리글 밴드 호출
		getScriptFromlb1_1(true, true);    //바닥글 밴드 호출
		getScriptFromvb1_1(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기

		//자식 쉬트 호출
		//SHEET=Sheet2   FRAME=0 함수 호출
		executeSheet20();
		//SHEET=Sheet2   FRAME=1 함수 호출
		executeSheet21();
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(12, 92, 389, 564, true, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromvb2_1_1(true, true);    //Void 밴드 호출
		getScriptFromvb2_1_2(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		if(nMaxPage<nPageNum || (nMaxPage==nPageNum && nYLastPos<nYCurPos)){
			nYLastPos=nYCurPos;
		}
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet2   FRAME=Frame1 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet21( ) throws Exception{
		//쉬트 초기화 함수 호출
		initChildSheetVariant(389, 92, 831, 564, true, false);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromvb2_2_1(true, true);    //Void 밴드 호출
		getScriptFromvb2_2_2(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		if(nMaxPage<nPageNum || (nMaxPage==nPageNum && nYLastPos<nYCurPos)){
			nYLastPos=nYCurPos;
		}
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
		nYCurPos=nYLastPos;
		nPageNum=nMaxPage;
	}

	//-----밴드 함수-----
	//----fb1_1 HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : fb1_1
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfb1_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet10_A1="[ Summary ]";
			sheet10_I1="대외비";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptfb1_1();
		}   //end if(bIsPrint)
	}

	//----lb1_1 FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : lb1_1
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromlb1_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet10_B9="1)과제 시작 년도  2)제품 출시 년도(사업화 년도)";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptlb1_1();
		}   //end if(bIsPrint)
	}

	//----vb1_1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : vb1_1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvb1_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=220;    //밴드 출력 높이
		//폰트명 : LG스마트체2.0 Regular
		//폰트 사이즈 : 12
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {360,295,492,691,691,955,793,271,430,430,581,743,238,482,240,469,743,743,743,743,743,743,743,743,743,743,240,240,743,743,743,540,1315,808,752,770,820,697,649,835,856,293,440,727,604,1052,888,844,726,844,751,686,650,820,738,1217,770,722,704,440,1082,440,589,557,691,612,656,568,659,623,430,658,659,268,268,606,276,1002,659,668,656,658,449,554,480,658,572,922,599,577,582,461,264,461,608,1117};

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet data1 객체의 생성
			if(data1==null){
				data1 = stat_data1.executeQuery();
			}else{
				data1.beforeFirst();
			}

			//데이터 fetch
			if(data1.next()){
				setFieldVariableFromdata1();	//ResultSet data1에서 필드 값 설정
			}else{
				setFieldInitFromdata1();	//ResultSet data1의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_C3="";
			sheet10_C6="";

			//데이터 변수 할당
			sheet10_B3="개 요";
			sheet10_C3 = data1_SMR_SMRY_TXT;
			sheet10_B6="목 표";
			sheet10_C6 = data1_SMR_GOAL_TXT;

			//Auto Size Code
			int nHeightTmp;
			nAutoHeight_vb1_1[0]=0;
			nAutoHeight_vb1_1[1]=0;
			nAutoHeight_vb1_1[2]=0;
			nAutoHeight_vb1_1[3]=0;
			nAutoHeight_vb1_1[4]=0;
			nAutoHeight_vb1_1[5]=0;
			nHeightTmp=getPrintHeight(sheet10_C3, charWidth, 12, 641, 100, nAutoHeight_vb1_1[0], 10, 0, "cell_style_3");
			nAutoHeight_vb1_1[0]=(int)MAX((long)nAutoHeight_vb1_1[0], (long)(nHeightTmp/2));
			nHeightTmp=nHeightTmp-nAutoHeight_vb1_1[0];
			nAutoHeight_vb1_1[1]=(int)MAX((long)nAutoHeight_vb1_1[1], (long)nHeightTmp);
			nHeightTmp=getPrintHeight(sheet10_C6, charWidth, 12, 641, 100, nAutoHeight_vb1_1[3], 10, 0, "cell_style_3");
			nAutoHeight_vb1_1[3]=(int)MAX((long)nAutoHeight_vb1_1[3], (long)(nHeightTmp/2));
			nHeightTmp=nHeightTmp-nAutoHeight_vb1_1[3];
			nAutoHeight_vb1_1[4]=(int)MAX((long)nAutoHeight_vb1_1[4], (long)nHeightTmp);
			nAutoHeight_vb1_1[0]=nAutoHeight_vb1_1[0]+50;
			nAutoHeight_vb1_1[1]=nAutoHeight_vb1_1[0]+nAutoHeight_vb1_1[1]+50;
			nAutoHeight_vb1_1[2]=nAutoHeight_vb1_1[1]+nAutoHeight_vb1_1[2]+10;
			nAutoHeight_vb1_1[3]=nAutoHeight_vb1_1[2]+nAutoHeight_vb1_1[3]+50;
			nAutoHeight_vb1_1[4]=nAutoHeight_vb1_1[3]+nAutoHeight_vb1_1[4]+50;
			nAutoHeight_vb1_1[5]=nAutoHeight_vb1_1[4]+nAutoHeight_vb1_1[5]+10;

			//셀 Rect, Style 값 저장 : getPrintHeightEx
			setCellInfoMap();
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			nBandHeight=nAutoHeight_vb1_1[5];
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvb1_1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----vb2_1_1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : vb2_1_1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvb2_1_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=58;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet20_B1="연구 목표";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvb2_1_1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----vb2_1_2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : vb2_1_2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvb2_1_2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=140;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet data1 객체의 생성
			if(data1==null){
				data1 = stat_data1.executeQuery();
			}else{
				data1.beforeFirst();
			}

			//데이터 fetch
			if(data1.next()){
				setFieldVariableFromdata1();	//ResultSet data1에서 필드 값 설정
			}else{
				setFieldInitFromdata1();	//ResultSet data1의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_C3="";
			sheet20_C4="";
			sheet20_C5="";
			sheet20_C6=0L;
			sheet20_C7="";

			//데이터 변수 할당
			sheet20_B3="소속 연구소";
			sheet20_C3 = data1_Prj_NM;
			sheet20_B4="프로젝트 리더";
			sheet20_C4 = data1_pl_emp_nm;
			sheet20_B5="연구기간";
			sheet20_C5 = data1_TSS_PRID;
			sheet20_B6="연구인원";
			sheet20_C6 = data1_PTC_CPSN_Y;
			sheet20_B7="사업화 연/월";
			sheet20_C7 = data1_CTY_OT_PLN_M;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvb2_1_2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----vb2_2_1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame1
	//----밴드 이름 : vb2_2_1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvb2_2_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=58;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet21_A1="사업 목표";
			sheet21_A2="(단위: 억원, 명)";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvb2_2_1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----vb2_2_2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame1
	//----밴드 이름 : vb2_2_2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvb2_2_2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=140;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet data1 객체의 생성
			if(data1==null){
				data1 = stat_data1.executeQuery();
			}else{
				data1.beforeFirst();
			}
			//ResultSet data2 객체의 생성
			if(data2==null){
				data2 = stat_data2.executeQuery();
			}else{
				data2.beforeFirst();
			}

			//데이터 fetch
			if(data1.next()){
				setFieldVariableFromdata1();	//ResultSet data1에서 필드 값 설정
			}else{
				setFieldInitFromdata1();	//ResultSet data1의 필드 값 초기화
			}
			if(data2.next()){
				setFieldVariableFromdata2();	//ResultSet data2에서 필드 값 설정
			}else{
				setFieldInitFromdata2();	//ResultSet data2의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet21_B4=0L;
			sheet21_D4=0L;
			sheet21_F4=0L;
			sheet21_H4=0L;
			sheet21_B5=0;
			sheet21_D5=0;
			sheet21_F5=0;
			sheet21_H5=0;
			sheet21_B8=0;
			sheet21_C8=0;
			sheet21_E8=0;
			sheet21_F8=0;
			sheet21_G8=0;
			sheet21_I8=0;
			sheet21_B9=0;
			sheet21_C9=0;
			sheet21_E9=0;
			sheet21_F9=0;
			sheet21_G9=0;
			sheet21_I9=0;

			//데이터 변수 할당
			sheet21_A3="구분";
			sheet21_B3="Y 1)";
			sheet21_D3="Y+1";
			sheet21_F3="Y+2";
			sheet21_H3="Y+3";
			sheet21_A4="R&D 인원";
			sheet21_B4 = data1_PTC_CPSN_Y;
			sheet21_D4 = data1_PTC_CPSN_Y_1;
			sheet21_F4 = data1_PTC_CPSN_Y_2;
			sheet21_H4 = data1_PTC_CPSN_Y_3;
			sheet21_A5="R&D 비용";
			sheet21_B5 = data2_y1;
			sheet21_D5 = data2_y2;
			sheet21_F5 = data2_y3;
			sheet21_H5 = data2_y4;
			sheet21_A7="구분";
			sheet21_B7="Y 2)";
			sheet21_C7="Y+1";
			sheet21_E7="Y+2";
			sheet21_F7="Y+3";
			sheet21_G7="Y+4";
			sheet21_I7="평균";
			sheet21_A8="신제품 매출 계획";
			sheet21_B8 = (double)data1_NPROD_SALS_PLN_Y;
			sheet21_B8 = (double)(data1_NPROD_SALS_PLN_Y/100000000);
			sheet21_C8 = (double)data1_NPROD_SALS_PLN_Y_1;
			sheet21_C8 = (double)(data1_NPROD_SALS_PLN_Y_1/100000000);
			sheet21_E8 = (double)data1_NPROD_SALS_PLN_Y_2;
			sheet21_E8 = (double)(data1_NPROD_SALS_PLN_Y_2/100000000);
			sheet21_F8 = (double)data1_NPROD_SALS_PLN_Y_3;
			sheet21_F8 = (double)(data1_NPROD_SALS_PLN_Y_3/100000000);
			sheet21_G8 = (double)data1_NPROD_SALS_PLN_Y_4;
			sheet21_G8 = (double)(data1_NPROD_SALS_PLN_Y_4/100000000);
			sheet21_I8=0;
			/*
			sheet21_I8=(data1_NPROD_SALS_PLN_Y+data1_NPROD_SALS_PLN_Y_1+data1_NPROD_SALS_PLN_Y_2+data1_NPROD_SALS_PLN_Y_3+data1_NPROD_SALS_PLN_Y_4)/5;
			*/


			if(sheet21_B8 != 0){
				count = count + 1;
			}

			if(sheet21_C8 != 0){
				count = count + 1;
			}

			if(sheet21_E8 != 0){
				count = count + 1;
			}

			if(sheet21_F8 != 0){
				count = count + 1;
			}

			if(sheet21_G8 != 0){
				count = count + 1;
			}

			double temp = (double) ((sheet21_B8 + sheet21_C8 + sheet21_E8 + sheet21_F8 + sheet21_G8) / count );
			double rslt = Math.round(temp);

			sheet21_I8 = rslt;
			sheet21_A9="영업 이익율(%)";
			sheet21_B9 = data1_BIZ_PRFT_PRO_Y;
			sheet21_C9 = data1_BIZ_PRFT_PRO_Y_1;
			sheet21_E9 = data1_BIZ_PRFT_PRO_Y_2;
			sheet21_F9 = data1_BIZ_PRFT_PRO_Y_3;
			sheet21_G9 = data1_BIZ_PRFT_PRO_Y_4;
			sheet21_I9=0.0;
			sheet21_I9=(data1_BIZ_PRFT_PRO_Y+data1_BIZ_PRFT_PRO_Y_1+data1_BIZ_PRFT_PRO_Y_2+data1_BIZ_PRFT_PRO_Y_3+data1_BIZ_PRFT_PRO_Y_4)/5;
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvb2_2_2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----fb1_1 스크립트 문 출력 함수----
	private void writeScriptfb1_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 12, 12, 679, 60, sheet10_A1, "sheet10_A1", "cell_style_0");
		objectWrite(CELL_OBJECT, 691, 12, 140, 60, sheet10_I1, "sheet10_I1", "cell_style_1");
	}

	//----lb1_1 스크립트 문 출력 함수----
	private void writeScriptlb1_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 46, 564, 225, 20, sheet10_B9, "sheet10_B9", "cell_style_4");
	}

	//----vb1_1 스크립트 문 출력 함수----
	private void writeScriptvb1_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B3"), nYCurPos+mapTop.get("sheet10_B3"), mapWidth.get("sheet10_B3"), mapHeight.get("sheet10_B3"), sheet10_B3, "sheet10_B3", mapStyle.get("sheet10_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C3"), nYCurPos+mapTop.get("sheet10_C3"), mapWidth.get("sheet10_C3"), mapHeight.get("sheet10_C3"), sheet10_C3, "sheet10_C3", mapStyle.get("sheet10_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B6"), nYCurPos+mapTop.get("sheet10_B6"), mapWidth.get("sheet10_B6"), mapHeight.get("sheet10_B6"), sheet10_B6, "sheet10_B6", mapStyle.get("sheet10_B6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C6"), nYCurPos+mapTop.get("sheet10_C6"), mapWidth.get("sheet10_C6"), mapHeight.get("sheet10_C6"), sheet10_C6, "sheet10_C6", mapStyle.get("sheet10_C6"));
	}

	//----vb2_1_1 스크립트 문 출력 함수----
	private void writeScriptvb2_1_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B1"), nYCurPos+mapTop.get("sheet20_B1"), mapWidth.get("sheet20_B1"), mapHeight.get("sheet20_B1"), sheet20_B1, "sheet20_B1", mapStyle.get("sheet20_B1"));
	}

	//----vb2_1_2 스크립트 문 출력 함수----
	private void writeScriptvb2_1_2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B3"), nYCurPos+mapTop.get("sheet20_B3"), mapWidth.get("sheet20_B3"), mapHeight.get("sheet20_B3"), sheet20_B3, "sheet20_B3", mapStyle.get("sheet20_B3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C3"), nYCurPos+mapTop.get("sheet20_C3"), mapWidth.get("sheet20_C3"), mapHeight.get("sheet20_C3"), sheet20_C3, "sheet20_C3", mapStyle.get("sheet20_C3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B4"), nYCurPos+mapTop.get("sheet20_B4"), mapWidth.get("sheet20_B4"), mapHeight.get("sheet20_B4"), sheet20_B4, "sheet20_B4", mapStyle.get("sheet20_B4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C4"), nYCurPos+mapTop.get("sheet20_C4"), mapWidth.get("sheet20_C4"), mapHeight.get("sheet20_C4"), sheet20_C4, "sheet20_C4", mapStyle.get("sheet20_C4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B5"), nYCurPos+mapTop.get("sheet20_B5"), mapWidth.get("sheet20_B5"), mapHeight.get("sheet20_B5"), sheet20_B5, "sheet20_B5", mapStyle.get("sheet20_B5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C5"), nYCurPos+mapTop.get("sheet20_C5"), mapWidth.get("sheet20_C5"), mapHeight.get("sheet20_C5"), sheet20_C5, "sheet20_C5", mapStyle.get("sheet20_C5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B6"), nYCurPos+mapTop.get("sheet20_B6"), mapWidth.get("sheet20_B6"), mapHeight.get("sheet20_B6"), sheet20_B6, "sheet20_B6", mapStyle.get("sheet20_B6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C6"), nYCurPos+mapTop.get("sheet20_C6"), mapWidth.get("sheet20_C6"), mapHeight.get("sheet20_C6"), String.valueOf(sheet20_C6), "sheet20_C6", mapStyle.get("sheet20_C6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B7"), nYCurPos+mapTop.get("sheet20_B7"), mapWidth.get("sheet20_B7"), mapHeight.get("sheet20_B7"), sheet20_B7, "sheet20_B7", mapStyle.get("sheet20_B7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C7"), nYCurPos+mapTop.get("sheet20_C7"), mapWidth.get("sheet20_C7"), mapHeight.get("sheet20_C7"), sheet20_C7, "sheet20_C7", mapStyle.get("sheet20_C7"));
	}

	//----vb2_2_1 스크립트 문 출력 함수----
	private void writeScriptvb2_2_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A1"), nYCurPos+mapTop.get("sheet21_A1"), mapWidth.get("sheet21_A1"), mapHeight.get("sheet21_A1"), sheet21_A1, "sheet21_A1", mapStyle.get("sheet21_A1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A2"), nYCurPos+mapTop.get("sheet21_A2"), mapWidth.get("sheet21_A2"), mapHeight.get("sheet21_A2"), sheet21_A2, "sheet21_A2", mapStyle.get("sheet21_A2"));
	}

	//----vb2_2_2 스크립트 문 출력 함수----
	private void writeScriptvb2_2_2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A3"), nYCurPos+mapTop.get("sheet21_A3"), mapWidth.get("sheet21_A3"), mapHeight.get("sheet21_A3"), sheet21_A3, "sheet21_A3", mapStyle.get("sheet21_A3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_B3"), nYCurPos+mapTop.get("sheet21_B3"), mapWidth.get("sheet21_B3"), mapHeight.get("sheet21_B3"), sheet21_B3, "sheet21_B3", mapStyle.get("sheet21_B3"));
		if(true)
		{
			propertyWrite(CELL_OBJECT, "sheet21_B3", "fontSize[@FIND2:Y]|fontScript[@FIND2:1)]", "11" + "|" + "superScript");
		}

		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_D3"), nYCurPos+mapTop.get("sheet21_D3"), mapWidth.get("sheet21_D3"), mapHeight.get("sheet21_D3"), sheet21_D3, "sheet21_D3", mapStyle.get("sheet21_D3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_F3"), nYCurPos+mapTop.get("sheet21_F3"), mapWidth.get("sheet21_F3"), mapHeight.get("sheet21_F3"), sheet21_F3, "sheet21_F3", mapStyle.get("sheet21_F3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_H3"), nYCurPos+mapTop.get("sheet21_H3"), mapWidth.get("sheet21_H3"), mapHeight.get("sheet21_H3"), sheet21_H3, "sheet21_H3", mapStyle.get("sheet21_H3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A4"), nYCurPos+mapTop.get("sheet21_A4"), mapWidth.get("sheet21_A4"), mapHeight.get("sheet21_A4"), sheet21_A4, "sheet21_A4", mapStyle.get("sheet21_A4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_B4"), nYCurPos+mapTop.get("sheet21_B4"), mapWidth.get("sheet21_B4"), mapHeight.get("sheet21_B4"), String.valueOf(sheet21_B4), "sheet21_B4", mapStyle.get("sheet21_B4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_D4"), nYCurPos+mapTop.get("sheet21_D4"), mapWidth.get("sheet21_D4"), mapHeight.get("sheet21_D4"), String.valueOf(sheet21_D4), "sheet21_D4", mapStyle.get("sheet21_D4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_F4"), nYCurPos+mapTop.get("sheet21_F4"), mapWidth.get("sheet21_F4"), mapHeight.get("sheet21_F4"), String.valueOf(sheet21_F4), "sheet21_F4", mapStyle.get("sheet21_F4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_H4"), nYCurPos+mapTop.get("sheet21_H4"), mapWidth.get("sheet21_H4"), mapHeight.get("sheet21_H4"), String.valueOf(sheet21_H4), "sheet21_H4", mapStyle.get("sheet21_H4"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A5"), nYCurPos+mapTop.get("sheet21_A5"), mapWidth.get("sheet21_A5"), mapHeight.get("sheet21_A5"), sheet21_A5, "sheet21_A5", mapStyle.get("sheet21_A5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_B5"), nYCurPos+mapTop.get("sheet21_B5"), mapWidth.get("sheet21_B5"), mapHeight.get("sheet21_B5"), String.valueOf(sheet21_B5), "sheet21_B5", mapStyle.get("sheet21_B5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_D5"), nYCurPos+mapTop.get("sheet21_D5"), mapWidth.get("sheet21_D5"), mapHeight.get("sheet21_D5"), String.valueOf(sheet21_D5), "sheet21_D5", mapStyle.get("sheet21_D5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_F5"), nYCurPos+mapTop.get("sheet21_F5"), mapWidth.get("sheet21_F5"), mapHeight.get("sheet21_F5"), String.valueOf(sheet21_F5), "sheet21_F5", mapStyle.get("sheet21_F5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_H5"), nYCurPos+mapTop.get("sheet21_H5"), mapWidth.get("sheet21_H5"), mapHeight.get("sheet21_H5"), String.valueOf(sheet21_H5), "sheet21_H5", mapStyle.get("sheet21_H5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A7"), nYCurPos+mapTop.get("sheet21_A7"), mapWidth.get("sheet21_A7"), mapHeight.get("sheet21_A7"), sheet21_A7, "sheet21_A7", mapStyle.get("sheet21_A7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_B7"), nYCurPos+mapTop.get("sheet21_B7"), mapWidth.get("sheet21_B7"), mapHeight.get("sheet21_B7"), sheet21_B7, "sheet21_B7", mapStyle.get("sheet21_B7"));
		if(true)
		{
			propertyWrite(CELL_OBJECT, "sheet21_B7", "fontSize[@FIND2:Y]|fontScript[@FIND2:2)]", "11" + "|" + "superScript");
		}

		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C7"), nYCurPos+mapTop.get("sheet21_C7"), mapWidth.get("sheet21_C7"), mapHeight.get("sheet21_C7"), sheet21_C7, "sheet21_C7", mapStyle.get("sheet21_C7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_E7"), nYCurPos+mapTop.get("sheet21_E7"), mapWidth.get("sheet21_E7"), mapHeight.get("sheet21_E7"), sheet21_E7, "sheet21_E7", mapStyle.get("sheet21_E7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_F7"), nYCurPos+mapTop.get("sheet21_F7"), mapWidth.get("sheet21_F7"), mapHeight.get("sheet21_F7"), sheet21_F7, "sheet21_F7", mapStyle.get("sheet21_F7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_G7"), nYCurPos+mapTop.get("sheet21_G7"), mapWidth.get("sheet21_G7"), mapHeight.get("sheet21_G7"), sheet21_G7, "sheet21_G7", mapStyle.get("sheet21_G7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_I7"), nYCurPos+mapTop.get("sheet21_I7"), mapWidth.get("sheet21_I7"), mapHeight.get("sheet21_I7"), sheet21_I7, "sheet21_I7", mapStyle.get("sheet21_I7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A8"), nYCurPos+mapTop.get("sheet21_A8"), mapWidth.get("sheet21_A8"), mapHeight.get("sheet21_A8"), sheet21_A8, "sheet21_A8", mapStyle.get("sheet21_A8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_B8"), nYCurPos+mapTop.get("sheet21_B8"), mapWidth.get("sheet21_B8"), mapHeight.get("sheet21_B8"), String.valueOf(sheet21_B8), "sheet21_B8", mapStyle.get("sheet21_B8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C8"), nYCurPos+mapTop.get("sheet21_C8"), mapWidth.get("sheet21_C8"), mapHeight.get("sheet21_C8"), String.valueOf(sheet21_C8), "sheet21_C8", mapStyle.get("sheet21_C8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_E8"), nYCurPos+mapTop.get("sheet21_E8"), mapWidth.get("sheet21_E8"), mapHeight.get("sheet21_E8"), String.valueOf(sheet21_E8), "sheet21_E8", mapStyle.get("sheet21_E8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_F8"), nYCurPos+mapTop.get("sheet21_F8"), mapWidth.get("sheet21_F8"), mapHeight.get("sheet21_F8"), String.valueOf(sheet21_F8), "sheet21_F8", mapStyle.get("sheet21_F8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_G8"), nYCurPos+mapTop.get("sheet21_G8"), mapWidth.get("sheet21_G8"), mapHeight.get("sheet21_G8"), String.valueOf(sheet21_G8), "sheet21_G8", mapStyle.get("sheet21_G8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_I8"), nYCurPos+mapTop.get("sheet21_I8"), mapWidth.get("sheet21_I8"), mapHeight.get("sheet21_I8"), String.valueOf(sheet21_I8), "sheet21_I8", mapStyle.get("sheet21_I8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_A9"), nYCurPos+mapTop.get("sheet21_A9"), mapWidth.get("sheet21_A9"), mapHeight.get("sheet21_A9"), sheet21_A9, "sheet21_A9", mapStyle.get("sheet21_A9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_B9"), nYCurPos+mapTop.get("sheet21_B9"), mapWidth.get("sheet21_B9"), mapHeight.get("sheet21_B9"), String.valueOf(sheet21_B9), "sheet21_B9", mapStyle.get("sheet21_B9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_C9"), nYCurPos+mapTop.get("sheet21_C9"), mapWidth.get("sheet21_C9"), mapHeight.get("sheet21_C9"), String.valueOf(sheet21_C9), "sheet21_C9", mapStyle.get("sheet21_C9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_E9"), nYCurPos+mapTop.get("sheet21_E9"), mapWidth.get("sheet21_E9"), mapHeight.get("sheet21_E9"), String.valueOf(sheet21_E9), "sheet21_E9", mapStyle.get("sheet21_E9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_F9"), nYCurPos+mapTop.get("sheet21_F9"), mapWidth.get("sheet21_F9"), mapHeight.get("sheet21_F9"), String.valueOf(sheet21_F9), "sheet21_F9", mapStyle.get("sheet21_F9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_G9"), nYCurPos+mapTop.get("sheet21_G9"), mapWidth.get("sheet21_G9"), mapHeight.get("sheet21_G9"), String.valueOf(sheet21_G9), "sheet21_G9", mapStyle.get("sheet21_G9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet21_I9"), nYCurPos+mapTop.get("sheet21_I9"), mapWidth.get("sheet21_I9"), mapHeight.get("sheet21_I9"), String.valueOf(sheet21_I9), "sheet21_I9", mapStyle.get("sheet21_I9"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
		switch(nIndex){
			case 10:		//SHEET=Sheet1   FRAME=0 배경 이미지 스크립트
			objectWrite(DRAW_OBJECT, 13, 12, 818, 60, "", "AI_IMAGE_OBJ5", "draw_style_0");
			break;
		}
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//test Connection 객체 생성
		com.aireport.common.AISetConn setConn = new com.aireport.common.AISetConn();
		conn_test = setConn.getConn();
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_data1 = initializer.configPreparedStatement("sql_data1", mapParam, conn_test, null);

		sql_data2.setLength(0);
		sql_data2.append(" SELECT	["+year_Param+"] as [y1], ");
		sql_data2.append("["+ String.valueOf(Long.parseLong(Get0(year_Param))+1) +"] as [y2], ");
		sql_data2.append("["+String.valueOf(Long.parseLong(Get0(year_Param))+2)+"] as [y3] , ");
		sql_data2.append("["+String.valueOf(Long.parseLong(Get0(year_Param))+3)+"] as [y4] , ");
		sql_data2.append("["+String.valueOf(Long.parseLong(Get0(year_Param))+4)+"] as [y5] ");
		sql_data2.append("FROM ");
		sql_data2.append("( ");
		sql_data2.append("    select substring(yy_mm,1,4) yy,pln_exp ");
		sql_data2.append("	 from IRIS_TSS_GEN_TRWI_BUDG_LIST ");
		sql_data2.append("	 where tss_cd = 'I17BP10001' ");
		sql_data2.append(" ");
		sql_data2.append(") AS A ");
		sql_data2.append("PIVOT ");
		sql_data2.append("( ");
		sql_data2.append("    sum(pln_exp) ");
		sql_data2.append("    FOR yy IN (["+year_Param+"], ");
		sql_data2.append("["+String.valueOf(Long.parseLong(Get0(year_Param))+1)+"], ");
		sql_data2.append("["+String.valueOf(Long.parseLong(Get0(year_Param))+2)+"] , ");
		sql_data2.append("["+String.valueOf(Long.parseLong(Get0(year_Param))+3)+"] , ");
		sql_data2.append("["+String.valueOf(Long.parseLong(Get0(year_Param))+4)+"]) ");
		sql_data2.append(") A ");
		stat_data2 = initializer.configPreparedStatement(null, mapParam, conn_test, sql_data2.toString());
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet data1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromdata1() throws Exception{
		data1_SMR_SMRY_TXT = GetB(data1.getString(1));
		data1_SMR_GOAL_TXT = GetB(data1.getString(2));
		data1_Prj_NM = GetB(data1.getString(3));
		data1_pl_emp_nm = GetB(data1.getString(4));
		data1_TSS_PRID = GetB(data1.getString(5));
		data1_CTY_OT_PLN_M = GetB(data1.getString(6));
		data1_PTC_CPSN_Y = data1.getLong(7);
		data1_PTC_CPSN_Y_1 = data1.getLong(8);
		data1_PTC_CPSN_Y_2 = data1.getLong(9);
		data1_PTC_CPSN_Y_3 = data1.getLong(10);
		data1_PTC_CPSN_Y_4 = data1.getLong(11);
		data1_NPROD_SALS_PLN_Y = data1.getLong(12);
		data1_NPROD_SALS_PLN_Y_1 = data1.getLong(13);
		data1_NPROD_SALS_PLN_Y_2 = data1.getLong(14);
		data1_NPROD_SALS_PLN_Y_3 = data1.getLong(15);
		data1_NPROD_SALS_PLN_Y_4 = data1.getLong(16);
		data1_BIZ_PRFT_PRO_Y = data1.getDouble(17);
		data1_BIZ_PRFT_PRO_Y_1 = data1.getDouble(18);
		data1_BIZ_PRFT_PRO_Y_2 = data1.getDouble(19);
		data1_BIZ_PRFT_PRO_Y_3 = data1.getDouble(20);
		data1_BIZ_PRFT_PRO_Y_4 = data1.getDouble(21);
	}

	//ResultSet data1 객체의 필드 값 초기화 함수
	private void setFieldInitFromdata1(){
		data1_SMR_SMRY_TXT = "";
		data1_SMR_GOAL_TXT = "";
		data1_Prj_NM = "";
		data1_pl_emp_nm = "";
		data1_TSS_PRID = "";
		data1_CTY_OT_PLN_M = "";
		data1_PTC_CPSN_Y = 0L;
		data1_PTC_CPSN_Y_1 = 0L;
		data1_PTC_CPSN_Y_2 = 0L;
		data1_PTC_CPSN_Y_3 = 0L;
		data1_PTC_CPSN_Y_4 = 0L;
		data1_NPROD_SALS_PLN_Y = 0L;
		data1_NPROD_SALS_PLN_Y_1 = 0L;
		data1_NPROD_SALS_PLN_Y_2 = 0L;
		data1_NPROD_SALS_PLN_Y_3 = 0L;
		data1_NPROD_SALS_PLN_Y_4 = 0L;
		data1_BIZ_PRFT_PRO_Y = 0;
		data1_BIZ_PRFT_PRO_Y_1 = 0;
		data1_BIZ_PRFT_PRO_Y_2 = 0;
		data1_BIZ_PRFT_PRO_Y_3 = 0;
		data1_BIZ_PRFT_PRO_Y_4 = 0;
	}

	//ResultSet data2 객체에서 필드 값 설정 함수
	private void setFieldVariableFromdata2() throws Exception{
		data2_y1 = data2.getDouble(1);
		data2_y2 = data2.getDouble(2);
		data2_y3 = data2.getDouble(3);
		data2_y4 = data2.getDouble(4);
		data2_y5 = data2.getDouble(5);
	}

	//ResultSet data2 객체의 필드 값 초기화 함수
	private void setFieldInitFromdata2(){
		data2_y1 = 0;
		data2_y2 = 0;
		data2_y3 = 0;
		data2_y4 = 0;
		data2_y5 = 0;
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		year_Param=decoder.getParameterB("year");
		//year_Param=aiReplace(year_Param, str, "\n");
		mapParam.put("year", year_Param);

		tss_cd_Param=decoder.getParameterB("tss_cd");
		//tss_cd_Param=aiReplace(tss_cd_Param, str, "\n");
		mapParam.put("tss_cd", tss_cd_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getBgImageScript(10);		//배경 이미지 함수 호출
			getScriptFromfb1_1(false, true);		//머리글 밴드 호출
			getScriptFromlb1_1(false, true);		//바닥글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|3|genSmryReportPopup - 복사본.style|보고서 (2017/10/19 10:13:51)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(UnsupportedEncodingException e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_B3", 34, 0, 100, nAutoHeight_vb1_1[1], "cell_style_2");
		setCellInfoMap_Internal("sheet10_C3", 134, 0, 651, nAutoHeight_vb1_1[1], "cell_style_3");
		setCellInfoMap_Internal("sheet10_B6", 34, nAutoHeight_vb1_1[2], 100, nAutoHeight_vb1_1[4]-nAutoHeight_vb1_1[2], "cell_style_2");
		setCellInfoMap_Internal("sheet10_C6", 134, nAutoHeight_vb1_1[2], 651, nAutoHeight_vb1_1[4]-nAutoHeight_vb1_1[2], "cell_style_3");
		setCellInfoMap_Internal("sheet20_B1", 34, 0, 320, 30, "cell_style_5");
		setCellInfoMap_Internal("sheet20_B3", 34, 0, 120, 28, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C3", 154, 0, 200, 28, "cell_style_7");
		setCellInfoMap_Internal("sheet20_B4", 34, 28, 120, 28, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C4", 154, 28, 200, 28, "cell_style_7");
		setCellInfoMap_Internal("sheet20_B5", 34, 56, 120, 28, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C5", 154, 56, 200, 28, "cell_style_7");
		setCellInfoMap_Internal("sheet20_B6", 34, 84, 120, 28, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C6", 154, 84, 200, 28, "cell_style_8");
		setCellInfoMap_Internal("sheet20_B7", 34, 112, 120, 28, "cell_style_6");
		setCellInfoMap_Internal("sheet20_C7", 154, 112, 200, 28, "cell_style_7");
		setCellInfoMap_Internal("sheet21_A1", 0, 0, 408, 30, "cell_style_5");
		setCellInfoMap_Internal("sheet21_A2", 0, 30, 408, 28, "cell_style_9");
		setCellInfoMap_Internal("sheet21_A3", 0, 0, 120, 20, "cell_style_10");
		setCellInfoMap_Internal("sheet21_B3", 120, 0, 72, 20, "cell_style_11");
		setCellInfoMap_Internal("sheet21_D3", 192, 0, 72, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet21_F3", 264, 0, 72, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet21_H3", 336, 0, 72, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet21_A4", 0, 20, 120, 20, "cell_style_10");
		setCellInfoMap_Internal("sheet21_B4", 120, 20, 72, 20, "cell_style_13");
		setCellInfoMap_Internal("sheet21_D4", 192, 20, 72, 20, "cell_style_13");
		setCellInfoMap_Internal("sheet21_F4", 264, 20, 72, 20, "cell_style_13");
		setCellInfoMap_Internal("sheet21_H4", 336, 20, 72, 20, "cell_style_13");
		setCellInfoMap_Internal("sheet21_A5", 0, 40, 120, 20, "cell_style_10");
		setCellInfoMap_Internal("sheet21_B5", 120, 40, 72, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet21_D5", 192, 40, 72, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet21_F5", 264, 40, 72, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet21_H5", 336, 40, 72, 20, "cell_style_14");
		setCellInfoMap_Internal("sheet21_A7", 0, 80, 120, 20, "cell_style_10");
		setCellInfoMap_Internal("sheet21_B7", 120, 80, 48, 20, "cell_style_11");
		setCellInfoMap_Internal("sheet21_C7", 168, 80, 48, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet21_E7", 216, 80, 48, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet21_F7", 264, 80, 48, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet21_G7", 312, 80, 48, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet21_I7", 360, 80, 48, 20, "cell_style_12");
		setCellInfoMap_Internal("sheet21_A8", 0, 100, 120, 20, "cell_style_10");
		setCellInfoMap_Internal("sheet21_B8", 120, 100, 48, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet21_C8", 168, 100, 48, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet21_E8", 216, 100, 48, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet21_F8", 264, 100, 48, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet21_G8", 312, 100, 48, 20, "cell_style_15");
		setCellInfoMap_Internal("sheet21_I8", 360, 100, 48, 20, "cell_style_16");
		setCellInfoMap_Internal("sheet21_A9", 0, 120, 120, 20, "cell_style_10");
		setCellInfoMap_Internal("sheet21_B9", 120, 120, 48, 20, "cell_style_16");
		setCellInfoMap_Internal("sheet21_C9", 168, 120, 48, 20, "cell_style_16");
		setCellInfoMap_Internal("sheet21_E9", 216, 120, 48, 20, "cell_style_16");
		setCellInfoMap_Internal("sheet21_F9", 264, 120, 48, 20, "cell_style_16");
		setCellInfoMap_Internal("sheet21_G9", 312, 120, 48, 20, "cell_style_16");
		setCellInfoMap_Internal("sheet21_I9", 360, 120, 48, 20, "cell_style_16");
	}
}
%>
