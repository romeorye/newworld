<%
/************************************************************************************
Generated by AIDesigner 6.0.0.1
************************************************************************************
보고서 제목 : 보고서 (2017/10/19 10:13:51)
작성일 : 2017년10월19일 10시13분51초
수정일 : 2020년5월27일 13시52분46초
작성자 :
************************************************************************************/
%>

<%@ page pageEncoding="UTF-8" %>
<%@ page contentType="text/html; charset=utf-8" %>

<%@ page import="java.sql.*,java.io.*,java.lang.*,java.text.*,java.util.*,java.net.URL" %>
<%@ page import="com.activeintra.manager.*" %>
<%@ page import="com.activeintra.url.*" %>
<%@ page import="com.activeintra.util.uds.*" %>
<%@ page import="org.apache.log4j.Logger" %>
<%@ page import="org.apache.log4j.PropertyConfigurator" %>


<%
Object[] userObj = null;
HttpParameterDecoder decoder = HttpParameterDecoder.newInstance(request, application);
request.setAttribute("paramsDecoder", decoder);

String reportMode = decoder.getParameter("reportMode");
String reportParams = decoder.getParameter("reportParams");
if(reportMode!=null){
	if(reportMode.equals("PDF")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("pdfserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("EXCEL")){
		if(reportParams == null || reportParams.toLowerCase().indexOf("excelserversave:true") == -1){
			out.clear();
			out=pageContext.pushBody();
		}
	}
	else if(reportMode.equals("AR5")){
		out.clear();
		out=pageContext.pushBody();
	}
}

ReportHandler handler = new ReportHandler(pageContext, request, response, userObj, decoder);
handler.service(out);
handler = null;
%>

<%!
private volatile ReportInitializer initializer;
//보고서 초기화 - 한번만 실행되고 사용자 Request에서 반복사용가능한 코드를 기술
public void jspInit() {
	initializer = new ReportInitializer(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
	//수정되지 않는 정적 Query변수들을 초기화
	//sql_data1
	StringBuilder sql_data1 = new StringBuilder();
	sql_data1.setLength(0);
	sql_data1.append("SELECT RQPR_ID												AS rqprId, ");
	sql_data1.append("	RQPR_DT												AS rqprDt, ");
	sql_data1.append("	RGST_ID												AS rgstId, ");
	sql_data1.append("	SU.SA_NAME+' '+SU.sa_jobx_name							                AS rgstNm, ");
	sql_data1.append("	RQPR_DEPT_CD										AS rqprDeptCd, ");
	sql_data1.append("	SU.SA_DEPT_NAME										AS rqprDeptNm, ");
	sql_data1.append("	dbo.fn_getDeptName(sd.dept_uper)					AS rqpUperrDeptNm, ");
	sql_data1.append("	ANL_NAME											AS anlNm, ");
	sql_data1.append("	dbo.fn_getComDtlNm('ANL_SCN_CD', ANL_SCN_CD)		AS anlScnNm, ");
	sql_data1.append("	ANL_UGY_YN											AS anlUgyYn, ");
	sql_data1.append("	dbo.fn_getComDtlNm('ANL_UGY_YN', ANL_UGY_YN)		AS anlUgyYnNm, ");
	sql_data1.append("	INFM_TYPE_CD										AS infmTypeCd, ");
	sql_data1.append("	dbo.fn_getComDtlNm('INFM_TYPE_CD', INFM_TYPE_CD)	AS infmTypeNm, ");
	sql_data1.append("	dbo.fn_getUserName(ANL_CHRG_ID)+' '+dbo.fn_getUserJobxName(ANL_CHRG_ID)						AS anlChrgNm, ");
	sql_data1.append("	SMPO_TRTM_CD										AS smpoTrtmCd, ");
	sql_data1.append("	dbo.fn_getComDtlNm('SMPO_TRTM_CD', SMPO_TRTM_CD)	AS smpoTrtmNm, ");
	sql_data1.append("	ANL_SBC												AS anlSbc, ");
	sql_data1.append("	dbo.fn_getComDtlNm('ACPC_ST_CD', ACPC_ST_CD)		AS acpcStNm, ");
	sql_data1.append("	RQPR_RDCS_DT										AS rqprRdcsDt, ");
	sql_data1.append("	ACPC_GVB_DT											AS acpcGvbDt, ");
	sql_data1.append("	ACPC_GVB_RSON										AS acpcGvbRson, ");
	sql_data1.append("	ACPC_NO												AS acpcNo, ");
	sql_data1.append("	ACPC_ID												AS acpcId, ");
	sql_data1.append("	dbo.fn_getUserName(ACPC_ID)							AS acpcNm, ");
	sql_data1.append("	ACPC_DT												AS acpcDt, ");
	sql_data1.append("	CMPL_DT												AS cmplDt, ");
	sql_data1.append("	ANL_RSLT_SBC										AS anlRsltSbc, ");
	sql_data1.append("	ANL_RDCS_DT											AS anlRdcsDt, ");
	sql_data1.append("	(SELECT count(*) ");
	sql_data1.append("	FROM	IRIS_ANL_RQPR_SMPO ");
	sql_data1.append("	WHERE	RQPR_ID = mst.RQPR_ID ");
	sql_data1.append("	AND		DEL_YN = 'N')					            AS smpoCnt ");
	sql_data1.append(" ");
	sql_data1.append("FROM	IRIS_ANL_RQPR_MST mst ");
	sql_data1.append("	   ,IRIS_SSO_USER SU ");
	sql_data1.append("	   ,IRIS_SSO_DEPT SD ");
	sql_data1.append("WHERE	RQPR_ID = ^RQPR_ID^ ");
	sql_data1.append("AND    MST.RGST_ID = SU.SA_USER ");
	sql_data1.append("AND    SU.SA_DEPT_NEW = SD.DEPT_CODE ");
	initializer.prepareQuery("sql_data1", sql_data1.toString());

	//sql_data2
	StringBuilder sql_data2 = new StringBuilder();
	sql_data2.setLength(0);
	sql_data2.append(" ");
	sql_data2.append("SELECT  rltd.RLTD_ID						AS rltdId, ");
	sql_data2.append("	   rltd.RQPR_ID							AS rqprId, ");
	sql_data2.append("	   rltd.PRE_RQPR_ID						AS preRqprId, ");
	sql_data2.append("	   rltd.PRE_ANL_NAME					AS preAnlNm, ");
	sql_data2.append("	   mst.ACPC_NO							AS preAcpcNo, ");
	sql_data2.append("	   dbo.fn_getUserName(mst.ANL_CHRG_ID)	AS preAnlChrgNm, ");
	sql_data2.append("	   rltd.PRE_RGST_ID						AS preRgstId, ");
	sql_data2.append("	   dbo.fn_getUserName(rltd.PRE_RGST_ID)	AS preRgstNm ");
	sql_data2.append("FROM	IRIS_ANL_RQPR_RLTD rltd, ");
	sql_data2.append("		IRIS_ANL_RQPR_MST mst ");
	sql_data2.append("WHERE	rltd.RQPR_ID = ^RQPR_ID^ ");
	sql_data2.append("AND		rltd.DEL_YN = 'N' ");
	sql_data2.append("AND		rltd.PRE_RQPR_ID = mst.RQPR_ID ");
	initializer.prepareQuery("sql_data2", sql_data2.toString());

	//sql_data3
	StringBuilder sql_data3 = new StringBuilder();
	sql_data3.setLength(0);
	sql_data3.append("WITH EXPR_MST AS ");
	sql_data3.append("			( ");
	sql_data3.append("SELECT   AEM.EXPR_CD ");
	sql_data3.append("	,AEM.EXPR_CD_L ");
	sql_data3.append("	,convert(varchar(255), EXPR_NM) as master_path ");
	sql_data3.append("FROM IRIS_ANL_EXPR_MST AEM ");
	sql_data3.append("WHERE AEM.DEL_YN = 'N' ");
	sql_data3.append("AND   AEM.SUPI_EXPR_CD = '0' ");
	sql_data3.append("UNION ALL ");
	sql_data3.append("SELECT  AEM2.EXPR_CD ");
	sql_data3.append("	,AEM2.EXPR_CD_L ");
	sql_data3.append("	,CAST(AEM3.master_path + '>' + AEM2.EXPR_NM AS VARCHAR(255)) master_path ");
	sql_data3.append("FROM IRIS_ANL_EXPR_MST AEM2 ");
	sql_data3.append("	,EXPR_MST AEM3 ");
	sql_data3.append("WHERE   AEM2.SUPI_EXPR_CD = AEM3.EXPR_CD ");
	sql_data3.append(") ");
	sql_data3.append("SELECT  ARE.RQPR_EXPR_ID							 as rqprExprId ");
	sql_data3.append("	,EM.master_path								 as exprNm ");
	sql_data3.append("	,ARE.SMPO_QTY								 as smpoQty ");
	sql_data3.append(" ");
	sql_data3.append("FROM EXPR_MST EM ");
	sql_data3.append(",IRIS_ANL_RQPR_EXPR ARE ");
	sql_data3.append("WHERE	EM.EXPR_CD_L = 4 ");
	sql_data3.append("AND	ARE.DEL_YN = 'N' ");
	sql_data3.append("AND	EM.EXPR_CD = ARE.EXPR_CD ");
	sql_data3.append("AND	ARE.RQPR_ID = ^RQPR_ID^ ");
	initializer.prepareQuery("sql_data3", sql_data3.toString());

	//sql_data4
	StringBuilder sql_data4 = new StringBuilder();
	sql_data4.setLength(0);
	sql_data4.append("SELECT SMPO_ID	AS smpoId, ");
	sql_data4.append("	RQPR_ID		AS rqprId, ");
	sql_data4.append("	SMPO_NM		AS smpoNm, ");
	sql_data4.append("	MKR_NM		AS mkrNm, ");
	sql_data4.append("	MDL_NM		AS mdlNm ");
	sql_data4.append("FROM	IRIS_ANL_RQPR_SMPO ");
	sql_data4.append("WHERE	RQPR_ID = ^RQPR_ID^ ");
	sql_data4.append("AND		DEL_YN = 'N' ");
	initializer.prepareQuery("sql_data4", sql_data4.toString());
}

class ReportHandler{
	//공통 변수 선언
	private final Logger logger = Logger.getLogger("com.activeintra");
	private Object[] userObj = null;
	private int nStartPage;		//각 쉬트별 시작 페이지 저장
	private int nMaxPage;		//한 쉬트가 실행된 후 생성된 최대 페이지 번호 저장
	private int nPageNum;		//현재 페이지 번호
	private int nYStartPos;		//쉬트에서 Y 시작 좌표
	private int nYEndPos;		//쉬트에서 Y 끝 좌표
	private int nYCurPos;		//현재 Y 좌표
	private int nYSavePos;		//연결된 멀티 프레임 쉬트에서 시작 Y 좌표 저장
	private int nYLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 Y 좌표 저장
	private int nXStartPos;		//쉬트에서 X 시작 좌표
	private int nXEndPos;		//쉬트에서 X 끝 좌표
	private int nXCurPos;		//현재 X 좌표
	private int nXSavePos;		//연결된 멀티 프레임 쉬트에서 시작 X 좌표 저장
	private int  nXLastPos;		//연결된 멀티 프레임 쉬트에서 각 프레임의 마지막 X 좌표 저장
	private boolean bIsBeforePageSkip;		//조건 밴드에서 페이지 넘기기 여부 판단
	private int nLoopRef;		//절대 양식에서 루프 참조 변수
	private int CELL_OBJECT = 0;
	private int DRAW_OBJECT = 1;
	private String isEmpty="";		//빈 문자열 비교에 사용
	private Map<String, String> mapParam;

	private int nBandRepeatType;	//1이면 반복밴드 가로 반복
	private int nBandWidth;		//반복밴드의 가로 폭
	private int nBandOffset;		//반복밴드 가로 반복 offset값
	private int nYBandStart;		//반복밴드 가로 반복 Y 시작 좌표
	private int nYBandEnd;		//반복밴드 가로 반복 Y 끝 좌표
	private int nHorRepeatNum;		//반복밴드 가로 반복 횟수
	private int nHorRepeatCnt;		//반복밴드 가로 반복 횟수 카운팅
	private Map<String, Integer> mapLeft;		//셀 Left
	private Map<String, Integer> mapTop;		//셀 Top
	private Map<String, Integer> mapWidth;		//셀 Width
	private Map<String, Integer> mapHeight;		//셀 Height
	private Map<String, String> mapStyle;		//셀 Style
	private HttpServletRequest request;
	private HttpServletResponse response;
	private PageContext pageContext;
	private JspWriter out;
	private HttpParameterDecoder decoder;

	private AIScriptManager manager;
	private String reportMode="AIScript";
	private String pdfFilename="";
	private String excelFilename="";

	//-----데이터 변수 선언-----
	String sheet10_A23 = "";
	String sheet10_D23 = "";
	String sheet10_H23 = "";
	String sheet10_D1 = "";
	String sheet10_H1 = "";
	String sheet10_H2 = "";
	String sheet10_H3 = "";
	String sheet10_B5 = "";
	String sheet10_C5 = "";
	String sheet10_E5 = "";
	String sheet10_G5 = "";
	String sheet10_B6 = "";
	String sheet10_C6 = "";
	String sheet10_B7 = "";
	String sheet10_C7 = "";
	String sheet10_E7 = "";
	String sheet10_G7 = "";
	String sheet10_B8 = "";
	String sheet10_C8 = "";
	String sheet10_E8 = "";
	String sheet10_G8 = "";
	String sheet10_B9 = "";
	String sheet10_C9 = "";
	String sheet10_E9 = "";
	String sheet10_G9 = "";
	String sheet10_B10 = "";
	long sheet10_C10 = 0L;
	String sheet10_E10 = "";
	String sheet10_G10 = "";
	String sheet10_B11 = "";
	String sheet10_B13 = "";
	String sheet10_C13 = "";
	String sheet10_E13 = "";
	String sheet10_G13 = "";
	String sheet10_B14 = "";
	String sheet10_C14 = "";
	String sheet10_E14 = "";
	String sheet10_G14 = "";
	String sheet10_B15 = "";
	String sheet10_C15 = "";
	String sheet10_E15 = "";
	String sheet10_G15 = "";
	String sheet10_B17 = "";
	String sheet10_B18 = "";
	String sheet10_B19 = "";
	String sheet10_B20 = "";
	String sheet20_B1 = "";
	String sheet20_A15 = "";
	String sheet20_D15 = "";
	String sheet20_H15 = "";
	int[] nAutoHeight_rb2_4=new int[1];
	String sheet20_B3 = "";
	String sheet20_B4 = "";
	int[] nAutoHeight_rb2_1=new int[1];
	String sheet20_B6 = "";
	String sheet20_B7 = "";
	int[] nAutoHeight_rb2_2=new int[1];
	String sheet20_B9 = "";
	String sheet20_B10 = "";
	int[] nAutoHeight_rb2_3=new int[1];
	String sheet20_B12 = "";
	String sheet20_B13 = "";
	String sheet30_B1 = "";
	String sheet30_A7 = "";
	String sheet30_D7 = "";
	String sheet30_H7 = "";
	String sheet30_B3 = "";
	String sheet30_B5 = "";
	String sheet40_B1 = "";
	String sheet40_A5 = "";
	String sheet40_D5 = "";
	String sheet40_H5 = "";
	String sheet40_B3 = "";

	//-----Connection, Statement, ResultSet 객체 선언-----
	private Connection conn_test; 	 //test Connection 객체
	private java.sql.PreparedStatement stat_data1;		//ResultSet data1 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet data1;		//ResultSet data1 객체
	private java.sql.PreparedStatement stat_data2;		//ResultSet data2 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet data2;		//ResultSet data2 객체
	private java.sql.PreparedStatement stat_data3;		//ResultSet data3 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet data3;		//ResultSet data3 객체
	private java.sql.PreparedStatement stat_data4;		//ResultSet data4 객체를 생성하기 위한 PreparedStatement 객체
	private ResultSet data4;		//ResultSet data4 객체

	//-----SQL 변수 선언-----
	private StringBuilder sql_data1 = new StringBuilder();		//ResultSet data1 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_data2 = new StringBuilder();		//ResultSet data2 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_data3 = new StringBuilder();		//ResultSet data3 객체를 생성하기 위한 쿼리문 저장
	private StringBuilder sql_data4 = new StringBuilder();		//ResultSet data4 객체를 생성하기 위한 쿼리문 저장

	//-----쿼리 필드 변수 선언-----
	//ResultSet data1 객체에서 필드 값을 받는 쿼리 필드 변수
	private long data1_rqprId;
	private String data1_rqprDt;
	private String data1_rgstId;
	private String data1_rgstNm;
	private String data1_rqprDeptCd;
	private String data1_rqprDeptNm;
	private String data1_rqpUperrDeptNm;
	private String data1_anlNm;
	private String data1_anlScnNm;
	private String data1_anlUgyYn;
	private String data1_anlUgyYnNm;
	private String data1_infmTypeCd;
	private String data1_infmTypeNm;
	private String data1_anlChrgNm;
	private String data1_smpoTrtmCd;
	private String data1_smpoTrtmNm;
	private String data1_anlSbc;
	private String data1_acpcStNm;
	private String data1_rqprRdcsDt;
	private String data1_acpcGvbDt;
	private String data1_acpcGvbRson;
	private String data1_acpcNo;
	private String data1_acpcId;
	private String data1_acpcNm;
	private String data1_acpcDt;
	private String data1_cmplDt;
	private String data1_anlRsltSbc;
	private String data1_anlRdcsDt;
	private long data1_smpoCnt;

	//ResultSet data2 객체에서 필드 값을 받는 쿼리 필드 변수
	private long data2_rltdId;
	private long data2_rqprId;
	private String data2_preRqprId;
	private String data2_preAnlNm;
	private String data2_preAcpcNo;
	private String data2_preAnlChrgNm;
	private String data2_preRgstId;
	private String data2_preRgstNm;

	//ResultSet data3 객체에서 필드 값을 받는 쿼리 필드 변수
	private long data3_rqprExprId;
	private String data3_exprNm;
	private long data3_smpoQty;

	//ResultSet data4 객체에서 필드 값을 받는 쿼리 필드 변수
	private long data4_smpoId;
	private long data4_rqprId;
	private String data4_smpoNm;
	private String data4_mkrNm;
	private String data4_mdlNm;

	//파라미터 변수 선언
	String RQPR_ID_Param;

	//-----사용자 정의 변수 및 함수-----
	int cnt = 1;


	//ReportHandler 생성자 함수
	ReportHandler(PageContext pageContext, HttpServletRequest request, HttpServletResponse response, Object[] userObj, HttpParameterDecoder decoder){
		this.pageContext = pageContext;
		this.request = request;
		this.response = response;
		this.userObj = userObj;
		this.decoder = decoder;
	}

	//ReportHandler 서비스 함수
	void service(JspWriter out) throws Exception{
		try{    //try 구문
			//변수 초기화
			this.out = out;
			nMaxPage = 0;   //nMaxPage 초기화

			nBandRepeatType=0;
			nBandWidth=0;
			nBandOffset=0;
			nYBandStart=0;
			nYBandEnd=0;
			nHorRepeatNum=0;
			nHorRepeatCnt=0;

			manager = new AIScriptManager(request, response, pageContext, out, logger, null);

			ServletContext context = pageContext.getServletContext();
			String temp = null;
			if(!context.getContextPath().equals("/"))
			temp = request.getRequestURI().replaceFirst(context.getContextPath(), "");
			else
			temp = request.getRequestURI();

			String path = temp.replace(".jsp", ".style");

			//셀 Rect, Style 값 저장
			setCellInfoMap();

			//파라미터 설정 함수 호출
			setParam();
			if(manager.open(reportMode, context.getRealPath(path)))
			{
				//스크립트 헤더 함수 호출
				getScriptHeader("A4", "2100x2970", "9", "HORIZONTAL", "14 28 14 28");

				//고정 데이터 초기화 함수 호출
				initConstVarient();

				//Connection 및 Statement 객체 생성 함수 호출
				createConnAndStateObject();

				//쿼리문 초기화 함수 호출
				initSQLConst();

				//쉬트 함수 호출
				//SHEET=Sheet1   FRAME=0 함수 호출
				executeSheet10();
				//SHEET=Sheet2   FRAME=0 함수 호출
				executeSheet20();
				//SHEET=Sheet3   FRAME=0 함수 호출
				executeSheet30();
				//SHEET=Sheet4   FRAME=0 함수 호출
				executeSheet40();

				//---------------스크립트 종료---------------
				manager.scriptWrite("/AIReport", "", "", false);
				manager.close();
			}
		}catch(Throwable t){    //catch 구문
			logger.error("---service function exception raised---");
			logger.error(t.toString());
			throw (new AIException(t.toString(),t.getCause()));
		}finally{    //finally 구문
			if(manager.reportFile!=null)
			manager.reportFile.close();

			//DataSet Close
			cleanup(data4, stat_data4, null, null);
			cleanup(data3, stat_data3, null, null);
			cleanup(data2, stat_data2, null, null);
			cleanup(data1, stat_data1, null, null);
			cleanup(null, null, null, conn_test);
		}    //end try
	}

	//-----쉬트 함수-----
	//-----SHEET=Sheet1   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet10( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "0 0 0 0");
		initSheetVariant(12, 12, 831, 566, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//밴드 함수 호출
		getScriptFromlb1_1(true, true);    //바닥글 밴드 호출
		getScriptFromvb1_1(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet2   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet20( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "0 0 0 0");
		initSheetVariant(12, 77, 831, 566, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//배경 이미지 함수 호출
		getBgImageScript(20);

		//밴드 함수 호출
		getScriptFromfb2_1(true, true);    //머리글 밴드 호출
		getScriptFromlb2_1(true, true);    //바닥글 밴드 호출
		getScriptFromrb2_4(true);    //반복 밴드 호출
		getScriptFromrb2_1(true);    //반복 밴드 호출
		getScriptFromrb2_2(true);    //반복 밴드 호출
		getScriptFromrb2_3(true);    //반복 밴드 호출
		getScriptFromvb2_3(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet3   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet30( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "0 0 0 0");
		initSheetVariant(12, 77, 831, 555, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//배경 이미지 함수 호출
		getBgImageScript(30);

		//밴드 함수 호출
		getScriptFromfb3_1(true, true);    //머리글 밴드 호출
		getScriptFromfoot(true, true);    //바닥글 밴드 호출
		getScriptFromvd1(true, true);    //Void 밴드 호출
		getScriptFromVoidBand3013(true, true);    //Void 밴드 호출
		getScriptFromvd2(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----SHEET=Sheet4   FRAME=Frame0 Start
	//-----폼 형식 : 상대 양식
	private void executeSheet40( ) throws Exception{
		//쉬트 초기화 함수 호출
		getSheetPaperInfo("A4", "2100x2970", "9", "HORIZONTAL", "0 0 0 0");
		initSheetVariant(12, 77, 831, 548, true);

		//시작 페이지 번호 출력
		pageWrite(nPageNum);

		//배경 이미지 함수 호출
		getBgImageScript(40);

		//밴드 함수 호출
		getScriptFromfb4_1(true, true);    //머리글 밴드 호출
		getScriptFromlb4_1(true, true);    //바닥글 밴드 호출
		getScriptFromvd3(true, true);    //Void 밴드 호출

		//페이지 및 좌표 설정
		nMaxPage=(int)MAX((long)nMaxPage, (long)nPageNum);    //생성된 최대 페이지 번호 구하기
	}

	//-----밴드 함수-----
	//----lb1_1 FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : lb1_1
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromlb1_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet10_A23="대외비";
			sheet10_D23="#PAGE";
			sheet10_H23="연구소.고객사용안전.무해성검증PJT";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptlb1_1();
		}   //end if(bIsPrint)
	}

	//----vb1_1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet1    FRAME=Frame0
	//----밴드 이름 : vb1_1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvb1_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=523;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet data1 객체의 생성
			if(data1==null){
				data1 = stat_data1.executeQuery();
			}else{
				data1.beforeFirst();
			}

			//데이터 fetch
			if(data1.next()){
				setFieldVariableFromdata1();	//ResultSet data1에서 필드 값 설정
			}else{
				setFieldInitFromdata1();	//ResultSet data1의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet10_C5="";
			sheet10_C6="";
			sheet10_C7="";
			sheet10_G7="";
			sheet10_C8="";
			sheet10_G8="";
			sheet10_C9="";
			sheet10_G9="";
			sheet10_C10=0L;
			sheet10_G10="";

			//데이터 변수 할당
			sheet10_D1="분석결과서";
			sheet10_H1="(주)LG하우시스 / 연구소";
			sheet10_H2="07796 서울특별시 강서구 마곡중앙10로 30";
			sheet10_H3="LG사이언스파크 LG하우시스 연구소";
			sheet10_B5="접수번호";
			sheet10_C5 = data1_acpcNo;
			sheet10_E5="페이지수";
			sheet10_G5="직접입력";
			sheet10_B6="분석명";
			sheet10_C6 = data1_anlNm;
			sheet10_B7="사업부";
			sheet10_C7 = data1_rqpUperrDeptNm;
			sheet10_E7="분석구분";
			sheet10_G7 = data1_anlScnNm;
			sheet10_B8="팀(PJT)";
			sheet10_C8 = data1_rqprDeptNm;
			sheet10_E8="긴급 유무";
			sheet10_G8 = data1_anlUgyYnNm;
			sheet10_B9="의뢰자";
			sheet10_C9 = data1_rgstNm ;
			sheet10_E9="분석담당자";
			sheet10_G9 = data1_anlChrgNm;
			sheet10_B10="시료 수";
			sheet10_C10 = data1_smpoCnt;
			sheet10_E10="접수일";
			sheet10_G10 = data1_acpcDt;
			sheet10_B11="분석결과";
			sheet10_B13="작성자";
			sheet10_C13="직접입력";
			sheet10_E13="작성일";
			sheet10_G13="직접입력";
			sheet10_B14="검토자";
			sheet10_C14="직접입력";
			sheet10_E14="검토일";
			sheet10_G14="직접입력";
			sheet10_B15="최종승인자";
			sheet10_C15="직접입력";
			sheet10_E15="승인일";
			sheet10_G15="직접입력";
			sheet10_B17="주의 :";
			sheet10_B18="이 문서는 연구정보통합시스템(IRIS)에서 조회한 경우에만 유효하며 작성자 외 분석결과 및 세부내용의 무단 수정을 금지합니다.";
			sheet10_B19="이 문서는 문서보안 규정에 따라 비밀문서로 관리되며 해당 분석 건의 의뢰자 및 의뢰팀장의 승인 없이 외부에 유출할 수 없습니다.           ";
			sheet10_B20="또한, 분석결과를 연구개발 외의 용도로 사용하기 위해서는 먼저 무해성검증PJT PL과 협의하시기 바랍니다.";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(10);
			}

			//스크립트 출력 함수 호출
			writeScriptvb1_1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----fb2_1 HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : fb2_1
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfb2_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet data1 객체의 생성
			if(data1==null){
				data1 = stat_data1.executeQuery();
			}else{
				data1.beforeFirst();
			}

			//데이터 fetch
			if(data1.next()){
				setFieldVariableFromdata1();	//ResultSet data1에서 필드 값 설정
			}else{
				setFieldInitFromdata1();	//ResultSet data1의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet20_B1="";

			//데이터 변수 할당
			sheet20_B1 = data1_acpcNo;
			sheet20_B1 = data1_acpcNo + " : " +data1_anlNm ;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptfb2_1();
		}   //end if(bIsPrint)
	}

	//----lb2_1 FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : lb2_1
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromlb2_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet20_A15="대외비";
			sheet20_D15="#PAGE";
			sheet20_H15="             연구소.고객사용안전.무해성검증PJT ";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptlb2_1();
		}   //end if(bIsPrint)
	}

	//----rh2_4 RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : rh2_4
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromrh2_4(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=22;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet20_B3="1.  분석 목적";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptrh2_4();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----rb2_4 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : rb2_4
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromrb2_4(boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=25;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : LG스마트체2.0 Regular
		//폰트 사이즈 : 11
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {330,271,451,634,634,876,727,249,394,394,532,681,218,442,220,430,681,681,681,681,681,681,681,681,681,681,220,220,681,681,681,495,1206,740,690,706,751,639,595,766,784,268,404,667,553,965,814,773,666,773,689,629,596,751,677,1115,706,662,646,404,992,404,540,510,634,561,602,520,604,571,394,603,604,245,245,556,253,919,604,613,602,603,411,508,440,603,525,845,549,529,534,422,242,422,558,1024};

		//데이터 변수 초기화
		sheet20_B4="";

		//DataSet 객체 생성
		//ResultSet data1 객체의 생성
		if(data1==null){
			data1 = stat_data1.executeQuery();
		}else{
			data1.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFromrh2_4(bIsFirst, true);	//반복 헤더 호출

		//--while Loop Start--##
		while(data1.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromdata1();	//RecordSet data1에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_B4=manager.scriptObject.HtmlDataParsing(751, 25, "cell_style_13", data1_anlSbc, "sheet20_B4");

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				//페이지 연결 출력 루프문 시작
				boolean bSplitLoopPrint=true;
				boolean bSplitLoop=true;
				String []sheet20_B4_Split=new String[2];
				do{
					if(isPageSkip(nYCurPos+15)){   //스크립트 출력 영역 검사
						//페이지 스킵 함수 호출
						pageSkip(20);

						//반복 헤더 및 부모 반복단위 호출
						getScriptFromrh2_4(false, true);	//반복 헤더 호출
					}   //end if(page skip test)

					//페이지 연결 출력 Auto Size Code
					nAutoHeight_rb2_4[0]=25;
					nAutoHeight_rb2_4[0]=manager.scriptObject.HtmlDataPrintHeightEx(nYEndPos-nYCurPos, nAutoHeight_rb2_4[0], sheet20_B4_Split, "sheet20_B4");
					nBandHeight=nAutoHeight_rb2_4[0];
					if(!sheet20_B4_Split[0].equals(isEmpty)){
						sheet20_B4=sheet20_B4_Split[0];
					}

					//셀 Rect, Style 값 저장 : getPrintHeightEx
					setCellInfoMap();

					//스크립트 출력 함수 호출
					writeScriptrb2_4(bSplitLoopPrint);

					//페이지 연결 출력 및 가상병합 플래그 Reset
					if(sheet20_B4_Split[0].equals(isEmpty)){
						bSplitLoop=false;
					}else{
						sheet20_B4=sheet20_B4_Split[1];
						bSplitLoopPrint=false;
					}

					//다음 출력 좌표 설정
					nYCurPos=nYCurPos+nBandHeight;

					if(bSplitLoop)
					pageSkip(20);
				}while(bSplitLoop);    //페이지 연결 출력 루프문 종료
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----rh1_1 RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : rh1_1
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromrh1_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=32;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet20_B6="2.  시료 정보";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptrh1_1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----rb2_1 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : rb2_1
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromrb2_1(boolean bIsPrint) throws Exception{
		cnt = 1;

		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : LG스마트체2.0 Regular
		//폰트 사이즈 : 11
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {330,271,451,634,634,876,727,249,394,394,532,681,218,442,220,430,681,681,681,681,681,681,681,681,681,681,220,220,681,681,681,495,1206,740,690,706,751,639,595,766,784,268,404,667,553,965,814,773,666,773,689,629,596,751,677,1115,706,662,646,404,992,404,540,510,634,561,602,520,604,571,394,603,604,245,245,556,253,919,604,613,602,603,411,508,440,603,525,845,549,529,534,422,242,422,558,1024};

		//데이터 변수 초기화
		sheet20_B7="";

		//DataSet 객체 생성
		//ResultSet data4 객체의 생성
		if(data4==null){
			data4 = stat_data4.executeQuery();
		}else{
			data4.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFromrh1_1(bIsFirst, true);	//반복 헤더 호출

		//--while Loop Start--##
		while(data4.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromdata4();	//RecordSet data4에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_B7 = data4_smpoNm;
			sheet20_B7 = String.valueOf(cnt) + ")  " +data4_smpoNm+ "  /  "+data4_mkrNm +"  /  "+data4_mdlNm;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				//페이지 연결 출력 루프문 시작
				boolean bSplitLoopPrint=true;
				boolean bSplitLoop=true;
				String []sheet20_B7_Split=new String[2];
				do{
					if(isPageSkip(nYCurPos+15)){   //스크립트 출력 영역 검사
						//페이지 스킵 함수 호출
						pageSkip(20);

						//반복 헤더 및 부모 반복단위 호출
						getScriptFromrh1_1(false, true);	//반복 헤더 호출
					}   //end if(page skip test)

					//페이지 연결 출력 Auto Size Code
					nAutoHeight_rb2_1[0]=20;
					nAutoHeight_rb2_1[0]=getPrintHeightEx(sheet20_B7, sheet20_B7_Split, charWidth, 11, 741, nYEndPos-nYCurPos-0, nAutoHeight_rb2_1[0], 10, 0, "cell_style_14");
					nBandHeight=nAutoHeight_rb2_1[0];
					if(!sheet20_B7_Split[0].equals(isEmpty)){
						sheet20_B7=sheet20_B7_Split[0];
					}

					//셀 Rect, Style 값 저장 : getPrintHeightEx
					setCellInfoMap();

					//스크립트 출력 함수 호출
					writeScriptrb2_1(bSplitLoopPrint);

					//페이지 연결 출력 및 가상병합 플래그 Reset
					if(sheet20_B7_Split[0].equals(isEmpty)){
						bSplitLoop=false;
					}else{
						sheet20_B7=sheet20_B7_Split[1];
						bSplitLoopPrint=false;
					}

					//다음 출력 좌표 설정
					nYCurPos=nYCurPos+nBandHeight;

					if(bSplitLoop)
					pageSkip(20);

					cnt++;
				}while(bSplitLoop);    //페이지 연결 출력 루프문 종료
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
			getScriptFromvb_empty(true, true);
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----rh2_2 RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : rh2_2
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromrh2_2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=32;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet20_B9="3.  관련 분석";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptrh2_2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----rb2_2 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : rb2_2
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromrb2_2(boolean bIsPrint) throws Exception{
		cnt = 1;

		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : LG스마트체2.0 Regular
		//폰트 사이즈 : 11
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {330,271,451,634,634,876,727,249,394,394,532,681,218,442,220,430,681,681,681,681,681,681,681,681,681,681,220,220,681,681,681,495,1206,740,690,706,751,639,595,766,784,268,404,667,553,965,814,773,666,773,689,629,596,751,677,1115,706,662,646,404,992,404,540,510,634,561,602,520,604,571,394,603,604,245,245,556,253,919,604,613,602,603,411,508,440,603,525,845,549,529,534,422,242,422,558,1024};

		//데이터 변수 초기화
		sheet20_B10="";

		//DataSet 객체 생성
		//ResultSet data2 객체의 생성
		if(data2==null){
			data2 = stat_data2.executeQuery();
		}else{
			data2.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFromrh2_2(bIsFirst, true);	//반복 헤더 호출

		//--while Loop Start--##
		while(data2.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromdata2();	//RecordSet data2에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_B10 = data2_preAnlNm;
			sheet20_B10 = String.valueOf(cnt) + ")  " +data2_preAcpcNo+ " : "+data2_preAnlNm +"  /  의뢰자  :  "+data2_preRgstNm+"  /  담당자  :  "+data2_preAnlChrgNm;

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				//페이지 연결 출력 루프문 시작
				boolean bSplitLoopPrint=true;
				boolean bSplitLoop=true;
				String []sheet20_B10_Split=new String[2];
				do{
					if(isPageSkip(nYCurPos+15)){   //스크립트 출력 영역 검사
						//페이지 스킵 함수 호출
						pageSkip(20);

						//반복 헤더 및 부모 반복단위 호출
						getScriptFromrh2_2(false, true);	//반복 헤더 호출
					}   //end if(page skip test)

					//페이지 연결 출력 Auto Size Code
					nAutoHeight_rb2_2[0]=20;
					nAutoHeight_rb2_2[0]=getPrintHeightEx(sheet20_B10, sheet20_B10_Split, charWidth, 11, 741, nYEndPos-nYCurPos-0, nAutoHeight_rb2_2[0], 10, 0, "cell_style_14");
					nBandHeight=nAutoHeight_rb2_2[0];
					if(!sheet20_B10_Split[0].equals(isEmpty)){
						sheet20_B10=sheet20_B10_Split[0];
					}

					//셀 Rect, Style 값 저장 : getPrintHeightEx
					setCellInfoMap();

					//스크립트 출력 함수 호출
					writeScriptrb2_2(bSplitLoopPrint);

					//페이지 연결 출력 및 가상병합 플래그 Reset
					if(sheet20_B10_Split[0].equals(isEmpty)){
						bSplitLoop=false;
					}else{
						sheet20_B10=sheet20_B10_Split[1];
						bSplitLoopPrint=false;
					}

					//다음 출력 좌표 설정
					nYCurPos=nYCurPos+nBandHeight;

					if(bSplitLoop)
					pageSkip(20);

					cnt++;
				}while(bSplitLoop);    //페이지 연결 출력 루프문 종료
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
			getScriptFromvb_empty(true, true);
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----rh2_3 RepeatHeader Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : rh2_3
	//----밴드 종류 : 반복 헤더
	//----bIsFrist : 반복 밴드 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromrh2_3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=32;	//밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet20_B12="4. 실험 정보";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptrh2_3();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----rb2_3 RepeatBand Start-----
	//-----소속 쉬트 : SHEET=Sheet2   FRAME=Frame0
	//-----밴드 이름 : rb2_3
	//-----밴드 종류 : 반복 밴드
	//-----bIsPrint : 감추기 속성 설정 여부 true면 출력, false면 스크립트를 생성하지 않음
	private void getScriptFromrb2_3(boolean bIsPrint) throws Exception{
		cnt = 1;

		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이
		boolean bIsFirst=true;
		//폰트명 : LG스마트체2.0 Regular
		//폰트 사이즈 : 11
		//각 문자별 폭을 할당할 배열 선언
		int[] charWidth = {330,271,451,634,634,876,727,249,394,394,532,681,218,442,220,430,681,681,681,681,681,681,681,681,681,681,220,220,681,681,681,495,1206,740,690,706,751,639,595,766,784,268,404,667,553,965,814,773,666,773,689,629,596,751,677,1115,706,662,646,404,992,404,540,510,634,561,602,520,604,571,394,603,604,245,245,556,253,919,604,613,602,603,411,508,440,603,525,845,549,529,534,422,242,422,558,1024};

		//데이터 변수 초기화
		sheet20_B13="";

		//DataSet 객체 생성
		//ResultSet data3 객체의 생성
		if(data3==null){
			data3 = stat_data3.executeQuery();
		}else{
			data3.beforeFirst();
		}

		//반복 헤더 호출
		getScriptFromrh2_3(bIsFirst, true);	//반복 헤더 호출

		//--while Loop Start--##
		while(data3.next()){   //자동으로 생성되는 반복 밴드의 루프문
			//데이터 fetch
			setFieldVariableFromdata3();	//RecordSet data3에서 필드 값 설정

			if(bIsFirst){   //밴드 호출 후 루프 내에서 한번 만 실행되는 코드
			}   //end if(bIsFirst)

			//데이터 변수 할당
			sheet20_B13 = data3_exprNm;
			sheet20_B13 = String.valueOf(cnt) + ")  " +data3_exprNm+"  /  "+data3_smpoQty+" 개";

			//AI 스크립트 출력
			if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
				//페이지 연결 출력 루프문 시작
				boolean bSplitLoopPrint=true;
				boolean bSplitLoop=true;
				String []sheet20_B13_Split=new String[2];
				do{
					if(isPageSkip(nYCurPos+15)){   //스크립트 출력 영역 검사
						//페이지 스킵 함수 호출
						pageSkip(20);

						//반복 헤더 및 부모 반복단위 호출
						getScriptFromrh2_3(false, true);	//반복 헤더 호출
					}   //end if(page skip test)

					//페이지 연결 출력 Auto Size Code
					nAutoHeight_rb2_3[0]=20;
					nAutoHeight_rb2_3[0]=getPrintHeightEx(sheet20_B13, sheet20_B13_Split, charWidth, 11, 741, nYEndPos-nYCurPos-0, nAutoHeight_rb2_3[0], 10, 0, "cell_style_14");
					nBandHeight=nAutoHeight_rb2_3[0];
					if(!sheet20_B13_Split[0].equals(isEmpty)){
						sheet20_B13=sheet20_B13_Split[0];
					}

					//셀 Rect, Style 값 저장 : getPrintHeightEx
					setCellInfoMap();

					//스크립트 출력 함수 호출
					writeScriptrb2_3(bSplitLoopPrint);

					//페이지 연결 출력 및 가상병합 플래그 Reset
					if(sheet20_B13_Split[0].equals(isEmpty)){
						bSplitLoop=false;
					}else{
						sheet20_B13=sheet20_B13_Split[1];
						bSplitLoopPrint=false;
					}

					//다음 출력 좌표 설정
					nYCurPos=nYCurPos+nBandHeight;

					if(bSplitLoop)
					pageSkip(20);

					cnt++;
				}while(bSplitLoop);    //페이지 연결 출력 루프문 종료
			}   //end if(bIsPrint)

			//bIsFirst 및 출력 라인 설정
			bIsFirst=false;
		}   //while end

		if(bIsFirst){   //while 루프가 실행되지 않은 경우
			getScriptFromvb_empty(true, true);
		} else {   //while 루프가 실행된 경우
		}   //루프 외부 end if(bIsFirst)
	}

	//----vb2_3 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : vb2_3
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvb2_3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=10;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptvb2_3();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----vb_empty VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet2    FRAME=Frame0
	//----밴드 이름 : vb_empty
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvb_empty(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=40;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(20);
			}

			//스크립트 출력 함수 호출
			writeScriptvb_empty();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----fb3_1 HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : fb3_1
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfb3_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet data1 객체의 생성
			if(data1==null){
				data1 = stat_data1.executeQuery();
			}else{
				data1.beforeFirst();
			}

			//데이터 fetch
			if(data1.next()){
				setFieldVariableFromdata1();	//ResultSet data1에서 필드 값 설정
			}else{
				setFieldInitFromdata1();	//ResultSet data1의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet30_B1="";

			//데이터 변수 할당
			sheet30_B1 = data1_acpcNo;
			sheet30_B1 = data1_acpcNo + " : " +data1_anlNm ;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptfb3_1();
		}   //end if(bIsPrint)
	}

	//----foot FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : foot
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfoot(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet30_A7="대외비";
			sheet30_D7="#PAGE";
			sheet30_H7="연구소.고객사용안전.무해성검증PJT";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptfoot();
		}   //end if(bIsPrint)
	}

	//----vd1 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : vd1
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvd1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet30_B3="■ 분석결과\n";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(30);
			}

			//스크립트 출력 함수 호출
			writeScriptvd1();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----VoidBand3013 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : VoidBand3013
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromVoidBand3013(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=5;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수 호출
			voidBandNoneData(nBandHeight, 30);
		}   //end if(bIsPrint)
	}

	//----vd2 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet3    FRAME=Frame0
	//----밴드 이름 : vd2
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvd2(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=23;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet30_B5="( 분석결과를 입력 하세요. )";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(30);
			}

			//스크립트 출력 함수 호출
			writeScriptvd2();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//----fb4_1 HeaderBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : fb4_1
	//----밴드 종류 : 머리글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromfb4_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//DataSet 객체 생성
			//ResultSet data1 객체의 생성
			if(data1==null){
				data1 = stat_data1.executeQuery();
			}else{
				data1.beforeFirst();
			}

			//데이터 fetch
			if(data1.next()){
				setFieldVariableFromdata1();	//ResultSet data1에서 필드 값 설정
			}else{
				setFieldInitFromdata1();	//ResultSet data1의 필드 값 초기화
			}

			//데이터 변수 초기화
			sheet40_B1="";

			//데이터 변수 할당
			sheet40_B1 = data1_acpcNo;
			sheet40_B1 = data1_acpcNo + " : " +data1_anlNm ;
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptfb4_1();
		}   //end if(bIsPrint)
	}

	//----lb4_1 FooterBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : lb4_1
	//----밴드 종류 : 바닥글 밴드
	//----bIsFrist : 쉬트 함수에서 최초로 호출될 때 true, 페이지 스킵 함수에서 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	private void getScriptFromlb4_1(boolean bIsFirst, boolean bIsPrint) throws Exception{
		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet40_A5="대외비";
			sheet40_D5="#PAGE";
			sheet40_H5="연구소.고객사용안전.무해성검증PJT";
		}   //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 함수 호출
			writeScriptlb4_1();
		}   //end if(bIsPrint)
	}

	//----vd3 VoidBand Start----
	//----소속 쉬트 : SHEET=Sheet4    FRAME=Frame0
	//----밴드 이름 : vd3
	//----밴드 종류 : Void 밴드
	//----bIsFrist : 부모 밴드 함수나 쉬트 함수에서 최초로 호출될 때 true, 그 이후 호출될 때 false
	//----bIsPrint : 감추기 속성 설정 여부. true면 출력, false면 AI 스크립트를 생성하지 않음.
	//----nRepeatCnt : 부모 반복 밴드 수행 횟수와 연동 옵션 설정시 void 밴드가 수행할 반복 횟수 전달
	private void getScriptFromvd3(boolean bIsFirst, boolean bIsPrint) throws Exception{
		//지역 변수 선언 및 초기화
		int nBandHeight=20;    //밴드 출력 높이

		if(bIsFirst){   //밴드 최초 호출 시에만 실행되는 코드
			//데이터 변수 할당
			sheet40_B3="( 분석결과를 입력 하세요. )";
		}    //end if(bIsFirst)

		//AI 스크립트 출력
		if(bIsPrint){   //감추기 속성이 지정되지 않으면 bIsPrint는 true
			//스크립트 출력 영역 검사
			if(isPageSkip(nYCurPos+nBandHeight)){
				pageSkip(40);
			}

			//스크립트 출력 함수 호출
			writeScriptvd3();

			//다음 출력 좌표 설정
			nYCurPos=nYCurPos+nBandHeight;
		}   //end if(bIsPrint)
	}

	//-----스크립트 출력 함수-----
	//----lb1_1 스크립트 문 출력 함수----
	private void writeScriptlb1_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 12, 566, 134, 18, sheet10_A23, "sheet10_A23", "cell_style_9");
		objectWrite(CELL_OBJECT, 146, 566, 195, 18, "", "sheet10_C23", "cell_style_10");
		objectWrite(CELL_OBJECT, 341, 566, 160, 18, sheet10_D23, "sheet10_D23", "cell_style_10");
		objectWrite(CELL_OBJECT, 501, 566, 20, 18, "", "sheet10_F23", "cell_style_10");
		objectWrite(CELL_OBJECT, 521, 566, 60, 18, "", "sheet10_G23", "cell_style_10");
		objectWrite(CELL_OBJECT, 581, 566, 249, 18, sheet10_H23, "sheet10_H23", "cell_style_10");
	}

	//----vb1_1 스크립트 문 출력 함수----
	private void writeScriptvb1_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_D1"), nYCurPos+mapTop.get("sheet10_D1"), mapWidth.get("sheet10_D1"), mapHeight.get("sheet10_D1"), sheet10_D1, "sheet10_D1", mapStyle.get("sheet10_D1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_H1"), nYCurPos+mapTop.get("sheet10_H1"), mapWidth.get("sheet10_H1"), mapHeight.get("sheet10_H1"), sheet10_H1, "sheet10_H1", mapStyle.get("sheet10_H1"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_H2"), nYCurPos+mapTop.get("sheet10_H2"), mapWidth.get("sheet10_H2"), mapHeight.get("sheet10_H2"), sheet10_H2, "sheet10_H2", mapStyle.get("sheet10_H2"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_H3"), nYCurPos+mapTop.get("sheet10_H3"), mapWidth.get("sheet10_H3"), mapHeight.get("sheet10_H3"), sheet10_H3, "sheet10_H3", mapStyle.get("sheet10_H3"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B5"), nYCurPos+mapTop.get("sheet10_B5"), mapWidth.get("sheet10_B5"), mapHeight.get("sheet10_B5"), sheet10_B5, "sheet10_B5", mapStyle.get("sheet10_B5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C5"), nYCurPos+mapTop.get("sheet10_C5"), mapWidth.get("sheet10_C5"), mapHeight.get("sheet10_C5"), sheet10_C5, "sheet10_C5", mapStyle.get("sheet10_C5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_E5"), nYCurPos+mapTop.get("sheet10_E5"), mapWidth.get("sheet10_E5"), mapHeight.get("sheet10_E5"), sheet10_E5, "sheet10_E5", mapStyle.get("sheet10_E5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G5"), nYCurPos+mapTop.get("sheet10_G5"), mapWidth.get("sheet10_G5"), mapHeight.get("sheet10_G5"), sheet10_G5, "sheet10_G5", mapStyle.get("sheet10_G5"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B6"), nYCurPos+mapTop.get("sheet10_B6"), mapWidth.get("sheet10_B6"), mapHeight.get("sheet10_B6"), sheet10_B6, "sheet10_B6", mapStyle.get("sheet10_B6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C6"), nYCurPos+mapTop.get("sheet10_C6"), mapWidth.get("sheet10_C6"), mapHeight.get("sheet10_C6"), sheet10_C6, "sheet10_C6", mapStyle.get("sheet10_C6"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B7"), nYCurPos+mapTop.get("sheet10_B7"), mapWidth.get("sheet10_B7"), mapHeight.get("sheet10_B7"), sheet10_B7, "sheet10_B7", mapStyle.get("sheet10_B7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C7"), nYCurPos+mapTop.get("sheet10_C7"), mapWidth.get("sheet10_C7"), mapHeight.get("sheet10_C7"), sheet10_C7, "sheet10_C7", mapStyle.get("sheet10_C7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_E7"), nYCurPos+mapTop.get("sheet10_E7"), mapWidth.get("sheet10_E7"), mapHeight.get("sheet10_E7"), sheet10_E7, "sheet10_E7", mapStyle.get("sheet10_E7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G7"), nYCurPos+mapTop.get("sheet10_G7"), mapWidth.get("sheet10_G7"), mapHeight.get("sheet10_G7"), sheet10_G7, "sheet10_G7", mapStyle.get("sheet10_G7"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B8"), nYCurPos+mapTop.get("sheet10_B8"), mapWidth.get("sheet10_B8"), mapHeight.get("sheet10_B8"), sheet10_B8, "sheet10_B8", mapStyle.get("sheet10_B8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C8"), nYCurPos+mapTop.get("sheet10_C8"), mapWidth.get("sheet10_C8"), mapHeight.get("sheet10_C8"), sheet10_C8, "sheet10_C8", mapStyle.get("sheet10_C8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_E8"), nYCurPos+mapTop.get("sheet10_E8"), mapWidth.get("sheet10_E8"), mapHeight.get("sheet10_E8"), sheet10_E8, "sheet10_E8", mapStyle.get("sheet10_E8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G8"), nYCurPos+mapTop.get("sheet10_G8"), mapWidth.get("sheet10_G8"), mapHeight.get("sheet10_G8"), sheet10_G8, "sheet10_G8", mapStyle.get("sheet10_G8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B9"), nYCurPos+mapTop.get("sheet10_B9"), mapWidth.get("sheet10_B9"), mapHeight.get("sheet10_B9"), sheet10_B9, "sheet10_B9", mapStyle.get("sheet10_B9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C9"), nYCurPos+mapTop.get("sheet10_C9"), mapWidth.get("sheet10_C9"), mapHeight.get("sheet10_C9"), sheet10_C9, "sheet10_C9", mapStyle.get("sheet10_C9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_E9"), nYCurPos+mapTop.get("sheet10_E9"), mapWidth.get("sheet10_E9"), mapHeight.get("sheet10_E9"), sheet10_E9, "sheet10_E9", mapStyle.get("sheet10_E9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G9"), nYCurPos+mapTop.get("sheet10_G9"), mapWidth.get("sheet10_G9"), mapHeight.get("sheet10_G9"), sheet10_G9, "sheet10_G9", mapStyle.get("sheet10_G9"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B10"), nYCurPos+mapTop.get("sheet10_B10"), mapWidth.get("sheet10_B10"), mapHeight.get("sheet10_B10"), sheet10_B10, "sheet10_B10", mapStyle.get("sheet10_B10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C10"), nYCurPos+mapTop.get("sheet10_C10"), mapWidth.get("sheet10_C10"), mapHeight.get("sheet10_C10"), String.valueOf(sheet10_C10), "sheet10_C10", mapStyle.get("sheet10_C10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_E10"), nYCurPos+mapTop.get("sheet10_E10"), mapWidth.get("sheet10_E10"), mapHeight.get("sheet10_E10"), sheet10_E10, "sheet10_E10", mapStyle.get("sheet10_E10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G10"), nYCurPos+mapTop.get("sheet10_G10"), mapWidth.get("sheet10_G10"), mapHeight.get("sheet10_G10"), sheet10_G10, "sheet10_G10", mapStyle.get("sheet10_G10"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B11"), nYCurPos+mapTop.get("sheet10_B11"), mapWidth.get("sheet10_B11"), mapHeight.get("sheet10_B11"), sheet10_B11, "sheet10_B11", mapStyle.get("sheet10_B11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C11"), nYCurPos+mapTop.get("sheet10_C11"), mapWidth.get("sheet10_C11"), mapHeight.get("sheet10_C11"), "", "sheet10_C11", mapStyle.get("sheet10_C11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B13"), nYCurPos+mapTop.get("sheet10_B13"), mapWidth.get("sheet10_B13"), mapHeight.get("sheet10_B13"), sheet10_B13, "sheet10_B13", mapStyle.get("sheet10_B13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C13"), nYCurPos+mapTop.get("sheet10_C13"), mapWidth.get("sheet10_C13"), mapHeight.get("sheet10_C13"), sheet10_C13, "sheet10_C13", mapStyle.get("sheet10_C13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_E13"), nYCurPos+mapTop.get("sheet10_E13"), mapWidth.get("sheet10_E13"), mapHeight.get("sheet10_E13"), sheet10_E13, "sheet10_E13", mapStyle.get("sheet10_E13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G13"), nYCurPos+mapTop.get("sheet10_G13"), mapWidth.get("sheet10_G13"), mapHeight.get("sheet10_G13"), sheet10_G13, "sheet10_G13", mapStyle.get("sheet10_G13"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B14"), nYCurPos+mapTop.get("sheet10_B14"), mapWidth.get("sheet10_B14"), mapHeight.get("sheet10_B14"), sheet10_B14, "sheet10_B14", mapStyle.get("sheet10_B14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C14"), nYCurPos+mapTop.get("sheet10_C14"), mapWidth.get("sheet10_C14"), mapHeight.get("sheet10_C14"), sheet10_C14, "sheet10_C14", mapStyle.get("sheet10_C14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_E14"), nYCurPos+mapTop.get("sheet10_E14"), mapWidth.get("sheet10_E14"), mapHeight.get("sheet10_E14"), sheet10_E14, "sheet10_E14", mapStyle.get("sheet10_E14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G14"), nYCurPos+mapTop.get("sheet10_G14"), mapWidth.get("sheet10_G14"), mapHeight.get("sheet10_G14"), sheet10_G14, "sheet10_G14", mapStyle.get("sheet10_G14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B15"), nYCurPos+mapTop.get("sheet10_B15"), mapWidth.get("sheet10_B15"), mapHeight.get("sheet10_B15"), sheet10_B15, "sheet10_B15", mapStyle.get("sheet10_B15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_C15"), nYCurPos+mapTop.get("sheet10_C15"), mapWidth.get("sheet10_C15"), mapHeight.get("sheet10_C15"), sheet10_C15, "sheet10_C15", mapStyle.get("sheet10_C15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_E15"), nYCurPos+mapTop.get("sheet10_E15"), mapWidth.get("sheet10_E15"), mapHeight.get("sheet10_E15"), sheet10_E15, "sheet10_E15", mapStyle.get("sheet10_E15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_G15"), nYCurPos+mapTop.get("sheet10_G15"), mapWidth.get("sheet10_G15"), mapHeight.get("sheet10_G15"), sheet10_G15, "sheet10_G15", mapStyle.get("sheet10_G15"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B17"), nYCurPos+mapTop.get("sheet10_B17"), mapWidth.get("sheet10_B17"), mapHeight.get("sheet10_B17"), sheet10_B17, "sheet10_B17", mapStyle.get("sheet10_B17"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B18"), nYCurPos+mapTop.get("sheet10_B18"), mapWidth.get("sheet10_B18"), mapHeight.get("sheet10_B18"), sheet10_B18, "sheet10_B18", mapStyle.get("sheet10_B18"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B19"), nYCurPos+mapTop.get("sheet10_B19"), mapWidth.get("sheet10_B19"), mapHeight.get("sheet10_B19"), sheet10_B19, "sheet10_B19", mapStyle.get("sheet10_B19"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B20"), nYCurPos+mapTop.get("sheet10_B20"), mapWidth.get("sheet10_B20"), mapHeight.get("sheet10_B20"), sheet10_B20, "sheet10_B20", mapStyle.get("sheet10_B20"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet10_B21"), nYCurPos+mapTop.get("sheet10_B21"), mapWidth.get("sheet10_B21"), mapHeight.get("sheet10_B21"), "", "sheet10_B21", mapStyle.get("sheet10_B21"));
		objectWrite(DRAW_OBJECT, nXCurPos+35, nYCurPos+8, 198, 41, "", "AI_IMAGE_OBJ1", "draw_style_0");
	}

	//----fb2_1 스크립트 문 출력 함수----
	private void writeScriptfb2_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 46, 12, 751, 60, sheet20_B1, "sheet20_B1", "cell_style_11");
	}

	//----lb2_1 스크립트 문 출력 함수----
	private void writeScriptlb2_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 12, 566, 134, 18, sheet20_A15, "sheet20_A15", "cell_style_9");
		objectWrite(CELL_OBJECT, 146, 566, 162, 18, "", "sheet20_C15", "cell_style_16");
		objectWrite(CELL_OBJECT, 308, 566, 227, 18, sheet20_D15, "sheet20_D15", "cell_style_16");
		objectWrite(CELL_OBJECT, 535, 566, 296, 18, sheet20_H15, "sheet20_H15", "cell_style_10");
	}

	//----rh2_4 스크립트 문 출력 함수----
	private void writeScriptrh2_4( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B3"), nYCurPos+mapTop.get("sheet20_B3"), mapWidth.get("sheet20_B3"), mapHeight.get("sheet20_B3"), sheet20_B3, "sheet20_B3", mapStyle.get("sheet20_B3"));
	}

	//----rb2_4 스크립트 문 출력 함수----
	private void writeScriptrb2_4(boolean bSplitLoopPrint) throws Exception{
		//스크립트문 생성
		manager.scriptObject.HtmlDataWrite(nXCurPos+mapLeft.get("sheet20_B4"), nYCurPos+mapTop.get("sheet20_B4"), mapHeight.get("sheet20_B4"), mapStyle.get("sheet20_B4"), "sheet20_B4", manager);
	}

	//----rh1_1 스크립트 문 출력 함수----
	private void writeScriptrh1_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B6"), nYCurPos+mapTop.get("sheet20_B6"), mapWidth.get("sheet20_B6"), mapHeight.get("sheet20_B6"), sheet20_B6, "sheet20_B6", mapStyle.get("sheet20_B6"));
	}

	//----rb2_1 스크립트 문 출력 함수----
	private void writeScriptrb2_1(boolean bSplitLoopPrint) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B7"), nYCurPos+mapTop.get("sheet20_B7"), mapWidth.get("sheet20_B7"), mapHeight.get("sheet20_B7"), sheet20_B7, "sheet20_B7", mapStyle.get("sheet20_B7"));
	}

	//----rh2_2 스크립트 문 출력 함수----
	private void writeScriptrh2_2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B8"), nYCurPos+mapTop.get("sheet20_B8"), mapWidth.get("sheet20_B8"), mapHeight.get("sheet20_B8"), "", "sheet20_B8", mapStyle.get("sheet20_B8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C8"), nYCurPos+mapTop.get("sheet20_C8"), mapWidth.get("sheet20_C8"), mapHeight.get("sheet20_C8"), "", "sheet20_C8", mapStyle.get("sheet20_C8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D8"), nYCurPos+mapTop.get("sheet20_D8"), mapWidth.get("sheet20_D8"), mapHeight.get("sheet20_D8"), "", "sheet20_D8", mapStyle.get("sheet20_D8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E8"), nYCurPos+mapTop.get("sheet20_E8"), mapWidth.get("sheet20_E8"), mapHeight.get("sheet20_E8"), "", "sheet20_E8", mapStyle.get("sheet20_E8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F8"), nYCurPos+mapTop.get("sheet20_F8"), mapWidth.get("sheet20_F8"), mapHeight.get("sheet20_F8"), "", "sheet20_F8", mapStyle.get("sheet20_F8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G8"), nYCurPos+mapTop.get("sheet20_G8"), mapWidth.get("sheet20_G8"), mapHeight.get("sheet20_G8"), "", "sheet20_G8", mapStyle.get("sheet20_G8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H8"), nYCurPos+mapTop.get("sheet20_H8"), mapWidth.get("sheet20_H8"), mapHeight.get("sheet20_H8"), "", "sheet20_H8", mapStyle.get("sheet20_H8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I8"), nYCurPos+mapTop.get("sheet20_I8"), mapWidth.get("sheet20_I8"), mapHeight.get("sheet20_I8"), "", "sheet20_I8", mapStyle.get("sheet20_I8"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B9"), nYCurPos+mapTop.get("sheet20_B9"), mapWidth.get("sheet20_B9"), mapHeight.get("sheet20_B9"), sheet20_B9, "sheet20_B9", mapStyle.get("sheet20_B9"));
	}

	//----rb2_2 스크립트 문 출력 함수----
	private void writeScriptrb2_2(boolean bSplitLoopPrint) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B10"), nYCurPos+mapTop.get("sheet20_B10"), mapWidth.get("sheet20_B10"), mapHeight.get("sheet20_B10"), sheet20_B10, "sheet20_B10", mapStyle.get("sheet20_B10"));
	}

	//----rh2_3 스크립트 문 출력 함수----
	private void writeScriptrh2_3( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B11"), nYCurPos+mapTop.get("sheet20_B11"), mapWidth.get("sheet20_B11"), mapHeight.get("sheet20_B11"), "", "sheet20_B11", mapStyle.get("sheet20_B11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C11"), nYCurPos+mapTop.get("sheet20_C11"), mapWidth.get("sheet20_C11"), mapHeight.get("sheet20_C11"), "", "sheet20_C11", mapStyle.get("sheet20_C11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D11"), nYCurPos+mapTop.get("sheet20_D11"), mapWidth.get("sheet20_D11"), mapHeight.get("sheet20_D11"), "", "sheet20_D11", mapStyle.get("sheet20_D11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E11"), nYCurPos+mapTop.get("sheet20_E11"), mapWidth.get("sheet20_E11"), mapHeight.get("sheet20_E11"), "", "sheet20_E11", mapStyle.get("sheet20_E11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F11"), nYCurPos+mapTop.get("sheet20_F11"), mapWidth.get("sheet20_F11"), mapHeight.get("sheet20_F11"), "", "sheet20_F11", mapStyle.get("sheet20_F11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G11"), nYCurPos+mapTop.get("sheet20_G11"), mapWidth.get("sheet20_G11"), mapHeight.get("sheet20_G11"), "", "sheet20_G11", mapStyle.get("sheet20_G11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H11"), nYCurPos+mapTop.get("sheet20_H11"), mapWidth.get("sheet20_H11"), mapHeight.get("sheet20_H11"), "", "sheet20_H11", mapStyle.get("sheet20_H11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I11"), nYCurPos+mapTop.get("sheet20_I11"), mapWidth.get("sheet20_I11"), mapHeight.get("sheet20_I11"), "", "sheet20_I11", mapStyle.get("sheet20_I11"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B12"), nYCurPos+mapTop.get("sheet20_B12"), mapWidth.get("sheet20_B12"), mapHeight.get("sheet20_B12"), sheet20_B12, "sheet20_B12", mapStyle.get("sheet20_B12"));
	}

	//----rb2_3 스크립트 문 출력 함수----
	private void writeScriptrb2_3(boolean bSplitLoopPrint) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B13"), nYCurPos+mapTop.get("sheet20_B13"), mapWidth.get("sheet20_B13"), mapHeight.get("sheet20_B13"), sheet20_B13, "sheet20_B13", mapStyle.get("sheet20_B13"));
	}

	//----vb2_3 스크립트 문 출력 함수----
	private void writeScriptvb2_3( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B14"), nYCurPos+mapTop.get("sheet20_B14"), mapWidth.get("sheet20_B14"), mapHeight.get("sheet20_B14"), "", "sheet20_B14", mapStyle.get("sheet20_B14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_C14"), nYCurPos+mapTop.get("sheet20_C14"), mapWidth.get("sheet20_C14"), mapHeight.get("sheet20_C14"), "", "sheet20_C14", mapStyle.get("sheet20_C14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_D14"), nYCurPos+mapTop.get("sheet20_D14"), mapWidth.get("sheet20_D14"), mapHeight.get("sheet20_D14"), "", "sheet20_D14", mapStyle.get("sheet20_D14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_E14"), nYCurPos+mapTop.get("sheet20_E14"), mapWidth.get("sheet20_E14"), mapHeight.get("sheet20_E14"), "", "sheet20_E14", mapStyle.get("sheet20_E14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_F14"), nYCurPos+mapTop.get("sheet20_F14"), mapWidth.get("sheet20_F14"), mapHeight.get("sheet20_F14"), "", "sheet20_F14", mapStyle.get("sheet20_F14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_G14"), nYCurPos+mapTop.get("sheet20_G14"), mapWidth.get("sheet20_G14"), mapHeight.get("sheet20_G14"), "", "sheet20_G14", mapStyle.get("sheet20_G14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_H14"), nYCurPos+mapTop.get("sheet20_H14"), mapWidth.get("sheet20_H14"), mapHeight.get("sheet20_H14"), "", "sheet20_H14", mapStyle.get("sheet20_H14"));
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_I14"), nYCurPos+mapTop.get("sheet20_I14"), mapWidth.get("sheet20_I14"), mapHeight.get("sheet20_I14"), "", "sheet20_I14", mapStyle.get("sheet20_I14"));
	}

	//----vb_empty 스크립트 문 출력 함수----
	private void writeScriptvb_empty( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet20_B16"), nYCurPos+mapTop.get("sheet20_B16"), mapWidth.get("sheet20_B16"), mapHeight.get("sheet20_B16"), "", "sheet20_B16", mapStyle.get("sheet20_B16"));
	}

	//----fb3_1 스크립트 문 출력 함수----
	private void writeScriptfb3_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 46, 12, 750, 60, sheet30_B1, "sheet30_B1", "cell_style_18");
	}

	//----foot 스크립트 문 출력 함수----
	private void writeScriptfoot( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 12, 566, 134, 18, sheet30_A7, "sheet30_A7", "cell_style_9");
		objectWrite(CELL_OBJECT, 146, 566, 195, 18, "", "sheet30_C7", "cell_style_10");
		objectWrite(CELL_OBJECT, 341, 566, 160, 18, sheet30_D7, "sheet30_D7", "cell_style_10");
		objectWrite(CELL_OBJECT, 501, 566, 20, 18, "", "sheet30_F7", "cell_style_10");
		objectWrite(CELL_OBJECT, 521, 566, 60, 18, "", "sheet30_G7", "cell_style_10");
		objectWrite(CELL_OBJECT, 581, 566, 249, 18, sheet30_H7, "sheet30_H7", "cell_style_10");
	}

	//----vd1 스크립트 문 출력 함수----
	private void writeScriptvd1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B3"), nYCurPos+mapTop.get("sheet30_B3"), mapWidth.get("sheet30_B3"), mapHeight.get("sheet30_B3"), sheet30_B3, "sheet30_B3", mapStyle.get("sheet30_B3"));
	}

	//----vd2 스크립트 문 출력 함수----
	private void writeScriptvd2( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet30_B5"), nYCurPos+mapTop.get("sheet30_B5"), mapWidth.get("sheet30_B5"), mapHeight.get("sheet30_B5"), sheet30_B5, "sheet30_B5", mapStyle.get("sheet30_B5"));
	}

	//----fb4_1 스크립트 문 출력 함수----
	private void writeScriptfb4_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 46, 12, 750, 60, sheet40_B1, "sheet40_B1", "cell_style_18");
	}

	//----lb4_1 스크립트 문 출력 함수----
	private void writeScriptlb4_1( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, 12, 566, 134, 18, sheet40_A5, "sheet40_A5", "cell_style_9");
		objectWrite(CELL_OBJECT, 146, 566, 195, 18, "", "sheet40_C5", "cell_style_10");
		objectWrite(CELL_OBJECT, 341, 566, 160, 18, sheet40_D5, "sheet40_D5", "cell_style_10");
		objectWrite(CELL_OBJECT, 501, 566, 20, 18, "", "sheet40_F5", "cell_style_10");
		objectWrite(CELL_OBJECT, 521, 566, 60, 18, "", "sheet40_G5", "cell_style_10");
		objectWrite(CELL_OBJECT, 581, 566, 249, 18, sheet40_H5, "sheet40_H5", "cell_style_10");
	}

	//----vd3 스크립트 문 출력 함수----
	private void writeScriptvd3( ) throws Exception{
		//스크립트문 생성
		objectWrite(CELL_OBJECT, nXCurPos+mapLeft.get("sheet40_B3"), nYCurPos+mapTop.get("sheet40_B3"), mapWidth.get("sheet40_B3"), mapHeight.get("sheet40_B3"), sheet40_B3, "sheet40_B3", mapStyle.get("sheet40_B3"));
	}

	private void getBgImageScriptEx(int nIndex) throws Exception{
		switch(nIndex){
			case 20:		//SHEET=Sheet2   FRAME=0 배경 이미지 스크립트
			objectWrite(DRAW_OBJECT, 12, 12, 818, 60, "", "AI_IMAGE_OBJ2", "draw_style_1");
			break;
			case 30:		//SHEET=Sheet3   FRAME=0 배경 이미지 스크립트
			objectWrite(DRAW_OBJECT, 12, 12, 818, 60, "", "AI_IMAGE_OBJ3", "draw_style_1");
			break;
			case 40:		//SHEET=Sheet4   FRAME=0 배경 이미지 스크립트
			objectWrite(DRAW_OBJECT, 12, 12, 818, 60, "", "AI_IMAGE_OBJ4", "draw_style_1");
			break;
		}
	}

	//-----Connection 및 Statement 객체 생성 함수-----
	private void createConnAndStateObject() throws Exception{
		//test Connection 객체 생성
		com.aireport.common.AISetConn setConn = new com.aireport.common.AISetConn();
		conn_test = setConn.getConn();
	}

	//-----ResultSet, PreparedStatement, Connection, CallableStatement Close 함수-----
	private void cleanup(Object rs, PreparedStatement st, CallableStatement cs, Connection conn){
		if(rs != null){
			try{
				if(rs instanceof ResultSet){
					((ResultSet)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.AIDataSource){
					((com.activeintra.util.uds.AIDataSource)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.XMLSetHandler){
					((com.activeintra.util.uds.XMLSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.CSVSetHandler){
					((com.activeintra.util.uds.CSVSetHandler)rs).close();
				}else if(rs instanceof com.activeintra.util.uds.JSONSetHandler){
					((com.activeintra.util.uds.JSONSetHandler)rs).close();
				}
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(st != null){
			try{
				st.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(cs != null){
			try{
				cs.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}

		if(conn != null){
			try{
				conn.close();
			}
			catch(SQLException e){
				logger.error(e);
			}
		}
	}

	//-----SQL문 변수 초기화 함수-----
	private void initSQLConst() throws Exception {
		stat_data1 = initializer.configPreparedStatement("sql_data1", mapParam, conn_test, null);

		stat_data2 = initializer.configPreparedStatement("sql_data2", mapParam, conn_test, null);

		stat_data3 = initializer.configPreparedStatement("sql_data3", mapParam, conn_test, null);

		stat_data4 = initializer.configPreparedStatement("sql_data4", mapParam, conn_test, null);
	}

	//-----ResultSet 객체에서 필드 값 설정 함수-----
	//ResultSet data1 객체에서 필드 값 설정 함수
	private void setFieldVariableFromdata1() throws Exception{
		data1_rqprId = data1.getLong(1);
		data1_rqprDt = GetB(data1.getString(2));
		data1_rgstId = GetB(data1.getString(3));
		data1_rgstNm = GetB(data1.getString(4));
		data1_rqprDeptCd = GetB(data1.getString(5));
		data1_rqprDeptNm = GetB(data1.getString(6));
		data1_rqpUperrDeptNm = GetB(data1.getString(7));
		data1_anlNm = GetB(data1.getString(8));
		data1_anlScnNm = GetB(data1.getString(9));
		data1_anlUgyYn = GetB(data1.getString(10));
		data1_anlUgyYnNm = GetB(data1.getString(11));
		data1_infmTypeCd = GetB(data1.getString(12));
		data1_infmTypeNm = GetB(data1.getString(13));
		data1_anlChrgNm = GetB(data1.getString(14));
		data1_smpoTrtmCd = GetB(data1.getString(15));
		data1_smpoTrtmNm = GetB(data1.getString(16));
		data1_anlSbc = GetB(data1.getString(17));
		data1_acpcStNm = GetB(data1.getString(18));
		data1_rqprRdcsDt = GetB(data1.getString(19));
		data1_acpcGvbDt = GetB(data1.getString(20));
		data1_acpcGvbRson = GetB(data1.getString(21));
		data1_acpcNo = GetB(data1.getString(22));
		data1_acpcId = GetB(data1.getString(23));
		data1_acpcNm = GetB(data1.getString(24));
		data1_acpcDt = GetB(data1.getString(25));
		data1_cmplDt = GetB(data1.getString(26));
		data1_anlRsltSbc = GetB(data1.getString(27));
		data1_anlRdcsDt = GetB(data1.getString(28));
		data1_smpoCnt = data1.getLong(29);
	}

	//ResultSet data1 객체의 필드 값 초기화 함수
	private void setFieldInitFromdata1(){
		data1_rqprId = 0L;
		data1_rqprDt = "";
		data1_rgstId = "";
		data1_rgstNm = "";
		data1_rqprDeptCd = "";
		data1_rqprDeptNm = "";
		data1_rqpUperrDeptNm = "";
		data1_anlNm = "";
		data1_anlScnNm = "";
		data1_anlUgyYn = "";
		data1_anlUgyYnNm = "";
		data1_infmTypeCd = "";
		data1_infmTypeNm = "";
		data1_anlChrgNm = "";
		data1_smpoTrtmCd = "";
		data1_smpoTrtmNm = "";
		data1_anlSbc = "";
		data1_acpcStNm = "";
		data1_rqprRdcsDt = "";
		data1_acpcGvbDt = "";
		data1_acpcGvbRson = "";
		data1_acpcNo = "";
		data1_acpcId = "";
		data1_acpcNm = "";
		data1_acpcDt = "";
		data1_cmplDt = "";
		data1_anlRsltSbc = "";
		data1_anlRdcsDt = "";
		data1_smpoCnt = 0L;
	}

	//ResultSet data2 객체에서 필드 값 설정 함수
	private void setFieldVariableFromdata2() throws Exception{
		data2_rltdId = data2.getLong(1);
		data2_rqprId = data2.getLong(2);
		data2_preRqprId = GetB(data2.getString(3));
		data2_preAnlNm = GetB(data2.getString(4));
		data2_preAcpcNo = GetB(data2.getString(5));
		data2_preAnlChrgNm = GetB(data2.getString(6));
		data2_preRgstId = GetB(data2.getString(7));
		data2_preRgstNm = GetB(data2.getString(8));
	}

	//ResultSet data2 객체의 필드 값 초기화 함수
	private void setFieldInitFromdata2(){
		data2_rltdId = 0L;
		data2_rqprId = 0L;
		data2_preRqprId = "";
		data2_preAnlNm = "";
		data2_preAcpcNo = "";
		data2_preAnlChrgNm = "";
		data2_preRgstId = "";
		data2_preRgstNm = "";
	}

	//ResultSet data3 객체에서 필드 값 설정 함수
	private void setFieldVariableFromdata3() throws Exception{
		data3_rqprExprId = data3.getLong(1);
		data3_exprNm = GetB(data3.getString(2));
		data3_smpoQty = data3.getLong(3);
	}

	//ResultSet data3 객체의 필드 값 초기화 함수
	private void setFieldInitFromdata3(){
		data3_rqprExprId = 0L;
		data3_exprNm = "";
		data3_smpoQty = 0L;
	}

	//ResultSet data4 객체에서 필드 값 설정 함수
	private void setFieldVariableFromdata4() throws Exception{
		data4_smpoId = data4.getLong(1);
		data4_rqprId = data4.getLong(2);
		data4_smpoNm = GetB(data4.getString(3));
		data4_mkrNm = GetB(data4.getString(4));
		data4_mdlNm = GetB(data4.getString(5));
	}

	//ResultSet data4 객체의 필드 값 초기화 함수
	private void setFieldInitFromdata4(){
		data4_smpoId = 0L;
		data4_rqprId = 0L;
		data4_smpoNm = "";
		data4_mkrNm = "";
		data4_mdlNm = "";
	}

	//-----고정 데이터 초기화 함수-----
	private void initConstVarientEx(){
	}

	//-----공통 함수 선언-----
	//파라미터 설정 함수
	private void setParam() {
		//SetParam_AutoCode
		reportMode=decoder.getParameterB("reportMode");
		if(reportMode.equals("")) {
			reportMode="HTML";
		}
		manager.setParam("pdfFilename:" + pdfFilename + "," + "excelFilename:" + excelFilename + "," + decoder.getParameterB("reportParams"));

		//char data[] = {0x14};
		//String str = new String(data);
		mapParam = new HashMap<String, String>();

		RQPR_ID_Param=decoder.getParameterB("RQPR_ID");
		//RQPR_ID_Param=aiReplace(RQPR_ID_Param, str, "\n");
		mapParam.put("RQPR_ID", RQPR_ID_Param);
	}

	//상수 데이터 초기화 래퍼 함수
	private void initConstVarient() {
		//InitConstVarient_AutoCode
		initConstVarientEx();
	}

	//배경 이미지 출력 래퍼 함수
	private void getBgImageScript(int nIndex) throws Exception{
		//GetBgImageScript_AutoCode
		getBgImageScriptEx(nIndex);
	}

	//페이지 스킵 함수
	//페이지 스킵시 호출되는 함수로서 페이지 번호를 증가시키고 페이지 지시문 출력 그리고 Y좌표 초기화
	//매개변수에 따라 해당 쉬트의 배경 이미지, 머리글 밴드, 바닥글 밴드 함수 호출
	private void pageSkip(int nIndex) throws Exception{
		//PageSkip_AutoCode
		if(nBandRepeatType==1) {
			int tmpX;
			tmpX=nXCurPos+nBandWidth+nBandOffset;
			nHorRepeatCnt=nHorRepeatCnt+1;
			if(tmpX+nBandWidth>nXEndPos || nHorRepeatCnt==nHorRepeatNum) {
				nYBandStart=nYStartPos;
				nYBandEnd=0;
				nHorRepeatCnt=0;
			}else{
				if(nYBandEnd<nYCurPos) {
					nYBandEnd=nYCurPos;
				}
				nYCurPos=nYBandStart;
				nXCurPos=tmpX;
				return;
			}
		}

		nXCurPos=nXStartPos;
		nYCurPos=nYStartPos;
		nPageNum=nPageNum+1;
		pageWrite(nPageNum);

		switch(nIndex){
			case 10:		//SHEET=Sheet=1   FRAME=0에서 페이지 스킵시
			getScriptFromlb1_1(false, true);		//바닥글 밴드 호출
			break;
			case 20:		//SHEET=Sheet=2   FRAME=0에서 페이지 스킵시
			getBgImageScript(20);		//배경 이미지 함수 호출
			getScriptFromfb2_1(false, true);		//머리글 밴드 호출
			getScriptFromlb2_1(false, true);		//바닥글 밴드 호출
			break;
			case 30:		//SHEET=Sheet=3   FRAME=0에서 페이지 스킵시
			getBgImageScript(30);		//배경 이미지 함수 호출
			getScriptFromfb3_1(false, true);		//머리글 밴드 호출
			getScriptFromfoot(false, true);		//바닥글 밴드 호출
			break;
			case 40:		//SHEET=Sheet=4   FRAME=0에서 페이지 스킵시
			getBgImageScript(40);		//배경 이미지 함수 호출
			getScriptFromfb4_1(false, true);		//머리글 밴드 호출
			getScriptFromlb4_1(false, true);		//바닥글 밴드 호출
			break;
		}
	}

	//페이지 스킵이 필요한지 검사하는 함수
	private boolean isPageSkip(int nTestPos){
		//IsPageSkip_AutoCode
		if(nTestPos>nYEndPos){
			return true;
		}else{
			return false;
		}
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하는 함수
	private int getPrintHeight(String data, int[] charWidth, int fontSize, int printWidth, int printHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeight_AutoCode
		if(data.equals(isEmpty)){
			return nMaxHeight;
		}
		if(!reportMode.equals("AIScript")) {
			printWidth+=horMargin;
			printHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, data, styleName, manager.getAIStyleInfo());

			if(needHeight>printHeight) {
				needHeight=needHeight-printHeight;
			}else{
				needHeight=0;
			}

			needHeight=(int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			printWidth = printWidth*100;

			for (int i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
					}
				} else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;

					if (ch==13) {
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}
				} else {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}
				}
			}

			if (height>printHeight) {
				height=height-printHeight;
			}else{
				height=0;
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//영문 단어의 폭을 문자별로 조사하여 데이터의 출력 높이를 조정하는 함수
	private int getWordWrapHeight(String data, int[] charWidth, int nStartIndex, int nEndIndex, int linePitch, int printWidth, int []width, int asciiWidth){
		//GetWordWrapHeight_AutoCode
		int ch;
		int height=0;

		if(asciiWidth>printWidth){
			for(int i=nStartIndex; i<nEndIndex; i++){
				ch=data.charAt(i);
				width[0]+=charWidth[ch-32];
				if(width[0]>printWidth){
					width[0]=charWidth[ch-32];
					height+=linePitch;
				}
			}
		}else{
			width[0]+=asciiWidth;
			if(width[0]>printWidth){
				width[0]=asciiWidth;
				height+=linePitch;
			}
		}

		return height;
	}

	//문자의 폭을 조사하여 데이터의 출력 높이를 자동적으로 조정하고 페이지 초과시 초과하는 데이터 절삭하는 함수
	private int getPrintHeightEx(String data, String[] strSplitData, int[] charWidth, int fontSize, int printWidth, int nExtHeight, int nMaxHeight, int horMargin, int vertMargin, String styleName) throws Exception {
		//GetPrintHeightEx_AutoCode
		if(!reportMode.equals("AIScript")) {
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth+=horMargin;
			nExtHeight+=vertMargin;
			int needHeight=(int)TextHandler.wordWrapTextEx(printWidth, nExtHeight, data, strSplitData, styleName, manager.getAIStyleInfo());

			if(needHeight>nExtHeight) {
				needHeight=nExtHeight;
			}

			needHeight = (int)MAX((long)needHeight,(long)nMaxHeight);
			return needHeight;
		}
		else {
			int ch;
			int i;
			int len = 95;
			int []width = new int[1];
			width[0] = 0;
			int asciiWidth = 0;
			int linePitch = (int)(fontSize*1.4);
			int height = linePitch;
			int size = data.length();
			int ascIndex=0;
			boolean bSplit=false;
			strSplitData[0]="";
			strSplitData[1]="";
			printWidth = printWidth*100;

			for (i = 0; i < size; i++) {
				ch = data.charAt(i);

				if(ch<32 && !(ch==10 || ch==20 || ch==13)){
					continue;
				}

				if ((ch>64 && ch<91) || (ch>96 && ch<123)) {
					if(asciiWidth==0){
						ascIndex=i;
					}

					asciiWidth += charWidth[ch-32];
					if (i==size-1){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i+1, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
					}
				}else if (ch==10 || ch==20 || ch==13) {
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth = 0;
					}

					width[0] = 0;
					height += linePitch;
					if (ch==13){
						if ((i != size-1) && (10 == (int)data.charAt(i+1))) {
							i++;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						if(i!=size-1){
							bSplit=true;
							i++;
						}
						break;
					}
				}else{
					if(asciiWidth>0){
						height+=getWordWrapHeight(data, charWidth, ascIndex, i, linePitch, printWidth, width, asciiWidth);
						if(height>nExtHeight){
							height=nExtHeight;
							bSplit=true;
							i=ascIndex;
							break;
						}
						asciiWidth=0;
					}

					if(ch>=32 && ch<=127){
						width[0] += charWidth[ch-32];
						if (width[0] > printWidth) {
							if (ch==32)
							{
								width[0] = 0;
							}
							else
							{
								width[0] = charWidth[ch-32];
							}
							height += linePitch;
						}
					}else{
						width[0] += charWidth[len];
						if (width[0] > printWidth) {
							width[0] = charWidth[len];
							height += linePitch;
						}
					}

					if(height>nExtHeight){
						height=nExtHeight;
						bSplit=true;
						break;
					}
				}
			}

			if(bSplit){
				strSplitData[0]=data.substring(0, i);
				strSplitData[1]=data.substring(i);
			}

			height = (int)MAX((long)height,(long)nMaxHeight);
			return height;
		}
	}

	//스크립트 헤더 출력 함수
	private void getScriptHeader(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetScriptHeader_AutoCode
		manager.scriptWrite("AIReport", "scriptVersion|docVersion|style|title", "32|30|anlRqprReportRslt.style|보고서 (2017/10/19 10:13:51)", false);
	}

	private void getSheetPaperInfo(String paper, String size, String value, String orient, String margin) throws Exception{
		//GetSheetPaperInfo_AutoCode
		manager.scriptWrite("PaperInfo", "name|size|value|orientation|margin", paper+"|"+size+"|"+value+"|"+orient+"|"+margin, true);
	}

	private void initSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bFirstFrame){
		//InitSheetVariant_AutoCode
		if(bFirstFrame){
			nStartPage=nMaxPage+1;
			nYLastPos=0;
		}
		nPageNum=nStartPage;
		nYStartPos=constStartY;
		nYEndPos=constEndY;
		nYCurPos=nYStartPos;
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		CELL_OBJECT=0;
		DRAW_OBJECT=1;
		nXCurPos=nXStartPos;
	}

	private void initChildSheetVariant(int constStartX, int constStartY, int constEndX, int constEndY, boolean bIsMultiFrame, boolean bIsFirstFrame){
		//InitChildSheetVariant_AutoCode
		nXStartPos=constStartX;
		nXEndPos=constEndX;
		nXCurPos=nXStartPos;
		nYStartPos=constStartY;
		nYEndPos=constEndY;

		if(bIsMultiFrame){
			if(bIsFirstFrame){
				nStartPage=nPageNum;
				nYSavePos=nYCurPos;
				nYLastPos=0;
			}else{
				nPageNum=nStartPage;
				nYCurPos=nYSavePos;
			}
		}else{
			nStartPage=nPageNum;
		}
	}

	//Empty Row만으로 구성되어 출력 위치를 조정하기 위한 VoidBand 함수
	//nRangePos - VoidBand의 출력 영역
	//nIndex - PageSkip 함수 호출시 전달할 쉬트 인덱스
	private boolean voidBandNoneData(int nRangePos, int nIndex) throws Exception{
		//VoidBandNoneData_AutoCode
		int nTestPos;
		nTestPos=nYCurPos+nRangePos;
		if(isPageSkip(nTestPos)){
			pageSkip(nIndex);
			return true;
		}else{
			nYCurPos=nYCurPos+nRangePos;
			return false;
		}
	}

	private String Get0(String str){
		//Get0_AutoCode
		if(str==null){
			return "0";
		}else{
			if(str.equals("")){
				return "0";
			}else{
				return str;
			}
		}
	}

	private String GetB(String str){
		//GetB_AutoCode
		if(str==null){
			return "";
		}else{
			return str;
		}
	}

	private double SUM(double accVal, double tmpVal){
		//SUM(double, double)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(double accVal, long tmpVal){
		//SUM(double, long)_AutoCode
		return(accVal+(double)tmpVal);
	}

	private long SUM(long accVal, long tmpVal){
		//SUM(long, long)_AutoCode
		return(accVal+tmpVal);
	}

	private double SUM(long accVal, double tmpVal){
		//SUM(long, double)_AutoCode
		return((double)accVal+tmpVal);
	}

	private long COUNT(long accuCNT){
		//COUNT_AutoCode
		return ++accuCNT;
	}

	private long MIN(long maxV, long maxTempV){
		//MIN(long, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(long maxV, double maxTempV){
		//MIN(long, double)_AutoCode
		if((double)maxV<=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, double maxTempV){
		//MIN(double, double)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MIN(double maxV, long maxTempV){
		//MIN(double, long)_AutoCode
		if(maxV<=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private long MAX(long maxV, long maxTempV){
		//MAX(long, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(long maxV, double maxTempV){
		//MAX(long, double)_AutoCode
		if((double)maxV>=maxTempV){return (double)maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, double maxTempV){
		//MAX(double, double)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return maxTempV;}
	}

	private double MAX(double maxV, long maxTempV){
		//MAX(double, long)_AutoCode
		if(maxV>=maxTempV){return maxV;}
		else{return (double)maxTempV;}
	}

	private double AVG(double sumVal, long cntVal){
		//AVG(double, long)_AutoCode
		return(sumVal/cntVal);
	}

	private double AVG(long sumVal, long cntVal){
		//AVG(long, long)_AutoCode
		return((double)sumVal/(double)cntVal);
	}

	private String aiReplace(String strAll, String strSrc, String strDest) {
		//AIReplace_AutoCode
		int st = 0, ed = 0;
		final int size = strAll.length();
		ed = strAll.indexOf(strSrc);
		if (ed == -1) return strAll;

		StringBuffer buf = new StringBuffer(size);
		final int len =  strSrc.length();
		do {
			buf.append(strAll.substring(st, ed));
			buf.append(strDest);
			ed += len;
			st = ed;
		} while ((ed = strAll.indexOf(strSrc, ed)) != -1);
		if (st < size) {
			buf.append(strAll.substring(st));
		}
		return buf.toString();
	}

	private String toDate() {
		//ToDate_AutoCode
		SimpleDateFormat dateFormat=new SimpleDateFormat("'#SERVERDATE#'yyyy/MM/dd/HH/mm/ss");
		java.util.Date currentDate = new java.util.Date();
		return dateFormat.format(currentDate);
	}

	final String toKor (String en){
		//ToKor_AutoCode
		if(en==null){
			return "";
		}
		try{
			return new String(en.getBytes("ISO-8859-1"), "utf-8");
		}catch(UnsupportedEncodingException e){return en;}
	}

	private void objectWrite(int type, int left, int top, int width, int height, String data, String name, String style) throws Exception {
		//ObjectWrite_AutoCode
		manager.scriptWrite(type, left, top, width, height, data, name, style);
	}

	private void propertyWrite(int type, String name, String property, String style) throws Exception {
		//PropertyWrite_AutoCode
		manager.scriptWrite(type, name, property, style);
	}

	private void pageWrite(int pageNum) throws Exception {
		//PageWrite_AutoCode
		manager.scriptWrite("Page", "number", Integer.toString(pageNum), true);
	}

	private void objectCellWrite(String name, String data, int nMoveX, int nMoveY) throws Exception {
		objectWrite(CELL_OBJECT, nMoveX+(nXCurPos+mapLeft.get(name)), nMoveY+(nYCurPos+mapTop.get(name)), mapWidth.get(name), mapHeight.get(name), data, name, mapStyle.get(name));
	}

	public String checkParam(String param) {
		param = param.replace("'", "");
		param = param.replace(";", "");
		param = param.replace("|", "");
		param = param.replace(":", "");
		param = param.replace("+", "");
		param = param.replace("\"", "");
		param = param.replace("\\", "");
		param = param.replace("--", "");
		param = param.replace("/", "");
		param = param.replaceAll("(?i)select", "");
		param = param.replaceAll("(?i)union", "");
		param = param.replaceAll("(?i)delete", "");
		param = param.replaceAll("(?i)update", "");
		param = param.replaceAll("(?i)insert", "");
		param = param.replaceAll("(?i)create", "");
		param = param.replaceAll("(?i)alter", "");
		param = param.replaceAll("(?i)drop", "");
		param = param.replaceAll("(?i)grant", "");
		param = param.replaceAll("(?i)revoke", "");
		param = param.replaceAll("(?i)merge", "");
		return param;
	}

	public String checkAITag(String strText) {
		strText = strText.replace("AI{P}", "^");
		strText = strText.replace("AI{F}", "@");
		strText = strText.replace("AI{S}", "#");
		strText = strText.replace("AI{E}", "=");
		return strText;
	}

	//셀 Rect, Style값 Map 저장
	public void setCellInfoMap_Internal(String name, int left, int top, int width, int height, String style) throws Exception {
		if( left != -1 ) {
			mapLeft.put(name, left);
		}
		if( top != -1 ) {
			mapTop.put(name, top);
		}
		if( width != -1 ) {
			mapWidth.put(name, width);
		}
		if( height != -1 ) {
			mapHeight.put(name, height);
		}
		if( style != null && !style.equals("") ) {
			mapStyle.put(name, style);
		}
	}

	//셀 Rect, Style값 저장
	public void setCellInfoMap() throws Exception {
		mapLeft = new HashMap<String, Integer>();
		mapTop = new HashMap<String, Integer>();
		mapWidth = new HashMap<String, Integer>();
		mapHeight = new HashMap<String, Integer>();
		mapStyle = new HashMap<String, String>();
		setCellInfoMap_Internal("sheet10_D1", 329, 0, 160, 50, "cell_style_0");
		setCellInfoMap_Internal("sheet10_H1", 569, 0, 215, 20, "cell_style_1");
		setCellInfoMap_Internal("sheet10_B10", 34, 168, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_C10", 134, 168, 275, 20, "cell_style_5");
		setCellInfoMap_Internal("sheet10_E10", 409, 168, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_G10", 509, 168, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_B11", 34, 188, 100, 175, "cell_style_3");
		setCellInfoMap_Internal("sheet10_C11", 134, 188, 650, 175, "cell_style_4");
		setCellInfoMap_Internal("sheet10_B13", 34, 373, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_C13", 134, 373, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_E13", 409, 373, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_G13", 509, 373, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_B14", 34, 393, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_C14", 134, 393, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_E14", 409, 393, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_G14", 509, 393, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_B15", 34, 413, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_C15", 134, 413, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_E15", 409, 413, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_G15", 509, 413, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_B17", 34, 443, 750, 25, "cell_style_6");
		setCellInfoMap_Internal("sheet10_B18", 34, 468, 750, 15, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B19", 34, 483, 750, 15, "cell_style_7");
		setCellInfoMap_Internal("sheet10_H2", 569, 20, 215, 15, "cell_style_2");
		setCellInfoMap_Internal("sheet10_B20", 34, 498, 750, 15, "cell_style_7");
		setCellInfoMap_Internal("sheet10_B21", 34, 513, 750, 5, "cell_style_8");
		setCellInfoMap_Internal("sheet10_H3", 569, 35, 215, 15, "cell_style_2");
		setCellInfoMap_Internal("sheet10_B5", 34, 68, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_C5", 134, 68, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_E5", 409, 68, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_G5", 509, 68, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_B6", 34, 88, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_C6", 134, 88, 650, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_B7", 34, 108, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_C7", 134, 108, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_E7", 409, 108, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_G7", 509, 108, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_B8", 34, 128, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_C8", 134, 128, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_E8", 409, 128, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_G8", 509, 128, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_B9", 34, 148, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_C9", 134, 148, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet10_E9", 409, 148, 100, 20, "cell_style_3");
		setCellInfoMap_Internal("sheet10_G9", 509, 148, 275, 20, "cell_style_4");
		setCellInfoMap_Internal("sheet20_B10", 34, 0, 751, nAutoHeight_rb2_2[0], "cell_style_14");
		setCellInfoMap_Internal("sheet20_B11", 34, 0, 100, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_C11", 134, 0, 162, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_D11", 296, 0, 80, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_E11", 376, 0, 80, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_F11", 456, 0, 20, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_G11", 476, 0, 47, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_H11", 523, 0, 162, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_I11", 685, 0, 100, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_B12", 34, 10, 751, 22, "cell_style_12");
		setCellInfoMap_Internal("sheet20_B13", 34, 0, 751, nAutoHeight_rb2_3[0], "cell_style_14");
		setCellInfoMap_Internal("sheet20_B14", 34, 0, 100, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_C14", 134, 0, 162, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_D14", 296, 0, 80, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_E14", 376, 0, 80, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_F14", 456, 0, 20, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_G14", 476, 0, 47, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_H14", 523, 0, 162, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_I14", 685, 0, 100, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_B16", 34, 0, 751, 40, "cell_style_17");
		setCellInfoMap_Internal("sheet20_B3", 34, 0, 751, 22, "cell_style_12");
		setCellInfoMap_Internal("sheet20_B4", 34, 0, 751, nAutoHeight_rb2_4[0], "cell_style_13");
		setCellInfoMap_Internal("sheet20_B6", 34, 10, 751, 22, "cell_style_12");
		setCellInfoMap_Internal("sheet20_B7", 34, 0, 751, nAutoHeight_rb2_1[0], "cell_style_14");
		setCellInfoMap_Internal("sheet20_B8", 34, 0, 100, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_C8", 134, 0, 162, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_D8", 296, 0, 80, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_E8", 376, 0, 80, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_F8", 456, 0, 20, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_G8", 476, 0, 47, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_H8", 523, 0, 162, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_I8", 685, 0, 100, 10, "cell_style_15");
		setCellInfoMap_Internal("sheet20_B9", 34, 10, 751, 22, "cell_style_12");
		setCellInfoMap_Internal("sheet30_B3", 34, 0, 100, 20, "cell_style_19");
		setCellInfoMap_Internal("sheet30_B5", 34, 0, 455, 23, "cell_style_20");
		setCellInfoMap_Internal("sheet40_B3", 34, 0, 295, 20, "cell_style_20");
	}
}
%>
