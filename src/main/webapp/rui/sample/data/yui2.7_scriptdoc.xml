<?xml version="1.0" encoding="utf-8"?>
<javascript>
<class type="Rui" deprecated="false" >
<description>Rui는 global namespace object 이다..
 만약 Rui가 이미 정의되어 있으면, 기존의 Rui object는 정의된 namespace들이 보존되도록
 overwrite 않을 것이다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Rui는 global namespace object 이다..
 만약 Rui가 이미 정의되어 있으면, 기존의 Rui object는 정의된 namespace들이 보존되도록
 overwrite 않을 것이다.</description>
</constructor>
</constructors>
<properties>
<property name="isSecure" type="boolean" deprecated="false" scope="static" >
<description>https가 적용되었는지 확인하는 속성</description>
</property>
<property name="isStrict" type="boolean" deprecated="false" scope="static" >
<description>css의 compatMode가 CSS1Compat인지 확인하는 속성</description>
</property>
<property name="isBorderBox" type="boolean" deprecated="false" scope="static" >
<description>Border가 box 모델이 적용이 안되는 상태인지 확인하는 속성 (true면 박스모델이 아님: ie6에 doctype이 없을 경우)</description>
</property>
</properties>
<methods>
<method name="namespace" deprecated="false" scope="static" >
<description><![CDATA[namespace를 지정하고 만약 존재하지 않는 경우 생성하고 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[j 생성된 마지막 namespace object의 reference]]></return-description>
</return-types>
<parameters>
<parameter name="i" type="String" deprecated="false" usage="required">
<description><![CDATA[생성할 1-n namespace들의 argument들]]></description>
</parameter>
</parameters>
</method>
<method name="log" deprecated="false" scope="static" >
<description><![CDATA[콘솔에 로그를 출력한다. (상황에 따라 브라우저 콘솔이나 RichUI 콘솔로 출력된다.)]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[만약 log 작업이 성공했을 경우 True.]]></return-description>
</return-types>
<parameters>
<parameter name="msg" type="String" deprecated="false" usage="required">
<description><![CDATA[log 할 message]]></description>
</parameter>
<parameter name="cat" type="String" deprecated="false" usage="required">
<description><![CDATA[message에 대한 log 분류.
                        기본 분류는 'info', 'warn', 'error', 'time'이다.
                        custom 분류들은 잘 사용될 수 있다.(optional)]]></description>
</parameter>
<parameter name="src" type="String" deprecated="false" usage="required">
<description><![CDATA[message의 source(optional)]]></description>
</parameter>
</parameters>
</method>
<method name="isNull" deprecated="false" scope="static" >
<description><![CDATA[값이 null인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[결과]]></return-description>
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isUndefined" deprecated="false" scope="static" >
<description><![CDATA[값이 undefined인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isObject" deprecated="false" scope="static" >
<description><![CDATA[object 타입이거나 함수인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isFunction" deprecated="false" scope="static" >
<description><![CDATA[값이 함수인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isBoolean" deprecated="false" scope="static" >
<description><![CDATA[값이 boolean (true or false) 형인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isString" deprecated="false" scope="static" >
<description><![CDATA[값이 문자열인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isArray" deprecated="false" scope="static" >
<description><![CDATA[값이 array 형인지에 검사한다.
 Array prototype을 대상으로 테스트하기 위한 다른 프레임으로의
 reference가 없다면, Safari에서 프레임 boundary를 넘어 array들의
 typeof/instanceof/constructor 테스트는 불가능하다.
 이러한 케이스를 처리하기 위해, 대신 잘 알려진 array property들을 테스트 한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isNumber" deprecated="false" scope="static" >
<description><![CDATA[값이 number형인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isDate" deprecated="false" scope="static" >
<description><![CDATA[값이 date형인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isEmpty" deprecated="false" scope="static" >
<description><![CDATA[값이 빈 값인지 검사한다.
 undefined, null, '' 등은 모두 빈 값이다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="s" type="String" deprecated="false" usage="required">
<description><![CDATA[검사할 문자(열)]]></description>
</parameter>
</parameters>
</method>
<method name="trim" deprecated="false" scope="static" >
<description><![CDATA[선행, 후행 공백을 제외한 문자열을 리턴한다.
 만약 입력값이 문자열이 아니면, 입력값은 처리되지 않고 반환될 것이다.]]></description>
<return-types>
<return-type type="string" />
<return-description><![CDATA[trim 처리된 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="trim" type="string" deprecated="false" usage="required">
<description><![CDATA[처리할 문자열]]></description>
</parameter>
</parameters>
</method>
<method name="emptyFn" deprecated="false" scope="static" >
<description><![CDATA[빈 function]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="extend" deprecated="false" scope="static" >
<description><![CDATA[constructor들과 method들을 연결할 수 있는 상속 전략을 지원하는
 prototype, constructor, superclass property들을 설정하는 유틸리티.
 Static member들은 상속되지 않는다.]]></description>
<parameters>
<parameter name="subc" type="Function" deprecated="false" usage="required">
<description><![CDATA[변경할 object]]></description>
</parameter>
<parameter name="superc" type="Function" deprecated="false" usage="required">
<description><![CDATA[상속할 object]]></description>
</parameter>
<parameter name="overrides" type="Object" deprecated="false" usage="required">
<description><![CDATA[subclass prototype으로 추가할 추가적인 property와 method들.
                            이것들은 superclass가 존재한다면, 포함된 일치 항목들을
                            override 할 것이다.]]></description>
</parameter>
</parameters>
</method>
<method name="applyObject" deprecated="false" scope="static" >
<description><![CDATA[만약 receiver가 property들을 아직 가지고 있지 않다면,
 receiver에의 supplier에서 모든 propery들에 적용을 한다.
 부가적으로 하나 혹은 그 이상의 method/property들이 명시될 수 있다(추가적인
 parameter들로서). 이러한 option은 receiver가 이미 가지고 있는 property를
 overwrite할 것이다. 만약 세번째 parameter에 true가 전송되면,
 모든 property는 receiver에서 overwrite되고 적용될 것이다.]]></description>
<parameters>
<parameter name="r" type="Function" deprecated="false" usage="required">
<description><![CDATA[argument를 받을 object]]></description>
</parameter>
<parameter name="s" type="Function" deprecated="false" usage="required">
<description><![CDATA[argument로 propery들을 제공할 object]]></description>
</parameter>
</parameters>
</method>
<method name="applyPrototype" deprecated="false" scope="static" >
<description><![CDATA[prototype property만 적용하는 것을 제외하고 Rui.apply와 동일하다.]]></description>
<parameters>
<parameter name="r" type="Function" deprecated="false" usage="required">
<description><![CDATA[argument를 받을 object]]></description>
</parameter>
<parameter name="s" type="Function" deprecated="false" usage="required">
<description><![CDATA[argument로 propery들을 제공할 object]]></description>
</parameter>
<parameter name="arguments" type="String|boolean" deprecated="false" usage="required">
<description><![CDATA[receiver에 전달될 0 혹은 그 이상의 property method들.
        아무것도 명시되지 않을 경우 supplier의 모든 것들은 receiver에
        존재하는 property가 overwrite되지 않는다면 사용될 것이다.
        만약 세번째 parameter로 true가 명시되면, 모든 property들은
        receiver에 존재하는 property를 overwrite하고 적용될 것이다.]]></description>
</parameter>
</parameters>
</method>
<method name="applyIf" deprecated="false" scope="static" >
<description><![CDATA[conifg의 property둘이 이미 존재하지 않는다면, 모든 property를 obj에 복사한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[반환될 obj]]></return-description>
</return-types>
<parameters>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[property들의 receiver]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="required">
<description><![CDATA[property들의 source]]></description>
</parameter>
</parameters>
</method>
<method name="merge" deprecated="false" scope="static" >
<description><![CDATA[모든 제공된 object들의 모든 property들을 포함하는 새로운 object를 리턴한다.
 더 이후의 object들로부터의 property들은
 더 이전의 object들의 property들을 overwrite한다.]]></description>
<return-types>
<return-type type="object" />
<return-description><![CDATA[새로 병합된 object]]></return-description>
</return-types>
<parameters>
<parameter name="arguments" type="Object" deprecated="false" usage="required">
<description><![CDATA[병합할 object들]]></description>
</parameter>
</parameters>
</method>
<method name="getDom" deprecated="false" scope="static" >
<description><![CDATA[Dom 객체를 리턴한다.]]></description>
<return-types>
<return-type type="HTMLElement" />
</return-types>
<parameters>
<parameter name="id" type="Object" deprecated="false" usage="required">
<description><![CDATA[dom id]]></description>
</parameter>
</parameters>
</method>
<method name="getDoc" deprecated="false" scope="static" >
<description><![CDATA[현재 HTML document object를 리턴한다.]]></description>
</method>
<method name="getBody" deprecated="false" scope="static" >
<description><![CDATA[현재 document body를 리턴한다.]]></description>
</method>
<method name="onReady" deprecated="false" scope="static" >
<description><![CDATA[DOM이 처음으로 사용가능할때 제공된 callback을 실행한다. (window.onload와 동일)]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="p_fn" type="function" deprecated="false" usage="required">
<description><![CDATA[element가 발견되었을때 실행할 함수.]]></description>
</parameter>
<parameter name="p_obj" type="object" deprecated="false" usage="required">
<description><![CDATA[p_fn에 대한 parameter로 다시 전달하는 부가적인 object]]></description>
</parameter>
<parameter name="p_scope" type="boolean|object" deprecated="false" usage="required">
<description><![CDATA[만약 true로 설정하면, p_fn은 p_onj의 scope에서 실행을 하며, object로 설정할 경우 그 object의 scope에서 실행한다.]]></description>
</parameter>
</parameters>
</method>
<method name="onContentReady" deprecated="false" scope="static" >
<description><![CDATA[onAvaliable과 같은 방식으로 실행되지만, 추가적으로
 사용가능한 element의 content를 수정하기 위한 안전 여부를 결정하기 위하여,
 sibling element들의 상태를 체크한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="p_id" type="string" deprecated="false" usage="required">
<description><![CDATA[찾을 element의 id.]]></description>
</parameter>
<parameter name="p_fn" type="function" deprecated="false" usage="required">
<description><![CDATA[element가 준비되었을때 실행할 함수.]]></description>
</parameter>
<parameter name="p_obj" type="object" deprecated="false" usage="required">
<description><![CDATA[p_fn에 대한 parameter로 다시 전달하는 부가적인 object]]></description>
</parameter>
<parameter name="p_scope" type="boolean|object" deprecated="false" usage="required">
<description><![CDATA[만약 true로 설정하면, p_fn은 p_onj의 scope에서 실행을 하며, object로 설정할 경우 그 object의 scope에서 실행한다.]]></description>
</parameter>
</parameters>
</method>
<method name="ajax" deprecated="false" scope="static" >
<description><![CDATA[Ajax로 서버에 데이터를 요청한다.]]></description>
<return-types>
<return-type type="object" />
<return-description><![CDATA[connection object를 반환.]]></return-description>
</return-types>
<parameters>
<parameter name="config" type="object" deprecated="false" usage="required">
<description><![CDATA[config : url(String), method(String/optional), success(Function), failure(Function/optional), params(Object/optional), sync(Boolean/optional)]]></description>
</parameter>
</parameters>
</method>
<method name="id" deprecated="false" scope="static" >
<description><![CDATA[유일한 id들을 생성한다. 만약 element가 이미 id를 가지고 있으면, 그것은 변하지 않는다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[생성된 Id.]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="Mixed" deprecated="false" usage="required">
<description><![CDATA[(optional) id가 생성될 element]]></description>
</parameter>
<parameter name="prefix" type="String" deprecated="false" usage="required">
<description><![CDATA[(optional) Id prefix (기본 'ext-gen')]]></description>
</parameter>
</parameters>
</method>
<method name="select" deprecated="false" scope="static" >
<description><![CDATA[주어진 CSS selector에 기반한 node들의 집합을 조회하여 Rui.LElementList로 리턴한다.]]></description>
<return-types>
<return-type type="Rui.LElementList" />
<return-description><![CDATA[주어진 selector와 일치하는 node들의 array.]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="string" deprecated="false" usage="required">
<description><![CDATA[테스트 할 CSS LDomSelector.]]></description>
</parameter>
<parameter name="root" type="HTMLElement | String" deprecated="false" usage="required">
<description><![CDATA[optional query로 부터 시작할 id나 HTMLElement. 기본은 LDomSelector.document.]]></description>
</parameter>
<parameter name="firstOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[optional 처음 일치하는 값만 반환할지에 대한 여부.]]></description>
</parameter>
</parameters>
</method>
<method name="query" deprecated="false" scope="static" >
<description><![CDATA[주어진 CSS selector에 기반한 node들의 집합을 조회한다.]]></description>
<return-types>
<return-type type="Rui.LElementList" />
<return-description><![CDATA[주어진 selector와 일치하는 node들의 array.]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="string" deprecated="false" usage="required">
<description><![CDATA[node를 상대로 테스트할 CSS LDomSelector.]]></description>
</parameter>
<parameter name="root" type="HTMLElement | String" deprecated="false" usage="required">
<description><![CDATA[optional query로 부터 시작할 id나 HTMLElement. 기본은 LDomSelector.document.]]></description>
</parameter>
<parameter name="firstOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[optional 처음 일치하는 값만 반환할지에 대한 여부.]]></description>
</parameter>
</parameters>
</method>
<method name="each" deprecated="false" scope="static" >
<description><![CDATA[items 정보에 해당되는 객체를 Function으로 호출하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="items" type="Array" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="func" type="Function" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
</parameters>
</method>
<method name="dump" deprecated="false" scope="static" >
<description><![CDATA[object나 array를 표현하는 간단한 문자열을 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[dump 결과]]></return-description>
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[dump 할 object]]></description>
</parameter>
<parameter name="d" type="int" deprecated="false" usage="required">
<description><![CDATA[child object를 탐색할 깊이(deep), 기본적으로 3]]></description>
</parameter>
</parameters>
</method>
<method name="createElements" deprecated="false" scope="static" >
<description><![CDATA[html 해당되는 객체를 생성한후 LElementList로 리턴한다.]]></description>
<return-types>
<return-type type="Rui.LElementList" />
</return-types>
<parameters>
<parameter name="html" type="String" deprecated="false" usage="required">
<description><![CDATA[생성할 html]]></description>
</parameter>
<parameter name="options" type="object" deprecated="false" usage="required">
<description><![CDATA[[optional] 추가 설정]]></description>
</parameter>
</parameters>
</method>
<method name="hasOwnProperty" deprecated="false" scope="static" >
<description><![CDATA[object instance에 property이 존재하는지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[결과]]></return-description>
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[테스트될 object]]></description>
</parameter>
<parameter name="prop" type="string" deprecated="false" usage="required">
<description><![CDATA[테스트할 property의 이름]]></description>
</parameter>
</parameters>
</method>
<method name="get" deprecated="false" scope="static" >
<description><![CDATA[Rui.LElement object들을 조회하기 위한 Static method.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[object나 맞는 element를 찾지 못했으면 null]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="Mixed" deprecated="false" usage="required">
<description><![CDATA[DOM node나 존재하고 있는 Element의 id.]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.env" deprecated="false" >
<description>Rui.env는 Rui 라이브러리나 브라우징 환경에 대해 알려진 항목들을 추적하는데 사용된다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Rui.env는 Rui 라이브러리나 브라우징 환경에 대해 알려진 항목들을 추적하는데 사용된다.</description>
</constructor>
</constructors>
<methods>
<method name="getVersion" deprecated="false" scope="static" >
<description><![CDATA[명시된 모듈들에 대한 version 데이터를 반환한다:
      &amp;lt;dl&amp;gt;
      &amp;lt;dt&amp;gt;name:&amp;lt;/dt&amp;gt;      &amp;lt;dd&amp;gt;모듈의 이름&amp;lt;/dd&amp;gt;
      &amp;lt;dt&amp;gt;version:&amp;lt;/dt&amp;gt;   &amp;lt;dd&amp;gt;사용중인 버전&amp;lt;/dd&amp;gt;
      &amp;lt;dt&amp;gt;build:&amp;lt;/dt&amp;gt;     &amp;lt;dd&amp;gt;사용중인 빌드 번호&amp;lt;/dd&amp;gt;
      &amp;lt;dt&amp;gt;versions:&amp;lt;/dt&amp;gt;  &amp;lt;dd&amp;gt;등록된 모든 버전들&amp;lt;/dd&amp;gt;
      &amp;lt;dt&amp;gt;builds:&amp;lt;/dt&amp;gt;    &amp;lt;dd&amp;gt;등록된 모든 빌드들&amp;lt;/dd&amp;gt;
      &amp;lt;dt&amp;gt;mainClass:&amp;lt;/dt&amp;gt; &amp;lt;dd&amp;gt;현재 버전과 빌드가 stamp된 object.
                 만약 mainClass.VERSION != version 이거나, mainClass.BUILD != build 이거나
                 라이브러리 조각의 여러 버전들이 로딩되어 있으면 잠재적으로
                 이슈가 야기 될 수 있다.&amp;lt;/dd&amp;gt;
       &amp;lt;/dl&amp;gt;]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[version 정보]]></return-description>
</return-types>
<parameters>
<parameter name="name" type="String" deprecated="false" usage="required">
<description><![CDATA[모듈의 이름(event, slider 등)]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.browser" deprecated="false" >
<description>browser의 agent 정보</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>browser의 agent 정보</description>
</constructor>
</constructors>
<properties>
<property name="version" type="String" deprecated="false" scope="static" >
<description>브라우져 버전 정보</description>
</property>
<property name="opera" type="boolean" deprecated="false" scope="static" >
<description>opera 브라우져 여부</description>
</property>
<property name="chrome" type="boolean" deprecated="false" scope="static" >
<description>chrome 브라우져 여부</description>
</property>
<property name="webkit" type="boolean" deprecated="false" scope="static" >
<description>webkit 브라우져 여부</description>
</property>
<property name="safari" type="boolean" deprecated="false" scope="static" >
<description>safari 브라우져 여부</description>
</property>
<property name="safari2" type="boolean" deprecated="false" scope="static" >
<description>safari2 브라우져 여부</description>
</property>
<property name="safari3" type="boolean" deprecated="false" scope="static" >
<description>safari3 브라우져 여부</description>
</property>
<property name="safari4" type="boolean" deprecated="false" scope="static" >
<description>safari4 브라우져 여부</description>
</property>
<property name="safari5" type="boolean" deprecated="false" scope="static" >
<description>safari5 브라우져 여부</description>
</property>
<property name="msie" type="boolean" deprecated="false" scope="static" >
<description>msie 브라우져 여부</description>
</property>
<property name="msie6" type="boolean" deprecated="false" scope="static" >
<description>msie6 브라우져 여부</description>
</property>
<property name="msie7" type="boolean" deprecated="false" scope="static" >
<description>msie7 브라우져 여부</description>
</property>
<property name="msie8" type="boolean" deprecated="false" scope="static" >
<description>msie8 브라우져 여부</description>
</property>
<property name="msie67" type="boolean" deprecated="false" scope="static" >
<description>msie67 브라우져 여부</description>
</property>
<property name="msie678" type="boolean" deprecated="false" scope="static" >
<description>msie678 브라우져 여부</description>
</property>
<property name="msie9" type="boolean" deprecated="false" scope="static" >
<description>msie9 브라우져 여부</description>
</property>
<property name="mozilla" type="boolean" deprecated="false" scope="static" >
<description>mozilla 브라우져 여부</description>
</property>
<property name="gecko" type="boolean" deprecated="false" scope="static" >
<description>gecko 브라우져 여부</description>
</property>
<property name="gecko2" type="boolean" deprecated="false" scope="static" >
<description>gecko2 브라우져 여부</description>
</property>
<property name="gecko3" type="boolean" deprecated="false" scope="static" >
<description>gecko3 브라우져 여부</description>
</property>
</properties>
</class>
<class type="Rui.platform" deprecated="false" >
<description>pc의 platform 정보</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>pc의 platform 정보</description>
</constructor>
</constructors>
<properties>
<property name="window" type="boolean" deprecated="false" scope="static" >
<description>window os 여부</description>
</property>
<property name="mac" type="boolean" deprecated="false" scope="static" >
<description>mac os 여부</description>
</property>
<property name="air" type="boolean" deprecated="false" scope="static" >
<description>air 여부</description>
</property>
<property name="linux" type="boolean" deprecated="false" scope="static" >
<description>linux os 여부</description>
</property>
<property name="isMobile" type="boolean" deprecated="false" scope="static" >
<description>isMobile 브라우져 여부</description>
</property>
</properties>
</class>
<class type="Rui.util.LNumber" deprecated="false" >
<description>Static Number 클래스는 Number 형식의 데이터를 처리하는 helper 함수들을 제공한다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Static Number 클래스는 Number 형식의 데이터를 처리하는 helper 함수들을 제공한다.</description>
</constructor>
</constructors>
<methods>
<method name="isNumber" deprecated="false" scope="static" >
<description><![CDATA[값이 number형인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="format" deprecated="false" scope="static" >
<description><![CDATA[native 자바스크립트 Number를 가져오고 사용자에서 표시할 문자열로 형식화 한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[Formatted number for display.]]></return-description>
</return-types>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="required">
<description><![CDATA[(Optional) config 객체
   prefix {String} 통화 지정자 '$'과 같은 각 숫자 앞에 문자열을 추가.
   decimalPrecision {Number} 반올림할 소수 자릿수의 숫자
   decimalSeparator {String} 소수점 구분기호
   thousandsSeparator {String} 천단위 구분기호
   suffix {String} 문자열은 '항목'(공백주의)처럼 각 번호 뒤에 추가]]></description>
</parameter>
</parameters>
</method>
<method name="random" deprecated="false" scope="static" >
<description><![CDATA[범위값에 맞는 random값을 생성하여 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="range" type="int" deprecated="false" usage="required">
<description><![CDATA[범위값]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LArray" deprecated="false" >
<description>Static Array 클래스는 Array 형식의 데이터를 처리하는 helper 함수들을 제공한다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Static Array 클래스는 Array 형식의 데이터를 처리하는 helper 함수들을 제공한다.</description>
</constructor>
</constructors>
<methods>
<method name="each" deprecated="false" scope="instance" >
<description><![CDATA[items 정보에 해당되는 객체를 Function으로 호출하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="items" type="Array" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="func" type="Function" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
</parameters>
</method>
<method name="indexOf" deprecated="false" scope="instance" >
<description><![CDATA[items 배열에서 item이 몇번째인지를 리턴하는 메소드]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="items" type="Array" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="item" type="Object" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="i" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] 시작 위치]]></description>
</parameter>
</parameters>
</method>
<method name="contains" deprecated="false" scope="instance" >
<description><![CDATA[items 배열에서 item이 존재하는지 여부를 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="items" type="Array" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="item" type="Object" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
</parameters>
</method>
<method name="removeAt" deprecated="false" scope="instance" >
<description><![CDATA[items 배열에서 index에 해당하는 객체를 삭제하는 메소드]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[삭제된 위치]]></return-description>
</return-types>
<parameters>
<parameter name="items" type="Array" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[삭제할 위치]]></description>
</parameter>
</parameters>
</method>
<method name="isArray" deprecated="false" scope="static" >
<description><![CDATA[값이 array 형인지에 검사한다.
 Array prototype을 대상으로 테스트하기 위한 다른 프레임으로의
 reference가 없다면, Safari에서 프레임 boundary를 넘어 array들의
 typeof/instanceof/constructor 테스트는 불가능하다.
 이러한 케이스를 처리하기 위해, 대신 잘 알려진 array property들을 테스트 한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="prototype.String" deprecated="false" >
<description>The static String class provides helper functions to deal with data of type
 Number.
 static 문자열 클래스는 number 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>The static String class provides helper functions to deal with data of type
 Number.
 static 문자열 클래스는 number 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
</constructor>
</constructors>
</class>
<class type="Rui.util.LString" deprecated="false" >
<description>LString</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>LString</description>
</constructor>
</constructors>
<methods>
<method name="trim" deprecated="false" scope="static" >
<description><![CDATA[문자열 앞뒤 공백 제거]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[공백 제거된 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="s" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="startsWith" deprecated="false" scope="instance" >
<description><![CDATA[시작 문자열이 pattern에 맞는지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[결과]]></return-description>
</return-types>
<parameters>
<parameter name="s" type="String" deprecated="false" usage="required">
<description><![CDATA[작업 대상 문자열]]></description>
</parameter>
<parameter name="pattern" type="String" deprecated="false" usage="required">
<description><![CDATA[문자패턴]]></description>
</parameter>
</parameters>
</method>
<method name="endsWith" deprecated="false" scope="instance" >
<description><![CDATA[종료 문자열이 pattern에 맞는지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[결과]]></return-description>
</return-types>
<parameters>
<parameter name="s" type="String" deprecated="false" usage="required">
<description><![CDATA[작업 대상 문자열]]></description>
</parameter>
<parameter name="pattern" type="String" deprecated="false" usage="required">
<description><![CDATA[문자패턴]]></description>
</parameter>
</parameters>
</method>
<method name="lPad" deprecated="false" scope="static" >
<description><![CDATA[문자열의 왼쪽부터 특정 문자를 주어진 갯수만큼 붙여넣는다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="x" type="String" deprecated="false" usage="required">
<description><![CDATA[작업 대상 문자열]]></description>
</parameter>
<parameter name="pad" type="String" deprecated="false" usage="required">
<description><![CDATA[padding할 문자]]></description>
</parameter>
<parameter name="r" type="int" deprecated="false" usage="required">
<description><![CDATA[붙이는 갯수]]></description>
</parameter>
</parameters>
</method>
<method name="rPad" deprecated="false" scope="static" >
<description><![CDATA[문자열의 오른쪽부터 특정 문자를 주어진 갯수만큼 붙여넣는다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="x" type="String" deprecated="false" usage="required">
<description><![CDATA[작업 대상 문자열]]></description>
</parameter>
<parameter name="pad" type="String" deprecated="false" usage="required">
<description><![CDATA[padding할 문자]]></description>
</parameter>
<parameter name="r" type="int" deprecated="false" usage="required">
<description><![CDATA[붙이는 갯수]]></description>
</parameter>
</parameters>
</method>
<method name="cut" deprecated="false" scope="instance" >
<description><![CDATA[문자열을 주어진 길이만큼 잘라낸다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[잘라낸 후 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="s" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
<parameter name="start" type="int" deprecated="false" usage="required">
<description><![CDATA[시작위치]]></description>
</parameter>
<parameter name="length" type="int" deprecated="false" usage="required">
<description><![CDATA[잘라낼 길이]]></description>
</parameter>
</parameters>
</method>
<method name="toDate" deprecated="false" scope="static" >
<description><![CDATA[문자열을 주어진 format에 따라 Date 객체로 변환]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[oDate]]></return-description>
</return-types>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="required">
<description><![CDATA[oConfig.format/oConfig.locale]]></description>
</parameter>
</parameters>
</method>
<method name="toXml" deprecated="false" scope="static" >
<description><![CDATA[입력된 xml 문자열을 xml document object model로 변환해서 return]]></description>
<return-types>
<return-type type="object" />
<return-description><![CDATA[xml dom]]></return-description>
</return-types>
</method>
<method name="isString" deprecated="false" scope="static" >
<description><![CDATA[값이 문자열인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isEmpty" deprecated="false" scope="static" >
<description><![CDATA[값이 빈 값인지 검사한다.
 undefined, null, '' 등은 모두 빈 값이다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="s" type="String" deprecated="false" usage="required">
<description><![CDATA[검사할 문자(열)]]></description>
</parameter>
</parameters>
</method>
<method name="advancedSplit" deprecated="false" scope="instance" >
<description><![CDATA[문자열을 구분자를 통해 잘라낸다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
<parameters>
<parameter name="s" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
<parameter name="delim" type="String" deprecated="false" usage="required">
<description><![CDATA[구분자]]></description>
</parameter>
</parameters>
</method>
<method name="firstUpperCase" deprecated="false" scope="instance" >
<description><![CDATA[첫 문자만 대문자로 변환한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[변환 후 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="s" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="firstLowerCase" deprecated="false" scope="instance" >
<description><![CDATA[첫 문자만 소문자로 변환한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[변환 후 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="s" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="getByteLength" deprecated="false" scope="instance" >
<description><![CDATA[스트링의 자릿수를 Byte 단위로 환산하여 알려준다. 영문, 숫자는 1Byte이고 한글은 2Byte이다.(자/모 중에 하나만 있는 글자도 2Byte이다.)]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[스트링의 길이]]></return-description>
</return-types>
</method>
<method name="replaceAll" deprecated="false" scope="instance" >
<description><![CDATA[문자열에 포함된 문자값을 모두 변경한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
<parameters>
<parameter name="s1" type="String" deprecated="false" usage="required">
<description><![CDATA[기본 문자열]]></description>
</parameter>
<parameter name="s2" type="String" deprecated="false" usage="required">
<description><![CDATA[변경할 문자열]]></description>
</parameter>
<parameter name="s3" type="String" deprecated="false" usage="required">
<description><![CDATA[변경될 문자열]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LObject" deprecated="false" >
<description>static 문자열 클래스는 object 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>static 문자열 클래스는 object 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
</constructor>
</constructors>
<methods>
<method name="clone" deprecated="false" scope="static" >
<description><![CDATA[객체를 복사하는 메소드]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[복사된 객체]]></return-description>
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[복사하고자 하는 원본 객체]]></description>
</parameter>
<parameter name="literal" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) literal 객체 여부]]></description>
</parameter>
<parameter name="fn" type="Functdion" deprecated="false" usage="required">
<description><![CDATA[(optional) Function 객체.]]></description>
</parameter>
</parameters>
</method>
<method name="serialize" deprecated="false" scope="static" >
<description><![CDATA[QueryString형 문자로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[QueryString형 문자열 id=ddd&pwd=ccc]]></return-description>
</return-types>
<parameters>
<parameter name="params" type="Array" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
</parameters>
</method>
<method name="isBoolean" deprecated="false" scope="static" >
<description><![CDATA[값이 boolean (true or false) 형인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isFunction" deprecated="false" scope="static" >
<description><![CDATA[값이 함수인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isNull" deprecated="false" scope="static" >
<description><![CDATA[값이 null인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[결과]]></return-description>
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isUndefined" deprecated="false" scope="static" >
<description><![CDATA[값이 undefined인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isEmpty" deprecated="false" scope="static" >
<description><![CDATA[값이 빈 값인지 검사한다.
 undefined, null, '' 등은 모두 빈 값이다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="s" type="String" deprecated="false" usage="required">
<description><![CDATA[검사할 문자(열)]]></description>
</parameter>
</parameters>
</method>
<method name="isObject" deprecated="false" scope="static" >
<description><![CDATA[object 타입이거나 함수인지 검사한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
</parameters>
</method>
<method name="hasKey" deprecated="false" scope="static" >
<description><![CDATA[object에 key에 해당되는 변수가 선언되어 있는지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[검사할 object]]></description>
</parameter>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[키값]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LDate" deprecated="false" >
<description>Date type의 데이터를 다루는데 도움이 되는 function을 제공하는 static Date 클래스
 java.sql.date의 toString은 yyyy-MM-dd로 return이 되므로 이에 대응
  &amp;lt;dl&amp;gt;
   &amp;lt;dt&amp;gt;config.format의 약어 내용은 아래와 같다.&amp;lt;/dt&amp;gt;
   &amp;lt;dd&amp;gt;strftime에 정의된 format을 지원한다.&amp;lt;/dd&amp;gt;
  &amp;lt;/dl&amp;gt;
  strftime은 http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html에
  오픈 그룹에 의해 정의된 여러가지 format 지정자들을 가지고 있다.

  PHP는 http://www.php.net/strftime에 정의된 자체의 몇가지 항목들을 추가한다.

  이러한 자바스크립트 구현은 모든 PHP 지정자와 몇가지를 더 지원한다.

  &amp;lt;br/&amp;gt;arg \%a - 현재 locale의 요일의 단축표시 ex) ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
  &amp;lt;br/&amp;gt;arg \%A - 현재 locale의 요일 표시 ex) ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
  &amp;lt;br/&amp;gt;arg \%b - 현재 locale의 달의 단축표시 ex) ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
  &amp;lt;br/&amp;gt;arg \%B - 현재 locale의 달 표시 ex) ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
  &amp;lt;br/&amp;gt;arg \%c - 현재 locale의 선호되는 날짜와 시간 표시 ex) 미국 : %a %d %b %Y %T %Z, 한국 : %Y년 %b %d %a %T %Z
  &amp;lt;br/&amp;gt;arg \%C - century number 현재 년도를 100으로 나누고 정수로 만든값으로 00~99
  &amp;lt;br/&amp;gt;arg \%d - 달의 일을 표시하는 값으로 01 ~ 31을 표시
  &amp;lt;br/&amp;gt;arg \%D - %m/%d/%y와 같다.
  &amp;lt;br/&amp;gt;arg \%e - %d와 비슷하나 1자리수의 경우 0대신이 공백이 들어간다. ' 1' ~ '31'
  &amp;lt;br/&amp;gt;arg \%F - %Y-%m-%d와 같다. (ISO 8601 date format)
  &amp;lt;br/&amp;gt;arg \%g - Two digit representation of the year going by ISO-8601:1988 standards (see %V)
  &amp;lt;br/&amp;gt;arg \%G - The full four-digit version of %g
  &amp;lt;br/&amp;gt;arg \%h - %b와 같다.
  &amp;lt;br/&amp;gt;arg \%H - 24-hour 00 ~ 23
  &amp;lt;br/&amp;gt;arg \%I - 12-hour 01 ~ 12
  &amp;lt;br/&amp;gt;arg \%j - 년중 몇번째 일인지 표시 001 ~ 366
  &amp;lt;br/&amp;gt;arg \%k - 24-hour 0 ~ 23
  &amp;lt;br/&amp;gt;arg \%l - 12-hour 1 ~ 12
  &amp;lt;br/&amp;gt;arg \%m - month 01 ~ 12
  &amp;lt;br/&amp;gt;arg \%M - minute 00 ~ 59
  &amp;lt;br/&amp;gt;arg \%n - 줄바꿈문자
  &amp;lt;br/&amp;gt;arg \%p - 현재 locale의 `AM', `PM'
  &amp;lt;br/&amp;gt;arg \%P - %p와 같으나 소문자 'am', 'pm'
  &amp;lt;br/&amp;gt;arg \%q - 입력용 format으로 년월일을 표시하며 기본 %Y%m%d이다.
  &amp;lt;br/&amp;gt;arg \%Q - 입력용 format으로 년월일시분초를 표시하면 기본 %Y%m%d%H%M%S이다.
  &amp;lt;br/&amp;gt;arg \%r - %p를 붙인 12시간제 시간 표시 %I:%M:%S %p와 같다.
  &amp;lt;br/&amp;gt;arg \%R - 24시간 표시 %H:%M와 같다.
  &amp;lt;br/&amp;gt;arg \%s - Unix Epoch Time timestamp, 1970-01-01 00:00:00 UTC이후의 초 ex) 305815200는 September 10, 1979 08:40:00 AM이다.
  &amp;lt;br/&amp;gt;arg \%S - 초 00 ~ 59
  &amp;lt;br/&amp;gt;arg \%t - tab문자
  &amp;lt;br/&amp;gt;arg \%T - 현재시간 %H:%M:%S와 같다.
  &amp;lt;br/&amp;gt;arg \%u - 요일을 숫자로 표시 1이 월요일이다.  1 ~ 7
  &amp;lt;br/&amp;gt;arg \%U - 지정한 년의 주번호 첫번째 일요일 부터 한주로 계산한다.
  &amp;lt;br/&amp;gt;arg \%V - 지정한 년의 주번호(ISO 8601:1988) 첫번째 월요일 부터 한주로 계산한다.  단 첫주는 적어도 4일이상이 되어야 한다. 01~53
  &amp;lt;br/&amp;gt;arg \%w - 요일을 숫자로 표시 0이 일요일이다.  0 ~ 6
  &amp;lt;br/&amp;gt;arg \%W - 지정한 년의 주번호 첫번째 월요일 부터 한주로 계산.
  &amp;lt;br/&amp;gt;arg \%x - 현재 locale의 기본 년월일 format ex) 2010-05-14, 14/05/10
  &amp;lt;br/&amp;gt;arg \%X - 현재 locale의 시간 ex) 2010-05-14 15:59:16
  &amp;lt;br/&amp;gt;arg \%y - century를 뺀 년도 00 ~ 99
  &amp;lt;br/&amp;gt;arg \%Y - century를 포함한 년도 ex) 2010
  &amp;lt;br/&amp;gt;arg \%z - time zone(UTC) 약어 또는 전체 명 ex) -0500 또는 EST for Eastern Time
  &amp;lt;br/&amp;gt;arg \%Z - time zone name / abbreviation
  &amp;lt;br/&amp;gt;arg \%% - a literal `\%' character</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Date type의 데이터를 다루는데 도움이 되는 function을 제공하는 static Date 클래스
 java.sql.date의 toString은 yyyy-MM-dd로 return이 되므로 이에 대응
  &amp;lt;dl&amp;gt;
   &amp;lt;dt&amp;gt;config.format의 약어 내용은 아래와 같다.&amp;lt;/dt&amp;gt;
   &amp;lt;dd&amp;gt;strftime에 정의된 format을 지원한다.&amp;lt;/dd&amp;gt;
  &amp;lt;/dl&amp;gt;
  strftime은 http://www.opengroup.org/onlinepubs/007908799/xsh/strftime.html에
  오픈 그룹에 의해 정의된 여러가지 format 지정자들을 가지고 있다.

  PHP는 http://www.php.net/strftime에 정의된 자체의 몇가지 항목들을 추가한다.

  이러한 자바스크립트 구현은 모든 PHP 지정자와 몇가지를 더 지원한다.

  &amp;lt;br/&amp;gt;arg \%a - 현재 locale의 요일의 단축표시 ex) ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat']
  &amp;lt;br/&amp;gt;arg \%A - 현재 locale의 요일 표시 ex) ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
  &amp;lt;br/&amp;gt;arg \%b - 현재 locale의 달의 단축표시 ex) ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']
  &amp;lt;br/&amp;gt;arg \%B - 현재 locale의 달 표시 ex) ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']
  &amp;lt;br/&amp;gt;arg \%c - 현재 locale의 선호되는 날짜와 시간 표시 ex) 미국 : %a %d %b %Y %T %Z, 한국 : %Y년 %b %d %a %T %Z
  &amp;lt;br/&amp;gt;arg \%C - century number 현재 년도를 100으로 나누고 정수로 만든값으로 00~99
  &amp;lt;br/&amp;gt;arg \%d - 달의 일을 표시하는 값으로 01 ~ 31을 표시
  &amp;lt;br/&amp;gt;arg \%D - %m/%d/%y와 같다.
  &amp;lt;br/&amp;gt;arg \%e - %d와 비슷하나 1자리수의 경우 0대신이 공백이 들어간다. ' 1' ~ '31'
  &amp;lt;br/&amp;gt;arg \%F - %Y-%m-%d와 같다. (ISO 8601 date format)
  &amp;lt;br/&amp;gt;arg \%g - Two digit representation of the year going by ISO-8601:1988 standards (see %V)
  &amp;lt;br/&amp;gt;arg \%G - The full four-digit version of %g
  &amp;lt;br/&amp;gt;arg \%h - %b와 같다.
  &amp;lt;br/&amp;gt;arg \%H - 24-hour 00 ~ 23
  &amp;lt;br/&amp;gt;arg \%I - 12-hour 01 ~ 12
  &amp;lt;br/&amp;gt;arg \%j - 년중 몇번째 일인지 표시 001 ~ 366
  &amp;lt;br/&amp;gt;arg \%k - 24-hour 0 ~ 23
  &amp;lt;br/&amp;gt;arg \%l - 12-hour 1 ~ 12
  &amp;lt;br/&amp;gt;arg \%m - month 01 ~ 12
  &amp;lt;br/&amp;gt;arg \%M - minute 00 ~ 59
  &amp;lt;br/&amp;gt;arg \%n - 줄바꿈문자
  &amp;lt;br/&amp;gt;arg \%p - 현재 locale의 `AM', `PM'
  &amp;lt;br/&amp;gt;arg \%P - %p와 같으나 소문자 'am', 'pm'
  &amp;lt;br/&amp;gt;arg \%q - 입력용 format으로 년월일을 표시하며 기본 %Y%m%d이다.
  &amp;lt;br/&amp;gt;arg \%Q - 입력용 format으로 년월일시분초를 표시하면 기본 %Y%m%d%H%M%S이다.
  &amp;lt;br/&amp;gt;arg \%r - %p를 붙인 12시간제 시간 표시 %I:%M:%S %p와 같다.
  &amp;lt;br/&amp;gt;arg \%R - 24시간 표시 %H:%M와 같다.
  &amp;lt;br/&amp;gt;arg \%s - Unix Epoch Time timestamp, 1970-01-01 00:00:00 UTC이후의 초 ex) 305815200는 September 10, 1979 08:40:00 AM이다.
  &amp;lt;br/&amp;gt;arg \%S - 초 00 ~ 59
  &amp;lt;br/&amp;gt;arg \%t - tab문자
  &amp;lt;br/&amp;gt;arg \%T - 현재시간 %H:%M:%S와 같다.
  &amp;lt;br/&amp;gt;arg \%u - 요일을 숫자로 표시 1이 월요일이다.  1 ~ 7
  &amp;lt;br/&amp;gt;arg \%U - 지정한 년의 주번호 첫번째 일요일 부터 한주로 계산한다.
  &amp;lt;br/&amp;gt;arg \%V - 지정한 년의 주번호(ISO 8601:1988) 첫번째 월요일 부터 한주로 계산한다.  단 첫주는 적어도 4일이상이 되어야 한다. 01~53
  &amp;lt;br/&amp;gt;arg \%w - 요일을 숫자로 표시 0이 일요일이다.  0 ~ 6
  &amp;lt;br/&amp;gt;arg \%W - 지정한 년의 주번호 첫번째 월요일 부터 한주로 계산.
  &amp;lt;br/&amp;gt;arg \%x - 현재 locale의 기본 년월일 format ex) 2010-05-14, 14/05/10
  &amp;lt;br/&amp;gt;arg \%X - 현재 locale의 시간 ex) 2010-05-14 15:59:16
  &amp;lt;br/&amp;gt;arg \%y - century를 뺀 년도 00 ~ 99
  &amp;lt;br/&amp;gt;arg \%Y - century를 포함한 년도 ex) 2010
  &amp;lt;br/&amp;gt;arg \%z - time zone(UTC) 약어 또는 전체 명 ex) -0500 또는 EST for Eastern Time
  &amp;lt;br/&amp;gt;arg \%Z - time zone name / abbreviation
  &amp;lt;br/&amp;gt;arg \%% - a literal `\%' character</description>
</constructor>
</constructors>
<properties>
<property name="DAY" type="String" deprecated="false" scope="static" >
<description>representing Day 상수 field</description>
</property>
<property name="WEEK" type="String" deprecated="false" scope="static" >
<description>representing Week 상수 field</description>
</property>
<property name="YEAR" type="String" deprecated="false" scope="static" >
<description>representing Year 상수 field</description>
</property>
<property name="MONTH" type="String" deprecated="false" scope="static" >
<description>representing Month 상수 field</description>
</property>
<property name="HOUR" type="String" deprecated="false" scope="static" >
<description>representing Hour 상수 field</description>
</property>
<property name="MINUTE" type="String" deprecated="false" scope="static" >
<description>representing Minute 상수 field</description>
</property>
<property name="SECOND" type="String" deprecated="false" scope="static" >
<description>representing Second 상수 field</description>
</property>
<property name="MILISECOND" type="String" deprecated="false" scope="static" >
<description>representing Milisecond 상수 field</description>
</property>
<property name="ONE_DAY_MS" type="Number" deprecated="false" scope="static" >
<description>representing one day, in milliseconds 상수 field</description>
</property>
<property name="WEEK_ONE_JAN_DATE" type="Number" deprecated="false" scope="static" >
<description>Constant field representing the date in first week of January
 which identifies the first week of the year.
 한해의 첫주를 식별하게 하는 1월의 첫째주에 대한 date를 표시하는 상수 field
 &amp;lt;p&amp;gt;
 미국에서는 1월 1일이 보통 한주의 일요일 시작을 기반으로 사용된다.
 유럽에서 넓게 사용되는 ISO 8601 은 한주의 월요일 시작을 기반으로한 1월 4일을 사용한다.
 &amp;lt;/p&amp;gt;</description>
</property>
</properties>
<methods>
<method name="add" deprecated="false" scope="static" >
<description><![CDATA[해당 instance에 특정 시간량을 추가한다.]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[Date object의 결과]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[추가적으로 실행될 JavaScript Date object]]></description>
</parameter>
<parameter name="field" type="String" deprecated="false" usage="required">
<description><![CDATA[추가적인 실행에 사용되는 field constant]]></description>
</parameter>
<parameter name="amount" type="Number" deprecated="false" usage="required">
<description><![CDATA[날짜에 추가하기 위한 unit들의 number(field constant에서 측정된)]]></description>
</parameter>
</parameters>
</method>
<method name="subtract" deprecated="false" scope="static" >
<description><![CDATA[Subtracts the specified amount of time from the this instance.
 해당 인스턴스로 부터 지정된 분량의 시간을 차감한다.]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[Date object 결과]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[차감시 수행할 자바스크립트 Date object]]></description>
</parameter>
<parameter name="field" type="Number" deprecated="false" usage="required">
<description><![CDATA[차감 실행에 대해 사용될 필드 상수]]></description>
</parameter>
<parameter name="amount" type="Number" deprecated="false" usage="required">
<description><![CDATA[date로부터 차감할 유닛들의 숫자(필드 상수에서 측정된)]]></description>
</parameter>
</parameters>
</method>
<method name="format" deprecated="false" scope="static" >
<description><![CDATA[내장된 JavaScript Date를 가져오고 사용자에게 표시할 문자열로 formating 처리.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[표시할 Formatted date.]]></return-description>
</return-types>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="required">
<description><![CDATA[(Optional) 부가적인 configuration 값:]]></description>
</parameter>
</parameters>
</method>
<method name="getLocale" deprecated="false" scope="static" >
<description><![CDATA[기본 local 정보 등을 가져온다.]]></description>
</method>
<method name="getFormat" deprecated="false" scope="static" >
<description><![CDATA[format 문자열 return, 입력값 없을 경우 default return]]></description>
<return-types>
<return-type type="string" />
</return-types>
</method>
<method name="equals" deprecated="false" scope="static" >
<description><![CDATA[두 날짜를 format 형식에 맞게 비교한다. config를 주지 않을경우 %x(yyyy-mm-dd)로 비교한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="date1" type="Date" deprecated="false" usage="required">
<description><![CDATA[대상 date 객체]]></description>
</parameter>
<parameter name="date2" type="Date" deprecated="false" usage="required">
<description><![CDATA[비교 대상 date 객체]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] format등 옵션]]></description>
</parameter>
</parameters>
</method>
<method name="getDate" deprecated="false" scope="static" >
<description><![CDATA[주어진 년, 월, 일을 표시하는 새로운 자바스크립트 Date object를 반환한다.
 새로운 Date object의 시간 필드(hr, min, sec, ms)들은 0으로 설정된다.
 method는 100이하의 연도로 생성되기 위한 Date 인스턴스들을 허용한다.
 "new Date(year, month, date)" 구현은 100 이하의 year (xx)가 제공되는 경우
 19xx로 연도를 설정한다.
 &amp;lt;p&amp;gt;
 &amp;lt;em&amp;gt;NOTE:&amp;lt;/em&amp;gt;argument의 Validation은 실행되지 않는다.
 new Date(year, month[, date]) 생성자에 대해 ECMAScript-262 Date object 명시에 따라서
 argument의 적합성을 확보하는 것은 caller의 책임이다.
 &amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[제공된 년월일로 설정된 자바스크립트 date object]]></return-description>
</return-types>
<parameters>
<parameter name="y" type="Number" deprecated="false" usage="required">
<description><![CDATA[Year.]]></description>
</parameter>
<parameter name="m" type="Number" deprecated="false" usage="required">
<description><![CDATA[0(Jan)부터 11(Dec)까지의 월 인덱스]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[(optional) 1부터 31까지의 날짜. 만약 제공되지 않으면 기본적으로 1.]]></description>
</parameter>
</parameters>
</method>
<method name="getDayInMonth" deprecated="false" scope="static" >
<description><![CDATA[inx월에 해당되는 마지막 날짜]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getFirstDayOfMonth" deprecated="false" scope="static" >
<description><![CDATA[주어진 날짜를 포함하는 달의 첫번째 날짜를 가져온다.]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[달의 첫째날을 표시하는 자바스크립트 Date]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[달의 시작을 계산하는데 사용할 자바스크립트 Date]]></description>
</parameter>
</parameters>
</method>
<method name="getLastDayOfMonth" deprecated="false" scope="static" >
<description><![CDATA[주어진 날짜를 포함하는 달의 마지막 날짜를 가져온다.]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[달의 마지막날을 표시하는 자바스크립트 Date]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[달의 끝을 계산하는데 사용할 자바스크릅트 Date]]></description>
</parameter>
</parameters>
</method>
<method name="clearTime" deprecated="false" scope="static" >
<description><![CDATA[주어진 날짜로부터 시간 필드를 초기화 하고, 효과적으로 시간을 낮 12시로 설정한다.]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[모든 시간 필드들이 초기화 된 자바스크립트 Date]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[초기화할 시간 필드에 대한 자바스크립트 Date]]></description>
</parameter>
</parameters>
</method>
<method name="isDate" deprecated="false" scope="static" >
<description><![CDATA[o의 객체가 Date객체인지 여부]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="before" deprecated="false" scope="static" >
<description><![CDATA[주어진 날짜가 달력의 다른 날짜 이전인지 여부에 대하여 결정한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[비교 날짜 이전에 날짜가 있으면 true, 아니면 false]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[비교 argument와 비교할 Date object]]></description>
</parameter>
<parameter name="compareTo" type="Date" deprecated="false" usage="required">
<description><![CDATA[비교시 사용할 Date object]]></description>
</parameter>
</parameters>
</method>
<method name="after" deprecated="false" scope="static" >
<description><![CDATA[주어진 날짜가 달력의 다른날짜 이후인지 여부에 대하여 결정한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[비교 날짜 이후에 날짜가 있으면 true, 아니면 false]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[비교 argument와 비교할 Date object]]></description>
</parameter>
<parameter name="compareTo" type="Date" deprecated="false" usage="required">
<description><![CDATA[비교시 사용할 Date object]]></description>
</parameter>
</parameters>
</method>
<method name="between" deprecated="false" scope="static" >
<description><![CDATA[주어진 날짜가 달력의 두 날짜 사이에 있는지 여부에 대하여 결정한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[비교할 날짜가 중간에 있으면 true, 아니면 false]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[체크할 날짜]]></description>
</parameter>
<parameter name="dateBegin" type="Date" deprecated="false" usage="required">
<description><![CDATA[범위의 시작일]]></description>
</parameter>
<parameter name="dateEnd" type="Date" deprecated="false" usage="required">
<description><![CDATA[범위의 종료일]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.Parser" deprecated="false" >
<description>format 문자열에 기반한 문자열로부터 세부 시간 정보를 parsing 하는
 &amp;lt;code&amp;gt;strptime&amp;lt;/code&amp;gt;에 대한 부분적인 implementation.
 &amp;lt;p&amp;gt;
 This implementation largely takes its cue from the documentation for Python's
 &amp;lt;code&amp;gt;time&amp;lt;/code&amp;gt; module, as documented at
 http://docs.python.org/lib/module-Dt.html; with the exception of seconds
 formatting, which is restricted to the range [00,59] rather than [00,61].
 &amp;lt;p&amp;gt;
 지원되는 formatting directive들:
 &amp;lt;table&amp;gt;
 &amp;lt;thead&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;th&amp;gt;Directive&amp;lt;/th&amp;gt;
     &amp;lt;th&amp;gt;Meaning&amp;lt;/th&amp;gt;
   &amp;lt;/tr&amp;gt;
 &amp;lt;/thead&amp;gt;
 &amp;lt;tbody&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%b&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;Locale의 단축된 월 이름.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%B&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;Locale의 전체 월 이름.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%d&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[01,31]의 십진수로된 월의 날짜.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%H&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[00,23]의 십진수로된 시간(24시간제).&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%I&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[00,12]의 십진수로된 시간(12시간제).&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%m&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[01,12]의 십진수로된 월.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%M&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[00,59]의 십진수로된 분.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%p&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
       Locale의 AM이나 PM 표시(시간을 분류하기 위해 &amp;lt;code&amp;gt;%I&amp;lt;/code&amp;gt; directive 가
       사용되는 경우에 시간 출력 field에만 영향을 미친다.)
     &amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%S&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[00,59]의 십진수로된 초.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%y&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[00,99]의 십진수로된 세기값이 없는 년도.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%Y&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;십진수로된 세기값을 포함한 년도.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%%&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;"&amp;lt;tt&amp;gt;%&amp;lt;/tt&amp;gt;" 문자 literal .&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
 &amp;lt;/tbody&amp;gt;
 &amp;lt;/table&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>format 문자열에 기반한 문자열로부터 세부 시간 정보를 parsing 하는
 &amp;lt;code&amp;gt;strptime&amp;lt;/code&amp;gt;에 대한 부분적인 implementation.
 &amp;lt;p&amp;gt;
 This implementation largely takes its cue from the documentation for Python's
 &amp;lt;code&amp;gt;time&amp;lt;/code&amp;gt; module, as documented at
 http://docs.python.org/lib/module-Dt.html; with the exception of seconds
 formatting, which is restricted to the range [00,59] rather than [00,61].
 &amp;lt;p&amp;gt;
 지원되는 formatting directive들:
 &amp;lt;table&amp;gt;
 &amp;lt;thead&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;th&amp;gt;Directive&amp;lt;/th&amp;gt;
     &amp;lt;th&amp;gt;Meaning&amp;lt;/th&amp;gt;
   &amp;lt;/tr&amp;gt;
 &amp;lt;/thead&amp;gt;
 &amp;lt;tbody&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%b&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;Locale의 단축된 월 이름.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%B&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;Locale의 전체 월 이름.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%d&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[01,31]의 십진수로된 월의 날짜.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%H&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[00,23]의 십진수로된 시간(24시간제).&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%I&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[00,12]의 십진수로된 시간(12시간제).&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%m&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[01,12]의 십진수로된 월.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%M&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[00,59]의 십진수로된 분.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%p&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;
       Locale의 AM이나 PM 표시(시간을 분류하기 위해 &amp;lt;code&amp;gt;%I&amp;lt;/code&amp;gt; directive 가
       사용되는 경우에 시간 출력 field에만 영향을 미친다.)
     &amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%S&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[00,59]의 십진수로된 초.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%y&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;[00,99]의 십진수로된 세기값이 없는 년도.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%Y&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;십진수로된 세기값을 포함한 년도.&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
   &amp;lt;tr&amp;gt;
     &amp;lt;td&amp;gt;&amp;lt;code&amp;gt;%%&amp;lt;/code&amp;gt;&amp;lt;/td&amp;gt;
     &amp;lt;td&amp;gt;"&amp;lt;tt&amp;gt;%&amp;lt;/tt&amp;gt;" 문자 literal .&amp;lt;/td&amp;gt;
   &amp;lt;/tr&amp;gt;
 &amp;lt;/tbody&amp;gt;
 &amp;lt;/table&amp;gt;</description>
<parameters>
<parameter name="format" type="String" deprecated="false" usage="instance">
<description><![CDATA[특정 formatting directive 문자열.]]></description>
</parameter>
<parameter name="locale" type="Object" deprecated="false" usage="instance">
<description><![CDATA[해당 parser를 생성하기 위해 사용되는 locale object.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<methods>
</methods>
</class>
<class type="Rui.util.LFunction" deprecated="false" >
<description>The static Function class provides helper functions to deal with data of type Function.
 statice 함수 클래스는 함수 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>The static Function class provides helper functions to deal with data of type Function.
 statice 함수 클래스는 함수 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
</constructor>
</constructors>
<methods>
<method name="createDelegate" deprecated="false" scope="static" >
<description><![CDATA[Function의 Delegate를 생성한다.]]></description>
<return-types>
<return-type type="Function" />
<return-description><![CDATA[Function 객체]]></return-description>
</return-types>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[function 객체]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[수행할 오브젝트]]></description>
</parameter>
<parameter name="args" type="Object" deprecated="false" usage="required">
<description><![CDATA[파라미터]]></description>
</parameter>
<parameter name="appendArgs" type="boolean" deprecated="false" usage="required">
<description><![CDATA[추가 파라미터를 붙일지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="defer" deprecated="false" scope="static" >
<description><![CDATA[Delegate를 생성하여 수행하는데 millis초값 만큼 시간이 지난후에 fn을 수행한다.]]></description>
<return-types>
<return-type type="Function" />
<return-description><![CDATA[Function 객체]]></return-description>
</return-types>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[function 객체]]></description>
</parameter>
<parameter name="millis" type="int" deprecated="false" usage="required">
<description><![CDATA[몇초후에 수행할지 값 (천분의 1초)]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[수행할 오브젝트]]></description>
</parameter>
<parameter name="args" type="Object" deprecated="false" usage="required">
<description><![CDATA[파라미터]]></description>
</parameter>
<parameter name="appendArgs" type="boolean" deprecated="false" usage="required">
<description><![CDATA[추가 파라미터를 붙일지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="createInterceptor" deprecated="false" scope="static" >
<description><![CDATA[fcn을 수행하여 결과에 따라 fn을 대신 수행하는 Interceptor 메소드]]></description>
<return-types>
<return-type type="Function" />
<return-description><![CDATA[Function 객체]]></return-description>
</return-types>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[function 객체]]></description>
</parameter>
<parameter name="fcn" type="Function" deprecated="false" usage="required">
<description><![CDATA[fn 의 해당되는 기능을 수할하지 여부를 판단하는 Function]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[수행할 오브젝트]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LJson" deprecated="false" >
<description>Json 문자열을 파싱하는 method를 제공하고 Json 문자열로 object들을 변환한다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Json 문자열을 파싱하는 method를 제공하고 Json 문자열로 object들을 변환한다.</description>
</constructor>
</constructors>
<methods>
<method name="encodeDate" deprecated="false" scope="static" >
<description><![CDATA[object, array 그외 다른 값을 인코딩한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[The Json string]]></return-description>
</return-types>
<parameters>
<parameter name="o" type="Mixed" deprecated="false" usage="required">
<description><![CDATA[인코딩할 변수]]></description>
</parameter>
</parameters>
</method>
<method name="encode" deprecated="false" scope="static" >
<description><![CDATA[object, array 그외 다른 값을 인코딩한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[The Json string]]></return-description>
</return-types>
<parameters>
<parameter name="o" type="Mixed" deprecated="false" usage="required">
<description><![CDATA[인코딩할 변수]]></description>
</parameter>
</parameters>
</method>
<method name="decode" deprecated="false" scope="static" >
<description><![CDATA[object에 Json 문자열을 디코딩한다. Json이 유효하지 않을 경우
 safe 옵션이 설정되어 있지 않다면 이 함수는 SyntaxError를 발생시킨다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[결과 object]]></return-description>
</return-types>
<parameters>
<parameter name="json" type="String" deprecated="false" usage="required">
<description><![CDATA[The Json string]]></description>
</parameter>
<parameter name="safe" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) true로 설정하고 Json이 잘못된 경우 null이 반환된다.]]></description>
</parameter>
</parameters>
</method>
<method name="jsonPath" deprecated="false" scope="static" >
<description><![CDATA[Json을 XPath형식으로 정보를 얻어오는 메소드
 &amp;lt;pre&amp;gt;
 alert(config.get("$.core.defaultLocale"));
 &amp;lt;/pre&amp;gt;]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[Json Object]]></description>
</parameter>
<parameter name="expr" type="Object" deprecated="false" usage="required">
<description><![CDATA[Date의 문자열 serialization]]></description>
</parameter>
<parameter name="arg" type="Object" deprecated="false" usage="required">
<description><![CDATA[규칙]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LDom" deprecated="false" >
<description>DOM element들을 위해 도움을 주는 method들을 제공한다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>DOM element들을 위해 도움을 주는 method들을 제공한다.</description>
</constructor>
</constructors>
<methods>
<method name="generateId" deprecated="false" scope="static" >
<description><![CDATA[ID를 반환하고, 만약 제공된 경우 'el' element로 적용된다.]]></description>
<return-types>
<return-type type="String | Array" />
<return-description><![CDATA[생성된 ID나, 생성된 ID들의 array]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[(optional) ID를 추가할 optional element의 array
                                       (하나라도 이미 존재한다면, ID는 추가되지 않는다.)]]></description>
</parameter>
<parameter name="prefix" type="String" deprecated="false" usage="required">
<description><![CDATA[(optional) 사용할 optional perfix(기본은 'L-gen')]]></description>
</parameter>
</parameters>
</method>
<method name="get" deprecated="false" scope="static" >
<description><![CDATA[HTMLElement refrence를 반환한다.]]></description>
<return-types>
<return-type type="HTMLElement | Array" />
<return-description><![CDATA[HTML element나 HTMLElement들의 array에 대한 DOM reference]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement |Array" deprecated="false" usage="required">
<description><![CDATA[DOM reference, 실제 DOM reference,
                                         혹은 ID들이나 HTMLElement들의 Array를 가져오기 위한
                                         ID 로서 사용하기 위한 문자열 Accepts]]></description>
</parameter>
</parameters>
</method>
<method name="getStyle" deprecated="false" scope="static" >
<description><![CDATA[currentStyle과 ComputedStyle의 일반화(Normalize).]]></description>
<return-types>
<return-type type="String | Array" />
<return-description><![CDATA[element를 위한 style property의 현재값.]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement |Array" deprecated="false" usage="required">
<description><![CDATA[ID로서 사용할 실제 DOM reference, 혹은 ID들이나
                                         HTMLElement들의 Array의 문자열 Accepts]]></description>
</parameter>
<parameter name="property" type="String" deprecated="false" usage="required">
<description><![CDATA[값이 반환될 style property.]]></description>
</parameter>
</parameters>
</method>
<method name="setStyle" deprecated="false" scope="static" >
<description><![CDATA[Wrapper for setting style properties of HTMLElements.
 최신 브라우저을 통해 'opacity'를 일반화(Normalize).]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement |Array" deprecated="false" usage="required">
<description><![CDATA[ID로서 사용할 실제 DOM reference, 혹은 ID들이나
                                         HTMLElement들의 Array의 문자열 Accepts]]></description>
</parameter>
<parameter name="property" type="String" deprecated="false" usage="required">
<description><![CDATA[설정될 style property.]]></description>
</parameter>
<parameter name="val" type="String" deprecated="false" usage="required">
<description><![CDATA[주어진 property에 적용될 값.]]></description>
</parameter>
</parameters>
</method>
<method name="applyStyles" deprecated="false" scope="instance" >
<description><![CDATA[element에 style specification을 적용한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="el" type="String/HTMLElement" deprecated="false" usage="required">
<description><![CDATA[style이 적용될 element]]></description>
</parameter>
<parameter name="styles" type="String/Object/Function" deprecated="false" usage="required">
<description><![CDATA[스타일 지정 문자열, 예: 'width:100px',
                                        form의 {width:'100px'} object,
                                        specification을 반환하는 함수]]></description>
</parameter>
</parameters>
</method>
<method name="hasClass" deprecated="false" scope="static" >
<description><![CDATA[HTMLElement가 주어진 class 이름을 가졌는지에 대한 여부.]]></description>
<return-types>
<return-type type="Boolean | Array" />
<return-description><![CDATA[boolean값이나 boolean값의 array]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[test할 element나 collection]]></description>
</parameter>
<parameter name="className" type="String" deprecated="false" usage="required">
<description><![CDATA[검색할 class 이름]]></description>
</parameter>
</parameters>
</method>
<method name="addClass" deprecated="false" scope="static" >
<description><![CDATA[주어진 element나 element들의 collection에 class 이름을 추가한다.]]></description>
<return-types>
<return-type type="Boolean | Array" />
<return-description><![CDATA[pass/fail의 boolean 값이나 boolean값의 array]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[class를 추가할 element나 collection]]></description>
</parameter>
<parameter name="className" type="String" deprecated="false" usage="required">
<description><![CDATA[class attribute에 추가할 class 이름]]></description>
</parameter>
</parameters>
</method>
<method name="removeClass" deprecated="false" scope="static" >
<description><![CDATA[Removes a class name from a given element or collection of elements.
 주어진 element나 element들의 collection으로부터 class 이름을 삭제한다.]]></description>
<return-types>
<return-type type="Boolean | Array" />
<return-description><![CDATA[pass/fail의 boolean 값이나 boolean값의 array]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[class를 삭제할 element나 collection]]></description>
</parameter>
<parameter name="className" type="String" deprecated="false" usage="required">
<description><![CDATA[class attribute에 삭제할 class 이름]]></description>
</parameter>
</parameters>
</method>
<method name="replaceClass" deprecated="false" scope="static" >
<description><![CDATA[주어진 element나 element의 collection에 대해 다른 클래스로 클래스를 교체한다.
 기존 클래스 이름이 존재하지 않는 경우 새로운 클래스 이름이 간단하게 추가된다.]]></description>
<return-types>
<return-type type="Boolean | Array" />
<return-description><![CDATA[성공/실패 boolean이나 boolean값들의 array]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[클래스로부터 제거할 element나 collection]]></description>
</parameter>
<parameter name="oldClassName" type="String" deprecated="false" usage="required">
<description><![CDATA[교체될 클래스 이름]]></description>
</parameter>
<parameter name="newClassName" type="String" deprecated="false" usage="required">
<description><![CDATA[예전 클래스 이름을 교체할 클래스 이름]]></description>
</parameter>
</parameters>
</method>
<method name="getElementsByClassName" deprecated="false" scope="static" >
<description><![CDATA[주어진 class의 HTMLElement들의 array를 반환한다.
 최적화된 성능을 위해서 가능한한 태그 및 또는 root node를 포함한다.
 Note: 이 callback(node들의 추가/삭제 등)에서의 collection 변경 같은,
 live collecttion에 반하는 운영 method는 부작용을 갖는다.
 native 'getElementsByTagName' method와 마찬가지로,
 대신 node array 반환을 반복해야 한다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[주어진 class이름을 가진 element들의 array]]></return-description>
</return-types>
<parameters>
<parameter name="className" type="String" deprecated="false" usage="required">
<description><![CDATA[일치하는 class 이름]]></description>
</parameter>
<parameter name="tag" type="String" deprecated="false" usage="required">
<description><![CDATA[(optional) collect될 element들의 태그 이름]]></description>
</parameter>
<parameter name="root" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[(optional) 시작지점으로 사용할 HTMLElement나 ID]]></description>
</parameter>
<parameter name="apply" type="Function" deprecated="false" usage="required">
<description><![CDATA[(optional) 발견했을때 각 element에 적용할 함수]]></description>
</parameter>
</parameters>
</method>
<method name="getElementsBy" deprecated="false" scope="static" >
<description><![CDATA[제공된 boolean method에 의해 적용된 테스트로 전달되는 HTMLElement의 array를 반환한다.
 최적화된 성능을 위해 가능한 경우, tag나 root 노드를 포함한다.
 주의: 이 method는 live collection에 반하여 작동하며
 callback(노드의 삭제/추가 등)에서의 collection 수정은 역효과가 생길 것이다.
 대신 native 'getElementsByTagName' method와 마찬가지로 반환된 노드 array를 반복해야 한다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[HTMLElement의 array]]></return-description>
</return-types>
<parameters>
<parameter name="method" type="Function" deprecated="false" usage="required">
<description><![CDATA[element의 argument로서만 element를 받는 element들을 테스트 하기 위한 boolean method.]]></description>
</parameter>
<parameter name="tag" type="String" deprecated="false" usage="required">
<description><![CDATA[(optional) collect 될 element들의 tag 이름]]></description>
</parameter>
<parameter name="root" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[(optional) 시작지점으로서 사용할 HTMLElement나 ID]]></description>
</parameter>
<parameter name="apply" type="Function" deprecated="false" usage="required">
<description><![CDATA[(optional) 검색되었을때 각 element에 적용할 함수]]></description>
</parameter>
</parameters>
</method>
<method name="getAncestorBy" deprecated="false" scope="static" >
<description><![CDATA[제공된 boolean method에 의해 적용된 테스트로 전달되는 가장 가까운 ancestor를 반환한다.
 성능상의 이유로, ID들은 허용되지 않으며 argument의 validation은 생략한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement나 만약 찾지 못하는 경우 null]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[시작지점으로서 사용할 HTMLElement]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="required">
<description><![CDATA[element의 argument로서만 element를 받는 element들을 테스트 하기 위한 boolean method.]]></description>
</parameter>
</parameters>
</method>
<method name="getAncestorByClassName" deprecated="false" scope="static" >
<description><![CDATA[주어진 클래스 이름을 가진 가장 가까운 ancestor를 반환한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[HTMLElement나 시작지점으로서 사용할 ID]]></description>
</parameter>
<parameter name="className" type="String" deprecated="false" usage="required">
<description><![CDATA[클래스 이름]]></description>
</parameter>
</parameters>
</method>
<method name="getAncestorByTagName" deprecated="false" scope="static" >
<description><![CDATA[주어진 tag 이름을 가진 가까운 ancestor를 반환한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[HTMLElement나 시작지점으로서 사용할 ID]]></description>
</parameter>
<parameter name="tag" type="String" deprecated="false" usage="required">
<description><![CDATA[이름]]></description>
</parameter>
</parameters>
</method>
<method name="isAncestor" deprecated="false" scope="static" >
<description><![CDATA[HTMLElement가 DOM 계층구조에서 다른 HTML element의 ancestor 인지에 대한 여부]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[haystack이 needle의 ancestor인지에 대한 여부]]></return-description>
</return-types>
<parameters>
<parameter name="haystack" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[가능한 ancestor]]></description>
</parameter>
<parameter name="needle" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[가능한 descendent]]></description>
</parameter>
</parameters>
</method>
<method name="inDocument" deprecated="false" scope="static" >
<description><![CDATA[HTMLElement가 현재 document에 존재하는지에 대한 여부]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[element가 현재 document에 존재하는지에 대한 여부]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[검색할 element]]></description>
</parameter>
</parameters>
</method>
<method name="batch" deprecated="false" scope="static" >
<description><![CDATA[Collection/Array의 각 항목에 대해 제공되는 method를 실행한다.
 method는 첫번째 인자로 element를, 두번째로 method(el, o) 같은 optional 인자를 가지고 호출된다.]]></description>
<return-types>
<return-type type="Any | Array" />
<return-description><![CDATA[제공된 method로 부터의 반환값(들)]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[method가 적용할 element나 element들의 array]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="required">
<description><![CDATA[element로 적용할 method]]></description>
</parameter>
<parameter name="o" type="Any" deprecated="false" usage="required">
<description><![CDATA[(optional) 제공될 method로 전달할 optional arg]]></description>
</parameter>
<parameter name="override" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) 'o'와 'method'의 scope를 override할지에 대한 여부]]></description>
</parameter>
</parameters>
</method>
<method name="getChildren" deprecated="false" scope="static" >
<description><![CDATA[HTMLElement childNode들의 array를 반환한다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[HTMLElement들의 static array]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[시작점으로 사용할 HTMLElement나 ID]]></description>
</parameter>
</parameters>
</method>
<method name="getChildrenBy" deprecated="false" scope="static" >
<description><![CDATA[test method로 전달할 HTMLElement childNode들의 array를 반환한다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[HTMLElement들의 static array]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[시작될 HTMLElemwnt]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="required">
<description><![CDATA[그것의 유일한 인자값으로 test되는 node를 받는
                          children test에 사용되는 boolean 함수]]></description>
</parameter>
</parameters>
</method>
<method name="getFirstChild" deprecated="false" scope="static" >
<description><![CDATA[맨 처음 HTMLElement child를 반환한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement or null if not found]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[The HTMLElement or an ID to use as the starting point]]></description>
</parameter>
</parameters>
</method>
<method name="getFirstChildBy" deprecated="false" scope="static" >
<description><![CDATA[test method로 전달할 처음 HTMLElement child를 반환한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement나 발견되지 않았을 경우엔 null]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[시작점으로 사용할 HTMLElement]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="required">
<description><![CDATA[그것의 유일한 인자값으로 test되는 node를 받는
                          children test에 사용되는 boolean 함수]]></description>
</parameter>
</parameters>
</method>
<method name="getFirstChildByTagName" deprecated="false" scope="static" >
<description><![CDATA[node의 자식중 해당 tagName을 가지는 첫번째 element를 return한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement 또는 null]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[부모 node]]></description>
</parameter>
<parameter name="tagName" type="String" deprecated="false" usage="required">
<description><![CDATA[자식의 tagName]]></description>
</parameter>
</parameters>
</method>
<method name="getLastChild" deprecated="false" scope="static" >
<description><![CDATA[Returns the last HTMLElement child.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement나 찾지 못하는 경우 null]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[시작지점으로서 사용할 HTMLElement난 ID]]></description>
</parameter>
</parameters>
</method>
<method name="getLastChildBy" deprecated="false" scope="static" >
<description><![CDATA[Returns the last HTMLElement child that passes the test method.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement or null if not found]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[The HTMLElement to use as the starting point]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="required">
<description><![CDATA[A boolean function used to test children
 that receives the node being tested as its only argument]]></description>
</parameter>
</parameters>
</method>
<method name="getAllChildrenBy" deprecated="false" scope="static" >
<description><![CDATA[HTMLElement child 노드들의 array를 반환한다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[HTMLElement의 static array]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[시작지점으로서 사용할 HTMLElement난 ID]]></description>
</parameter>
<parameter name="list" type="Array" deprecated="false" usage="required">
<description><![CDATA[배열]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="required">
<description><![CDATA[비교 function]]></description>
</parameter>
</parameters>
</method>
<method name="getPreviousSibling" deprecated="false" scope="static" >
<description><![CDATA[이전에 sibling되어 있는 HTMLElement를 반환한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement나 찾지 못하는 경우 null]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[시작지점으로서 사용할 HTMLElement나 ID]]></description>
</parameter>
</parameters>
</method>
<method name="getPreviousSiblingBy" deprecated="false" scope="static" >
<description><![CDATA[이전에 sibling되어 있는 HTMLElement를 반환한다.
 성능상의 이유로, ID들은 허용되지 않으며 argument의 validation은 생략한다.
 Returns the nearest HTMLElement sibling if no method provided.
 method가 제공되지 않는 경우 가장 가까운 sibling HTMLElement를 반환한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement나 찾지 못하는 경우 null]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[시작지점으로서 사용할 HTMLElement]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="required">
<description><![CDATA[노드의 argument로서만 테스트될 sibling 노드를 받는
 sibling을 테스트하기 위하여 사용되는 boolean 함수]]></description>
</parameter>
</parameters>
</method>
<method name="getNextSibling" deprecated="false" scope="static" >
<description><![CDATA[다음에 sibling 되어 있는 HTMLElement를 반환한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement나 찾지 못하는 경우 null]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[시작지점으로서 사용할 HTMLElement난 ID]]></description>
</parameter>
</parameters>
</method>
<method name="getNextSiblingBy" deprecated="false" scope="static" >
<description><![CDATA[boolean method로 전달할 다음 형제 HTMLElement를 반환한다.
 성능상의 이유로, ID들은 허용되지 않으며, argument validation은 생략된다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement나 발견되지 않았을 경우엔 null]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[시작점으로 사용할 HTMLElement]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="required">
<description><![CDATA[그것의 유일한 인자값으로 test되는 sibling node를 받는
                          siblings test에 사용되는 boolean 함수]]></description>
</parameter>
</parameters>
</method>
<method name="insertFirst" deprecated="false" scope="static" >
<description><![CDATA[해당 element의 첫번째 child로서 element나 DomHelper 설정을 삽입하거나 생성한다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[새로운 child]]></return-description>
</return-types>
<parameters>
<parameter name="newNode" type="String/HTMLElement" deprecated="false" usage="required">
<description><![CDATA[삽입할 id나 element, 삽입하거나 생성할 DomHelper 설정]]></description>
</parameter>
<parameter name="referenceNode" type="String/HTMLElement" deprecated="false" usage="required">
<description><![CDATA[이후에 새로운 노느가 삽입될 노드]]></description>
</parameter>
</parameters>
</method>
<method name="insertBefore" deprecated="false" scope="static" >
<description><![CDATA[reference node의 이전 sibling으로 새 node를 삽입한다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[삽입된 node(만약 삽입이 실패되면 null)]]></return-description>
</return-types>
<parameters>
<parameter name="newNode" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[삽입될 node]]></description>
</parameter>
<parameter name="referenceNode" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[새로운 node 이전에 삽입할 node]]></description>
</parameter>
</parameters>
</method>
<method name="insertAfter" deprecated="false" scope="static" >
<description><![CDATA[reference node의 다음 sibling으로 새 node를 삽입한다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[삽입된 node(만약 삽입이 실패되면 null)]]></return-description>
</return-types>
<parameters>
<parameter name="newNode" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[삽입될 node]]></description>
</parameter>
<parameter name="referenceNode" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[새로운 node 이후에 삽입할 node]]></description>
</parameter>
</parameters>
</method>
<method name="removeNode" deprecated="false" scope="instance" >
<description><![CDATA[document로부터 DOM node를 삭제한다. body node는 전달될 경우 무시될 것이다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[삭제할 node]]></description>
</parameter>
</parameters>
</method>
<method name="replaceChild" deprecated="false" scope="instance" >
<description><![CDATA[HTMLElement method를 위한 Wrapper.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[교체된 DOM element]]></return-description>
</return-types>
<parameters>
<parameter name="newNode" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[삽입할 HTMLElement]]></description>
</parameter>
<parameter name="oldNode" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[교체할 HTMLElement]]></description>
</parameter>
</parameters>
</method>
<method name="appendHtml" deprecated="false" scope="static" >
<description><![CDATA[html내용을 dom객체에 추가한다.(script/css 태그 작동)]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dom" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[객체]]></description>
</parameter>
<parameter name="html" type="String" deprecated="false" usage="required">
<description><![CDATA[html 내용]]></description>
</parameter>
</parameters>
</method>
<method name="createElements" deprecated="false" scope="static" >
<description><![CDATA[html 해당되는 객체를 생성한후 LElementList로 리턴한다.]]></description>
<return-types>
<return-type type="Rui.LElementList" />
</return-types>
<parameters>
<parameter name="html" type="String" deprecated="false" usage="required">
<description><![CDATA[생성할 html]]></description>
</parameter>
<parameter name="options" type="object" deprecated="false" usage="required">
<description><![CDATA[[optional] 추가 설정]]></description>
</parameter>
</parameters>
</method>
<method name="findParent" deprecated="false" scope="instance" >
<description><![CDATA[전달된 simple selector의 match를 위한 현재 node와 parent node를 찾는다.(예: div.some-class or span:first-child)]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[매치되는 DOM node(매치되는 값을 찾지 못하면 null)]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[The node]]></description>
</parameter>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[test를 위한 simple selector]]></description>
</parameter>
<parameter name="maxDepth" type="Number/Mixed" deprecated="false" usage="required">
<description><![CDATA[(optional) element나 number로서 검색하기 위한 depth max값
                       (defaults to 10 || document.body)]]></description>
</parameter>
</parameters>
</method>
<method name="findParentNode" deprecated="false" scope="instance" >
<description><![CDATA[Looks at parent nodes for a match of the passed simple selector (e.g. div.some-class or span:first-child)]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[매치되는 DOM node(매치되는 값을 찾지 못하면 null)]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[The node]]></description>
</parameter>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[test를 위한 simple selector]]></description>
</parameter>
<parameter name="maxDepth" type="Number/Mixed" deprecated="false" usage="required">
<description><![CDATA[(optional) element나 number로서 검색하기 위한 depth max값
                       (defaults to 10 || document.body)]]></description>
</parameter>
</parameters>
</method>
<method name="isDom" deprecated="false" scope="static" >
<description><![CDATA[dom 객체가 존재하는지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[the result]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[dom 객체를 찾을 id]]></description>
</parameter>
</parameters>
</method>
<method name="getRuiAttributes" deprecated="false" scope="static" >
<description><![CDATA[dom 객체에 rui- 속성들을 json 객체로 리턴]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[json 객체]]></return-description>
</return-types>
<parameters>
<parameter name="dom" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[dom 객체]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LKey" deprecated="false" >
<description>Json 문자열을 파싱하는 method를 제공하고 Json 문자열로 object들을 변환한다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Json 문자열을 파싱하는 method를 제공하고 Json 문자열로 object들을 변환한다.</description>
</constructor>
</constructors>
<properties>
<property name="KEY" type="Object" deprecated="false" scope="static" >
<description>특수 키의 집합에 대한 키들의 코드 상수</description>
</property>
<property name="NAVKEY" type="Object" deprecated="false" scope="static" >
<description>방향, 위치이동, 탐색 등에 사용되는 키들의 코드 상수</description>
</property>
</properties>
</class>
<class type="Rui.util.LSubscriber" deprecated="false" >
<description>event가 발생할때 사용되기 위한 subscriber 정보를 저장한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>event가 발생할때 사용되기 위한 subscriber 정보를 저장한다.</description>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="instance">
<description><![CDATA[실행할 함수]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="instance">
<description><![CDATA[event가 발생할때 전달될 object]]></description>
</parameter>
<parameter name="override" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[true인 경우 If true, 전달된 obj는 listener의 실행 범위가 된다.]]></description>
</parameter>
<parameter name="p_system" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[true일 경우 시스템 이벤트로 등록되어 우선순위가 올라간다.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="fn" type="function" deprecated="false" scope="instance" >
<description>event가 발생할때 실행될 callback</description>
</property>
<property name="obj" type="object" deprecated="false" scope="instance" >
<description>callback으로 전달되는 부가적인 custom object
 the event fires</description>
</property>
<property name="override" type="boolean|object" deprecated="false" scope="instance" >
<description>event listener에 대한 기본적인 실행 scope는 event가 생성될때
 정의된다(일반적으로 event에 포함된 object).
 override를 true로 설정함으로 인하여 실행 scope는 subscriber로 인해
 전달되는 custom object가 된다.
 override가 object인 경우 해당 object는 scope가 된다.</description>
</property>
<property name="system" type="boolean" deprecated="false" scope="instance" >
<description>시스템 이벤트인지 여부로 이벤트 우선 실행 우선순위가 올라간다.</description>
</property>
</properties>
<methods>
<method name="getScope" deprecated="false" scope="instance" >
<description><![CDATA[해당 listener에 대한 실행 scope를 반환한다.
 override가 true로 설정되어 있을 경우 custom obj가 scope가 될 것이다.
 override가 object인 경우, 그것은 scope가 되며,
 그렇지 않은 경우에는 기본 scope가 사용될 것이다.]]></description>
<parameters>
<parameter name="defaultScope" type="Object" deprecated="false" usage="required">
<description><![CDATA[해당 listener가 override 되지 않은 경우 사용할 scope.]]></description>
</parameter>
</parameters>
</method>
<method name="contains" deprecated="false" scope="instance" >
<description><![CDATA[fn과 obj가 해당 object들의 property들과 일치하는 경우 true를 반환한다.
 정확한 subscriber 일치를 위하여 unsubscribe method에 의해 사용된다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[제공된 argument들이 해당 subscriber의 signature와 일치하는 경우 true.]]></return-description>
</return-types>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[실행할 함수]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[event가 발생할때 전달될 object]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[]]></description>
</method>
</methods>
</class>
<class type="Rui.util.LEventProvider" deprecated="false" >
<description>LEventProvider는 event들이 이름으로 subscribe되거나 발생시키는 것이
 가능하게 하는 인터페이스에서 CustomEvent들을 wrapping하기 위한
 Du.argument와 함께 사용되도록 디자인 된다.
 이것은 아직 만들어지지 않았거나, 전혀 만들어지지 않을 event에
 subscribe 하기 위한 코드 구현을 가능하게 한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LEventProvider는 event들이 이름으로 subscribe되거나 발생시키는 것이
 가능하게 하는 인터페이스에서 CustomEvent들을 wrapping하기 위한
 Du.argument와 함께 사용되도록 디자인 된다.
 이것은 아직 만들어지지 않았거나, 전혀 만들어지지 않을 event에
 subscribe 하기 위한 코드 구현을 가능하게 한다.</description>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="on" deprecated="false" scope="instance" >
<description><![CDATA[event 타입에 의해 LCustomEvent에 subscribe]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="p_type" type="string" deprecated="false" usage="required">
<description><![CDATA[타입이나 event의 이름]]></description>
</parameter>
<parameter name="p_fn" type="function" deprecated="false" usage="required">
<description><![CDATA[event가 발생할때 실행할 함수]]></description>
</parameter>
<parameter name="p_obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[event가 발생할때 전달되는 object]]></description>
</parameter>
<parameter name="p_override" type="boolean" deprecated="false" usage="required">
<description><![CDATA[true일 경우, obj가 listener의 실행 scope가 된다.]]></description>
</parameter>
<parameter name="options" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] true일 경우 시스템 이벤트로 등록되어 우선순위가 올라간다.]]></description>
</parameter>
</parameters>
</method>
<method name="unOn" deprecated="false" scope="instance" >
<description><![CDATA[특정 event로 부터 하나 혹은 그 이상의 listener들을 unsubscribe 한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[subscriber가 발견되고 detach 된 경우 true.]]></return-description>
</return-types>
<parameters>
<parameter name="type" type="string" deprecated="false" usage="required">
<description><![CDATA[타입, 혹은 event의 이름.
                          타입을 명시하지 않은 경우, 모든 host된 event들로부터 listener를
                          제거하기 위해 시도할 것이다.]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[unsubscribe 하기 위한 subsctibe된 함수.
                          제공되지 않는 경우 모든 subscriber가 삭제될 것이다.]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[subscribe하기 위해 전달되는 custom object.
                        이것은 옵션이지만, 만약 제공되면 같은 여러 개의 listener들을
                        명확하게 하는데 사용될 것이다.(예들 들어, prototype에 존재하는
                        함수를 사용하여 많은 object를 subscribe 하는 것을 들수 있다.)]]></description>
</parameter>
</parameters>
</method>
<method name="unOnAll" deprecated="false" scope="instance" >
<description><![CDATA[모든 listener들을 제거한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.util.LCustomEvent" deprecated="false" >
<description>LCustomEvent class는 하나 또는 그이상의 독립된 compnent에 소속될 수 있는
 어플리케이션을 위한 event들을 정의하게 해준다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LCustomEvent class는 하나 또는 그이상의 독립된 compnent에 소속될 수 있는
 어플리케이션을 위한 event들을 정의하게 해준다.</description>
<parameters>
<parameter name="type" type="String" deprecated="false" usage="instance">
<description><![CDATA[event가 발생할 때 callback으로 전송되는 event의 type]]></description>
</parameter>
<parameter name="oScope" type="Object" deprecated="false" usage="instance">
<description><![CDATA[event로부터 발생될 context.
                  이것은 callback에서 해당 object를 참조한다.
                  기본값: window object. listener는 이것을 override 할 수 있다.]]></description>
</parameter>
<parameter name="silent" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[debugsystem에의 writing으로부터의 event를 방지하기 위해서는 true를 전송]]></description>
</parameter>
<parameter name="signature" type="int" deprecated="false" usage="instance">
<description><![CDATA[custom event subscriber가 받을 signature.
                  Rui.util.LCustomEvent.LIST 혹은 Rui.util.LCustomEvent.FLAT.
                  기본은 Rui.util.LCustomEvent.LIST 이다.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="type" type="string" deprecated="false" scope="instance" >
<description>event가 발생할 때 subcriber들에게 반환되는 event의 type.</description>
</property>
<property name="scope" type="object" deprecated="false" scope="instance" >
<description>event가 기본적으로 발생할 scope. 기본값은 window obj 까지</description>
</property>
<property name="silent" type="boolean" deprecated="false" scope="instance" >
<description>기본적으로 모든 custom event들은 debug build에서 logging 되며,
 이 event를 위해 debug output을 비활성화 하기 위해선 true로 설정한다.</description>
</property>
<property name="signature" type="int" deprecated="false" scope="instance" >
<description>Custom event들은 event subscriber들에게 제공되는 두가지 스타일의 인자들을 지원한다.
 &amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;Rui.util.LCustomEvent.LIST:
   &amp;lt;ul&amp;gt;
   &amp;lt;li&amp;gt;param1: event name&amp;lt;/li&amp;gt;
   &amp;lt;li&amp;gt;param2: 발생시키기 위해 전송되는 argument들의 array&amp;lt;/li&amp;gt;
   &amp;lt;li&amp;gt;param3: &amp;lt;optional&amp;gt; subscriber에 의해 제공되는 custom object&amp;lt;/li&amp;gt;
   &amp;lt;/ul&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;Rui.util.LCustomEvent.FLAT
   &amp;lt;ul&amp;gt;
   &amp;lt;li&amp;gt;param1: 발생시키기 위해여 전달되는 첫번째 argument.
           만약 여러 parameter들을 전달하고자 한다면, array나 object literal을 사용한다.&amp;lt;/li&amp;gt;
   &amp;lt;li&amp;gt;param2: &amp;lt;optional&amp;gt; subscriber에 의해 제공되는 custom object&amp;lt;/li&amp;gt;
   &amp;lt;/ul&amp;gt;
 &amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;</description>
</property>
<property name="lastError" type="Error" deprecated="false" scope="instance" >
<description>exception이 발생했을때 subscriber 스택의 나머지를 실행 가능하게 하기 위하여
 subscriber exception들이 잡힌다. 가장 최근의 exception이 이 propery에 저장된다.</description>
</property>
<property name="LIST" type="int" deprecated="false" scope="static" >
<description>subscriber listener signature 상수.
 LIST type은 세가지 parameter들을 반환한다: event type, 발생할때 전달되는 args의 array,
 그리고 optional custom object.</description>
</property>
<property name="FLAT" type="int" deprecated="false" scope="static" >
<description>subscriber listener signature 상수.
 FLAT type은 두가지 parameter들을 반환한다: 발생할때 전달되는 첫번째 argument와
 optional custom object</description>
</property>
</properties>
<events>
<event name="subscribeEvent" deprecated="false">
<description><![CDATA[
Csutom event들은 event에 새로운 subscriber가 있을때 마다 발생되는
 custom event를 제공한다.
 그리고 새로운 subscriber를 가지고 이미 fire된
 non-repeating 이벤트가 있는 경우를 제어하는 기회를 제공한다.
]]></description>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="instance">
<description><![CDATA[실행할 function]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="instance">
<description><![CDATA[event가 발생할때 전달될 object An object to be passed along when the event fires]]></description>
</parameter>
<parameter name="override" type="boolean|Object" deprecated="false" usage="instance">
<description><![CDATA[만약 true면, 전달된 obj가 listener의 실행 scope가 된다.
                                   만약 object면, 그 object가 실행 scope가 된다.]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="on" deprecated="false" scope="instance" >
<description><![CDATA[Subscribes the caller to this event
 이 event로의 caller 를 명시한다.]]></description>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[실행할 function]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[event 발생시에 전달될 object]]></description>
</parameter>
<parameter name="override" type="boolean|Object" deprecated="false" usage="required">
<description><![CDATA[만약 true면, 전달된 obj가 listener의 실행 scope가 된다.
                                   만약 object면, 그 object가 실행 scope가 된다.]]></description>
</parameter>
<parameter name="p_system" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] true일 경우 시스템 이벤트로 등록되어 우선순위가 올라간다.]]></description>
</parameter>
</parameters>
</method>
<method name="unOn" deprecated="false" scope="instance" >
<description><![CDATA[unOns subscribers.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[subscriber가 있고 detach 되어 있으면 true.]]></return-description>
</return-types>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[삭제하기 위하여 명시된 function, 만약 제공되지 않으면,
                       모든 function이 삭제될 것이다.]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[subscribe로 전달된 custom object.
                        이것은 option 이지만, 만약 명확한 여러 listener들에서 사용되게
                        제공되는 것은 모두 같을 것이다.
                        (e.g., prototype상에서 존재하는 function을 사용하는
                        많은 object를 명시한다.)]]></description>
</parameter>
</parameters>
</method>
<method name="fire" deprecated="false" scope="instance" >
<description><![CDATA[Notifies the subscribers.
 callback 함수는 event가 생성될때 특정 scope로 부터 실행될 것이다.
 event는 아래와 같은 parameter를 가진다:
   &amp;lt;ul&amp;gt;
   &amp;lt;li&amp;gt;event의 type&amp;lt;/li&amp;gt;
   &amp;lt;li&amp;gt;array로서 실행된 모든 arguments fire()&amp;lt;/li&amp;gt;
   &amp;lt;li&amp;gt;(만약 있다면,) subscribe() method로 전달된 custom object&amp;lt;/li&amp;gt;
   &amp;lt;/ul&amp;gt;]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[만약 subscriber가 false 를 반환하면 false 이고 아니면 true]]></return-description>
</return-types>
<parameters>
<parameter name="arguments" type="Object*" deprecated="false" usage="required">
<description><![CDATA[handler로 전달할 parameter들의 임의 set]]></description>
</parameter>
</parameters>
</method>
<method name="unOnAll" deprecated="false" scope="instance" >
<description><![CDATA[모든 listener들을 삭제한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[unsubscribe 된 listener의 개수]]></return-description>
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[]]></description>
</method>
</methods>
</class>
<class type="Rui.util.LEvent" deprecated="false" >
<description>event 유틸리티는 event listener들과 event cleansing을 추가하거나 삭제하는
 함수들을 제공한다. 이것은 또한 unload event 동안 등록되는 listener들을
 제거하려고 시도한다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>event 유틸리티는 event listener들과 event cleansing을 추가하거나 삭제하는
 함수들을 제공한다. 이것은 또한 unload event 동안 등록되는 listener들을
 제거하려고 시도한다.</description>
</constructor>
</constructors>
<properties>
<property name="POLL_RETRYS" type="int" deprecated="false" scope="static" >
<description>document가 로딩되고 event가 요청되는 시점에서 DOM에 있지 않은
 element들을 찾기 위한 횟수.
 기본값은 2000@amp;20 ms 이며, 40초 혹은 모든 outstanding handler들이
 바운딩 되는(둘중 먼저 오는) 동안 polling 될 것이다.</description>
</property>
<property name="POLL_INTERVAL" type="int" deprecated="false" scope="static" >
<description>millisecond 단위의 polling 간격</description>
</property>
<property name="TYPE" type="int" deprecated="false" scope="static" >
<description>event의 타입, 정수형 상수</description>
</property>
<property name="WFN" type="int" deprecated="false" scope="static" >
<description>scope 수정 및 정리를 위한 함수 wrapping, 정수형 상수</description>
</property>
<property name="UNLOAD_OBJ" type="int" deprecated="false" scope="static" >
<description>callback에의 parameter로서 반환될 사용자에 의해 전달되는 object, 정수형 상수.
 listener들을 unload 하기 위해 명시된다.</description>
</property>
<property name="OBJ" type="int" deprecated="false" scope="static" >
<description>addListener로 전달되는 original obj</description>
</property>
<property name="OVERRIDE" type="int" deprecated="false" scope="static" >
<description>addListener로 전달되는 original scope parameter</description>
</property>
<property name="CAPTURE" type="int" deprecated="false" scope="static" >
<description>addListener로 전달되는 original capture parameter</description>
</property>
<property name="lastError" type="Error" deprecated="false" scope="static" >
<description>addListener/removeListener는 예기치 않은 시나리오에서 에러를 throw 할수 있다.
 이런 에러들은 억제되며, hethod는 false를 반환하고, 해당 property를 설정한다.</description>
</property>
<property name="DOMReady" type="boolean" deprecated="false" scope="static" >
<description>document가 처음으로 사용할 수 있을때 True</description>
</property>
<property name="throwErrors" type="boolean" deprecated="false" scope="instance" >
<description>custom event들의 subscriber에 의해 전달된 에러들이 캐치되고,
 에러 제세지는 debug 콘솔에 출력된다.
 이 property를 true로 설정할 경우, 에러를 re-throw 할 것이다.</description>
</property>
</properties>
<events>
<event name="DOMReadyEvent" deprecated="false">
<description><![CDATA[
dom을 처음 사용할때 발생하는 custom event
]]></description>
</event>
</events>
<methods>
<method name="onAvailable" deprecated="false" scope="static" >
<description><![CDATA[제공된 id의 항목이 발견됐을 때 제공된 callback을 실행한다.
 이것은 페이지 로딩시 가능한 빨리 동작을 실행하는데
 사용될 수 있음을 의미한다.
 이것을 초기 페이지 로딩 이후에 사용할 경우, element에 대한
 고정된 시간으로 polling을 할 것이다.
 polling 횟수와 주기는 config 가능하다.
 기본적으로 10초 동안 polling 할 것이다.
 &amp;lt;p&amp;gt;callback은 하나의 parameter를 가지고 실행된다:
 custom object parameter를 제공하는 경우.&amp;lt;/p&amp;gt;]]></description>
<parameters>
<parameter name="p_id" type="string||string[]" deprecated="false" usage="required">
<description><![CDATA[element의 id나, 찾아야 할 id들의 array]]></description>
</parameter>
<parameter name="p_fn" type="function" deprecated="false" usage="required">
<description><![CDATA[element를 찾았을때, 실행할 함수.]]></description>
</parameter>
<parameter name="p_obj" type="object" deprecated="false" usage="required">
<description><![CDATA[p_fn의 parameter로서 전달될 optional object.]]></description>
</parameter>
<parameter name="p_override" type="boolean|object" deprecated="false" usage="required">
<description><![CDATA[true가 설정될 경우, p_fn은 p_obj의 scope로
                   실행할 것이며, object가 설정될 경우, 해당 object의 scope로
                   실행할 것이다.]]></description>
</parameter>
<parameter name="child" type="boolean" deprecated="false" usage="required">
<description><![CDATA[노드의 준비성을 체크한다.(onContentReady)]]></description>
</parameter>
</parameters>
</method>
<method name="onContentReady" deprecated="false" scope="static" >
<description><![CDATA[onAvailable과 같은 방식으로 작동하지만 추가적으로, 사용가능한 element의
 내용이 변경하기 위해 안전한지를 결정하기 위하여 연결된 element들의
 상태를 체크한다.

 &amp;lt;p&amp;gt;callback은 하나의 parameter를 가지고 실행된다:
 custom object parameter를 제공하는 경우.&amp;lt;/p&amp;gt;]]></description>
<parameters>
<parameter name="p_id" type="string" deprecated="false" usage="required">
<description><![CDATA[찾아야 할 element의 id]]></description>
</parameter>
<parameter name="p_fn" type="function" deprecated="false" usage="required">
<description><![CDATA[element가 준비되었을때 실행할 함수]]></description>
</parameter>
<parameter name="p_obj" type="object" deprecated="false" usage="required">
<description><![CDATA[p_fn의 parameter로서 전달될 optional object]]></description>
</parameter>
<parameter name="p_override" type="boolean|object" deprecated="false" usage="required">
<description><![CDATA[true가 설정될 경우, p_fn은 p_obj의 scope로
                   실행할 것이며, object가 설정될 경우, 해당 object의 scope로
                   실행할 것이다.]]></description>
</parameter>
</parameters>
</method>
<method name="onDOMReady" deprecated="false" scope="static" >
<description><![CDATA[DOM이 처음으로 사용가능할 때 제공된 callback을 실행한다.
 이것은 DOMReady event가 발생된 이후에 호출될 경우 즉시 실행될 것이다.]]></description>
<parameters>
<parameter name="p_fn" type="function" deprecated="false" usage="required">
<description><![CDATA[element를 찾았을 때 실행할 함수]]></description>
</parameter>
<parameter name="p_obj" type="object" deprecated="false" usage="required">
<description><![CDATA[p_fn의 parameter로서 전달될 optional object]]></description>
</parameter>
<parameter name="p_scope" type="boolean|object" deprecated="false" usage="required">
<description><![CDATA[true가 설정될 경우, p_fn은 p_obj의 scope로
                   실행할 것이며, object가 설정될 경우, 해당 object의 scope로
                   실행할 것이다.]]></description>
</parameter>
</parameters>
</method>
<method name="addListener" deprecated="false" scope="static" >
<description><![CDATA[event handler를 추가한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[action이 성공이거나 defred일 경우 true,]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String|HTMLElement|Array|NodeList" deprecated="false" usage="required">
<description><![CDATA[listener에 할당할 id나
  element reference 혹은 id나 element들의 collection.]]></description>
</parameter>
<parameter name="sType" type="String" deprecated="false" usage="required">
<description><![CDATA[추가할 event의 타입]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[event가 수행하는 method]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[handler에 parameter로서 전달될 임의의 object]]></description>
</parameter>
<parameter name="override" type="Boolean|object" deprecated="false" usage="required">
<description><![CDATA[true일 결우, obj가 listener의 실행 scope가 된다.
                             object일 경우, object가 실행 scope가 된다.]]></description>
</parameter>
<parameter name="capture" type="boolen" deprecated="false" usage="required">
<description><![CDATA[capture or bubble phase]]></description>
</parameter>
</parameters>
</method>
<method name="addFocusListener" deprecated="false" scope="static" >
<description><![CDATA[focus event handler를 추가한다. (focusin event는 Internet Explorer, WebKit,
 Gecko, Opera에 대한 capture-event, focus에서 사용된다.)]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[action이 성공이거나 defred일 경우 true,]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String|HTMLElement|Array|NodeList" deprecated="false" usage="required">
<description><![CDATA[listener에 할당할 id나
  element reference 혹은 id나 element들의 collection.]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[event가 수행하는 method]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[handler에 parameter로서 전달될 임의의 object]]></description>
</parameter>
<parameter name="override" type="Boolean|object" deprecated="false" usage="required">
<description><![CDATA[true일 결우, obj가 listener의 실행 scope가 된다.
                             object일 경우, object가 실행 scope가 된다.]]></description>
</parameter>
</parameters>
</method>
<method name="removeFocusListener" deprecated="false" scope="static" >
<description><![CDATA[focus event listener를 삭제한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[unbind가 성공이면 true, 그외에는 false]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String|HTMLElement|Array|NodeList" deprecated="false" usage="required">
<description><![CDATA[listener로부터 삭제할 id나
  element reference 혹은 id나 element들의 collection.]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[event가 수행하는 method.
  fn이 undefined일 경우 event의 type에 대한 모든 event handler들은 삭제된다.]]></description>
</parameter>
</parameters>
</method>
<method name="addBlurListener" deprecated="false" scope="static" >
<description><![CDATA[blur event handler를 추가한다. (focusout event는 Internet Explorer, WebKit,
 Gecko, Opera에 대한 capture-event, focus에서 사용된다.)]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[action이 성공이거나 defred일 경우 true,]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String|HTMLElement|Array|NodeList" deprecated="false" usage="required">
<description><![CDATA[listener에 할당할 id나
  element reference 혹은 id나 element들의 collection.]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[event가 수행하는 method]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[handler에 parameter로서 전달될 임의의 object]]></description>
</parameter>
<parameter name="override" type="Boolean|object" deprecated="false" usage="required">
<description><![CDATA[true일 결우, obj가 listener의 실행 scope가 된다.
                             object일 경우, object가 실행 scope가 된다.]]></description>
</parameter>
</parameters>
</method>
<method name="removeBlurListener" deprecated="false" scope="static" >
<description><![CDATA[blur event listener를 삭제한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[unbind가 성공이면 true, 그외에는 false]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String|HTMLElement|Array|NodeList" deprecated="false" usage="required">
<description><![CDATA[listener로부터 삭제할 id나
  element reference 혹은 id나 element들의 collection.]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[event가 수행하는 method.
  fn이 undefined일 경우 event의 type에 대한 모든 event handler들은 삭제된다.]]></description>
</parameter>
</parameters>
</method>
<method name="removeListener" deprecated="false" scope="static" >
<description><![CDATA[event listener를 삭제한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[unbind가 성공이면 true, 그외에는 false]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String|HTMLElement|Array|NodeList" deprecated="false" usage="required">
<description><![CDATA[listener로부터 삭제할 id나
  element reference 혹은 id나 element들의 collection.]]></description>
</parameter>
<parameter name="sType" type="String" deprecated="false" usage="required">
<description><![CDATA[삭제할 event의 타입]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[event가 수행하는 method.
  fn이 undefined일 경우 event의 type에 대한 모든 event handler들은 삭제된다.]]></description>
</parameter>
</parameters>
</method>
<method name="getTarget" deprecated="true" scope="static" >
<description><![CDATA[event의 target element를 반환한다.
 Safari 브라우저는 종종 텍스트 노드를 제공하며, 이것은 다른 브라우저들처럼 동작하는
 텍스트 노드의 paranet로 자동적으로 resolve 된다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[the event's target]]></return-description>
</return-types>
<parameters>
<parameter name="ev" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event]]></description>
</parameter>
<parameter name="resolveTextNode" type="boolean" deprecated="false" usage="required">
<description><![CDATA[true로 설정되면, target이 텍스트 노드일 경우,]]></description>
</parameter>
</parameters>
</method>
<method name="resolveTextNode" deprecated="false" scope="static" >
<description><![CDATA[어떤 경우에는 일부 브라우저들은 targeting 된 실제 element 내부의
 텍스트 노드를 반환할 것이다.
 이런 normalizes는 getTarget and getRelatedTarget에 대한 값을 반환한다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[the normized node]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[resolve 할 노드]]></description>
</parameter>
</parameters>
</method>
<method name="getPageX" deprecated="false" scope="static" >
<description><![CDATA[Returns the event's pageX
 event의 pageX를 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[event의 pageX]]></return-description>
</return-types>
<parameters>
<parameter name="ev" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event]]></description>
</parameter>
</parameters>
</method>
<method name="getPageY" deprecated="false" scope="static" >
<description><![CDATA[event의 pageY를 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[event의 pageY]]></return-description>
</return-types>
<parameters>
<parameter name="ev" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event]]></description>
</parameter>
</parameters>
</method>
<method name="getXY" deprecated="false" scope="static" >
<description><![CDATA[index된 array로 pageX와 pageY rpoperty들을 반환한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[event의 pageX와 pageY property들 [x, y]]]></return-description>
</return-types>
<parameters>
<parameter name="ev" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event]]></description>
</parameter>
</parameters>
</method>
<method name="getRelatedTarget" deprecated="false" scope="static" >
<description><![CDATA[event의 연관된 target을 반환한다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[event의 연관된 target]]></return-description>
</return-types>
<parameters>
<parameter name="ev" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event]]></description>
</parameter>
</parameters>
</method>
<method name="getTime" deprecated="false" scope="static" >
<description><![CDATA[event의 시간을 반환한다. 시간이 포함되어 있지 않은 경우,
 event는 현재 시간을 사용하도록 변경된다.]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[event의 시간]]></return-description>
</return-types>
<parameters>
<parameter name="ev" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event]]></description>
</parameter>
</parameters>
</method>
<method name="stopEvent" deprecated="false" scope="static" >
<description><![CDATA[stopPropagation와 preventDefault에 대해 수행하는 method]]></description>
<parameters>
<parameter name="ev" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event]]></description>
</parameter>
</parameters>
</method>
<method name="stopPropagation" deprecated="false" scope="static" >
<description><![CDATA[event 확대를 중지한다.]]></description>
<parameters>
<parameter name="ev" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event]]></description>
</parameter>
</parameters>
</method>
<method name="preventDefault" deprecated="false" scope="static" >
<description><![CDATA[event의 기본 동작을 방지한다.]]></description>
<parameters>
<parameter name="ev" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event]]></description>
</parameter>
</parameters>
</method>
<method name="getEvent" deprecated="false" scope="static" >
<description><![CDATA[window object나 caller의 argument 혹은 callstack에서의 또 다른
 method의 argument에서 event를 찾는다.
 이것은 event 매니저를 통해 등록된 event들을 위해 자동으로 실행된다.
 그리고 implementer는 일반적으로 전혀 이 함수를 실행할 필요가 없다.]]></description>
<return-types>
<return-type type="Event" />
<return-description><![CDATA[the event]]></return-description>
</return-types>
<parameters>
<parameter name="e" type="Event" deprecated="false" usage="required">
<description><![CDATA[handler로부터의 event parameter]]></description>
</parameter>
<parameter name="boundEl" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[listener가 첨부될 element]]></description>
</parameter>
</parameters>
</method>
<method name="getCharCode" deprecated="false" scope="static" >
<description><![CDATA[event를 위한 문자코드를 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[event의 문자코드]]></return-description>
</return-types>
<parameters>
<parameter name="ev" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event]]></description>
</parameter>
</parameters>
</method>
<method name="isSpecialKey" deprecated="false" scope="static" >
<description><![CDATA[specialkey 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="ev" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event]]></description>
</parameter>
</parameters>
</method>
<method name="isNavKey" deprecated="false" scope="static" >
<description><![CDATA[navKey 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="ev" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event]]></description>
</parameter>
</parameters>
</method>
<method name="generateId" deprecated="false" scope="static" >
<description><![CDATA[element가 이미 ID가 없는 경우 element에 대한 유일한 ID를 생성한다.]]></description>
<return-types>
<return-type type="string" />
<return-description><![CDATA[element의 결과 id]]></return-description>
</return-types>
</method>
<method name="purgeElement" deprecated="false" scope="static" >
<description><![CDATA[addListener를 통해 주어진 element에 연결된 모든 listener를 제거한다.
 부가적으로 노드의 chidren도 제거될 수 있다.
 또한 삭제될 event의 특정 타입을 명시할 수 있다.]]></description>
<parameters>
<parameter name="el" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[제거할 element]]></description>
</parameter>
<parameter name="recurse" type="boolean" deprecated="false" usage="required">
<description><![CDATA[element의 children을 재귀적으로 제거한다.
                  주의해서 사용해야 한다.]]></description>
</parameter>
<parameter name="sType" type="string" deprecated="false" usage="required">
<description><![CDATA[제거할 listener의 optional 타입.
                 남겨둘 경우, 모든 listener들이 삭제될 것이다.]]></description>
</parameter>
</parameters>
</method>
<method name="getListeners" deprecated="false" scope="static" >
<description><![CDATA[addListener를 통해 주어진 element에 연결된 모든 listener를 반환한다.
 부가적으로 반환될 event의 특정 타입을 명시할 수 있다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[listener. 다음 필드들을 포함한다:]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="HTMLElement|string" deprecated="false" usage="required">
<description><![CDATA[검사할 element나 element id]]></description>
</parameter>
<parameter name="sType" type="string" deprecated="false" usage="required">
<description><![CDATA[반환할 listener의 optional 타입.
                 남겨둘 경우, 모든 listener들이 반환될 것이다.]]></description>
</parameter>
</parameters>
</method>
<method name="on" deprecated="false" scope="static" >
<description><![CDATA[Rui.util.LEvent.on는 addListener를 위한 alias이다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[action이 성공이거나 defred일 경우 true,]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String|HTMLElement|Array|NodeList" deprecated="false" usage="required">
<description><![CDATA[listener에 할당할 id나
  element reference 혹은 id나 element들의 collection.]]></description>
</parameter>
<parameter name="sType" type="String" deprecated="false" usage="required">
<description><![CDATA[추가할 event의 타입]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[event가 수행하는 method]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[handler에 parameter로서 전달될 임의의 object]]></description>
</parameter>
<parameter name="override" type="Boolean|object" deprecated="false" usage="required">
<description><![CDATA[true일 결우, obj가 listener의 실행 scope가 된다.
                             object일 경우, object가 실행 scope가 된다.]]></description>
</parameter>
<parameter name="capture" type="boolen" deprecated="false" usage="required">
<description><![CDATA[capture or bubble phase]]></description>
</parameter>
</parameters>
</method>
<method name="onFocus" deprecated="false" scope="static" >
<description><![CDATA[Rui.util.LEvent.onFocus는 addFocusListener 위한 alias이다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[action이 성공이거나 defred일 경우 true,]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String|HTMLElement|Array|NodeList" deprecated="false" usage="required">
<description><![CDATA[listener에 할당할 id나
  element reference 혹은 id나 element들의 collection.]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[event가 수행하는 method]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[handler에 parameter로서 전달될 임의의 object]]></description>
</parameter>
<parameter name="override" type="Boolean|object" deprecated="false" usage="required">
<description><![CDATA[true일 결우, obj가 listener의 실행 scope가 된다.
                             object일 경우, object가 실행 scope가 된다.]]></description>
</parameter>
</parameters>
</method>
<method name="onBlur" deprecated="false" scope="static" >
<description><![CDATA[Rui.util.LEvent.onBlur is an alias for addBlurListener
 Rui.util.LEvent.onBlur는 addBlurListener 위한 alias이다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[action이 성공이거나 defred일 경우 true,]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String|HTMLElement|Array|NodeList" deprecated="false" usage="required">
<description><![CDATA[listener에 할당할 id나
  element reference 혹은 id나 element들의 collection.]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[event가 수행하는 method]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[handler에 parameter로서 전달될 임의의 object]]></description>
</parameter>
<parameter name="override" type="Boolean|object" deprecated="false" usage="required">
<description><![CDATA[true일 결우, obj가 listener의 실행 scope가 된다.
                             object일 경우, object가 실행 scope가 된다.]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.LConnect" deprecated="false" >
<description>Connection Manager singleton 패턴은 비동기화 transaction들을 만들고 관리하기 위한 method를 제공한다.
 기본적으로 ajax 호출은 Rui.ajax로 호출하고 내부 콤포넌트 및 request 헤더값을 제어할 때는 제외하면 이 객체는 바로 사용하지 않는다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Connection Manager singleton 패턴은 비동기화 transaction들을 만들고 관리하기 위한 method를 제공한다.
 기본적으로 ajax 호출은 Rui.ajax로 호출하고 내부 콤포넌트 및 request 헤더값을 제어할 때는 제외하면 이 객체는 바로 사용하지 않는다.</description>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="setDefaultPostHeader" deprecated="false" scope="static" >
<description><![CDATA[기본 POST header를 override 하기 위한 member.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="b" type="boolean" deprecated="false" usage="required">
<description><![CDATA[default header를 설정하고 사용함. - true or false]]></description>
</parameter>
</parameters>
</method>
<method name="setDefaultXhrHeader" deprecated="false" scope="static" >
<description><![CDATA[기본 transaction header를 override 하기 위한 member.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="b" type="boolean" deprecated="false" usage="required">
<description><![CDATA[default header를 설정하고 사용함. - true or false]]></description>
</parameter>
</parameters>
</method>
<method name="setPollingInterval" deprecated="false" scope="static" >
<description><![CDATA[기본 polling 간격을 변경하기 위한 member.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="i" type="int" deprecated="false" usage="required">
<description><![CDATA[milliseconds 단위의 polling 간격]]></description>
</parameter>
</parameters>
</method>
<method name="asyncRequest" deprecated="false" scope="static" >
<description><![CDATA[XHR object를 통한 비동기 request를 초기화 하기 위한 method.]]></description>
<return-types>
<return-type type="object" />
<return-description><![CDATA[connection object를 반환]]></return-description>
</return-types>
<parameters>
<parameter name="method" type="string" deprecated="false" usage="required">
<description><![CDATA[HTTP transaction method]]></description>
</parameter>
<parameter name="uri" type="string" deprecated="false" usage="required">
<description><![CDATA[확실히 검증된 resource의 경로]]></description>
</parameter>
<parameter name="callback" type="callback" deprecated="false" usage="required">
<description><![CDATA[사용자 정의된 callback 함수나 object]]></description>
</parameter>
<parameter name="postData" type="string|object" deprecated="false" usage="required">
<description><![CDATA[POST body]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="required">
<description><![CDATA[config]]></description>
</parameter>
</parameters>
</method>
<method name="syncRequest" deprecated="false" scope="static" >
<description><![CDATA[Method for initiating an asynchronous request via the XHR object.]]></description>
<return-types>
<return-type type="object" />
<return-description><![CDATA[connection object를 반환]]></return-description>
</return-types>
<parameters>
<parameter name="method" type="string" deprecated="false" usage="required">
<description><![CDATA[HTTP transaction method]]></description>
</parameter>
<parameter name="uri" type="string" deprecated="false" usage="required">
<description><![CDATA[확실히 검증된 resource의 경로]]></description>
</parameter>
<parameter name="callback" type="callback" deprecated="false" usage="required">
<description><![CDATA[사용자 정의된 callback 함수나 object]]></description>
</parameter>
<parameter name="postData" type="string|object" deprecated="false" usage="required">
<description><![CDATA[POST body]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="required">
<description><![CDATA[config]]></description>
</parameter>
</parameters>
</method>
<method name="initHeader" deprecated="false" scope="static" >
<description><![CDATA[각 transaction에 대한 custom HTTP header들을 초기화 하는 method.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="label" type="string" deprecated="false" usage="required">
<description><![CDATA[HTTP header label]]></description>
</parameter>
<parameter name="value" type="string" deprecated="false" usage="required">
<description><![CDATA[HTTP header 값]]></description>
</parameter>
<parameter name="isDefault" type="string" deprecated="false" usage="required">
<description><![CDATA[특정 header가 각 transaction에
 자동적으로 전송되는 기본 header인지에 대한 여부]]></description>
</parameter>
</parameters>
</method>
<method name="resetDefaultHeaders" deprecated="false" scope="static" >
<description><![CDATA[기본 HTTP header object를 재설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setForm" deprecated="false" scope="static" >
<description><![CDATA[이 method는 form label과 값의 짝을 조합하고, encoding된 문자열을 생성한다.
 asyncRequest()는 'application/x-www-form-urlencoded'의 HTTP header Content-type을
 가진 transaction을 자동적으로 초기화 할 것이다.]]></description>
<return-types>
<return-type type="string" />
<return-description><![CDATA[HTML form field 이름과 값의 짝으로 이루어진 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="form" type="string || object" deprecated="false" usage="required">
<description><![CDATA[attribute id나 이름 혹은 form object]]></description>
</parameter>
<parameter name="optional" type="boolean" deprecated="false" usage="required">
<description><![CDATA[file upload 가능 여부]]></description>
</parameter>
<parameter name="optional" type="boolean" deprecated="false" usage="required">
<description><![CDATA[enable IE에서의 SSL을 통한 file upload 가능 여부]]></description>
</parameter>
</parameters>
</method>
<method name="abort" deprecated="false" scope="static" >
<description><![CDATA[readyState 4 상태에 도달하지 못했을 경우 transaction을 종료시키기 위한 method.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="object" deprecated="false" usage="required">
<description><![CDATA[asyncRequest에 의해 반환되는 connection object]]></description>
</parameter>
<parameter name="callback" type="object" deprecated="false" usage="required">
<description><![CDATA[사용자 정의된 callback object]]></description>
</parameter>
<parameter name="isTimeout" type="string" deprecated="false" usage="required">
<description><![CDATA[callback timeout의 결과 abort 경우를 나타내기 위한 bollean값]]></description>
</parameter>
</parameters>
</method>
<method name="isCallInProgress" deprecated="false" scope="static" >
<description><![CDATA[transaction이 아직 처리중인지에 대해서 결정한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="o" type="object" deprecated="false" usage="required">
<description><![CDATA[asyncRequest에 의해 반환되는 connection object]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LAttributeProvider" deprecated="false" >
<description>Rui.util.LAttribute instance를 제공하고 관리한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Rui.util.LAttribute instance를 제공하고 관리한다.</description>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="get" deprecated="false" scope="instance" >
<description><![CDATA[attribute의 현재 값을 반환한다.]]></description>
<return-types>
<return-type type="Any" />
<return-description><![CDATA[attribute의 현재 값]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[반환될 attribute의 값]]></description>
</parameter>
</parameters>
</method>
<method name="set" deprecated="false" scope="instance" >
<description><![CDATA[config의 값을 설정한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[값의 설정 여부]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[attribute의 이름]]></description>
</parameter>
<parameter name="value" type="Any" deprecated="false" usage="required">
<description><![CDATA[attribute에 적용할 값]]></description>
</parameter>
<parameter name="silent" type="boolean" deprecated="false" usage="required">
<description><![CDATA[change event들의 억제 여부]]></description>
</parameter>
</parameters>
</method>
<method name="getAttributeKeys" deprecated="false" scope="instance" >
<description><![CDATA[attribute 이름들에 대한 array를 반환한다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[attribute 이름들의 array]]></return-description>
</return-types>
</method>
<method name="setAttributes" deprecated="false" scope="instance" >
<description><![CDATA[여러 attribute의 값을 설정한다.]]></description>
<parameters>
<parameter name="map" type="Object" deprecated="false" usage="required">
<description><![CDATA[attribute들의 key-value map]]></description>
</parameter>
<parameter name="silent" type="boolean" deprecated="false" usage="required">
<description><![CDATA[change event들의 억제 여부]]></description>
</parameter>
</parameters>
</method>
<method name="resetValue" deprecated="false" scope="instance" >
<description><![CDATA[특정 attribute의 값을 초기값으로 재설정한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[값의 설정 여부]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[attribute의 이름]]></description>
</parameter>
<parameter name="silent" type="boolean" deprecated="false" usage="required">
<description><![CDATA[change event들의 억제 여부]]></description>
</parameter>
</parameters>
</method>
<method name="refresh" deprecated="false" scope="instance" >
<description><![CDATA[attribute의 값을 현재값으로 설정한다.]]></description>
<parameters>
<parameter name="key" type="String | Array" deprecated="false" usage="required">
<description><![CDATA[refresh할 attribute]]></description>
</parameter>
<parameter name="silent" type="boolean" deprecated="false" usage="required">
<description><![CDATA[change event들의 억제 여부]]></description>
</parameter>
</parameters>
</method>
<method name="register" deprecated="true" scope="instance" >
<description><![CDATA[LAttributeProvider instance에 attribute를 추가한다.]]></description>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[attribute의 이름]]></description>
</parameter>
<parameter name="map" type="Object" deprecated="false" usage="required">
<description><![CDATA[attribute의 property를 포함하고 있는 key-value map]]></description>
</parameter>
</parameters>
</method>
<method name="setAttributeConfig" deprecated="false" scope="instance" >
<description><![CDATA[attribute insatance의 property들을 업데이트 하거나 설정한다.]]></description>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[attribute의 이름]]></description>
</parameter>
<parameter name="map" type="Object" deprecated="false" usage="required">
<description><![CDATA[attribute property들의 key-value map]]></description>
</parameter>
<parameter name="init" type="boolean" deprecated="false" usage="required">
<description><![CDATA[초기 설정 적용 여부]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LAttribute" deprecated="false" >
<description>LAttribute의 configuration을 제공한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LAttribute의 configuration을 제공한다.</description>
<parameters>
<parameter name="The" type="Object" deprecated="false" usage="instance">
<description><![CDATA[initial LAttribute.]]></description>
</parameter>
<parameter name="LAttribute" type="Rui.util.LAttributeProvider" deprecated="false" usage="instance">
<description><![CDATA[instance의 owner.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="name" type="String" deprecated="false" scope="instance" >
<description>attribute의 이름</description>
</property>
<property name="value" type="String" deprecated="false" scope="instance" >
<description>attribute의 값</description>
</property>
<property name="owner" type="Rui.util.LAttributeProvider" deprecated="false" scope="instance" >
<description>attribute의 owner</description>
</property>
<property name="readOnly" type="Boolean" deprecated="false" scope="instance" >
<description>attribute의 read only 여부</description>
</property>
<property name="writeOnce" type="Boolean" deprecated="false" scope="instance" >
<description>atrribute의 written once 여부</description>
</property>
<property name="method" type="Function" deprecated="false" scope="instance" >
<description>attribute의 값을 설정할때 사용하는 method.
 method는 오직 인자로만 새 값을 받는다.</description>
</property>
<property name="validator" type="Function" deprecated="false" scope="instance" >
<description>attribute의 값을 설정할때 사용하는 validator</description>
</property>
</properties>
<methods>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[attribute의 현재 값을 받는다.]]></description>
<return-types>
<return-type type="any" />
<return-description><![CDATA[attribute의 현재값]]></return-description>
</return-types>
</method>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[attribute의 값을 설정하고 beforeChange와 change event를 발생시킨다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[값의 설정 여부]]></return-description>
</return-types>
<parameters>
<parameter name="value" type="Any" deprecated="false" usage="required">
<description><![CDATA[attribute에 적용되는 값]]></description>
</parameter>
<parameter name="silent" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 만약 true면, change event를 발생시키지 않는다.]]></description>
</parameter>
</parameters>
</method>
<method name="resetValue" deprecated="false" scope="instance" >
<description><![CDATA[Resets the value to the initial config value.
 초기 config 값을 재설정한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[값의 설정 여부]]></return-description>
</return-types>
</method>
<method name="resetConfig" deprecated="false" scope="instance" >
<description><![CDATA[초기 config 상태로 attribute config를 재설정 한다.]]></description>
</method>
<method name="refresh" deprecated="false" scope="instance" >
<description><![CDATA[현재 값으로 값을 재설정한다.
 값들이 실제 property와 동기화 되지 않았을 경우에 유용하다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[값의 설정 여부]]></return-description>
</return-types>
</method>
</methods>
</class>
<class type="Rui.LElement" deprecated="false" >
<description>Element는 event listener들을 쉽게 추가하고, dom method들을 사용하거나 sttribute를 관리하는 wrapper object를 제공한다.
 &amp;lt;br/&amp;gt;sample : &amp;lt;a href="/sample/general/base/elementSample.html"&amp;gt;/sample/general/base/elementSample.html&amp;lt;/a&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Element는 event listener들을 쉽게 추가하고, dom method들을 사용하거나 sttribute를 관리하는 wrapper object를 제공한다.
 &amp;lt;br/&amp;gt;sample : &amp;lt;a href="/sample/general/base/elementSample.html"&amp;gt;/sample/general/base/elementSample.html&amp;lt;/a&amp;gt;</description>
<parameters>
<parameter name="el" type="HTMLElement | String" deprecated="false" usage="instance">
<description><![CDATA[LElement를 표현하는 html element]]></description>
</parameter>
<parameter name="map" type="Object" deprecated="false" usage="instance">
<description><![CDATA[초기 config 이름과 값들의 key-value map]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="dom" type="Object" deprecated="false" scope="instance" >
<description>LElement가 가지고 있는 실제 html dom 객체</description>
</property>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>LElement가 가지고 있는 실제 html dom 객체의 id</description>
</property>
</properties>
<events>
<event name="available" deprecated="false">
<description><![CDATA[
페이지 로드시 dom 객체가 로드되면 수행되는 이벤트
]]></description>
</event>
<event name="appendTo" deprecated="false">
<description><![CDATA[
Fires after the Element is appended to another Element.
]]></description>
</event>
</events>
<methods>
<method name="select" deprecated="false" scope="instance" >
<description><![CDATA[CSS Selector로 child 객체를 LElement객체로 만들어 Rui.LElementList로 리턴한다.]]></description>
<return-types>
<return-type type="Rui.LElementList" />
<return-description><![CDATA[Rui.LElementList 객체 리턴]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[CSS selector 문자열]]></description>
</parameter>
<parameter name="firstOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 찾은 객체의 무조건 첫번째 객체를 리턴한다.]]></description>
</parameter>
</parameters>
</method>
<method name="query" deprecated="false" scope="instance" >
<description><![CDATA[CSS Selector로 child html 객체를 배열로 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[Array 객체 리턴]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[CSS selector 문자열]]></description>
</parameter>
<parameter name="firstOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 찾은 객체의 무조건 첫번째 객체를 리턴한다.]]></description>
</parameter>
</parameters>
</method>
<method name="filter" deprecated="false" scope="instance" >
<description><![CDATA[CSS Selector로 현재 node중 selector로 지정된 child node만 배열로 리턴한다.]]></description>
<return-types>
<return-type type="Rui.LElementList" />
<return-description><![CDATA[Rui.LElementList 객체 리턴]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[CSS selector 문자열]]></description>
</parameter>
</parameters>
</method>
<method name="test" deprecated="false" scope="instance" >
<description><![CDATA[CSS Selector로 현재 dom이 selector에 해당되는 객체인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[객체 리턴]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[CSS selector 문자열]]></description>
</parameter>
</parameters>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[Dom객체의 value값을 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[객체에 들어 있는 값]]></return-description>
</return-types>
</method>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[Dom객체의 value값을 저장한다. dom.value는 change 이벤트가 발생하지 않으므로 사용하면 안된다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
</return-types>
<parameters>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[저장할 결과값]]></description>
</parameter>
</parameters>
</method>
<method name="setChecked" deprecated="false" scope="instance" >
<description><![CDATA[Dom객체의 checked값을 저장한다. dom.value는 change 이벤트가 발생하지 않으므로 사용하면 안된다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
</return-types>
<parameters>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[저장할 결과값]]></description>
</parameter>
</parameters>
</method>
<method name="isChecked" deprecated="false" scope="instance" >
<description><![CDATA[Dom객체의 checked값을 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="getElementsByTagName" deprecated="false" scope="instance" >
<description><![CDATA[HTMLElement method를 위한 Wrapper.]]></description>
<return-types>
<return-type type="HTMLCollection" />
<return-description><![CDATA[DOM element들의 collection.]]></return-description>
</return-types>
<parameters>
<parameter name="tag" type="String" deprecated="false" usage="required">
<description><![CDATA[collect 할 tag 이름]]></description>
</parameter>
</parameters>
</method>
<method name="hasChildNodes" deprecated="false" scope="instance" >
<description><![CDATA[HTMLElement method를 위한 Wrapper.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[element가 child node들을 가지고 있는지에 대한 여부]]></return-description>
</return-types>
</method>
<method name="getChildren" deprecated="false" scope="instance" >
<description><![CDATA[HTMLElement chid 노드들의 array를 반환한다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[HTMLElement들의 static array]]></return-description>
</return-types>
</method>
<method name="on" deprecated="false" scope="instance" >
<description><![CDATA[주어진 event에 대해 listener를 추가한다.
 이것은 DOM이나 customEvent listener들이 될 수 있다.
 frieEvent를 통해 발생한 어떤 event들도 listen될 수 있다.
 모든 handler들은 event object를 받는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="type" type="String" deprecated="false" usage="required">
<description><![CDATA[listen될 event의 이름]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[event가 발생할때 호출할 handler]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[handler의 scope를 위해 사용할 object]]></description>
</parameter>
<parameter name="override" type="boolean|Object" deprecated="false" usage="required">
<description><![CDATA[만약 true면, 전달된 obj가 listener의 실행 scope가 된다.
                          만약 object면, 그 object가 실행 scope가 된다.]]></description>
</parameter>
</parameters>
</method>
<method name="unOn" deprecated="false" scope="instance" >
<description><![CDATA[event listener를 삭제한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="type" type="String" deprecated="false" usage="required">
<description><![CDATA[listen될 event의 이름]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[event가 발생할때 호출할 handler]]></description>
</parameter>
</parameters>
</method>
<method name="unOnAll" deprecated="false" scope="instance" >
<description><![CDATA[모든 event listener를 삭제한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="addClass" deprecated="false" scope="instance" >
<description><![CDATA[Dom에 css를 추가한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="className" type="String" deprecated="false" usage="required">
<description><![CDATA[추가할 className]]></description>
</parameter>
</parameters>
</method>
<method name="hasClass" deprecated="false" scope="instance" >
<description><![CDATA[Dom에 css가 존재하는지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[element가 class name을 가지고 있는지에 대한 여부]]></return-description>
</return-types>
<parameters>
<parameter name="className" type="String" deprecated="false" usage="required">
<description><![CDATA[The className to add]]></description>
</parameter>
</parameters>
</method>
<method name="removeClass" deprecated="false" scope="instance" >
<description><![CDATA[Dom에 적용된 css를 삭제한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="className" type="String|Array" deprecated="false" usage="required">
<description><![CDATA[삭제할 className]]></description>
</parameter>
</parameters>
</method>
<method name="getElementsByClassName" deprecated="false" scope="instance" >
<description><![CDATA[Dom method를 위한 Wrapper.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[HTMLElement들의 array]]></return-description>
</return-types>
<parameters>
<parameter name="className" type="String" deprecated="false" usage="required">
<description><![CDATA[collect할 className]]></description>
</parameter>
<parameter name="tag" type="String" deprecated="false" usage="required">
<description><![CDATA[(optional) class name과 함께 사용할 태그]]></description>
</parameter>
</parameters>
</method>
<method name="setStyle" deprecated="false" scope="instance" >
<description><![CDATA[Dom에 style을 주는 메소드]]></description>
<parameters>
<parameter name="property" type="String" deprecated="false" usage="required">
<description><![CDATA[설정할 style property]]></description>
</parameter>
<parameter name="value" type="String" deprecated="false" usage="required">
<description><![CDATA[style property에 적용할 값]]></description>
</parameter>
</parameters>
</method>
<method name="getStyle" deprecated="false" scope="instance" >
<description><![CDATA[Dom에 style을 가져오는 메소드]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[property의 현재값]]></return-description>
</return-types>
<parameters>
<parameter name="property" type="String" deprecated="false" usage="required">
<description><![CDATA[조회할 style property]]></description>
</parameter>
</parameters>
</method>
<method name="setStyles" deprecated="false" scope="instance" >
<description><![CDATA[Dom에 style들을 주는 메소드(json 형 객체)]]></description>
<return-types>
<return-type type="Rui.LElement" />
</return-types>
<parameters>
<parameter name="props" type="Object" deprecated="false" usage="required">
<description><![CDATA[설정할 style property 객체]]></description>
</parameter>
</parameters>
</method>
<method name="getStyles" deprecated="false" scope="instance" >
<description><![CDATA[Dom에 style들을 가져오는 메소드(json 형 객체)]]></description>
</method>
<method name="findParent" deprecated="false" scope="instance" >
<description><![CDATA[전달된 simple selector의 match를 위한 현재 node와 parent node를 LElement로 리턴한다.(예: div.some-class or span:first-child)]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[LElement 객체]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[test를 위한 simple selector]]></description>
</parameter>
<parameter name="maxDepth" type="Number/Mixed" deprecated="false" usage="required">
<description><![CDATA[(optional) element나 number로서 검색하기 위한 depth max값 (defaults to 10 || document.body)]]></description>
</parameter>
</parameters>
</method>
<method name="findParentNode" deprecated="false" scope="instance" >
<description><![CDATA[전달된 simple selector의 match를 위한 parent node들을 찾는다.(예: div.some-class or span:first-child)]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[매치되는 DOM node(매치되는 값을 찾지 못하면 null)]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[test를 위한 simple selector]]></description>
</parameter>
<parameter name="maxDepth" type="Number/Mixed" deprecated="false" usage="required">
<description><![CDATA[(optional) element나 number로서 검색하기 위한 depth max값 (defaults to 10 || document.body)]]></description>
</parameter>
<parameter name="returnEl" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) DOM node 대신 Rui.LElement object를 반환하기 위해서는 True]]></description>
</parameter>
</parameters>
</method>
<method name="parent" deprecated="false" scope="instance" >
<description><![CDATA[해당 element에 대한 parent node를 가져오고, 부가적으로 일치하는 selector를 찾는다.]]></description>
<return-types>
<return-type type="Rui.LElement|HTMLElement" />
<return-description><![CDATA[parent node 혹은 null]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[(optional) 전달된 simple selector와 일치하는 parent node를 찾는다.]]></description>
</parameter>
<parameter name="returnDom" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) Rui.LElement 대신 raw dom node를 반환하기 위해서는 True]]></description>
</parameter>
</parameters>
</method>
<method name="parent" deprecated="false" scope="instance" >
<description><![CDATA[해당 element에 대한 parent node를 가져오고, 부가적으로 일치하는 selector를 찾는다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[parent LElement]]></return-description>
</return-types>
<parameters>
<parameter name="depth" type="int" deprecated="false" usage="required">
<description><![CDATA[상위 부모 객체의 depth까지 찾는다 부모가 null이 나오면 그전까지 찾는다.]]></description>
</parameter>
</parameters>
</method>
<method name="getPreviousSibling" deprecated="false" scope="instance" >
<description><![CDATA[이전에 sibling되어 있는 HTMLElement를 반환한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement나 찾지 못하는 경우 null]]></return-description>
</return-types>
</method>
<method name="getNextSibling" deprecated="false" scope="instance" >
<description><![CDATA[다음에 sibling 되어 있는 HTMLElement를 반환한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[HTMLElement나 찾지 못하는 경우 null]]></return-description>
</return-types>
</method>
<method name="insertBefore" deprecated="false" scope="instance" >
<description><![CDATA[현재 dom에 이전 sibling으로 새 node를 삽입한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="newNode" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[삽입될 node]]></description>
</parameter>
</parameters>
</method>
<method name="insertAfter" deprecated="false" scope="instance" >
<description><![CDATA[현재 dom에 다음 sibling으로서 새로운 node를 삽입한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="newNode" type="String | HTMLElement" deprecated="false" usage="required">
<description><![CDATA[삽입될 node]]></description>
</parameter>
</parameters>
</method>
<method name="remove" deprecated="false" scope="instance" >
<description><![CDATA[DOM으로 부터 해당 element를 삭제하고 캐시로부터 그것을 지운다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
</return-types>
</method>
<method name="removeNode" deprecated="false" scope="instance" >
<description><![CDATA[document로 부터 DOM node를 삭제한다. body node는 전달될 경우 무시될 것이다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
</return-types>
</method>
<method name="appendChild" deprecated="false" scope="instance" >
<description><![CDATA[dom객체 하위에 child dom객체를 붙인다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="child" type="Rui.LElement || HTMLElement" deprecated="false" usage="required">
<description><![CDATA[추가할 element.]]></description>
</parameter>
</parameters>
</method>
<method name="appendTo" deprecated="false" scope="instance" >
<description><![CDATA[제공된 parent 노드에 HTMLElement를 추가한다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[추가된 DOM element]]></return-description>
</return-types>
<parameters>
<parameter name="parentNode" type="HTMLElement | Element" deprecated="false" usage="required">
<description><![CDATA[추가될 노드]]></description>
</parameter>
<parameter name="before" type="HTMLElement | Element" deprecated="false" usage="required">
<description><![CDATA[이전에 삽입할 부가적인 노드]]></description>
</parameter>
</parameters>
</method>
<method name="appendChildByAjax" deprecated="false" scope="instance" >
<description><![CDATA[ajax를 호출하여 해당 결과를 현재 dom객체에 추가한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="option" type="Object" deprecated="false" usage="required">
<description><![CDATA[호출시 속성 (ajax 속성)]]></description>
</parameter>
</parameters>
</method>
<method name="getHeight" deprecated="false" scope="instance" >
<description><![CDATA[element의 height offset을 반환한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[element의 height]]></return-description>
</return-types>
<parameters>
<parameter name="contentHeight" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) height의 border, padding의 음수값을 가져오려면 True]]></description>
</parameter>
</parameters>
</method>
<method name="getWidth" deprecated="false" scope="instance" >
<description><![CDATA[element의 width offset을 반환한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[element의 width]]></return-description>
</return-types>
<parameters>
<parameter name="contentWidth" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) width의 border, padding의 음수값을 가져오려면 True]]></description>
</parameter>
</parameters>
</method>
<method name="getBorderWidth" deprecated="false" scope="instance" >
<description><![CDATA[특정 side에 대한 border의 width를 가져온다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[추가적으로 전달된 side들의 width]]></return-description>
</return-types>
<parameters>
<parameter name="side" type="String" deprecated="false" usage="required">
<description><![CDATA[여러값들을 추가하기 위해 t, l, r, b나 이런 것들의 어떤 조합도 가능하다.]]></description>
</parameter>
</parameters>
</method>
<method name="getPadding" deprecated="false" scope="instance" >
<description><![CDATA[특정 side에 대한 padding의 width를 가져온다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[추가적으로 전달된 side들의 padding]]></return-description>
</return-types>
<parameters>
<parameter name="side" type="String" deprecated="false" usage="required">
<description><![CDATA[여러값들을 추가하기 위해 t, l, r, b나 이런 것들의 어떤 조합도 가능하다.]]></description>
</parameter>
</parameters>
</method>
<method name="setVisibilityMode" deprecated="false" scope="instance" >
<description><![CDATA[visMode가 true면 visibility에 설정 false거나 없으면 display에 설정한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="visMode" type="boolean" deprecated="false" usage="required">
<description><![CDATA[visibility로 설정할지 display로 설정할지 결정하는 값]]></description>
</parameter>
</parameters>
</method>
<method name="show" deprecated="false" scope="instance" >
<description><![CDATA[객체를 보이게 설정하는 메소드]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="anim" type="Boolean|Rui.fx.LAnim" deprecated="false" usage="required">
<description><![CDATA[(optional) Animation 여부를 설정한다. Boolean값이면 디폴트 animation을 실행하고 객체면 해당 객체에 설정된 animation을 수행한다.]]></description>
</parameter>
</parameters>
</method>
<method name="hide" deprecated="false" scope="instance" >
<description><![CDATA[객체를 안보이게 설정하는 메소드]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="anim" type="Boolean|Rui.fx.LAnim" deprecated="false" usage="required">
<description><![CDATA[(optional) Animation 여부를 설정한다. Boolean값이면 디폴트 animation을 실행하고 객체면 해당 객체에 설정된 animation을 수행한다.]]></description>
</parameter>
</parameters>
</method>
<method name="isShow" deprecated="false" scope="instance" >
<description><![CDATA[객체가 보이는지 여부를 확인하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="html" deprecated="false" scope="instance" >
<description><![CDATA[innerHTML에 html 내용을 채워넣는 메소드]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="html" type="String" deprecated="false" usage="required">
<description><![CDATA[innerHTML 넣은 HTML 문자열]]></description>
</parameter>
</parameters>
</method>
<method name="getHtml" deprecated="false" scope="instance" >
<description><![CDATA[innerHTML에 html 내용을 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[html 내용]]></return-description>
</return-types>
</method>
<method name="toggle" deprecated="false" scope="instance" >
<description><![CDATA[출력상태가 show이면 hide로 hide면 show로 변경한다.]]></description>
<return-types>
<return-type type="Rui.Elemnent" />
<return-description><![CDATA[this]]></return-description>
</return-types>
</method>
<method name="hover" deprecated="false" scope="instance" >
<description><![CDATA[마우스가 Element에 안밖으로 움직일때 전달된 함수들을 호출하기 위한 event 핸들러를 설정한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="overFn" type="Function" deprecated="false" usage="required">
<description><![CDATA[마우스가 Element에 들어갔을해 호출할 함수]]></description>
</parameter>
<parameter name="outFn" type="Function" deprecated="false" usage="required">
<description><![CDATA[마우스가 Element에서 나왔을때 호출할 함수]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[(optional) 함수들이 실행될 scope(&amp;lt;tt&amp;gt;this&amp;lt;/tt&amp;gt; reference). 기본적으로 Element의 DOM element.]]></description>
</parameter>
<parameter name="options" type="Object" deprecated="false" usage="required">
<description><![CDATA[(optional) listener를 위한 옵션들. {@link Rui.util.LEventProvider#addListener the &amp;lt;tt&amp;gt;options&amp;lt;/tt&amp;gt; parameter} 를 참조.]]></description>
</parameter>
</parameters>
</method>
<method name="setAttribute" deprecated="false" scope="instance" >
<description><![CDATA[HTMLElement dom 객체의 attribute 속성을 추가한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[key값]]></description>
</parameter>
<parameter name="value" type="String" deprecated="false" usage="required">
<description><![CDATA[value값]]></description>
</parameter>
</parameters>
</method>
<method name="getAttribute" deprecated="false" scope="instance" >
<description><![CDATA[HTMLElement dom 객체의 attribute 속성값을 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[attribute 속성 값]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[key값]]></description>
</parameter>
</parameters>
</method>
<method name="removeAttribute" deprecated="false" scope="instance" >
<description><![CDATA[HTMLElement dom 객체의 attribute 속성을 삭제한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[key값]]></description>
</parameter>
</parameters>
</method>
<method name="click" deprecated="false" scope="instance" >
<description><![CDATA[HTMLElement dom 객체의 click 메소드를 호출한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.LElementList" deprecated="false" >
<description>Element 객체를 Chain 구조로 처리하는 객체 (Rui.LElement의 메소드를 모두 사용할 수 있음.)</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Element 객체를 Chain 구조로 처리하는 객체 (Rui.LElement의 메소드를 모두 사용할 수 있음.)</description>
<parameters>
<parameter name="The" type="HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[html element that]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="add" deprecated="false" scope="instance" >
<description><![CDATA[Element객체 추가]]></description>
<return-types>
<return-type type="Rui.LElementList" />
<return-description><![CDATA[Rui.LElementList 객체 리턴]]></return-description>
</return-types>
<parameters>
<parameter name="els" type="Rui.LElement" deprecated="false" usage="required">
<description><![CDATA[추가할 Element 객체]]></description>
</parameter>
</parameters>
</method>
<method name="getAt" deprecated="false" scope="instance" >
<description><![CDATA[index에 대한 Element객체 리턴]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[Rui.LElement 객체 리턴]]></return-description>
</return-types>
<parameters>
<parameter name="index" type="int" deprecated="false" usage="required">
<description><![CDATA[리턴할 위치]]></description>
</parameter>
</parameters>
</method>
<method name="clear" deprecated="false" scope="instance" >
<description><![CDATA[배열 초기화 메소드]]></description>
<return-types>
<return-type type="Rui.LElementList" />
<return-description><![CDATA[Rui.LElementList 객체 리턴]]></return-description>
</return-types>
</method>
<method name="select" deprecated="false" scope="instance" >
<description><![CDATA[item들의 dom select 메소드]]></description>
<return-types>
<return-type type="Rui.LElementList" />
<return-description><![CDATA[Rui.LElementList 객체 리턴]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[selector 문장]]></description>
</parameter>
<parameter name="firstOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 첫번째 Dom을 리턴할지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="appendTo" deprecated="false" scope="instance" >
<description><![CDATA[item들의 parent dom에 붙인다ㅏ.]]></description>
<return-types>
<return-type type="Rui.LElementList" />
<return-description><![CDATA[Rui.LElementList 객체 리턴]]></return-description>
</return-types>
<parameters>
<parameter name="parent" type="HTMLElement|Rui.LElement" deprecated="false" usage="required">
<description><![CDATA[parent 객체]]></description>
</parameter>
</parameters>
</method>
<method name="toArray" deprecated="false" scope="instance" >
<description><![CDATA[LElement 배열을 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
</method>
<method name="test" deprecated="false" scope="instance" >
<description><![CDATA[현재 item들이 selector에 맞는 객체인지 확인하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[selector 문장]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.util.LDomSelector" deprecated="false" >
<description>DOM element들의 collecting과 filtering에 도움을 주는 method들을 제공한다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>DOM element들의 collecting과 filtering에 도움을 주는 method들을 제공한다.</description>
</constructor>
</constructors>
<properties>
<property name="document" type="object" deprecated="false" scope="instance" >
<description>query들을 사용하기 위한 기본 document</description>
</property>
</properties>
<methods>
<method name="test" deprecated="false" scope="static" >
<description><![CDATA[제공된 node가 제공된 selector와 일치하는지 테스트한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[selector와 일치하는지에 대한 여부]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement | String" deprecated="false" usage="required">
<description><![CDATA[테스트될 HTMLElement로의 id나 node reference]]></description>
</parameter>
<parameter name="selector" type="string" deprecated="false" usage="required">
<description><![CDATA[node를 상대로 테스트할 CSS LDomSelector]]></description>
</parameter>
</parameters>
</method>
<method name="filter" deprecated="false" scope="static" >
<description><![CDATA[주어진 CSS selector에 기반한 node들의 집합을 filtering.]]></description>
<return-types>
<return-type type="array" />
<return-description><![CDATA[selector와 일치하는 제공된 array로 부터의 node들의 array]]></return-description>
</return-types>
<parameters>
<parameter name="nodes" type="array" deprecated="false" usage="required">
<description><![CDATA[filter할 node/id들의 집합]]></description>
</parameter>
<parameter name="selector" type="string" deprecated="false" usage="required">
<description><![CDATA[각 node를 테스트 하기 위해 사용되는 selector]]></description>
</parameter>
</parameters>
</method>
<method name="query" deprecated="false" scope="static" >
<description><![CDATA[주어진 CSS selector에 기반한 node들의 집합을 받는다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[주어진 selector와 일치하는 node들의 array]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="string" deprecated="false" usage="required">
<description><![CDATA[노드를 상대로 테스트할 CSS LDomSelector]]></description>
</parameter>
<parameter name="root" type="HTMLElement | String" deprecated="false" usage="required">
<description><![CDATA[(optional) 쿼리가 시작할 id나 HTMLElement. 기본은 LDomSelector.document.]]></description>
</parameter>
<parameter name="firstOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) 첫번째 일치값만 반환할지에 대한 여부]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LDateLocale" deprecated="false" >
<description></description>
<constructors>
<constructor scope="instance" deprecated="false">
<description></description>
</constructor>
</constructors>
<methods>
<method name="getInstance" deprecated="false" scope="static" >
<description><![CDATA[인스턴스를 얻어오는 메소드]]></description>
<return-types>
<return-type type="Rui.util.LDateLocale" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.LBase64" deprecated="false" >
<description>Base64 암호화를 지원하는 유틸리티</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Base64 암호화를 지원하는 유틸리티</description>
</constructor>
</constructors>
<methods>
<method name="encode" deprecated="false" scope="static" >
<description><![CDATA[암호화 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="input" type="String" deprecated="false" usage="required">
<description><![CDATA[입력값]]></description>
</parameter>
</parameters>
</method>
<method name="decode" deprecated="false" scope="static" >
<description><![CDATA[복호화 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="input" type="String" deprecated="false" usage="required">
<description><![CDATA[입력값]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LCookie" deprecated="false" >
<description>LCookie utility.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>LCookie utility.</description>
</constructor>
</constructors>
<methods>
<method name="get" deprecated="false" scope="static" >
<description><![CDATA[주어진 이름에 대한 쿠키값을 반환한다.]]></description>
<return-types>
<return-type type="Variant" />
<return-description><![CDATA[converter가 명시되지 않은 경우, 문자열이나 쿠키가 존재하지 않는다면 null을 반환한다.]]></return-description>
</return-types>
<parameters>
<parameter name="name" type="String" deprecated="false" usage="required">
<description><![CDATA[조회할 쿠키의 이름]]></description>
</parameter>
<parameter name="converter" type="Function" deprecated="false" usage="required">
<description><![CDATA[(Optional) 함수를 반환하기 전에 값에 대해 실행하기 위한 함수.
                  함수는 쿠키가 존재하지 않는 경우 사용되지 않는다.]]></description>
</parameter>
</parameters>
</method>
<method name="remove" deprecated="false" scope="static" >
<description><![CDATA[이전에 유효 기간을 설정함으로 인하여 컴퓨터에서 쿠키를 삭제한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[생성된 쿠키 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="name" type="String" deprecated="false" usage="required">
<description><![CDATA[삭제할 쿠키의 이름]]></description>
</parameter>
<parameter name="options" type="Object" deprecated="false" usage="required">
<description><![CDATA[(Optional) 하나 혹은 여러개의 쿠키 옵션들을 포함한 object:]]></description>
</parameter>
</parameters>
</method>
<method name="set" deprecated="false" scope="static" >
<description><![CDATA[Sets a cookie with a given name and value.
 주어진 이름과 값으로 쿠키를 설정한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[생성된 쿠키 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="name" type="String" deprecated="false" usage="required">
<description><![CDATA[설정할 쿠키의 이름]]></description>
</parameter>
<parameter name="value" type="Variant" deprecated="false" usage="required">
<description><![CDATA[쿠키에 대한 설정할 값]]></description>
</parameter>
<parameter name="options" type="Object" deprecated="false" usage="required">
<description><![CDATA[(Optional) 하나 혹은 여러개의 쿠키 옵션들을 포함한 object:]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="prototype.String" deprecated="false" >
<description>static String 클래스는 String 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>static String 클래스는 String 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
</constructor>
</constructors>
<methods>
<method name="trim" deprecated="false" scope="instance" >
<description><![CDATA[문자열 앞뒤 공백 제거]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[공백 제거된 문자열]]></return-description>
</return-types>
</method>
<method name="lPad" deprecated="false" scope="instance" >
<description><![CDATA[문자열의 왼쪽부터 특정 문자를 주어진 갯수만큼 붙여넣는다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="pad" type="String" deprecated="false" usage="required">
<description><![CDATA[padding할 문자]]></description>
</parameter>
<parameter name="r" type="int" deprecated="false" usage="required">
<description><![CDATA[붙이는 갯수]]></description>
</parameter>
</parameters>
</method>
<method name="rPad" deprecated="false" scope="instance" >
<description><![CDATA[문자열의 오른쪽부터 특정 문자를 주어진 갯수만큼 붙여넣는다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="pad" type="String" deprecated="false" usage="required">
<description><![CDATA[padding할 문자]]></description>
</parameter>
<parameter name="r" type="int" deprecated="false" usage="required">
<description><![CDATA[붙이는 갯수]]></description>
</parameter>
</parameters>
</method>
<method name="toDate" deprecated="false" scope="instance" >
<description><![CDATA[문자열을 주어진 format에 따라 Date 객체로 변환]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[oDate]]></return-description>
</return-types>
<parameters>
<parameter name="oConfig" type="Object|String" deprecated="false" usage="required">
<description><![CDATA[format or oConfig.format/oConfig.locale]]></description>
</parameter>
</parameters>
</method>
<method name="toXml" deprecated="false" scope="instance" >
<description><![CDATA[입력된 xml 문자열을 xml document object model로 변환해서 return]]></description>
<return-types>
<return-type type="object" />
<return-description><![CDATA[xml dom]]></return-description>
</return-types>
</method>
<method name="trimAll" deprecated="false" scope="instance" >
<description><![CDATA[문자열에 모든 공백 제거]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[모든 공백 제거된 문자열]]></return-description>
</return-types>
</method>
<method name="cut" deprecated="false" scope="instance" >
<description><![CDATA[문자열을 주어진 길이만큼 잘라낸다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[잘라낸 후 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="start" type="int" deprecated="false" usage="required">
<description><![CDATA[시작위치]]></description>
</parameter>
<parameter name="length" type="int" deprecated="false" usage="required">
<description><![CDATA[잘라낼 길이]]></description>
</parameter>
</parameters>
</method>
<method name="lastCut" deprecated="false" scope="instance" >
<description><![CDATA[문자열을 처음부터 주어진 위치까지 잘라낸다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[잘라낸 후 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="pos" type="int" deprecated="false" usage="required">
<description><![CDATA[잘라낼 위치]]></description>
</parameter>
</parameters>
</method>
<method name="startsWith" deprecated="false" scope="instance" >
<description><![CDATA[시작 문자열이 pattern에 맞는지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[결과]]></return-description>
</return-types>
<parameters>
<parameter name="pattern" type="String" deprecated="false" usage="required">
<description><![CDATA[문자패턴]]></description>
</parameter>
</parameters>
</method>
<method name="endsWith" deprecated="false" scope="instance" >
<description><![CDATA[종료 문자열이 pattern에 맞는지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[결과]]></return-description>
</return-types>
<parameters>
<parameter name="pattern" type="String" deprecated="false" usage="required">
<description><![CDATA[문자패턴]]></description>
</parameter>
</parameters>
</method>
<method name="simpleReplace" deprecated="false" scope="instance" >
<description><![CDATA[자바스크립트의 내장 객체인 String 객체에 simpleReplace 메소드를 추가한다. simpleReplace 메소드는
 스트링 내에 있는 특정 스트링을 다른 스트링으로 모두 변환한다. String 객체의 replace 메소드와 동일한
 기능을 하지만 간단한 스트링의 치환시에 보다 유용하게 사용할 수 있다.
 &amp;lt;pre&amp;gt;
     var str = 'abcde'
     str = str.simpleReplace('cd', 'xx');
 &amp;lt;/pre&amp;gt;
 위의 예에서 str는 'abxxe'가 된다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[replaced String.]]></return-description>
</return-types>
<parameters>
<parameter name="oldStr" type="String" deprecated="false" usage="required">
<description><![CDATA[required 바뀌어야 될 기존의 스트링]]></description>
</parameter>
<parameter name="newStr" type="String" deprecated="false" usage="required">
<description><![CDATA[required 바뀌어질 새로운 스트링]]></description>
</parameter>
</parameters>
</method>
<method name="insert" deprecated="false" scope="instance" >
<description><![CDATA[자바스크립트의 내장 객체인 String 객체에 insert 메소드를 추가한다. insert 메소드는 스트링의 특정 영역에
 주어진 스트링을 삽입한다.
 &amp;lt;pre&amp;gt;
     var str = 'abcde'
     str = str.insert(3, 'xyz');
 &amp;lt;/pre&amp;gt;
 위의 예에서 str는 'abcxyzde'가 된다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[inserted String.]]></return-description>
</return-types>
<parameters>
<parameter name="index" type="int" deprecated="false" usage="required">
<description><![CDATA[required 삽입할 위치. 해당 스트링의 index 바로 앞에 삽입된다. index는 0부터 시작.]]></description>
</parameter>
<parameter name="str" type="String" deprecated="false" usage="required">
<description><![CDATA[required 삽입할 스트링.]]></description>
</parameter>
</parameters>
</method>
<method name="advancedSplit" deprecated="false" scope="instance" >
<description><![CDATA[문자열을 구분자를 통해 잘라낸다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
<parameters>
<parameter name="delim" type="String" deprecated="false" usage="required">
<description><![CDATA[구분자]]></description>
</parameter>
</parameters>
</method>
<method name="firstUpperCase" deprecated="false" scope="instance" >
<description><![CDATA[첫 문자만 대문자로 변환한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[변환 후 문자열]]></return-description>
</return-types>
</method>
<method name="getByteLength" deprecated="false" scope="instance" >
<description><![CDATA[스트링의 자릿수를 Byte 단위로 환산하여 알려준다. 영문, 숫자는 1Byte이고 한글은 2Byte이다.(자/모 중에 하나만 있는 글자도 2Byte이다.)]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[스트링의 길이]]></return-description>
</return-types>
</method>
<method name="isHangul" deprecated="false" scope="instance" >
<description><![CDATA[입력된 문자열이 한글로 된 정보인지를 체크한다. 해당문자열이 한글과 스페이스의 조합일때만 true를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[한글 여부]]></return-description>
</return-types>
</method>
<method name="replaceAll" deprecated="false" scope="instance" >
<description><![CDATA[문자열에 포함된 문자값을 모두 변경한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
<parameters>
<parameter name="s2" type="String" deprecated="false" usage="required">
<description><![CDATA[변경할 문자열]]></description>
</parameter>
<parameter name="s2" type="String" deprecated="false" usage="required">
<description><![CDATA[변경될 문자열]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="prototype.Date" deprecated="false" >
<description>static Date 클래스는 Date 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>static Date 클래스는 Date 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
</constructor>
</constructors>
<methods>
<method name="format" deprecated="false" scope="instance" >
<description><![CDATA[자바스크립트의 내장 객체인 Date 객체에 format 메소드를 추가한다. format 메소드는 Date 객체가 가진 날짜를
 지정된 포멧의 스트링으로 변환한다.
 &amp;lt;pre&amp;gt;
     var dateStr = new Date().format("YYYYMMDD");

     참고 : Date 오브젝트 생성자들 - dateObj = new Date()
                             - dateObj = new Date(dateVal)
                             - dateObj = new Date(year, month, date[, hours[, minutes[, seconds[,ms]]]])
 &amp;lt;/pre&amp;gt;
 위의 예에서 오늘날짜가 2002년 3월 5일이라면 dateStr의 값은 "20020305"가 된다.
 default pattern은 "YYYYMMDD"이다.]]></description>
<parameters>
<parameter name="oConfig" type="String|Object" deprecated="false" usage="required">
<description><![CDATA[pattern optional 변환하고자 하는 패턴 스트링이나 Config객체. (default : YYYYMMDD)]]></description>
</parameter>
</parameters>
</method>
<method name="add" deprecated="false" scope="instance" >
<description><![CDATA[해당 instance에 지정된 시간량을 추가한다.
 Day "D", Week "W", Year "Y", Month "M", Hour "H", Minute "m", Second "S", Milisecond "s"]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[Date object의 결과]]></return-description>
</return-types>
<parameters>
<parameter name="field" type="String" deprecated="false" usage="required">
<description><![CDATA[추가적인 실행에 사용되는 field constant]]></description>
</parameter>
<parameter name="amount" type="Number" deprecated="false" usage="required">
<description><![CDATA[날짜에 추가하기 위한 unit들의 number(field constant에서 측정된)]]></description>
</parameter>
</parameters>
</method>
<method name="equals" deprecated="false" scope="instance" >
<description><![CDATA[현재 날짜를 대상날짜와 format 형식에 맞게 비교한다. config를 주지 않을경우 %x(yyyy-mm-dd)로 비교한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[비교 대상 date 객체]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] format등 옵션]]></description>
</parameter>
</parameters>
</method>
<method name="compareTo" deprecated="false" scope="instance" >
<description><![CDATA[시간을 제외한 날짜를 비교하여 현재 날짜와의 차이를 일자로 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[비교 날짜 객체]]></description>
</parameter>
</parameters>
</method>
<method name="clone" deprecated="false" scope="instance" >
<description><![CDATA[현재 날짜를 복사하여 리턴한다.]]></description>
<return-types>
<return-type type="Date" />
</return-types>
</method>
<method name="between" deprecated="false" scope="instance" >
<description><![CDATA[startDate와 endDate 사이에 포함되어 있는지 여부]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[날짜가 비교날짜 사이에 있으면 true, 아닐 경우 false.]]></return-description>
</return-types>
<parameters>
<parameter name="startDate" type="Date" deprecated="false" usage="required">
<description><![CDATA[범위 시작일자]]></description>
</parameter>
<parameter name="endDate" type="Date" deprecated="false" usage="required">
<description><![CDATA[범위 종료일자The end of the range]]></description>
</parameter>
</parameters>
</method>
<method name="compareString" deprecated="false" scope="instance" >
<description><![CDATA[Date객체의 Pattern에 따른 날짜 비교]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[true]]></return-description>
</return-types>
<parameters>
<parameter name="date2" type="Date" deprecated="false" usage="required">
<description><![CDATA[Date2 객체]]></description>
</parameter>
<parameter name="pattern" type="Date" deprecated="false" usage="required">
<description><![CDATA[[optional] format pattern 문자]]></description>
</parameter>
</parameters>
</method>
<method name="getFirstDayOfMonth" deprecated="false" scope="instance" >
<description><![CDATA[1일에 해당되는 Date 객체를 리턴]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[The JavaScript Date representing the first day of the month]]></return-description>
</return-types>
</method>
<method name="getLastDayOfMonth" deprecated="false" scope="instance" >
<description><![CDATA[마지막 날짜에 해당되는 Date 객체를 리턴]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[The JavaScript Date representing the first day of the month]]></return-description>
</return-types>
</method>
<method name="getFirstDayOfWeek" deprecated="false" scope="instance" >
<description><![CDATA[startOfWeek에 해당되는 요일에 맞는 Date 객체를 리턴]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[The first day of the week]]></return-description>
</return-types>
<parameters>
<parameter name="startOfWeek" type="Number" deprecated="false" usage="required">
<description><![CDATA[The index for the first day of the week, 0 = Sun, 1 = Mon ... 6 = Sat (defaults to 0)]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="prototype.Number" deprecated="false" >
<description>static Number 클래스는 Number 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>static Number 클래스는 Number 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
</constructor>
</constructors>
<methods>
<method name="format" deprecated="false" scope="instance" >
<description><![CDATA[사용자에게 표시하기 위한 native JavaScript Number와 문자열 포맷을 가져온다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[표시하기 위한 Formatted number]]></return-description>
</return-types>
<parameters>
<parameter name="nData" type="Number" deprecated="false" usage="required">
<description><![CDATA[Number.]]></description>
</parameter>
<parameter name="oConfig" type="Object" deprecated="false" usage="required">
<description><![CDATA[(Optional) Optional 설정 값들:
  &amp;lt;dl&amp;gt;]]></description>
</parameter>
</parameters>
</method>
<method name="round" deprecated="false" scope="instance" >
<description><![CDATA[요구되는 소수점 정밀도로 전달되는 숫자를 반올림 한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[반올림 값]]></return-description>
</return-types>
<parameters>
<parameter name="precision" type="int" deprecated="false" usage="required">
<description><![CDATA[첫번째 parameter의 값을 반올림하기 위한 소수점 위치 숫자]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="prototype.Array" deprecated="false" >
<description>static Array 클래스는 Array 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>static Array 클래스는 Array 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
</constructor>
</constructors>
<methods>
<method name="contains" deprecated="false" scope="instance" >
<description><![CDATA[items 배열에서 item이 존재하는지 여부를 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="item" type="Object" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
</parameters>
</method>
<method name="removeAt" deprecated="false" scope="instance" >
<description><![CDATA[items 배열에서 index에 해당하는 객체를 삭제하는 메소드]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[삭제된 위치]]></return-description>
</return-types>
<parameters>
<parameter name="index" type="int" deprecated="false" usage="required">
<description><![CDATA[삭제할 위치]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.LTemplate" deprecated="false" >
<description>HTML 조각 템플릿을 표현한다.
 템플릿들은 더 나은 성능을 위해 미리 컴파일 될 수 있다.
 사용가능한 format 함수들의 목록에 대해서는 {</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>HTML 조각 템플릿을 표현한다.
 템플릿들은 더 나은 성능을 위해 미리 컴파일 될 수 있다.
 사용가능한 format 함수들의 목록에 대해서는 {</description>
<parameters>
<parameter name="html" type="String/Array" deprecated="false" usage="instance">
<description><![CDATA[join('')하거나 여러 argument들에 join('')하기 위한 HTML 조각 혹은 조각들의 array]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="applyTemplate" deprecated="false" scope="instance" >
<description><![CDATA[적용된 특정 값들을 가지고 있는 해당 템플릿의 HTML 조각을 반환한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[HTML 조각]]></return-description>
</return-types>
<parameters>
<parameter name="values" type="Object/Array" deprecated="false" usage="required">
<description><![CDATA[템플릿 값들.]]></description>
</parameter>
</parameters>
</method>
<method name="apply" deprecated="false" scope="instance" >
<description><![CDATA[적용된 특정 값들을 가진 해당 템플릿의 HTML 조각을 반환한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[HTML 조각]]></return-description>
</return-types>
<parameters>
<parameter name="values" type="Object/Array" deprecated="false" usage="required">
<description><![CDATA[템플릿 값들.]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui" deprecated="false" >
<description>Rui global namespace object.
 Rui가 이미 정의된 경우, 기존에 존재하는 Rui object는 정의된 namespace들이
 보존되도록 덮어쓰여지지 않는다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Rui global namespace object.
 Rui가 이미 정의된 경우, 기존에 존재하는 Rui object는 정의된 namespace들이
 보존되도록 덮어쓰여지지 않는다.</description>
</constructor>
</constructors>
<methods>
<method name="later" deprecated="false" scope="static" >
<description><![CDATA[millisecond 이후에 제공된 obecjt의 컨텍스트에서 제공된 함수를 실행한다.
 periodic을 true로 설정하지 않는다면, 함수를 한번만 실행한다.]]></description>
<return-types>
<return-type type="object" />
<return-description><![CDATA[timer object. timer를 멈추기 위하여 해당 object에서 cancel() method를 호출한다.]]></return-description>
</return-types>
<parameters>
<parameter name="fn이" type="int" deprecated="false" usage="required">
<description><![CDATA[실행될 때까지 기다릴 millisecond 숫자]]></description>
</parameter>
<parameter name="o" type="object" deprecated="false" usage="required">
<description><![CDATA[컨텍스트 object]]></description>
</parameter>
<parameter name="fn" type="Function|String" deprecated="false" usage="required">
<description><![CDATA[실행할 'o' object에서 실행할 함수나 method의 이름]]></description>
</parameter>
<parameter name="data" type="Array" deprecated="false" usage="required">
<description><![CDATA[함수에 제공될 데이터.
 이것은 하나의 항목이나 array를 받아들인다.
 array가 제공되는 경우 함수는 각 array 항목에 대해 하나의 paprameter를 가지고 실행된다.
 하나의 array parameter를 전달할 필요가 있는 경우, 이것은 array [myarray]에서
 wrapping 되어야 할 필요가 있을 것이다.]]></description>
</parameter>
<parameter name="periodic" type="boolean" deprecated="false" usage="required">
<description><![CDATA[true인 경우 취소될 때까지 제공된 interval에서
 주기적으로 실행된다.]]></description>
</parameter>
</parameters>
</method>
<method name="isValue" deprecated="false" scope="static" >
<description><![CDATA[적합한 non-null값을 찾기 위한 유틸리티 method.
 null/undefined/NaN에 대해서는 false, 0/false/''을 포함한 다른 값에 대해서는
 true를 반환한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[null/undefined/NaN이 아니라면 true]]></return-description>
</return-types>
<parameters>
<parameter name="o" type="any" deprecated="false" usage="required">
<description><![CDATA[테스트할 항목]]></description>
</parameter>
</parameters>
</method>
<method name="getConfig" deprecated="false" scope="static" >
<description><![CDATA[LConfiguration 객체를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.config.LConfiguration" />
</return-types>
<parameters>
<parameter name="isNew" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 신규 객체 여부]]></description>
</parameter>
</parameters>
</method>
<method name="getMessageManager" deprecated="false" scope="static" >
<description><![CDATA[LMessageManager 객체를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.message.LMessageManager" />
</return-types>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="required">
<description><![CDATA[환경정보 객체]]></description>
</parameter>
<parameter name="isNew" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 신규 객체 여부]]></description>
</parameter>
</parameters>
</method>
<method name="includeJs" deprecated="false" scope="static" >
<description><![CDATA[js파일을 동적으로 로딩한다.
 &amp;lt;pre&amp;gt;
 Rui.includeJs('/rui/js/locale/lang-en.js');
 &amp;lt;/pre&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="includeCss" deprecated="false" scope="static" >
<description><![CDATA[css파일을 동적으로 로딩한다. (async로 처리되므로 같은 style에 대해서 우선 순위가 바뀔 수 있으므로 체크해야 함)
 &amp;lt;pre&amp;gt;
 Rui.includeCSS('/rui/resources/css/rui_logger.css');
 &amp;lt;/pre&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="urlParams" deprecated="false" scope="static" >
<description><![CDATA[queryString에 대한 parameter를 json 객체로 리턴한다.]]></description>
</method>
<method name="onResize" deprecated="false" scope="static" >
<description><![CDATA[window가 resize되면 fn을 수행한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="fn" type="function" deprecated="false" usage="required">
<description><![CDATA[function 객체]]></description>
</parameter>
<parameter name="firstFireEvent" type="boolean" deprecated="false" usage="required">
<description><![CDATA[처음 한번 resize 이벤트가 발생지 여부를 결정한다.]]></description>
</parameter>
</parameters>
</method>
<method name="log" deprecated="false" scope="static" >
<description><![CDATA[만약 widget이 사용가능하다면, log message를 출력하기 위하여 Rui.ui.LLogger를 사용한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[만약 log 작업이 성공했을 경우 True.]]></return-description>
</return-types>
<parameters>
<parameter name="msg" type="String" deprecated="false" usage="required">
<description><![CDATA[log 할 message]]></description>
</parameter>
<parameter name="cat" type="String" deprecated="false" usage="required">
<description><![CDATA[message에 대한 log 분류.
                        기본 분류는 "info", "warn", "error", "time"이다.
                        custom 분류들은 잘 사용될 수 있다.(optional)]]></description>
</parameter>
<parameter name="src" type="String" deprecated="false" usage="required">
<description><![CDATA[message의 source(optional)]]></description>
</parameter>
</parameters>
</method>
<method name="useAccessibility" deprecated="false" scope="static" >
<description><![CDATA[웹접근성 태그를 지원할지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="getRootPath" deprecated="false" scope="static" >
<description><![CDATA[rui_config.js에 정의되어 있는 contextPath와 ruiRootPath값의 조합하여 Rich UI의 root 위치를 리턴한다. rui_config.js파일이 초기화되지 않으면 사용할 수 없다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="devGuide" deprecated="false" scope="static" >
<description><![CDATA[개발자 가이드를 위한 추가 정보를 출력한다. rui_config.js의 환경 설정에서 개발자 모드일 경우에만 수행된다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[scope 객체]]></description>
</parameter>
<parameter name="methodName" type="String" deprecated="false" usage="required">
<description><![CDATA[수행할 메소드 명]]></description>
</parameter>
<parameter name="params" type="Object" deprecated="false" usage="required">
<description><![CDATA[파라미터 객체]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.LElement" deprecated="false" >
<description>Element는 event listener들을 쉽게 추가하고, dom method들을 사용하거나 sttribute를 관리하는 wrapper object를 제공한다.
 &amp;lt;br/&amp;gt;sample : &amp;lt;a href="/sample/general/base/elementSample.html"&amp;gt;/sample/general/base/elementSample.html&amp;lt;/a&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Element는 event listener들을 쉽게 추가하고, dom method들을 사용하거나 sttribute를 관리하는 wrapper object를 제공한다.
 &amp;lt;br/&amp;gt;sample : &amp;lt;a href="/sample/general/base/elementSample.html"&amp;gt;/sample/general/base/elementSample.html&amp;lt;/a&amp;gt;</description>
<parameters>
<parameter name="el" type="HTMLElement | String" deprecated="false" usage="instance">
<description><![CDATA[LElement를 표현하는 html element]]></description>
</parameter>
<parameter name="map" type="Object" deprecated="false" usage="instance">
<description><![CDATA[초기 config 이름과 값들의 key-value map]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="removeChild" deprecated="false" scope="instance" >
<description><![CDATA[HTMLElement method에 대한 Wrapper.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[삭제된 DOM element.]]></return-description>
</return-types>
<parameters>
<parameter name="child" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[삭제할 HTMLElement]]></description>
</parameter>
</parameters>
</method>
<method name="replaceClass" deprecated="false" scope="instance" >
<description><![CDATA[oldClassName으로 적용된 css를 newClassName css로 변경한다.]]></description>
<return-types>
<return-type type="Boolean | Array" />
<return-description><![CDATA[성공/실패 boolean이나 boolean값들의 array]]></return-description>
</return-types>
<parameters>
<parameter name="oldClassName" type="String" deprecated="false" usage="required">
<description><![CDATA[교체할 클래스 이름]]></description>
</parameter>
<parameter name="newClassName" type="String" deprecated="false" usage="required">
<description><![CDATA[추가할 클래스 이름]]></description>
</parameter>
</parameters>
</method>
<method name="toggleClass" deprecated="false" scope="instance" >
<description><![CDATA[toggle시에 class를 추가하거나 제거한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="className" type="String" deprecated="false" usage="required">
<description><![CDATA[추가할 클래스 이름]]></description>
</parameter>
</parameters>
</method>
<method name="applyStyles" deprecated="false" scope="instance" >
<description><![CDATA[style 정보를 모두 적용한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="styles" type="String|Object|Function" deprecated="false" usage="required">
<description><![CDATA[적용할 style정보]]></description>
</parameter>
</parameters>
</method>
<method name="getXY" deprecated="false" scope="instance" >
<description><![CDATA[페이지 좌표에 기반한 element의 현재 위치를 가져온다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[element의 XY 위치]]></return-description>
</return-types>
</method>
<method name="setXY" deprecated="false" scope="instance" >
<description><![CDATA[element가 위치되는 방법에 개의치 않고 페이지 좌표에서 html element의 위치를 설정한다.
 element는 반드시 페이지 좌표를 가지는 DOM 트리의 부분이어야 한다
 (display:none 혹은 element들이 추가되어 있지 않으면 false를 반환).]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="pos" type="Array" deprecated="false" usage="required">
<description><![CDATA[새 위치에 대한 X &amp; Y를 포함한 값들(페이지에 기반한 좌표)]]></description>
</parameter>
<parameter name="noRetry" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 첫번째가 실패할 경우 기본적으로 두번째로 위치를 설정한다.]]></description>
</parameter>
</parameters>
</method>
<method name="getX" deprecated="false" scope="instance" >
<description><![CDATA[페이지 좌표에 기반한 element의 현재 X 위치를 가져온다.
 element는 반드시 페이지 좌표를 가지는 DOM 트리의 부분이어야 한다
 (display:none 혹은 element들이 추가되어 있지 않으면 false를 반환).]]></description>
<return-types>
<return-type type="Number | Array" />
<return-description><![CDATA[element의 X 위치]]></return-description>
</return-types>
</method>
<method name="setX" deprecated="false" scope="instance" >
<description><![CDATA[element가 위치되는 방법에 개의치 않고 페이지 좌표에서 html element의 X 위치를 설정한다.
 element는 반드시 페이지 좌표를 가지는 DOM 트리의 부분이어야 한다
 (display:none 혹은 element들이 추가되어 있지 않으면 false를 반환).]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="x" type="int" deprecated="false" usage="required">
<description><![CDATA[element에 대한 X 좌표로 사용할 값.]]></description>
</parameter>
</parameters>
</method>
<method name="getY" deprecated="false" scope="instance" >
<description><![CDATA[페이지 좌표에 기반한 element의 현재 Y 위치를 가져온다.
 element는 반드시 페이지 좌표를 가지는 DOM 트리의 부분이어야 한다
 (display:none 혹은 element들이 추가되어 있지 않으면 false를 반환).]]></description>
<return-types>
<return-type type="Number | Array" />
<return-description><![CDATA[element의 Y 위치]]></return-description>
</return-types>
</method>
<method name="setY" deprecated="false" scope="instance" >
<description><![CDATA[element가 위치되는 방법에 개의치 않고 페이지 좌표에서 html element의 Y 위치를 설정한다.
 element는 반드시 페이지 좌표를 가지는 DOM 트리의 부분이어야 한다
 (display:none 혹은 element들이 추가되어 있지 않으면 false를 반환).]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="y" type="int" deprecated="false" usage="required">
<description><![CDATA[element에 대한 Y 좌표로 사용할 값.]]></description>
</parameter>
</parameters>
</method>
<method name="moveTo" deprecated="false" scope="instance" >
<description><![CDATA[element가 위치되는 방법에 개의치 않고 페이지 좌표에서 element의 위치를 설정한다.
 element는 반드시 페이지 좌표를 가지는 DOM 트리의 부분이어야 한다
 (display:none 혹은 element들이 추가되어 있지 않으면 false를 반환).]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="x" type="Number" deprecated="false" usage="required">
<description><![CDATA[새로운 위치에 대한 X값(페이지에 기반한 좌표)]]></description>
</parameter>
<parameter name="y" type="Number" deprecated="false" usage="required">
<description><![CDATA[새로운 위치에 대한 Y값(페이지에 기반한 좌표)]]></description>
</parameter>
<parameter name="anim" type="Boolean/Object" deprecated="false" usage="required">
<description><![CDATA[(optional) 기본 animation에 대한 true, 혹은 표준 standard Element animation config object]]></description>
</parameter>
</parameters>
</method>
<method name="animate" deprecated="false" scope="instance" >
<description><![CDATA[animation 효과를 적용한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="anim" type="Object" deprecated="false" usage="required">
<description><![CDATA[animation 효과를 적용할 정보]]></description>
</parameter>
</parameters>
</method>
<method name="setLeft" deprecated="false" scope="instance" >
<description><![CDATA[CSS 스타일을 사용하여 element의 left 위치를 직접 설정한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="left" type="String" deprecated="false" usage="required">
<description><![CDATA[left CSS property 값]]></description>
</parameter>
</parameters>
</method>
<method name="setTop" deprecated="false" scope="instance" >
<description><![CDATA[CSS 스타일을 사용하여 element의 top 위치를 직접 설정한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="top" type="String" deprecated="false" usage="required">
<description><![CDATA[top CSS property 값]]></description>
</parameter>
</parameters>
</method>
<method name="setRight" deprecated="false" scope="instance" >
<description><![CDATA[element의 CSS right 스타일을 설정한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="right" type="String" deprecated="false" usage="required">
<description><![CDATA[right CSS property 값]]></description>
</parameter>
</parameters>
</method>
<method name="setBottom" deprecated="false" scope="instance" >
<description><![CDATA[element의 CSS bottom 스타일을 설정한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="bottom" type="String" deprecated="false" usage="required">
<description><![CDATA[bottom CSS property 값]]></description>
</parameter>
</parameters>
</method>
<method name="setSize" deprecated="false" scope="instance" >
<description><![CDATA[size를 설정한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="width" type="String" deprecated="false" usage="required">
<description><![CDATA[element의 width offset]]></description>
</parameter>
<parameter name="height" type="String" deprecated="false" usage="required">
<description><![CDATA[element의 height offset]]></description>
</parameter>
<parameter name="anim" type="Boolean/Object" deprecated="false" usage="required">
<description><![CDATA[(optional) 기본 animation에 대한 true, 혹은 표준 standard Element animation config object]]></description>
</parameter>
</parameters>
</method>
<method name="getLeft" deprecated="false" scope="instance" >
<description><![CDATA[left X 좌표를 가져온다.]]></description>
<return-types>
<return-type type="Number" />
</return-types>
<parameters>
<parameter name="local" type="boolean" deprecated="false" usage="required">
<description><![CDATA[페이지 좌표 대신 local css 위치를 가져오기 위해서는 true]]></description>
</parameter>
</parameters>
</method>
<method name="getRight" deprecated="false" scope="instance" >
<description><![CDATA[element의 right X 좌표를 가져온다.(element의 X 위치 + element width)]]></description>
<return-types>
<return-type type="Number" />
</return-types>
<parameters>
<parameter name="local" type="boolean" deprecated="false" usage="required">
<description><![CDATA[페이지 좌표 대신 local css 위치를 가져오기 위해서는 true]]></description>
</parameter>
</parameters>
</method>
<method name="getTop" deprecated="false" scope="instance" >
<description><![CDATA[top Y 좌표를 가져온다.]]></description>
<return-types>
<return-type type="Number" />
</return-types>
<parameters>
<parameter name="local" type="boolean" deprecated="false" usage="required">
<description><![CDATA[페이지 좌표 대신 local css 위치를 가져오기 위해서는 true]]></description>
</parameter>
</parameters>
</method>
<method name="getBottom" deprecated="false" scope="instance" >
<description><![CDATA[element의 bottom Y 좌표를 가져온다.(element의 Y 위치 + element height)]]></description>
<return-types>
<return-type type="Number" />
</return-types>
<parameters>
<parameter name="local" type="boolean" deprecated="false" usage="required">
<description><![CDATA[페이지 좌표 대신 local css 위치를 가져오기 위해서는 true]]></description>
</parameter>
</parameters>
</method>
<method name="clip" deprecated="false" scope="instance" >
<description><![CDATA[현재 overflow 설정을 저장하고 element의 overflow를 고정시킨다. - 삭제하기 위해서 unclip을 사용한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
</method>
<method name="unclip" deprecated="false" scope="instance" >
<description><![CDATA[clip 호출되기 전에 원래 clip된 overflow를 반환한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
</method>
<method name="repaint" deprecated="false" scope="instance" >
<description><![CDATA[객체를 다시 그린다.]]></description>
<return-types>
<return-type type="Rui.Elemnent" />
<return-description><![CDATA[this]]></return-description>
</return-types>
</method>
<method name="alignTo" deprecated="false" scope="instance" >
<description><![CDATA[특정 anchor 포인트들로 연결되는 다른 element를 가지고 해당 element를 정렬한다.
 다른 element가 socument인 경우 그것은 viewport(화면상의 화상표시 영역)로 정렬한다.
 다음은 지원되는 anchor 위치들의 모든 목록이다: tl, t, tr, l, c, r, bl, b, br]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="element" type="Mixed" deprecated="false" usage="required">
<description><![CDATA[정렬할 element]]></description>
</parameter>
<parameter name="position" type="String" deprecated="false" usage="required">
<description><![CDATA[정렬할 위치]]></description>
</parameter>
<parameter name="offsets" type="Array" deprecated="false" usage="required">
<description><![CDATA[(optional) [x, y]에 의한 위치 offset]]></description>
</parameter>
</parameters>
</method>
<method name="getAnchorXY" deprecated="false" scope="instance" >
<description><![CDATA[element의 anchor 위치에 의해 명시된 x,y 좌표를 가져온다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[[x, y] element의 x와 y 좌표를 포함하는 array]]></return-description>
</return-types>
<parameters>
<parameter name="anchor" type="String" deprecated="false" usage="required">
<description><![CDATA[(optional) 명시된 anchor 위치(기본적으로 'c').]]></description>
</parameter>
<parameter name="local" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) 페이지 좌표대신 local (element top/left-relative) anchor 위치를
 가져오기 위해서는 true
 of page coordinates]]></description>
</parameter>
<parameter name="size" type="Object" deprecated="false" usage="required">
<description><![CDATA[(optional) anchor 위치를 계산하기 위해 사용되는 size를 포함한 object
 {width: (target width), height: (target height)} (기본적으로 element의 현재 사이즈)]]></description>
</parameter>
</parameters>
</method>
<method name="center" deprecated="false" scope="instance" >
<description><![CDATA[viewport의 element나 다른 element를 중앙에 위치시킨다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="centerIn" type="Mixed" deprecated="false" usage="required">
<description><![CDATA[(optional) element 중앙에 위치시킬 element]]></description>
</parameter>
</parameters>
</method>
<method name="getScroll" deprecated="false" scope="instance" >
<description><![CDATA[element의 현재 스크롤 위치를 반환한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[{left: (scrollLeft), top: (scrollTop)} 포맷의  스크롤 위치를 포함한 object]]></return-description>
</return-types>
</method>
<method name="setScroll" deprecated="false" scope="instance" >
<description><![CDATA[scroll position 설정]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="objLeftTop" type="object" deprecated="false" usage="required">
<description><![CDATA[(left:scrollLeft,top:scrollTop)]]></description>
</parameter>
</parameters>
</method>
<method name="getVisibleScrollXY" deprecated="false" scope="instance" >
<description><![CDATA[targetEl이 안보이는 경우 scroll 이동하기]]></description>
<return-types>
<return-type type="array" />
<return-description><![CDATA[[x,y] child의 변경된 좌표 return]]></return-description>
</return-types>
<parameters>
<parameter name="movingX" type="boolean" deprecated="false" usage="required">
<description><![CDATA[x축 자동 scroll 여부, default는 true]]></description>
</parameter>
<parameter name="movingY" type="boolean" deprecated="false" usage="required">
<description><![CDATA[y축 자동 scroll 여부, default는 true]]></description>
</parameter>
<parameter name="paddingLeft" type="int" deprecated="false" usage="required">
<description><![CDATA[left의 padding값]]></description>
</parameter>
</parameters>
</method>
<method name="moveScroll" deprecated="false" scope="instance" >
<description><![CDATA[targetEl이 안보이는 경우 scroll 이동하기]]></description>
<return-types>
<return-type type="array" />
<return-description><![CDATA[[x,y] child의 변경된 좌표 return]]></return-description>
</return-types>
<parameters>
<parameter name="childId" type="string|HTMLElement" deprecated="false" usage="required">
<description><![CDATA[child dom 객체의 id]]></description>
</parameter>
<parameter name="movingX" type="boolean" deprecated="false" usage="required">
<description><![CDATA[x축 자동 scroll 여부, default는 true]]></description>
</parameter>
<parameter name="movingY" type="boolean" deprecated="false" usage="required">
<description><![CDATA[y축 자동 scroll 여부, default는 true]]></description>
</parameter>
<parameter name="paddingLeft" type="int" deprecated="false" usage="required">
<description><![CDATA[left의 padding값]]></description>
</parameter>
</parameters>
</method>
<method name="isMask" deprecated="false" scope="instance" >
<description><![CDATA[Mask 적용 여부]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[element에 포커싱을 시도한다. 모든 실행들은 캐치되거나 무시된다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
</method>
<method name="blur" deprecated="false" scope="instance" >
<description><![CDATA[element에 blur를 시도한다. 모든 실행들은 캐치되거나 무시된다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
</method>
<method name="getDimensions" deprecated="false" scope="instance" >
<description><![CDATA[element의 width와 height offset을 반환한다.  부모가 안보이면 계산되지 못한다. 0,0으로 나와 계신되지 못 한다. 이 메소드를 이용하면 display 속성이 none dom의 width와 height도 리턴된다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[element의 width와 height]]></return-description>
</return-types>
<parameters>
<parameter name="contentOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) border와 padding을 뺀 width와 height를 얻으려면 true]]></description>
</parameter>
<parameter name="checkStyle" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) 0일 경우 style 값도 검사]]></description>
</parameter>
</parameters>
</method>
<method name="getHeight" deprecated="false" scope="instance" >
<description><![CDATA[element의 height offset을 반환한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[element의 height]]></return-description>
</return-types>
<parameters>
<parameter name="contentHeight" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) border와 padding을 뺀 height를 얻으려면 true]]></description>
</parameter>
</parameters>
</method>
<method name="setWidth" deprecated="false" scope="instance" >
<description><![CDATA[해당 element의 width를 설정한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="width" type="Mixed" deprecated="false" usage="required">
<description><![CDATA[새로운 width.]]></description>
</parameter>
<parameter name="anim" type="Boolean/Object" deprecated="false" usage="required">
<description><![CDATA[(optional) 기본 animation에 대한 true,
                                         혹은 표준 standard Element animation config object]]></description>
</parameter>
</parameters>
</method>
<method name="setHeight" deprecated="false" scope="instance" >
<description><![CDATA[해당 element의 height를 설정한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="height" type="Mixed" deprecated="false" usage="required">
<description><![CDATA[새로운 height.]]></description>
</parameter>
<parameter name="anim" type="Boolean/Object" deprecated="false" usage="required">
<description><![CDATA[(optional) 기본 animation에 대한 true or animation 객체]]></description>
</parameter>
</parameters>
</method>
<method name="autoHeight" deprecated="false" scope="instance" >
<description><![CDATA[Heigth를 자동으로 셋팅한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
</method>
<method name="availableHeight" deprecated="false" scope="instance" >
<description><![CDATA[자신의 부모의 하위 dom들의 height를 제외하고 남은 공간을 계산하여 자신의 height에 적용한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="parentId" type="String|HTMLElement" deprecated="false" usage="required">
<description><![CDATA[[optional] 기준이 되는 부모 객체의 id나 dom]]></description>
</parameter>
<parameter name="margin" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] 추가 여유 공간을 확보하기 위해 마이너스할 높이]]></description>
</parameter>
</parameters>
</method>
<method name="mask" deprecated="false" scope="instance" >
<description><![CDATA[Mask 적용]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="contentHtml" type="String" deprecated="false" usage="required">
<description><![CDATA[[optional] 적용할 html 내용]]></description>
</parameter>
</parameters>
</method>
<method name="unmask" deprecated="false" scope="instance" >
<description><![CDATA[Mask 해제]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="isAncestor" deprecated="false" scope="instance" >
<description><![CDATA[node가 하위에 포함되어 있는지 확인하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[포함여부]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[포함여부를 확인하는 객체]]></description>
</parameter>
</parameters>
</method>
<method name="getRegion" deprecated="false" scope="instance" >
<description><![CDATA[주어진 element의 region 위치를 반환한다.
 element는 반드시 region을 가진 DOM tree의 일부분이어야 한다
 (diplay:none 혹은 element들이 추가되어 있지 않으면 false를 반환한다).]]></description>
<return-types>
<return-type type="Region | Array" />
<return-description><![CDATA['top, left, bottom, right' 멤버데이터를 포함하는 region 인스턴스의 array나 region]]></return-description>
</return-types>
</method>
<method name="setRegion" deprecated="false" scope="instance" >
<description><![CDATA[현재 위치 정보를 {Rui.util.LRegion} 객체 정보로 셋팅한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="region" type="Rui.util.LRegion" deprecated="false" usage="required">
<description><![CDATA[Region객체]]></description>
</parameter>
<parameter name="anim" type="Boolean/Object" deprecated="false" usage="required">
<description><![CDATA[(optional) 기본 animation에 대한 true,
                                         혹은 표준 standard Element animation config object]]></description>
</parameter>
</parameters>
</method>
<method name="enable" deprecated="false" scope="instance" >
<description><![CDATA[객체를 사용 가능하게 하는 메소드]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
</method>
<method name="disable" deprecated="false" scope="instance" >
<description><![CDATA[객체를 사용 불가능하게 하는 메소드]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
</method>
<method name="isDisable" deprecated="false" scope="instance" >
<description><![CDATA[객체를 사용 가능여부를 확인하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="valid" deprecated="false" scope="instance" >
<description><![CDATA[객체를 유효한 상태로 설정하는 메소드]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
</method>
<method name="invalid" deprecated="false" scope="instance" >
<description><![CDATA[객체를 유효하지 않은 상태로 설정하는 메소드]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
</method>
<method name="isValid" deprecated="false" scope="instance" >
<description><![CDATA[객체를 유효여부를 확인하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="getBorderWidth" deprecated="false" scope="instance" >
<description><![CDATA[특정 side에 대한 border의 width를 가져온다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[함께 추가되어 전달된 side들의 width]]></return-description>
</return-types>
<parameters>
<parameter name="side" type="String" deprecated="false" usage="required">
<description><![CDATA[여러값들을 추가하기 위하여 t, l, r, b나 이것들의 조합이 될 수 있음.]]></description>
</parameter>
</parameters>
</method>
<method name="getPadding" deprecated="false" scope="instance" >
<description><![CDATA[특정 side에 대한 padding의 width를 가져온다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[함께 추가되어 전달된 side들의 padding]]></return-description>
</return-types>
<parameters>
<parameter name="side" type="String" deprecated="false" usage="required">
<description><![CDATA[여러값들을 추가하기 위하여 t, l, r, b나 이것들의 조합이 될 수 있음.]]></description>
</parameter>
</parameters>
</method>
<method name="getMargins" deprecated="false" scope="instance" >
<description><![CDATA[특정 side에 대한 margin의 width를 가져온다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[함께 추가되어 전달된 side들의 padding]]></return-description>
</return-types>
<parameters>
<parameter name="side" type="String" deprecated="false" usage="required">
<description><![CDATA[여러값들을 추가하기 위하여 t, l, r, b나 이것들의 조합이 될 수 있음.]]></description>
</parameter>
</parameters>
</method>
<method name="getComponent" deprecated="false" scope="instance" >
<description><![CDATA[해당 Dom으로 생성된 콤로넌트 인스턴스를 리턴한다.]]></description>
<return-types>
<return-type type="LUIComponent" />
<return-description><![CDATA[LUICompenent를 상속받은 UI 콤포넌트]]></return-description>
</return-types>
</method>
</methods>
</class>
<class type="Rui.LException" deprecated="false" >
<description>LException 정의</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LException 정의</description>
<parameters>
<parameter name="message" type="Error|String" deprecated="false" usage="instance">
<description><![CDATA[생성할 메시지나 Error 객체]]></description>
</parameter>
<parameter name="o" type="Object" deprecated="false" usage="instance">
<description><![CDATA[에러가 발생한 객체 정보 otype속성이 존재하는 객체만 지원]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="message" type="String" deprecated="false" scope="instance" >
<description>에러 메시지</description>
</property>
</properties>
<methods>
<method name="getOType" deprecated="false" scope="instance" >
<description><![CDATA[객체의 Object Type을 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[에러가 발생한 객체의 otype 값, otype값이 없으면 ''문자]]></return-description>
</return-types>
</method>
<method name="getMessage" deprecated="false" scope="instance" >
<description><![CDATA[에러 메시지를 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[에러 메시지]]></return-description>
</return-types>
</method>
<method name="getStackTrace" deprecated="false" scope="instance" >
<description><![CDATA[StackTrace 정보를 리턴]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[StackTrace 정보를 리턴값]]></return-description>
</return-types>
</method>
</methods>
</class>
<class type="Rui.util.LString" deprecated="false" >
<description>LString</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>LString</description>
</constructor>
</constructors>
<methods>
<method name="trimAll" deprecated="false" scope="instance" >
<description><![CDATA[문자열에 모든 공백 제거]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[모든 공백 제거된 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="s" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="lastCut" deprecated="false" scope="instance" >
<description><![CDATA[문자열을 처음부터 주어진 위치까지 잘라낸다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[잘라낸 후 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="s" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
<parameter name="pos" type="int" deprecated="false" usage="required">
<description><![CDATA[잘라낼 위치]]></description>
</parameter>
</parameters>
</method>
<method name="nvl" deprecated="false" scope="instance" >
<description><![CDATA[문자열이 null이면 '' 공백 문자로 리턴]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[val]]></return-description>
</return-types>
<parameters>
<parameter name="val" type="String" deprecated="false" usage="required">
<description><![CDATA[값]]></description>
</parameter>
</parameters>
</method>
<method name="camelToHungarian" deprecated="false" scope="instance" >
<description><![CDATA[입력된 camel 표기법(firstName)의 문자열을 hungarian 표기법(first_name) 문자열로 변환한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="camel" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="getCamelToFunctionName" deprecated="false" scope="instance" >
<description><![CDATA[입력된 camel 표기법(firstName) 의 문자열을 function 문자열로 변환하여 리턴한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="hungarian" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="isHangul" deprecated="false" scope="static" >
<description><![CDATA[입력된 문자열이 한글로 된 정보인지를 체크한다. 해당문자열이 한글과 스페이스의 조합일때만 true를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[한글 여부]]></return-description>
</return-types>
<parameters>
<parameter name="oValue" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="isHangulChar" deprecated="false" scope="instance" >
<description><![CDATA[입력된 문자열이 한글로 된 정보인지를 체크한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[한글 여부]]></return-description>
</return-types>
<parameters>
<parameter name="oValue" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="getSkipHangulChar" deprecated="false" scope="instance" >
<description><![CDATA[입력된 문자열에서 한글만 제거하고 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[한글을 제거한 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="oValue" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="isEmail" deprecated="false" scope="static" >
<description><![CDATA[입력된 문자열이 email로 된 정보인지를 체크한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[email 여부]]></return-description>
</return-types>
<parameters>
<parameter name="oValue" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="isCsn" deprecated="false" scope="static" >
<description><![CDATA[입력된 문자열이 csn로 된 정보인지를 체크한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[csn 여부]]></return-description>
</return-types>
<parameters>
<parameter name="oValue" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="isSsn" deprecated="false" scope="static" >
<description><![CDATA[입력된 문자열이 주민등록번호로 된 정보인지를 체크한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[ssn 여부]]></return-description>
</return-types>
<parameters>
<parameter name="oValue" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="isTime" deprecated="false" scope="static" >
<description><![CDATA[입력된 문자열이 시간으로 된 정보인지를 체크한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[ssn 여부]]></return-description>
</return-types>
<parameters>
<parameter name="oValue" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
</parameters>
</method>
<method name="replaceHtml" deprecated="false" scope="static" >
<description><![CDATA[html 값의 '&amp;lt;' 문자열을 &amp; lt; 값으로 변경한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[변경 결과]]></return-description>
</return-types>
<parameters>
<parameter name="html" type="String" deprecated="false" usage="required">
<description><![CDATA[html태그 문자열]]></description>
</parameter>
</parameters>
</method>
<method name="skipTags" deprecated="false" scope="static" >
<description><![CDATA[태그를 모두 제거하고 html의 순수 문자열만 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[변경 결과]]></return-description>
</return-types>
<parameters>
<parameter name="html" type="String" deprecated="false" usage="required">
<description><![CDATA[html태그 문자열]]></description>
</parameter>
</parameters>
</method>
<method name="toClipboard" deprecated="false" scope="static" >
<description><![CDATA[value의 값을 클립보드에 저장한 후 결과를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[결과 여부]]></return-description>
</return-types>
<parameters>
<parameter name="value" type="String" deprecated="false" usage="required">
<description><![CDATA[저장할 값]]></description>
</parameter>
</parameters>
</method>
<method name="getClipboard" deprecated="false" scope="static" >
<description><![CDATA[value의 값을 클립보드값을 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과]]></return-description>
</return-types>
</method>
<method name="getTimeUrl" deprecated="false" scope="instance" >
<description><![CDATA[캐쉬되지 않는 고유한 Url을 만든다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[QueryString형 문자열 id=ddd&pwd=ccc]]></return-description>
</return-types>
<parameters>
<parameter name="url" type="String" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
</parameters>
</method>
<method name="getAppendUrl" deprecated="false" scope="static" >
<description><![CDATA[url에 해당되는 파라미터를 추가한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[결과]]></return-description>
</return-types>
<parameters>
<parameter name="url" type="String" deprecated="false" usage="required">
<description><![CDATA[url값]]></description>
</parameter>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[key값]]></description>
</parameter>
<parameter name="value" type="String" deprecated="false" usage="required">
<description><![CDATA[value값]]></description>
</parameter>
</parameters>
</method>
<method name="getUrlParams" deprecated="false" scope="static" >
<description><![CDATA[url에 해당되는 파라미터를 object형으로 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[결과]]></return-description>
</return-types>
<parameters>
<parameter name="url" type="String" deprecated="false" usage="required">
<description><![CDATA[url값]]></description>
</parameter>
</parameters>
</method>
<method name="getByteSubstring" deprecated="false" scope="static" >
<description><![CDATA[한글이 포함된 문자열의 경우 byte로 계산하여 substring을 한다.]]></description>
<return-types>
<return-type type="string" />
</return-types>
<parameters>
<parameter name="str" type="String" deprecated="false" usage="required">
<description><![CDATA[문자열]]></description>
</parameter>
<parameter name="start" type="int" deprecated="false" usage="required">
<description><![CDATA[시작 index]]></description>
</parameter>
<parameter name="length" type="int" deprecated="false" usage="required">
<description><![CDATA[짤라낼 길이]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LDate" deprecated="false" >
<description></description>
<constructors>
<constructor scope="static" deprecated="false">
<description></description>
</constructor>
</constructors>
<methods>
<method name="compareString" deprecated="false" scope="static" >
<description><![CDATA[Date객체의 Pattern에 따른 날짜 비교]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="date1" type="Date" deprecated="false" usage="required">
<description><![CDATA[Date1 객체]]></description>
</parameter>
<parameter name="date2" type="Date" deprecated="false" usage="required">
<description><![CDATA[Date2 객체]]></description>
</parameter>
<parameter name="pattern" type="String" deprecated="false" usage="required">
<description><![CDATA[format pattern 문자]]></description>
</parameter>
</parameters>
</method>
<method name="getJan1" deprecated="false" scope="static" >
<description><![CDATA[주어진 연도의 1월 1일을 표시하는 자바스크립트 date object를 조회한다.]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[명시된 달력 연도의 1월 1일]]></return-description>
</return-types>
<parameters>
<parameter name="calendarYear" type="Number" deprecated="false" usage="required">
<description><![CDATA[1월 1일을 조회하기 위한 달력의 연도]]></description>
</parameter>
</parameters>
</method>
<method name="getDayOffset" deprecated="false" scope="static" >
<description><![CDATA[특정 연도의 1월 1일부터 특정 일자까지의 일수를 계산한다.
 0의 offset 값을 이 함수에서 반환하기 위해서는 1월 1일을 전달한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[주어진 연도의 1월 1일 부터의 일수]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[offset을 찾을 자바크스립트 date]]></description>
</parameter>
<parameter name="calendarYear" type="Number" deprecated="false" usage="required">
<description><![CDATA[offset을 결정하기 위해 사용하는 연도]]></description>
</parameter>
</parameters>
</method>
<method name="isYearOverlapWeek" deprecated="false" scope="static" >
<description><![CDATA[주어진 week가 두개의 다른 연도에 겹쳐지는지 대한 여부를 결정한다.
 ex) 2012년 12월 31일은 2013년 1월 1일과 같은 week 이므로 true]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[날짜가 두개의 다른 연도에 겹쳐지면 true]]></return-description>
</return-types>
<parameters>
<parameter name="weekBeginDate" type="Date" deprecated="false" usage="required">
<description><![CDATA[주의 첫번째 날짜를 표시하는 자바스크립트 Date]]></description>
</parameter>
</parameters>
</method>
<method name="isMonthOverlapWeek" deprecated="false" scope="static" >
<description><![CDATA[주어진 week가 두개의 다른 달에 겹쳐지는지 대한 여부를 결정한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[날짜가 두개의 다른 달에 겹쳐지면 true]]></return-description>
</return-types>
<parameters>
<parameter name="weekBeginDate" type="Date" deprecated="false" usage="required">
<description><![CDATA[주의 첫번째 날짜를 표시하는 자바스크립트 Date]]></description>
</parameter>
</parameters>
</method>
<method name="getMonthInYear" deprecated="false" scope="static" >
<description><![CDATA[inx월에 다국어 표현 날짜 (예: 01월)]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="getShortMonthInYear" deprecated="false" scope="static" >
<description><![CDATA[inx월에 다국어 표현 짧은 날짜 (예: 1월)]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="getDayInWeek" deprecated="false" scope="static" >
<description><![CDATA[inx에 해당되는 다국어 요일 (예: 월요일)]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="getShortDayInWeek" deprecated="false" scope="static" >
<description><![CDATA[inx에 해당되는 다국어 짧은 요일 (예: 월)]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="getWeekNumber" deprecated="false" scope="static" >
<description><![CDATA[주어진 날짜에 대한 week number를 계산한다.
 올해의 첫번째 주를 1월 1일로 정의하는 것에 기반하는 standard U.S. week number와
 올해의 첫번째 주를 1월 4일로 정의하는 것에 기반하는 ISO8601 week number를 일번적으로 지원할 수 있다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[주어진 날짜를 포함하는 week numner]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[week number를 찾을 자바스크립트 date]]></description>
</parameter>
<parameter name="firstDayOfWeek" type="Number" deprecated="false" usage="required">
<description><![CDATA[주의 첫번째 날짜의 인덱스(0 = Sun, 1 = Mon ... 6 = Sat). 기본값은 0]]></description>
</parameter>
<parameter name="janDate" type="Number" deprecated="false" usage="required">
<description><![CDATA[올해의 한주를 정의 하는 1월의 첫째주의 date
 기본값은 1(Jan 1st)인, Rui.ui.LDateMath.WEEK_ONE_JAN_DATE의 값.
 U.S에 대해서는 일반적으로 1월 1일 이다. ISO8601은 올해의 첫째주를 정의하기 위하여 1월 4일을 사용한다.]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LArray" deprecated="false" >
<description>static Array 클래스는 Array 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>static Array 클래스는 Array 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
</constructor>
</constructors>
<methods>
<method name="serialize" deprecated="false" scope="instance" >
<description><![CDATA[QueryString형 문자로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[QueryString형 문자열 id=ddd&pwd=ccc]]></return-description>
</return-types>
<parameters>
<parameter name="params" type="Array" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
</parameters>
</method>
<method name="clone" deprecated="false" scope="instance" >
<description><![CDATA[객체를 복사하는 메소드]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[복사된 객체]]></return-description>
</return-types>
<parameters>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[복사하고자 하는 원본 객체]]></description>
</parameter>
</parameters>
</method>
<method name="moveItem" deprecated="false" scope="instance" >
<description><![CDATA[items 배열에서 oldIndex에 해당되는 데이터를 newIndex로 이동하는 메소드]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[삭제된 위치]]></return-description>
</return-types>
<parameters>
<parameter name="items" type="Array" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="oldIndex" type="int" deprecated="false" usage="required">
<description><![CDATA[이동할 위치]]></description>
</parameter>
<parameter name="newIndex" type="int" deprecated="false" usage="required">
<description><![CDATA[이동될 위치]]></description>
</parameter>
</parameters>
</method>
<method name="concat" deprecated="false" scope="instance" >
<description><![CDATA[items1 배열에 item2 배열의 중복되지 않은 값만 합쳐서 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
<parameters>
<parameter name="items1" type="Array" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="items2" type="Array" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LNumber" deprecated="false" >
<description>숫자 유틸리티</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>숫자 유틸리티</description>
</constructor>
</constructors>
</class>
<class type="Rui.util.LNumber" deprecated="false" >
<description>LNumber</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LNumber</description>
</constructor>
</constructors>
<methods>
<method name="round" deprecated="false" scope="static" >
<description><![CDATA[소수점 숫자 반올림]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[반올림된 값.]]></return-description>
</return-types>
<parameters>
<parameter name="value" type="Int/String" deprecated="false" usage="required">
<description><![CDATA[반올림 할 값.]]></description>
</parameter>
<parameter name="precision" type="int" deprecated="false" usage="required">
<description><![CDATA[반올림 자리수.]]></description>
</parameter>
</parameters>
</method>
<method name="toMoney" deprecated="false" scope="static" >
<description><![CDATA[통화량(돈)으로 숫자를 형식화 한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[형식화 된 통화량 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="value" type="Number/String" deprecated="false" usage="required">
<description><![CDATA[형식화 할 숫자값]]></description>
</parameter>
<parameter name="currency" type="String" deprecated="false" usage="required">
<description><![CDATA[통화 문자]]></description>
</parameter>
</parameters>
</method>
<method name="usMoney" deprecated="false" scope="static" >
<description><![CDATA[US 통화 단위로 숫자를 형식화 한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[형식화된 통화량 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="value" type="Number/String" deprecated="false" usage="required">
<description><![CDATA[형식화 할 숫자 값]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LDom" deprecated="false" >
<description>DOM element들에 대해 도움이 되는 method들을 제공한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>DOM element들에 대해 도움이 되는 method들을 제공한다.</description>
</constructor>
</constructors>
<methods>
<method name="getXY" deprecated="false" scope="static" >
<description><![CDATA[페이지 좌표에 기반한 element의 현재 위치를 가져온다.
 element는 반드시 페이지 좌표를 가진 DOM 트리의 일부여야 한다.
 (display:none이거나 element가 append되어 있지 않다면 false를 반환)]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[element의 XY 위치]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[ID로서 사용할 문자열이나, 실제 DOM 참조, HTMLElement나 ID들의 array를 허용한다.]]></description>
</parameter>
</parameters>
</method>
<method name="getX" deprecated="false" scope="static" >
<description><![CDATA[페이지 좌표에 기반한 element의 현재 X 위치를 가져온다.
 element는 반드시 페이지 좌표를 가진 DOM 트리의 일부여야 한다.
 (display:none이거나 element가 append되어 있지 않다면 false를 반환)]]></description>
<return-types>
<return-type type="Number | Array" />
<return-description><![CDATA[element의 X 위치]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[ID로서 사용할 문자열이나, 실제 DOM 참조, HTMLElement나 ID들의 array를 허용한다.]]></description>
</parameter>
</parameters>
</method>
<method name="getY" deprecated="false" scope="static" >
<description><![CDATA[페이지 좌표에 기반한 element의 현재 Y 위치를 가져온다.
 element는 반드시 페이지 좌표를 가진 DOM 트리의 일부여야 한다.
 (display:none이거나 element가 append되어 있지 않다면 false를 반환)]]></description>
<return-types>
<return-type type="Number | Array" />
<return-description><![CDATA[element의 Y 위치]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[ID로서 사용할 문자열이나, 실제 DOM 참조, HTMLElement나 ID들의 array를 허용한다.]]></description>
</parameter>
</parameters>
</method>
<method name="setXY" deprecated="false" scope="static" >
<description><![CDATA[element가 어떻게 위치되었는지에 상관없이 페이지 좌표안에서 html element의 위치를 설정한다.
 element는 반드시 페이지 좌표를 가진 DOM 트리의 일부여야 한다.
 (display:none이거나 element가 append되어 있지 않다면 false를 반환)]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[ID로서 사용할 문자열이나, 실제 DOM 참조, HTMLElement나 ID들의 array를 허용한다.]]></description>
</parameter>
<parameter name="pos" type="Array" deprecated="false" usage="required">
<description><![CDATA[새로운 위치에 대한 X와 Y값을 포함하는 array(페이지에 기반한 좌표)]]></description>
</parameter>
<parameter name="noRetry" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 기본적으로 처음 시도가 실패하는 경우 두번째로 위치를 설정하려고 시도한다.]]></description>
</parameter>
</parameters>
</method>
<method name="setX" deprecated="false" scope="static" >
<description><![CDATA[element가 어떻게 위치되었는지에 상관없이 페이지 좌표안에서 html element의 X 위치를 설정한다.
 element는 반드시 페이지 좌표를 가진 DOM 트리의 일부여야 한다.
 (display:none이거나 element가 append되어 있지 않다면 false를 반환)]]></description>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[ID로서 사용할 문자열이나, 실제 DOM 참조, HTMLElement나 ID들의 array를 허용한다.]]></description>
</parameter>
<parameter name="x" type="int" deprecated="false" usage="required">
<description><![CDATA[element에 대한 X 좌표로서 사용될 값]]></description>
</parameter>
</parameters>
</method>
<method name="setY" deprecated="false" scope="static" >
<description><![CDATA[element가 어떻게 위치되었는지에 상관없이 페이지 좌표안에서 html element의 Y 위치를 설정한다.
 element는 반드시 페이지 좌표를 가진 DOM 트리의 일부여야 한다.
 (display:none이거나 element가 append되어 있지 않다면 false를 반환)]]></description>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[ID로서 사용할 문자열이나, 실제 DOM 참조, HTMLElement나 ID들의 array를 허용한다.]]></description>
</parameter>
<parameter name="y" type="int" deprecated="false" usage="required">
<description><![CDATA[element에 대한 Y 좌표로서 사용될 값]]></description>
</parameter>
</parameters>
</method>
<method name="getRegion" deprecated="false" scope="static" >
<description><![CDATA[주어진 element의 region 위치를 반환한다.
 element는 반드시 페이지 좌표를 가진 DOM 트리의 일부여야 한다.
 (display:none이거나 element가 append되어 있지 않다면 false를 반환)]]></description>
<return-types>
<return-type type="Region | Array" />
<return-description><![CDATA[Region이나 'top, left, bottom, right' 멤버 데이터를 포함하는 Region 인스턴스의 array]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="String | HTMLElement | Array" deprecated="false" usage="required">
<description><![CDATA[ID로서 사용할 문자열이나, 실제 DOM 참조, HTMLElement나 ID들의 array를 허용한다.]]></description>
</parameter>
</parameters>
</method>
<method name="getClientRegion" deprecated="false" scope="static" >
<description><![CDATA[document에 연관된 viewport에 기반한 Region을 생성한다.]]></description>
<return-types>
<return-type type="Region" />
<return-description><![CDATA[document 스크롤을 차지하는 viewport를 표현하는 Region object]]></return-description>
</return-types>
</method>
<method name="getClientWidth" deprecated="true" scope="instance" >
<description><![CDATA[클라이언트의 width를 반환한다.(viewport:화면 상의 화상 표시영역)]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[페이지의 표시가능한 영역의 width]]></return-description>
</return-types>
</method>
<method name="getClientHeight" deprecated="true" scope="instance" >
<description><![CDATA[클라이언트의 height를 반환한다.(viewport:화면 상의 화상 표시영역)]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[페이지의 표시가능한 영역의 height]]></return-description>
</return-types>
</method>
<method name="getDocumentHeight" deprecated="false" scope="static" >
<description><![CDATA[document의 height를 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[실제 document의 height(body와 그것의 공백을 포함하는)]]></return-description>
</return-types>
</method>
<method name="getDocumentWidth" deprecated="false" scope="static" >
<description><![CDATA[document의 width를 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[실제 document의 width(body와 그것의 공백을 포함하는)]]></return-description>
</return-types>
</method>
<method name="getDocumentScrollLeft" deprecated="false" scope="static" >
<description><![CDATA[document의 왼쪽 스크롤 값을 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[document가 왼쪽으로 스크롤되어 있는 값]]></return-description>
</return-types>
<parameters>
<parameter name="document" type="HTMLDocument" deprecated="false" usage="required">
<description><![CDATA[(optional) 스크롤 값을 가져올 document]]></description>
</parameter>
</parameters>
</method>
<method name="getDocumentScrollTop" deprecated="false" scope="static" >
<description><![CDATA[document의 top 스크롤 값을 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[document가 top으로 스크롤되어 있는 값]]></return-description>
</return-types>
<parameters>
<parameter name="document" type="HTMLDocument" deprecated="false" usage="required">
<description><![CDATA[(optional) 스크롤 값을 가져올 document]]></description>
</parameter>
</parameters>
</method>
<method name="getViewport" deprecated="false" scope="static" >
<description><![CDATA[viewport의 object 정보를 리턴한다. width/height 등...]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
<method name="getViewportHeight" deprecated="false" scope="static" >
<description><![CDATA[viewport의 현재 height를 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[페이지의 표시 가능한 부분의 height(스크롤바는 제외).]]></return-description>
</return-types>
</method>
<method name="getViewportWidth" deprecated="false" scope="static" >
<description><![CDATA[viewport의 현재 width를 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[페이지의 표시 가능한 부분의 width(스크롤바는 제외).]]></return-description>
</return-types>
</method>
<method name="toPixelNumber" deprecated="false" scope="static" >
<description><![CDATA[document에 픽셀 단위값을 제거하고 숫자값만 반]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[문자중에 px를 제외한 숫자 값]]></return-description>
</return-types>
<parameters>
<parameter name="px" type="String" deprecated="false" usage="required">
<description><![CDATA[string]]></description>
</parameter>
</parameters>
</method>
<method name="isVisibleSide" deprecated="false" scope="static" >
<description><![CDATA[node의 특정 방향 t,r,b,t(top,right,bottom,left)중의 한 방향이 화면에서 안보이는지 여부 top,right,bottom,left
 bottom 좌표값이 99인데 화면에 안가렸냐? isVisibleSide(99);, right 좌표값이 99인데 화면에 안가렸냐 ? isVisibleSide(99,'r');]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="coord" type="int" deprecated="false" usage="required">
<description><![CDATA[비교하려는 방향의 좌표값]]></description>
</parameter>
<parameter name="side" type="String" deprecated="false" usage="required">
<description><![CDATA[t,r,b,t 비교하려는 방향 default는 b(bottom)]]></description>
</parameter>
</parameters>
</method>
<method name="setCaretToPos" deprecated="false" scope="static" >
<description><![CDATA[선택된 객체의 커서 위치 변경]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dom" type="HtmlElement" deprecated="false" usage="required">
<description><![CDATA[dom객체]]></description>
</parameter>
<parameter name="pos" type="int" deprecated="false" usage="required">
<description><![CDATA[커서 위치값]]></description>
</parameter>
</parameters>
</method>
<method name="getAvailableHeight" deprecated="false" scope="static" >
<description><![CDATA[dom의 여부 공간이 존재하는 height 값을 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="dom" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[dom객체]]></description>
</parameter>
</parameters>
</method>
<method name="setSelectionRange" deprecated="false" scope="static" >
<description><![CDATA[선택된 객체의 커서 위치 변경]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dom" type="HtmlElement" deprecated="false" usage="required">
<description><![CDATA[dom객체]]></description>
</parameter>
<parameter name="begin" type="int" deprecated="false" usage="required">
<description><![CDATA[커서 시작 위치]]></description>
</parameter>
<parameter name="end" type="int" deprecated="false" usage="required">
<description><![CDATA[커서 끝 위치]]></description>
</parameter>
</parameters>
</method>
<method name="getSelectionInfo" deprecated="false" scope="static" >
<description><![CDATA[선택된 객체의 커서 위치 정보 반환]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="dom" type="HtmlElement" deprecated="false" usage="required">
<description><![CDATA[dom객체]]></description>
</parameter>
</parameters>
</method>
<method name="getSelectionStart" deprecated="false" scope="static" >
<description><![CDATA[선택된 객체의 커서 시작위치 반환]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[커서 시작위치 반환]]></return-description>
</return-types>
<parameters>
<parameter name="dom" type="HtmlElement" deprecated="false" usage="required">
<description><![CDATA[dom객체]]></description>
</parameter>
</parameters>
</method>
<method name="getSelectionEnd" deprecated="false" scope="static" >
<description><![CDATA[선택된 객체의 커서 마지막 위치 반환]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[커서 마지막 위치 반환]]></return-description>
</return-types>
<parameters>
<parameter name="dom" type="HtmlElement" deprecated="false" usage="required">
<description><![CDATA[dom 객체]]></description>
</parameter>
</parameters>
</method>
<method name="getFormValues" deprecated="false" scope="static" >
<description><![CDATA[범위 객체안에 입력 field의 value값들을 object형으로 만들어서 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="id" type="String|HTMLElement" deprecated="false" usage="required">
<description><![CDATA[범위 객체]]></description>
</parameter>
</parameters>
</method>
<method name="getValues" deprecated="false" scope="static" >
<description><![CDATA[범위 객체안에 selector에 대한 입력 field의 value값들을 object형으로 만들어서 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="selector" type="selector" deprecated="false" usage="required">
<description><![CDATA[selector 문자열]]></description>
</parameter>
<parameter name="id" type="String|HTMLElement" deprecated="false" usage="required">
<description><![CDATA[범위 객체]]></description>
</parameter>
</parameters>
</method>
<method name="toast" deprecated="false" scope="instance" >
<description><![CDATA[android의 toast 메시지 처럼 잠시 메시지를 잠시 출력했다가 사라진다. IE8이상 지원]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="text" type="String" deprecated="false" usage="required">
<description><![CDATA[출력할 메시지]]></description>
</parameter>
<parameter name="dom" type="String|HTMLElement" deprecated="false" usage="required">
<description><![CDATA[dom 아이디나 객체]]></description>
</parameter>
<parameter name="options" type="object" deprecated="false" usage="required">
<description><![CDATA[환경 설정값]]></description>
</parameter>
</parameters>
</method>
<method name="invokeFn" deprecated="false" scope="instance" >
<description><![CDATA[dom에 정의되어 있는 css중에 L-fn-로 시작하는 css를 찾아서 그 이름 뒤에 해당되는 문자열에 해당되는 function을 호출한다.]]></description>
<return-types>
<return-type type="Boolean" />
</return-types>
<parameters>
<parameter name="dom" type="String|HTMLElement" deprecated="false" usage="required">
<description><![CDATA[dom 아이디나 객체]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[호출할 scope]]></description>
</parameter>
<parameter name="event" type="Object" deprecated="false" usage="required">
<description><![CDATA[event 객체]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LXml" deprecated="false" >
<description>static LXML 클래스는 Xml 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>static LXML 클래스는 Xml 타입의 데이터를 처리하는데 도움을 주는 함수들을 제공한다.</description>
</constructor>
</constructors>
<methods>
<method name="createDocument" deprecated="false" scope="instance" >
<description><![CDATA[xml document를 생성한다.]]></description>
<return-types>
<return-type type="XmlDocument" />
</return-types>
<parameters>
<parameter name="docName" type="String" deprecated="false" usage="required">
<description><![CDATA[document의 이름을 입력한다.]]></description>
</parameter>
</parameters>
</method>
<method name="createChild" deprecated="false" scope="instance" >
<description><![CDATA[하위의 element를 생성한다.]]></description>
<return-types>
<return-type type="XmlDocument" />
</return-types>
<parameters>
<parameter name="el" type="Element" deprecated="false" usage="required">
<description><![CDATA[붙이고자 하는 Xml부모 객체]]></description>
</parameter>
<parameter name="name" type="String" deprecated="false" usage="required">
<description><![CDATA[element의 이름]]></description>
</parameter>
</parameters>
</method>
<method name="createTextValue" deprecated="false" scope="instance" >
<description><![CDATA[하위의 text element를 생성한다.]]></description>
<return-types>
<return-type type="XmlDocument" />
</return-types>
<parameters>
<parameter name="el" type="Element" deprecated="false" usage="required">
<description><![CDATA[붙이고자 하는 Xml부모 객체]]></description>
</parameter>
<parameter name="name" type="String" deprecated="false" usage="required">
<description><![CDATA[element의 이름]]></description>
</parameter>
<parameter name="isCData" type="Boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] cdata 여부]]></description>
</parameter>
</parameters>
</method>
<method name="serialize" deprecated="false" scope="instance" >
<description><![CDATA[xml 정보를 문자열로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="doc" type="XmlDocuement" deprecated="false" usage="required">
<description><![CDATA[xml document]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LKeyListener" deprecated="false" >
<description>LKeyListener는 DOM element를 감시하며 keydown/keyup event를 listening하는데 인테페이스를 제공하는 유틸리티이다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LKeyListener는 DOM element를 감시하며 keydown/keyup event를 listening하는데 인테페이스를 제공하는 유틸리티이다.</description>
<parameters>
<parameter name="attachTo" type="HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[key event가 첨부되어야할 element나 element ID]]></description>
</parameter>
<parameter name="attachTo" type="String" deprecated="false" usage="instance">
<description><![CDATA[key event가 첨부되어야할 element나 element ID]]></description>
</parameter>
<parameter name="keyData" type="Object" deprecated="false" usage="instance">
<description><![CDATA[감지할 key를 표시하는 object literal.
                               가능한 attribute들은 shift(boolean), alt(boolean), ctrl(boolean),
                               keys(키코드를 표시하는 정수나 정수들의 배열)가 있다.]]></description>
</parameter>
<parameter name="handler" type="Function" deprecated="false" usage="instance">
<description><![CDATA[keyevent가 감지되었을때 발생시킬 LCustomEvent handler]]></description>
</parameter>
<parameter name="handler" type="Object" deprecated="false" usage="instance">
<description><![CDATA[handler를 표시하는 object literal.]]></description>
</parameter>
<parameter name="event" type="String" deprecated="false" usage="instance">
<description><![CDATA[(Optional) listening할 keydown이나 keyup 이벤트.
                               자동적으로 기본값은 keydown.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="enabled" type="Boolean" deprecated="false" scope="instance" >
<description>LTooltip의 활성/비활성 상태를 나태느는 boolean 값</description>
</property>
<property name="KEYDOWN" type="String" deprecated="false" scope="static" >
<description>DOM 'keydown' event를 표시하는 상수</description>
</property>
<property name="KEYUP" type="String" deprecated="false" scope="static" >
<description>DOM 'keyup' event를 표시하는 상수</description>
</property>
</properties>
<events>
<event name="enabled" deprecated="false">
<description><![CDATA[
enable() 함수를 통해 LKeyListener가 활성화 될 때, LCustomEvent가 발생한다.
]]></description>
<parameters>
<parameter name="keyData" type="Object" deprecated="false" usage="instance">
<description><![CDATA[감지할 key를 표시하는 object literal
                         가능한 attribute들은 shift(boolean), alt(boolean), ctrl(boolean),
                         keys(키코드를 표시하는 정수나 정수들의 배열)가 있다.]]></description>
</parameter>
</parameters>
</event>
<event name="disabled" deprecated="false">
<description><![CDATA[
disable() 함수를 통해 LKeyListener가 비활성화 될 때, LCustomEvent가 발생한다.
]]></description>
<parameters>
<parameter name="keyData" type="Object" deprecated="false" usage="instance">
<description><![CDATA[감지할 key를 표시하는 object literal
                         가능한 attribute들은 shift(boolean), alt(boolean), ctrl(boolean),
                         keys(키코드를 표시하는 정수나 정수들의 배열)가 있다.]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="enable" deprecated="false" scope="instance" >
<description><![CDATA[대상 DOM element에 DOM event listener를 붙임으로써 LKeyListener를 활성화 한다.]]></description>
</method>
<method name="disable" deprecated="false" scope="instance" >
<description><![CDATA[대상 DOM element로 부터 DOM event listener를 삭제함으로써 LKeyListener를 비활성화 한다.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[object를 나타내는 문자열을 반환한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[LKeyListener의 문자열 표현]]></return-description>
</return-types>
</method>
</methods>
</class>
<class type="Rui.util.LCollection" deprecated="false" >
<description>LCollection utility.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>LCollection utility.</description>
</constructor>
</constructors>
<methods>
<method name="insert" deprecated="false" scope="instance" >
<description><![CDATA[item을 idx위치에 삽입하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[삽입할 위치]]></description>
</parameter>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[키]]></description>
</parameter>
<parameter name="item" type="Object" deprecated="false" usage="required">
<description><![CDATA[입력할 객체]]></description>
</parameter>
</parameters>
</method>
<method name="add" deprecated="false" scope="instance" >
<description><![CDATA[item을 추가하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[키]]></description>
</parameter>
<parameter name="item" type="Object" deprecated="false" usage="required">
<description><![CDATA[입력할 객체]]></description>
</parameter>
</parameters>
</method>
<method name="remove" deprecated="false" scope="instance" >
<description><![CDATA[item을 삭제하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[키]]></description>
</parameter>
</parameters>
</method>
<method name="indexOfKey" deprecated="false" scope="instance" >
<description><![CDATA[key에 해당하는 item의 위치를 리턴하는 메소드]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[키]]></description>
</parameter>
</parameters>
</method>
<method name="get" deprecated="false" scope="instance" >
<description><![CDATA[key에 해당하는 item을 리턴하는 메소드]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[키]]></description>
</parameter>
</parameters>
</method>
<method name="set" deprecated="false" scope="instance" >
<description><![CDATA[key에 해당하는 item을 변경하는 메소드]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[키]]></description>
</parameter>
<parameter name="item" type="Object" deprecated="false" usage="required">
<description><![CDATA[객체]]></description>
</parameter>
</parameters>
</method>
<method name="getKey" deprecated="false" scope="instance" >
<description><![CDATA[idx에 해당하는 key값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[위치]]></description>
</parameter>
</parameters>
</method>
<method name="getAt" deprecated="false" scope="instance" >
<description><![CDATA[idx 위치에 해당하는 item을 리턴하는 메소드]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[위치]]></description>
</parameter>
</parameters>
</method>
<method name="has" deprecated="false" scope="instance" >
<description><![CDATA[key 값이 존재하는지 여부]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[키값]]></description>
</parameter>
</parameters>
</method>
<method name="clear" deprecated="false" scope="instance" >
<description><![CDATA[모두 초기화 하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="each" deprecated="false" scope="instance" >
<description><![CDATA[items 정보에 해당되는 객체를 Function으로 호출하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="func" type="Function" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
</parameters>
</method>
<method name="query" deprecated="false" scope="instance" >
<description><![CDATA[func에 해당되는 값을 LCollection으로 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.util.LCollection" />
</return-types>
<parameters>
<parameter name="func" type="Function" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
</parameters>
</method>
<method name="sort" deprecated="false" scope="instance" >
<description><![CDATA[func에 해당되는 값으로 정렬하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="func" type="Function" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="dir" type="String" deprecated="false" usage="required">
<description><![CDATA[정렬 방향]]></description>
</parameter>
</parameters>
</method>
<method name="reverse" deprecated="false" scope="instance" >
<description><![CDATA[역순 정렬하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="clone" deprecated="false" scope="instance" >
<description><![CDATA[LCollection을 복제하여 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.util.LCollection" />
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.util.LResizeMonitor" deprecated="false" >
<description>LResizeMonitor</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>LResizeMonitor</description>
</constructor>
</constructors>
<properties>
</properties>
<events>
<event name="contentResized" deprecated="false">
<description><![CDATA[
지정한 content가 resized되면 이벤트가 발생된다.
]]></description>
</event>
</events>
<methods>
<method name="monitor" deprecated="false" scope="instance" >
<description><![CDATA[width auto시 resize가 일어나는지 모니터링하는 target object 설정]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="target" type="String|Object" deprecated="false" usage="required">
<description><![CDATA[객체를 붙이고자 하는 Node정보]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LDelayedTask" deprecated="false" >
<description>LDelayedTask 클래스는 새로운 타임아웃이 예전 타임아웃을 취소하는 serTimeout를 수행하는
 method의 실행을 'buffer'하기 위해 쉬운 방법을 제공한다.
 취소될때, 타스크는 실행 전에 특정 time period를 기다릴 것이다.
 해당 time period 동안 타스크가 다시 취소된다면, 원래 호출도 취소될 것이다.
 이러한 연속성때문에 함수는 각 반복에 대해 오직 한번만 호출된다.
 이 method는 사용자가 텍스트 필드에 타이핑을 마쳤는지의 여부를 확인하는 것 같은
 일들에 특별히 유용하다.
 예제로써, 키가 눌렸을때 validation을 수행하는 것이다.
 밀리초의 특정 번호에 대한 키입력 이벤트를 버퍼링하기 위해 이 클래스를 사용할수 있으며,
 그것들이 그정도의 시간동안 중지하는 경우에만 수행을 한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LDelayedTask 클래스는 새로운 타임아웃이 예전 타임아웃을 취소하는 serTimeout를 수행하는
 method의 실행을 'buffer'하기 위해 쉬운 방법을 제공한다.
 취소될때, 타스크는 실행 전에 특정 time period를 기다릴 것이다.
 해당 time period 동안 타스크가 다시 취소된다면, 원래 호출도 취소될 것이다.
 이러한 연속성때문에 함수는 각 반복에 대해 오직 한번만 호출된다.
 이 method는 사용자가 텍스트 필드에 타이핑을 마쳤는지의 여부를 확인하는 것 같은
 일들에 특별히 유용하다.
 예제로써, 키가 눌렸을때 validation을 수행하는 것이다.
 밀리초의 특정 번호에 대한 키입력 이벤트를 버퍼링하기 위해 이 클래스를 사용할수 있으며,
 그것들이 그정도의 시간동안 중지하는 경우에만 수행을 한다.</description>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="instance">
<description><![CDATA[(optional) 타임아웃에 대한 기본 함수]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="instance">
<description><![CDATA[(optional) 타임아웃에 대한 기본 scope]]></description>
</parameter>
<parameter name="args" type="Array" deprecated="false" usage="instance">
<description><![CDATA[(optional) 기본 argument array]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<methods>
<method name="delay" deprecated="false" scope="instance" >
<description><![CDATA[보류중인 타임아웃을 취소하고 새로운 것을 큐에 넣는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="delay" type="Number" deprecated="false" usage="required">
<description><![CDATA[지연을 위한 밀리초]]></description>
</parameter>
<parameter name="newFn" type="Function" deprecated="false" usage="required">
<description><![CDATA[(optional) 생성자에 전달될 오버라이딩된 함수]]></description>
</parameter>
<parameter name="newScope" type="Object" deprecated="false" usage="required">
<description><![CDATA[(optional) 생성자에 전달될 오버라이딩된 scope]]></description>
</parameter>
<parameter name="newArgs" type="Array" deprecated="false" usage="required">
<description><![CDATA[(optional) 생성자에 전달될 오버라이딩된 인자들]]></description>
</parameter>
</parameters>
</method>
<method name="cancel" deprecated="false" scope="instance" >
<description><![CDATA[마지막 큐의 타임아웃을 취소한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.util.LFormat" deprecated="false" >
<description>LFormat</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>LFormat</description>
</constructor>
</constructors>
<methods>
<method name="stringToDate" deprecated="false" scope="static" >
<description><![CDATA[String을 Data Object로 변환한다.
 format 형식은 LDate 객체 참조
 - config 파라메터가 존재하지 않을 경우 %Y-%m-%d로 파싱한다.
 - '%Y%m%d', '%Y%m%d%H%M%s', '%X' 포맷의 경우 빠르게 파싱한다.]]></description>
<return-types>
<return-type type="Date|boolean" />
<return-description><![CDATA[parsing에 성공한 경우 Date를 실패한 경우 false를 반환한다.]]></return-description>
</return-types>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="required">
<description><![CDATA[: config.format(strptime), config.locale]]></description>
</parameter>
</parameters>
</method>
<method name="stringToDateByTypeQ" deprecated="false" scope="static" >
<description><![CDATA[stringToDate의 기능중 type q에 해당되는 변환이 많이 발생하여 미리 구현해 놓음.
 type q : '%y%m%d]]></description>
<return-types>
<return-type type="Date" />
</return-types>
</method>
<method name="stringToTimestamp" deprecated="false" scope="static" >
<description><![CDATA[String을 Data Object로 변환한다.
 java.sql.timestamp의 toString은 yyyy-MM-dd HH:mm:ss.ms로 return되므로 이에 대응.]]></description>
<return-types>
<return-type type="Date" />
</return-types>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="required">
<description><![CDATA[: oConfig.format(strptime), oConfig.locale]]></description>
</parameter>
</parameters>
</method>
<method name="dateToString" deprecated="false" scope="static" >
<description><![CDATA[Date값을 지정된 포맷 형식으로 변환한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[지정된 포맷의 날짜]]></return-description>
</return-types>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="required">
<description><![CDATA[: oConfig.format(strptime), oConfig.locale]]></description>
</parameter>
</parameters>
</method>
<method name="numberFormat" deprecated="false" scope="static" >
<description><![CDATA[값을 천단위 구분 쉼표(',')로 표시한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="required">
<description><![CDATA[환경 정보]]></description>
</parameter>
<parameter name="locale" type="String" deprecated="false" usage="required">
<description><![CDATA[locale 값 ko_KR 등...
 &amp;lt;div class='param-option'&amp;gt;
   thousandsSeparator {String} 천단위 구분 쉼표]]></description>
</parameter>
</parameters>
</method>
<method name="moneyFormat" deprecated="false" scope="static" >
<description><![CDATA[config에서 설정된 default rocale을 참조하여 해당 국가의 통화를 리턴한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="locale" type="String" deprecated="false" usage="required">
<description><![CDATA[locale 값 ko_KR 등...]]></description>
</parameter>
</parameters>
</method>
<method name="rateFormat" deprecated="false" scope="static" >
<description><![CDATA[비율(%)을 표시하고, 소수점자리 수를 지정하면 그 밑으로 반올림하여 해당 소수점을 표시한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="rate" type="String" deprecated="false" usage="required">
<description><![CDATA[비율단위]]></description>
</parameter>
<parameter name="point" type="int" deprecated="false" usage="required">
<description><![CDATA[소수점자리수]]></description>
</parameter>
</parameters>
</method>
<method name="timeFormat" deprecated="false" scope="static" >
<description><![CDATA[어떤 값을 지정된 포맷 패턴을 사용하여 Time 형식으로 바꾸어준다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="sTime" type="String" deprecated="false" usage="required">
<description><![CDATA[595959]]></description>
</parameter>
<parameter name="oConfig" type="Object" deprecated="false" usage="required">
<description><![CDATA[: oConfig.format(strptime), oConfig.locale]]></description>
</parameter>
</parameters>
</method>
<method name="weightFormat" deprecated="false" scope="static" >
<description><![CDATA[중량 단위를 표시한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="unit" type="String" deprecated="false" usage="required">
<description><![CDATA[중량의 단위 ex.kg, g, mg]]></description>
</parameter>
<parameter name="thousandsSeparator" type="boolean" deprecated="false" usage="required">
<description><![CDATA[천 단위 쉼표]]></description>
</parameter>
<parameter name="point" type="int" deprecated="false" usage="required">
<description><![CDATA[소수점 자리수]]></description>
</parameter>
</parameters>
</method>
<method name="lengthFormat" deprecated="false" scope="static" >
<description><![CDATA[길이 단위를 표시한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="unit" type="String" deprecated="false" usage="required">
<description><![CDATA[길이 단위 ex.m, km]]></description>
</parameter>
<parameter name="point" type="int" deprecated="false" usage="required">
<description><![CDATA[소수점 자리수]]></description>
</parameter>
<parameter name="thousandsSeparator" type="boolean" deprecated="false" usage="required">
<description><![CDATA[천 단위 쉼표]]></description>
</parameter>
</parameters>
</method>
<method name="rendererWrapper" deprecated="false" scope="static" >
<description><![CDATA[LFormat에 등록된 모든 function을 renderer로 처리할 수 있게 해주는 메소드
 LFormat에 있는 Function의 arguments는 fnName뒤에 순차적으로 넣으면 됨.
 &amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;
 Rui.util.LFormat.rendererWrapper('dateToString', {format:'%x'});
 Rui.util.LRenderer.dateRenderer('%x')
 위 두개는 동일한 기능으로 수행 가능
 &amp;lt;/code&amp;gt;&amp;lt;/pre&amp;gt;]]></description>
<return-types>
<return-type type="Function" />
</return-types>
<parameters>
<parameter name="fnName" type="String" deprecated="false" usage="required">
<description><![CDATA[LFormat에 등록된 모든 function명]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LRenderer" deprecated="false" >
<description>Renderer</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Renderer</description>
</constructor>
</constructors>
<methods>
<method name="dateRenderer" deprecated="false" scope="static" >
<description><![CDATA[날짜(date) 형식으로 데이터가 표현되는 랜더러
 &amp;lt;p&amp;gt;Date형식의 값을 이용하며 locale에 따라 출력될 포맷이 정해진다. &amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="function" />
</return-types>
</method>
<method name="numberRenderer" deprecated="false" scope="static" >
<description><![CDATA[숫자(number) 형식으로 데이터가 표현되는 랜더러
 &amp;lt;p&amp;gt;천단위 구분기호인 콤마(,)등이 함께 출력된다. &amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="function" />
</return-types>
</method>
<method name="moneyRenderer" deprecated="false" scope="static" >
<description><![CDATA[통화(currenty) 문자와 함께 데이터가 표현되는 랜더러
 &amp;lt;p&amp;gt;locale에 따라서 원화, 달러, 엔화 등이 값과 함계 표현된다.]]></description>
<return-types>
<return-type type="function" />
</return-types>
</method>
<method name="rateRenderer" deprecated="false" scope="static" >
<description><![CDATA[비율(rate) 형식으로 데이터를 표현하는데 사용되는 랜더러
 &amp;lt;p&amp;gt;값과 함께 %가 표현된다.&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="function" />
</return-types>
</method>
<method name="timeRenderer" deprecated="false" scope="static" >
<description><![CDATA[시간(time) 형식으로 데이터를 표현하는데 사용되는 랜더러
 &amp;lt;p&amp;gt;23:59 형식으로 포맷이 변환되어 표현된다.&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="function" />
</return-types>
</method>
<method name="weightRenderer" deprecated="false" scope="static" >
<description><![CDATA[무게(weight) 단위를 표현하는데 사용되는 랜더러]]></description>
<return-types>
<return-type type="function" />
</return-types>
</method>
<method name="lengthRenderer" deprecated="false" scope="static" >
<description><![CDATA[길이(length) 단위를 표현하는데 사용되는 랜더러]]></description>
<return-types>
<return-type type="function" />
</return-types>
</method>
<method name="popupRenderer" deprecated="false" scope="static" >
<description><![CDATA[그리드 셀에 팝업 아이콘을 추가하는 랜더러]]></description>
<return-types>
<return-type type="function" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.util.LPlugin" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>LPlugin</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LPlugin</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[해당 overlay에 대한 집합이어 하는 설정을 포함하는 설정 object literal.
 더 자세한 사항은 설정 문서를 참고 한다.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<methods>
</methods>
</class>
<class type="Rui.util.LRegion" deprecated="false" >
<description>region은 그리드 상에서의 object의 표시이다.
 이것은 기본적으로 직사각형인 top, right, bottom, left의 범위에 의해 정의된다.
 만약 다른 형태의 모양이 필요한 경우 해당 클래스는 그것을 지원하기 위하여 상속될 수 있다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>region은 그리드 상에서의 object의 표시이다.
 이것은 기본적으로 직사각형인 top, right, bottom, left의 범위에 의해 정의된다.
 만약 다른 형태의 모양이 필요한 경우 해당 클래스는 그것을 지원하기 위하여 상속될 수 있다.</description>
<parameters>
<parameter name="t" type="int" deprecated="false" usage="instance">
<description><![CDATA[top 범위]]></description>
</parameter>
<parameter name="r" type="int" deprecated="false" usage="instance">
<description><![CDATA[right 범위]]></description>
</parameter>
<parameter name="b" type="int" deprecated="false" usage="instance">
<description><![CDATA[bottom 범위]]></description>
</parameter>
<parameter name="l" type="int" deprecated="false" usage="instance">
<description><![CDATA[left 범위]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="top" type="Int" deprecated="false" scope="instance" >
<description>region의 top 범위</description>
</property>
<property name="right" type="int" deprecated="false" scope="instance" >
<description>region의 right 범위</description>
</property>
<property name="bottom" type="Int" deprecated="false" scope="instance" >
<description>region의 bottom 범위</description>
</property>
<property name="left" type="Int" deprecated="false" scope="instance" >
<description>region의 left 범위</description>
</property>
</properties>
<methods>
<method name="contains" deprecated="false" scope="instance" >
<description><![CDATA[해당 region이 전달된 region을 포함하는 경우 true를 반환한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[region에 해당 region이 포함되어 있으면 true, 아니면 false]]></return-description>
</return-types>
<parameters>
<parameter name="region" type="Region" deprecated="false" usage="required">
<description><![CDATA[평가할 region]]></description>
</parameter>
</parameters>
</method>
<method name="getArea" deprecated="false" scope="instance" >
<description><![CDATA[region의 영역을 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[region의 영역]]></return-description>
</return-types>
</method>
<method name="intersect" deprecated="false" scope="instance" >
<description><![CDATA[해당 region와 중복되는 region에 전달되는 region을 반환한다.]]></description>
<return-types>
<return-type type="Region" />
<return-description><![CDATA[중복된 region이나 중복되지 않는 경우 null]]></return-description>
</return-types>
<parameters>
<parameter name="region" type="Region" deprecated="false" usage="required">
<description><![CDATA[교차되는 region]]></description>
</parameter>
</parameters>
</method>
<method name="union" deprecated="false" scope="instance" >
<description><![CDATA[해당 region과 전달된 region을 둘다 포함하는 가장 작은 영역을 표시하는
 region을 반환한다.]]></description>
<return-types>
<return-type type="Region" />
<return-description><![CDATA[조합된 region]]></return-description>
</return-types>
<parameters>
<parameter name="region" type="Region" deprecated="false" usage="required">
<description><![CDATA[조합되어 만들기 위한 region]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[toString]]></description>
</method>
<method name="getRegion" deprecated="false" scope="static" >
<description><![CDATA[DOM element에 의해 차지되는 region을 반환한다.]]></description>
<return-types>
<return-type type="Region" />
<return-description><![CDATA[element가 차지하는 region]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[The element]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LPoint" deprecated="false"  superclass="Rui.util.LRegion" >
<description>point는 그리드 상에서의 싱글 포인트를 표현하는 특정한 영역이다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>point는 그리드 상에서의 싱글 포인트를 표현하는 특정한 영역이다.</description>
<parameters>
<parameter name="x" type="int" deprecated="false" usage="instance">
<description><![CDATA[point의 X 위치]]></description>
</parameter>
<parameter name="y" type="int" deprecated="false" usage="instance">
<description><![CDATA[point의 Y 위치]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="x" type="Int" deprecated="false" scope="instance" >
<description>right, left나 인덱스가 0인 point의 X 위치(Dom.getXY symmetry에 대한)</description>
</property>
<property name="y" type="Int" deprecated="false" scope="instance" >
<description>The Y position of the point, which is also the top, bottom and index one (for Dom.getXY symmetry)
 top, bottom이나 인덱스가 1인 point의 Y 위치(Dom.getXY symmetry에 대한)</description>
</property>
</properties>
</class>
<class type="Rui.webdb.LAbstractProvider" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>Abstract LAbstractProvider utility.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Abstract LAbstractProvider utility.</description>
<parameters>
<parameter name="The" type="Object" deprecated="false" usage="instance">
<description><![CDATA[intial LAbstractProvider.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<events>
<event name="stateChanged" deprecated="false">
<description><![CDATA[
값의 상태가 바뀌면 호출되는 이벤트.
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="type" type="String" deprecated="false" usage="instance">
<description><![CDATA[변경 종류]]></description>
</parameter>
<parameter name="key" type="String" deprecated="false" usage="instance">
<description><![CDATA[키]]></description>
</parameter>
<parameter name="value" type="Array|Object" deprecated="false" usage="instance">
<description><![CDATA[값]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="isLocalStorageSupported" deprecated="false" scope="static" >
<description><![CDATA[localStorage를 사용 가능한지 여부를 검사한다.
 Mobile Safari등의 경우 private browsing등의 이유로 localStorage 사용이 제한될 수 있다.
 localStorage가 private browsing의 이유로 막힌경우 다음 오류가 발생한다.
 "QuotaExceededError: DOM Exception 22: An attempt was made to add something to storage that exceeded the quota."
 Safari의 보안 옵션에 따라 제한을 해제 할 수 있으나 이 옵션에 관계없이 localStorage를 사용할 수 있는 브라우저인지를 직접 localStorage.setItem을 시도해 이상유무를 검사할 수 있다.]]></description>
</method>
<method name="get" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 얻어오는 메소드]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[키 이름에 해당되는 결과 값]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[상태정보를 얻어오는 키 이름]]></description>
</parameter>
<parameter name="defaultValue" type="Object" deprecated="false" usage="required">
<description><![CDATA[값이 없을 경우 리턴되는 기본값]]></description>
</parameter>
</parameters>
</method>
<method name="set" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 저장하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[저장하고자 하는 키 이름]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[저장하고자 하는 키 이름]]></description>
</parameter>
</parameters>
</method>
<method name="remove" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 삭제하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[지우고자 하는 키 이름]]></description>
</parameter>
</parameters>
</method>
<method name="clear" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 모두 삭제하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.webdb.LCookieProvider" deprecated="false"  superclass="Rui.webdb.LAbstractProvider" >
<description>Cookie Provider utility.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Cookie Provider utility.</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LCookieProvider.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="set" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 저장하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[저장하고자 하는 키 이름]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[저장하고자 하는 키 이름]]></description>
</parameter>
</parameters>
</method>
<method name="remove" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 삭제하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[지우고자 하는 키 이름]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.webdb.LWebStorage" deprecated="false" >
<description>각 객체의 state상태를 관리하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>각 객체의 state상태를 관리하는 객체</description>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="get" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 얻어오는 메소드]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[키 이름에 해당되는 결과 값]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[상태정보를 얻어오는 키 이름]]></description>
</parameter>
<parameter name="defaultValue" type="Object" deprecated="false" usage="required">
<description><![CDATA[값이 없을 경우 리턴되는 기본값]]></description>
</parameter>
</parameters>
</method>
<method name="getBoolean" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 boolean값으로 얻어오는 메소드]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[키 이름에 해당되는 결과 값]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[상태정보를 얻어오는 키 이름]]></description>
</parameter>
<parameter name="defaultValue" type="Object" deprecated="false" usage="required">
<description><![CDATA[값이 없을 경우 리턴되는 기본값]]></description>
</parameter>
</parameters>
</method>
<method name="getInt" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 Int로 얻어오는 메소드]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[키 이름에 해당되는 결과 값]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[상태정보를 얻어오는 키 이름]]></description>
</parameter>
<parameter name="defaultValue" type="Object" deprecated="false" usage="required">
<description><![CDATA[값이 없을 경우 리턴되는 기본값]]></description>
</parameter>
</parameters>
</method>
<method name="getString" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 문자로 얻어오는 메소드]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[키 이름에 해당되는 결과 값]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[상태정보를 얻어오는 키 이름]]></description>
</parameter>
<parameter name="defaultValue" type="Object" deprecated="false" usage="required">
<description><![CDATA[값이 없을 경우 리턴되는 기본값]]></description>
</parameter>
</parameters>
</method>
<method name="set" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 저장하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[저장하고자 하는 키 이름]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[저장하고자 하는 키 이름]]></description>
</parameter>
</parameters>
</method>
<method name="remove" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 삭제하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[지우고자 하는 키 이름]]></description>
</parameter>
</parameters>
</method>
<method name="clear" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 모두 삭제하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setProvider" deprecated="false" scope="instance" >
<description><![CDATA[Provider정보를 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="provider" type="String" deprecated="false" usage="required">
<description><![CDATA[셋팅하고자 하는 provider]]></description>
</parameter>
</parameters>
</method>
<method name="getProvider" deprecated="false" scope="instance" >
<description><![CDATA[Provider정보를 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.webdb.LAbstractProvider" />
<return-description><![CDATA[선택된 provider 정보]]></return-description>
</return-types>
</method>
</methods>
</class>
<class type="Rui.config.LConfigurationProvider" deprecated="false"  superclass="Rui.webdb.LAbstractProvider" >
<description>LConfiguration Provider utility.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LConfiguration Provider utility.</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LConfigurationProvider.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="get" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 얻어오는 메소드]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[키 이름에 해당되는 결과 값]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[상태정보를 얻어오는 키 이름]]></description>
</parameter>
<parameter name="defaultValue" type="Object" deprecated="false" usage="required">
<description><![CDATA[값이 없을 경우 리턴되는 기본값]]></description>
</parameter>
</parameters>
</method>
<method name="set" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 저장하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[저장하고자 하는 키 이름]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[저장하고자 하는 키 이름]]></description>
</parameter>
</parameters>
</method>
<method name="remove" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 삭제하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[지우고자 하는 키 이름]]></description>
</parameter>
</parameters>
</method>
<method name="reload" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 다시 읽어드리는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="isLoad" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 읽었는지 여부]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.config.LConfiguration" deprecated="false"  superclass="Rui.webdb.LWebStorage" >
<description>rui_config.js 파일의 정보를 읽어오거나 변경할 수 있는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>rui_config.js 파일의 정보를 읽어오거나 변경할 수 있는 객체</description>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="getInstance" deprecated="false" scope="static" >
<description><![CDATA[인스턴스를 얻어오는 메소드]]></description>
<return-types>
<return-type type="Rui.config.LConfiguration" />
</return-types>
</method>
<method name="reload" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 다시 읽어드리는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getFirst" deprecated="false" scope="instance" >
<description><![CDATA[가장 첫번째 데이터를 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.message.LMessageManager" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>다국어 메시지를 관리하는 기능</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>다국어 메시지를 관리하는 기능</description>
</constructor>
</constructors>
<properties>
<property name="useAutoLoad" type="Boolean" deprecated="false" scope="instance" >
<description>해당 Locale의 메시지가 없을 경우 서버에서 자동으로 Locale에 해당되는 메시지를 읽어 올지 결정하는 변수</description>
</property>
<property name="useApplyDefaultMessage" type="Boolean" deprecated="false" scope="instance" >
<description>해당 Locale의 메시지가 없을 경우 defaultLocale에 해당되는 메시지를 출력할지 결정하는 변수</description>
</property>
</properties>
<events>
<event name="createRootLocale" deprecated="false">
<description><![CDATA[
Core Locale 정보를 읽어올때 발생하는 이벤트
]]></description>
</event>
</events>
<methods>
<method name="setLocale" deprecated="false" scope="instance" >
<description><![CDATA[현재 셋팅되어 있는 Locale 정보를 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="currentLocale" type="String" deprecated="false" usage="required">
<description><![CDATA[변경하고자 하는 locale 정보]]></description>
</parameter>
</parameters>
</method>
<method name="addLocaleData" deprecated="false" scope="instance" >
<description><![CDATA[메시지 데이터를 직접 추가한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="localeData" type="Object" deprecated="false" usage="required">
<description><![CDATA[실제 메시지 데이터를 가지는 객체]]></description>
</parameter>
</parameters>
</method>
<method name="get" deprecated="false" scope="instance" >
<description><![CDATA[메시지 데이터를 읽어 온다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과 메시지]]></return-description>
</return-types>
<parameters>
<parameter name="name" type="Object" deprecated="false" usage="required">
<description><![CDATA[읽어오고자하는 메시지 키값]]></description>
</parameter>
<parameter name="paramArray" type="Array" deprecated="false" usage="required">
<description><![CDATA[읽어올때 @로 대체될 값]]></description>
</parameter>
</parameters>
</method>
<method name="load" deprecated="false" scope="instance" >
<description><![CDATA[Locale에 해당되는 데이터를 읽어온다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="required">
<description><![CDATA[읽어올 환경정보를 가지는 객체]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.fx.LAnim" deprecated="false" >
<description>Base animation class는 animation효과들을 주는 interface를 제공한다.
 &amp;lt;p&amp;gt;Usage: var myAnim = new Rui.fx.LAnim(el, { width: { from: 10, to: 100 } }, 1, Rui.fx.LEasing.easeOut);&amp;lt;/p&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Base animation class는 animation효과들을 주는 interface를 제공한다.
 &amp;lt;p&amp;gt;Usage: var myAnim = new Rui.fx.LAnim(el, { width: { from: 10, to: 100 } }, 1, Rui.fx.LEasing.easeOut);&amp;lt;/p&amp;gt;</description>
<parameters>
<parameter name="el" type="String | HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[animation효과가 적용될 element]]></description>
</parameter>
<parameter name="attributes" type="Object" deprecated="false" usage="instance">
<description><![CDATA[animation효과 관련 attribute, 각 attribute는 object로 to나 by가 정의되어 있다. 이외에 from, units(px)가 있으며 camelCase로 표기한다.]]></description>
</parameter>
<parameter name="duration" type="Number" deprecated="false" usage="instance">
<description><![CDATA[(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="instance">
<description><![CDATA[(optional, defaults to Rui.fx.LEasing.easeNone) Computes the values that are applied to the attributes per frame (generally a Rui.fx.LEasing method)]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<events>
<event name="start" deprecated="false">
<description><![CDATA[
animation이 시작되면 호출되는 이벤트
]]></description>
</event>
<event name="tween" deprecated="false">
<description><![CDATA[
animation의 매 frame마다 호출되는 이벤트
]]></description>
</event>
<event name="complete" deprecated="false">
<description><![CDATA[
animation이 종료되면 호출되는 이벤트
]]></description>
</event>
</events>
<methods>
<method name="animate" deprecated="false" scope="instance" >
<description><![CDATA[animation manager에 등록하면서 animation을 시작한다.]]></description>
</method>
<method name="stop" deprecated="false" scope="instance" >
<description><![CDATA[animation을 정지한다.  일반적으로 animation이 끝났을 경우 LAnimManager에 의해 call된다.]]></description>
<parameters>
<parameter name="finish" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) true면 마지막 frame로 이동한다.]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[LAnim instance에 대한 이름]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.fx.LAnimManager" deprecated="false" >
<description>animation과 theading 처리
 LAnim과 subclass 들에서 사용됨</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>animation과 theading 처리
 LAnim과 subclass 들에서 사용됨</description>
</constructor>
</constructors>
<properties>
<property name="fps" type="Int" deprecated="false" scope="instance" >
<description>기본 frame 비율 (frames per second).
 더 나은 x-browser calibration을 위해 임의로 증가(느린 브라우저들은 frame이 더 떨어짐)</description>
</property>
</properties>
<methods>
</methods>
</class>
<class type="Rui.fx.LEasing" deprecated="false" >
<description>처음부터 끝까지 어떻게 animation을 진행할지 결정하는 Singleton 패턴</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>처음부터 끝까지 어떻게 animation을 진행할지 결정하는 Singleton 패턴</description>
</constructor>
</constructors>
<methods>
<method name="easeNone" deprecated="false" scope="static" >
<description><![CDATA[point들 간의 speed를 통일한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="easeIn" deprecated="false" scope="static" >
<description><![CDATA[끝쪽을 향하여 천천히 가속하기 시작한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="easeOut" deprecated="false" scope="static" >
<description><![CDATA[끝쪽을 향하여 빠르게 감속하기 시작한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="easeBoth" deprecated="false" scope="static" >
<description><![CDATA[끝쪽을 향하여 천천히 감속하기 시작한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="easeInStrong" deprecated="false" scope="static" >
<description><![CDATA[끝쪽을 향하여 천천히 가속하기 시작한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="easeOutStrong" deprecated="false" scope="static" >
<description><![CDATA[끝쪽을 향하여 빠르게 감속하기 시작한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="easeBothStrong" deprecated="false" scope="static" >
<description><![CDATA[끝쪽을 향하여 천천히 감속하기 시작한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="elasticIn" deprecated="false" scope="static" >
<description><![CDATA[탄성 효과 snap in]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
<parameter name="a" type="Number" deprecated="false" usage="required">
<description><![CDATA[진폭 (optional)]]></description>
</parameter>
<parameter name="p" type="Number" deprecated="false" usage="required">
<description><![CDATA[주기 (optional)]]></description>
</parameter>
</parameters>
</method>
<method name="elasticOut" deprecated="false" scope="static" >
<description><![CDATA[탄성 효과 snap out]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
<parameter name="a" type="Number" deprecated="false" usage="required">
<description><![CDATA[진폭 (optional)]]></description>
</parameter>
<parameter name="p" type="Number" deprecated="false" usage="required">
<description><![CDATA[주기 (optional)]]></description>
</parameter>
</parameters>
</method>
<method name="elasticBoth" deprecated="false" scope="static" >
<description><![CDATA[탄성 효과 snap both]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
<parameter name="a" type="Number" deprecated="false" usage="required">
<description><![CDATA[진폭 (optional)]]></description>
</parameter>
<parameter name="p" type="Number" deprecated="false" usage="required">
<description><![CDATA[주기 (optional)]]></description>
</parameter>
</parameters>
</method>
<method name="backIn" deprecated="false" scope="static" >
<description><![CDATA[Backtracks slightly, then reverses direction and moves to end.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
<parameter name="s" type="Number" deprecated="false" usage="required">
<description><![CDATA[Overshoot (optional)]]></description>
</parameter>
</parameters>
</method>
<method name="backOut" deprecated="false" scope="static" >
<description><![CDATA[Overshoots end, then reverses and comes back to end.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
<parameter name="s" type="Number" deprecated="false" usage="required">
<description><![CDATA[Overshoot (optional)]]></description>
</parameter>
</parameters>
</method>
<method name="backBoth" deprecated="false" scope="static" >
<description><![CDATA[Backtracks slightly, then reverses direction, overshoots end,
 then reverses and comes back to end.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
<parameter name="s" type="Number" deprecated="false" usage="required">
<description><![CDATA[Overshoot (optional)]]></description>
</parameter>
</parameters>
</method>
<method name="bounceIn" deprecated="false" scope="static" >
<description><![CDATA[Bounce off of start.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="bounceOut" deprecated="false" scope="static" >
<description><![CDATA[Bounces off end.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="bounceBoth" deprecated="false" scope="static" >
<description><![CDATA[Bounces off start and end.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.fx.LMotionAnim" deprecated="false"  superclass="Rui.fx.LAnim" >
<description>'attribute'의 'points' member에 의해 정의된 경로를 따라 element들을 이동하기 위한 LAnim subclass.
 모든 'points'는 x, y 좌표 배열이다.
 &amp;lt;p&amp;gt;Usage: &amp;lt;code&amp;gt;var myAnim = new Rui.fx.LMotionAnim(el, { points: { to: [800, 800] } }, 1, Rui.fx.LEasing.easeOut);&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>'attribute'의 'points' member에 의해 정의된 경로를 따라 element들을 이동하기 위한 LAnim subclass.
 모든 'points'는 x, y 좌표 배열이다.
 &amp;lt;p&amp;gt;Usage: &amp;lt;code&amp;gt;var myAnim = new Rui.fx.LMotionAnim(el, { points: { to: [800, 800] } }, 1, Rui.fx.LEasing.easeOut);&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;</description>
<parameters>
<parameter name="el" type="String | HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[animated 되어질 element에 대한 참조]]></description>
</parameter>
<parameter name="attributes" type="Object" deprecated="false" usage="instance">
<description><![CDATA[animated될 attribute
 각각의 attribute는 최소한 'to'나 'by' member가 정의된 object이다.
 추가적인 옵션 member들은 'from'(defaults to current value)과 'unit'(defaults to 'px') 이다.
 모든 attribute 이름은 camelCase 방식을 사용한다.]]></description>
</parameter>
<parameter name="duration" type="Number" deprecated="false" usage="instance">
<description><![CDATA[(optional, 기본값 1초) animation의 길이 (frames or seconds), defaults to time-based]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="instance">
<description><![CDATA[(optional, Rui.fx.LEasing.easeNone 기본값) 각 frame별 attribute에 적용되는 값을 계산 (일반적으로 Rui.fx.LEasing method)]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<methods>
</methods>
</class>
<class type="Rui.fx.LBezier" deprecated="false" >
<description>control point 들의 숫자에 대한 LBezier spline 들을 계산하기 위하여 사용된다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>control point 들의 숫자에 대한 LBezier spline 들을 계산하기 위하여 사용된다.</description>
</constructor>
</constructors>
<methods>
</methods>
</class>
<class type="Rui.dd.LDragDropManager" deprecated="false" >
<description>LDragDropManager는 window에서 모든 LDragDrop 항목에 대한 element 상호작용을
 추적하는 싱글턴 패턴이다.
 일반적으로 이 클래스를 직접 호출하지는 않겠지만, 이것은 LDragDrop에
 유용할 수 있는 도움을 주는 method를 가진다.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>LDragDropManager는 window에서 모든 LDragDrop 항목에 대한 element 상호작용을
 추적하는 싱글턴 패턴이다.
 일반적으로 이 클래스를 직접 호출하지는 않겠지만, 이것은 LDragDrop에
 유용할 수 있는 도움을 주는 method를 가진다.</description>
</constructor>
</constructors>
<properties>
<property name="useShim" type="Boolean" deprecated="false" scope="static" >
<description>이 property는 모든 LDragDrop 인스턴스에서의 shim element의 광범위한 사용 전환에 사용된다,
 기본적으로 backcompat에 대해 false이다.(사용법: Rui.dd.LDDM.useShim = true)</description>
</property>
<property name="preventDefault" type="boolean" deprecated="false" scope="static" >
<description>정의한 event들의 기본 작업을 막아야 할지에 대한 여부를 결정하기 위한 flag.
 기본적으로 true 이지만, 기본 작업을 원하는 경우 false로 설정할 수 있다.(추천하지는 않음)</description>
</property>
<property name="stopPropagation" type="boolean" deprecated="false" scope="static" >
<description>생성한 event들의 전파를 그만두어야 할지에 대한 여부를 결정하기 위한 flag.
 기본적으로 true 이지만 마우스 클릭이 필요한 다른 특징을 포함하는
 html element인 경우 false로 설정하고자 할 수도 있다.</description>
</property>
<property name="interactionInfo" type="object" deprecated="false" scope="static" >
<description>상호작용의 현재 집합에 대한 추가적인 정보를 제공한다.
 event hanlder들로부터 액세스될 수 있다.
 이것은 다음과 같은 property들을 포함한다:
 &amp;lt;pre&amp;gt;

       out:       onDragOut interactions
       enter:     onDragEnter interactions
       over:      onDragOver interactions
       drop:      onDragDrop interactions
       point:     커서의 위치
       draggedRegion: interaction시 드래그된 element의 위치
       sourceRegion: interaction시 source element의 위치
       validDrop: boolean
 &amp;lt;/pre&amp;gt;</description>
</property>
<property name="POINT" type="int" deprecated="false" scope="static" >
<description>point 모드에서 드래그드랍 상호작용은 드래그드랍 동안 커서의 위치에 의해 정의된다.</description>
</property>
<property name="INTERSECT" type="int" deprecated="false" scope="static" >
<description>intersect에서 드래그드랍 상호작용은 커서 위치나 두개 혹은 그 이상의
 드래그드랍 object들의 overlap 양에 의해 정의된다.</description>
</property>
<property name="STRICT_INTERSECT" type="int" deprecated="false" scope="static" >
<description>intersect에서 드래그드랍 상호작용은 두개 혹은 그 이상의
 드래그드랍 object들의 overlap에 의해서만 정의된다.</description>
</property>
<property name="mode" type="int" deprecated="false" scope="static" >
<description>The current drag and drop mode.  Default: POINT</description>
</property>
<property name="useCache" type="boolean" deprecated="false" scope="static" >
<description>드래그 하는 동안 끊임없는 각 드래그드랍 linked element의 lookup을
 강제하고자 하는 경우 useCache를 false로 설정한다.</description>
</property>
<property name="clickPixelThresh" type="int" deprecated="false" scope="static" >
<description>드래그가 초기화 되기 이전 mousedown이후에 마우스를 움직일
 필요가 있을 경우 픽셀의 숫자. 기본값은 3</description>
</property>
<property name="clickTimeThresh" type="int" deprecated="false" scope="static" >
<description>mouseup event를 가져오지 않는 경우 드래그를 초기화 하기 위한
 mousedown event이후의 밀리초 숫자. 기본값은 1000.</description>
</property>
<property name="el" type="Object" deprecated="false" scope="instance" >
<description>The element</description>
</property>
<property name="id" type="Object" deprecated="false" scope="instance" >
<description>The element id</description>
</property>
<property name="css" type="Object" deprecated="false" scope="instance" >
<description>A reference to the style property</description>
</property>
</properties>
<methods>
<method name="lock" deprecated="false" scope="static" >
<description><![CDATA[모든 드래그드랍을 기능적으로 lock 한다.]]></description>
</method>
<method name="unlock" deprecated="false" scope="static" >
<description><![CDATA[모든 드래그드랍을 기능적으로 unlock 한다.]]></description>
</method>
<method name="isLocked" deprecated="false" scope="static" >
<description><![CDATA[드래그드랍이 lock 되어 있는지 여부 확인]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[드래그드랍이 lock되어 있으면 true 아니면 false]]></return-description>
</return-types>
</method>
<method name="regDragDrop" deprecated="false" scope="static" >
<description><![CDATA[각각의 LDragDrop 인스턴스는 반드시 LDragDropManager와 같이 등록되어야 한다.
 이것은 LDragDrop.init()에서 실행된다.]]></description>
<parameters>
<parameter name="oDD" type="Rui.dd.LDragDrop" deprecated="false" usage="required">
<description><![CDATA[등록할 LDragDrop object]]></description>
</parameter>
<parameter name="group" type="String" deprecated="false" usage="required">
<description><![CDATA[해당 element가 속할 그룹의 이름]]></description>
</parameter>
</parameters>
</method>
<method name="regHandle" deprecated="false" scope="static" >
<description><![CDATA[각각의 LDragDrop handle element는 반드시 등록되어야 한다.
 이것은 LDragDrop.setHandleElId()이 실행될때 자동적으로 수행된다.]]></description>
<parameters>
<parameter name="sDDId" type="String" deprecated="false" usage="required">
<description><![CDATA[element가 핸들링 할 LDragDrop id]]></description>
</parameter>
<parameter name="sHandleId" type="String" deprecated="false" usage="required">
<description><![CDATA[드래그 될 element의 id
 handle]]></description>
</parameter>
</parameters>
</method>
<method name="isDragDrop" deprecated="false" scope="static" >
<description><![CDATA[주어진 element가 드래그드랍 항목으로써 등록되어 있는지에 대한
 여부를 결정하는 유틸리티 함수]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[해당 element가 LDragDrop인 경우 true, 아니면 false]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[체크할 element id]]></description>
</parameter>
</parameters>
</method>
<method name="getRelated" deprecated="false" scope="static" >
<description><![CDATA[인스턴스가 속할 모든 그룹에 전달된 드래그드랍 인스턴스들을 반환한다.]]></description>
<return-types>
<return-type type="LDragDrop[]" />
<return-description><![CDATA[연관된 인스턴스]]></return-description>
</return-types>
<parameters>
<parameter name="p_oDD" type="Rui.dd.LDragDrop" deprecated="false" usage="required">
<description><![CDATA[연관된 데이터를 가져올 object]]></description>
</parameter>
<parameter name="bTargetsOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[true인 경우 타겟팅 가능한 object만 반환한다.]]></description>
</parameter>
</parameters>
</method>
<method name="isLegalTarget" deprecated="false" scope="static" >
<description><![CDATA[특정 드래그 obj에 대해 특정 dd 대상이 유효한 대상인 경우 true를 반환한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[dd obj애 대해 대상이 유요한 대상인 경우 true]]></return-description>
</return-types>
<parameters>
<parameter name="oDD" type="Rui.dd.LDragDrop" deprecated="false" usage="required">
<description><![CDATA[드래그 obj]]></description>
</parameter>
<parameter name="oTargetDD" type="Rui.dd.LDragDrop" deprecated="false" usage="required">
<description><![CDATA[대상]]></description>
</parameter>
</parameters>
</method>
<method name="isTypeOfDD" deprecated="false" scope="static" >
<description><![CDATA[object가 LDragDrop typeof인지 LDragDrop의 정확한 서브클래스인지를
 투명하게 결정할 수 있는 것이 목표이다.
 typeof는 'object'를 반환하며, oDD.constructor.toString()은 항상
  서브클래스의 이름이 아닌 'LDragDrop'을 반환한다.
 그래서 지금은 그냥 LDragDrop에서 잘 알려진 변수를 평가한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[typeof oDD가 LDragDrop와 같은 경우 true]]></return-description>
</return-types>
<parameters>
<parameter name="oDD" type="Object" deprecated="false" usage="required">
<description><![CDATA[평가할 object]]></description>
</parameter>
</parameters>
</method>
<method name="isHandle" deprecated="false" scope="static" >
<description><![CDATA[주오진 드래그드랍 object에 대해 주어진 element가 드래그드랍 handle로써
 등록되었는지에 대한 여부를 결정하는 유틸리티 함수]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[해당 element가 LDragDrop handle인 경우 true, 아니면 false]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[체크할 element id]]></description>
</parameter>
</parameters>
</method>
<method name="getDDById" deprecated="false" scope="static" >
<description><![CDATA[Returns the LDragDrop instance for a given id
 주어진 id에 대한 LDragDrop 인스턴스를 반환한다.]]></description>
<return-types>
<return-type type="Rui.dd.LDragDrop" />
<return-description><![CDATA[드래그드랍 object, 찾지 못한 경우 null]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[LDragDrop object의 id]]></description>
</parameter>
</parameters>
</method>
<method name="startDrag" deprecated="false" scope="static" >
<description><![CDATA[드래그 픽셀 threshold나 mousedown hold 시간 threshold가
 만났을때 발생한다.]]></description>
<parameters>
<parameter name="x" type="int" deprecated="false" usage="required">
<description><![CDATA[원래 mousedown의 X 위치]]></description>
</parameter>
<parameter name="y" type="int" deprecated="false" usage="required">
<description><![CDATA[원래 mousedown의 Y 위치]]></description>
</parameter>
</parameters>
</method>
<method name="stopEvent" deprecated="false" scope="static" >
<description><![CDATA[이 항목이 켜지는 경우 event의 디폴트 처리와 event의 전파를 막는 유틸리티]]></description>
<parameters>
<parameter name="e" type="Event" deprecated="false" usage="required">
<description><![CDATA[the event as returned by this.getEvent()]]></description>
</parameter>
</parameters>
</method>
<method name="stopDrag" deprecated="false" scope="static" >
<description><![CDATA[현재의 드래그를 끝내고 상태를 초기화 하며, endDrag와 mouseUp event들을 발생시킨다.
 드래그 하는 동안 mouseup이 감지 되었을때 내부적으로 호출된다.
 다른 event(이를테면, onDrag에서 받는 mousemove event)나 pageX와 pageY로 정의된
 fake event(그래서 endDrag와 onMouseUp은 사용가능한 위치데이터를 가짐)에 의해
 전달됨으로써 드래그 하는 동안 수동적으로 발생할 수 있다.
 대안으로, silent parameter에 대해 true를 전달해서 ednDrag나 onMouseUp event들이
 스킵되도록 한다.(그래서 event 데이터가 필요하지 않다.)]]></description>
<parameters>
<parameter name="e" type="Event" deprecated="false" usage="required">
<description><![CDATA[mouseup event나 다른 pageX and pageY로 정의된 event(아니면 fake event)나
                  silent parameter가 true인 경우에는 없음]]></description>
</parameter>
<parameter name="silent" type="boolean" deprecated="false" usage="required">
<description><![CDATA[true인 경우 enddrag와 mouseup event를 스킵한다.]]></description>
</parameter>
</parameters>
</method>
<method name="getBestMatch" deprecated="false" scope="static" >
<description><![CDATA[INTERSECT 모드에 있을때 드래그드랍 event들에 의해 반환된 드래그드랍
 object들의 목록으로부터 가장 일치하는 것을 가져오는 helper 함수
 이는 커서가 가리키는 첫번째 object나 드래그된 element와 가장 크게
 오버랩된 object를 반환한다.]]></description>
<return-types>
<return-type type="Rui.dd.LDragDrop" />
<return-description><![CDATA[가장 일치하는 object]]></return-description>
</return-types>
<parameters>
<parameter name="dds" type="LDragDrop[]" deprecated="false" usage="required">
<description><![CDATA[드래그드랍 object들의 array
 targeted]]></description>
</parameter>
</parameters>
</method>
<method name="refreshCache" deprecated="false" scope="static" >
<description><![CDATA[특정 그룹에서 드래그드랍 object들의 top-left와 bottom-right 지점의
 캐시를 새로고침한다.
 이것은 드래그드랍 인스턴스에 저장되는 포맷이며, 전형적인 사용법은 다음과 같다:
 &amp;lt;code&amp;gt;
 Rui.dd.LDragDropManager.refreshCache(ddinstance.groups);
 &amp;lt;/code&amp;gt;
 다른 방법으로:
 &amp;lt;code&amp;gt;
 Rui.dd.LDragDropManager.refreshCache({group1:true, group2:true});
 &amp;lt;/code&amp;gt;]]></description>
<parameters>
<parameter name="groups" type="Object" deprecated="false" usage="required">
<description><![CDATA[새로고침할 그룹들의 연관 배열]]></description>
</parameter>
</parameters>
</method>
<method name="verifyEl" deprecated="false" scope="static" >
<description><![CDATA[element가 존재하고 DOM안에 있는지 확인하기 위해 체크한다.
 주요 목적은 innerHTML 에서 DOM으로부터 드래그드랍 object를 제거하기 위해
 사용되는 경우를 핸들링하는 것이다.
 IE 브라우저는 그런 element의 offsetParent를 액세스 하려고 할때
 'unspecified error'를 제공한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[element가 사용가능한 경우 true]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[체크할 element]]></description>
</parameter>
</parameters>
</method>
<method name="getLocation" deprecated="false" scope="static" >
<description><![CDATA[설정할 padding 값을 포함한 드래그드랍 element의 위치와 사이즈를 포함하는
 Region object를 반환한다.]]></description>
<return-types>
<return-type type="Rui.util.LRegion" />
<return-description><![CDATA[a 설정될 padding 인스턴스를 포함한 element가 나타내는]]></return-description>
</return-types>
<parameters>
<parameter name="oDD" type="Rui.dd.LDragDrop" deprecated="false" usage="required">
<description><![CDATA[위치를 가져올 드래그드랍 object]]></description>
</parameter>
</parameters>
</method>
<method name="getElement" deprecated="true" scope="static" >
<description><![CDATA[실제 DOM element를 반환한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[The element]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[가져올 element의 id]]></description>
</parameter>
</parameters>
</method>
<method name="getCss" deprecated="true" scope="static" >
<description><![CDATA[DOM element에 대한 스타일 property를 반환한다.(다시 말하면, document.getElById(id).style)]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[element의 스타일 property]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[가져올 element의 id]]></description>
</parameter>
</parameters>
</method>
<method name="getPosX" deprecated="true" scope="static" >
<description><![CDATA[html element에 대한 X 위치를 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[X 좌표]]></return-description>
</return-types>
</method>
<method name="getPosY" deprecated="true" scope="static" >
<description><![CDATA[html element에 대한 Y 위치를 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[Y 좌표]]></return-description>
</return-types>
</method>
<method name="swapNode" deprecated="false" scope="static" >
<description><![CDATA[두 노드를 바꾼다.
 IE 브라우저에서는 다른 IE 작동을 에뮬레이팅 하기 위해서 native method를 사용한다.]]></description>
</method>
<method name="getStyle" deprecated="true" scope="static" >
<description><![CDATA[특정 element의 스타일 property를 반환한다.]]></description>
<return-types>
<return-type type="string" />
<return-description><![CDATA[스타일 property의 값]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[element]]></description>
</parameter>
<parameter name="styleProp" type="string" deprecated="false" usage="required">
<description><![CDATA[스타일 property]]></description>
</parameter>
</parameters>
</method>
<method name="getScrollTop" deprecated="false" scope="static" >
<description><![CDATA[scrollTop을 가져온다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[document의 scrollTop]]></return-description>
</return-types>
</method>
<method name="getScrollLeft" deprecated="false" scope="static" >
<description><![CDATA[scrollLeft을 가져온다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[document의 scrollTop]]></return-description>
</return-types>
</method>
<method name="moveToEl" deprecated="false" scope="static" >
<description><![CDATA[대상 element의 위치에 대한 element의 x/y 위치를 설정한다.]]></description>
<parameters>
<parameter name="moveEl" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[이동할 element]]></description>
</parameter>
<parameter name="targetEl" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[element의 위치 참조]]></description>
</parameter>
</parameters>
</method>
<method name="getClientHeight" deprecated="true" scope="static" >
<description><![CDATA[클라이언트 height를 가져온다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[픽셀 단위의 클라이언트 height]]></return-description>
</return-types>
</method>
<method name="getClientWidth" deprecated="true" scope="static" >
<description><![CDATA[클라이언트 width를 가져온다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[픽셀 단위의 클라이언트 width]]></return-description>
</return-types>
</method>
<method name="numericSort" deprecated="false" scope="static" >
<description><![CDATA[숫자 배열 정렬 함수]]></description>
</method>
<method name="handleWasClicked" deprecated="false" scope="static" >
<description><![CDATA[클릭되었는지 여부를 결정하기 위해서 handle element에 대해
 인접한 parent와 모든 child 노드를 재귀적으로 탐색한다.]]></description>
</method>
</methods>
</class>
<class type="Rui.dd.LDragDrop" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>대상을 드래그하거나 드랍할 수 있는 항목의 인터페이스나 기본 작업을 정의한다.
 이것은 startDrag, onDrag, onDragOver, onDragOut에 대한
 event handler 오버라이딩 되거나 상속되도록 디자인 되어졌다.
 html 참조가 LDragDrop 인스턴스와 연결될 수 있는 건 3개 까지이다.
 &amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;linked element: 생성자에 전달된 element.
 이것은 다른 LDragDrop object들과 상호작용하는데 대한 경계를 정의하는 element이다.&amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;handle element(s): 클릭된 element가handle element와 매치되는 경우에만 발생하는 드래그 작업.
 기본적으로 이것은 linked element이지만 드래그 작업을 초기화 하기 위한
 linked element의 부분으로만 여겨질 기회는 있으며, setHandleElId() method는
 이것을 정의하기 위한 방법을 제공한다.&amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;drag element: 이것은 드래그 작업 동안 커서와 함께 움직여야 하는 element를 표현한다.
 기본적으로 이것은 {</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>대상을 드래그하거나 드랍할 수 있는 항목의 인터페이스나 기본 작업을 정의한다.
 이것은 startDrag, onDrag, onDragOver, onDragOut에 대한
 event handler 오버라이딩 되거나 상속되도록 디자인 되어졌다.
 html 참조가 LDragDrop 인스턴스와 연결될 수 있는 건 3개 까지이다.
 &amp;lt;ul&amp;gt;
 &amp;lt;li&amp;gt;linked element: 생성자에 전달된 element.
 이것은 다른 LDragDrop object들과 상호작용하는데 대한 경계를 정의하는 element이다.&amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;handle element(s): 클릭된 element가handle element와 매치되는 경우에만 발생하는 드래그 작업.
 기본적으로 이것은 linked element이지만 드래그 작업을 초기화 하기 위한
 linked element의 부분으로만 여겨질 기회는 있으며, setHandleElId() method는
 이것을 정의하기 위한 방법을 제공한다.&amp;lt;/li&amp;gt;
 &amp;lt;li&amp;gt;drag element: 이것은 드래그 작업 동안 커서와 함께 움직여야 하는 element를 표현한다.
 기본적으로 이것은 {</description>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="instance">
<description><![CDATA[해당 인스턴스에 연결된 element의 id]]></description>
</parameter>
<parameter name="group" type="String" deprecated="false" usage="instance">
<description><![CDATA[LDragDrop object들과 연관된 그룹]]></description>
</parameter>
<parameter name="attributes" type="object" deprecated="false" usage="instance">
<description><![CDATA[설정가능한 attribue를 포함한 object
                LDragDrop에 대해 유요한 property들:
                    padding, isTarget, maintainOffset, primaryButtonOnly,]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="groups" type="string" deprecated="false" scope="instance" >
<description>그룹은 관련된 LDragDrop object들의 집합을 정의한다.
 인스턴스는 같은 그룹의 다른 LDragDrop object와 상호작용할 때만 event를 가져온다.
 이것은 원하는 경우 여러 그룹에 하나의 LDragDrop subclass 사용을 하게 해준다.</description>
</property>
<property name="isTarget" type="boolean" deprecated="false" scope="instance" >
<description>기본적으로 모든 인스턴스들은 드랍 대상이 될 수 있다.
 이것은 isTarget을 false로 설정함으로써 비활성화 될 수 있다.</description>
</property>
<property name="dragOnly" type="Boolean" deprecated="false" scope="instance" >
<description>해당 flag가 true인 경우 드랍 event들을 발생시키지 않는다.
 element는 유일한 drag element이다.(드랍이 아닌 이동에 대해)</description>
</property>
<property name="useShim" type="Boolean" deprecated="false" scope="instance" >
<description>해당 flag가 true인 경우 shim은 마우스 event 추적을 위한 screen/viewable 영역에 배치될 것이다.
 iframe과 다른 컨트롤에서의 element 드래그에 도움이 된다.</description>
</property>
<property name="primaryButtonOnly" type="boolean" deprecated="false" scope="instance" >
<description>기본적으로 드래그와 드랍 인스턴스는 첫번째 버튼 클릭에만
 반응을 한다.(오른손잡이용 마우스에 대한 왼쪽 클릭)
 브라우저에 의해 전달되는 마우스 클릭으로 시작하는 드래그와 드랍을
 가능하게 하기 위해서 true로 설정한다.</description>
</property>
<property name="available" type="boolean" deprecated="false" scope="instance" >
<description>연결된 dom element가 약세스 가능할때까지 사용가능한 property는 false이다.</description>
</property>
<property name="hasOuterHandles" type="boolean" deprecated="false" scope="instance" >
<description>기본적으로 드래그는 mousedown이 linked element 영역 안에서
 일어나는 경우에만 초기화 될 수 있다.
 이것은 이전의 mouseup이 window 밖에서 발생한 경우 mousedown을
 잘못 보고하는 몇몇 브라우저 들에서 버그를 부분적으로 해결하기 위해 일부 이루어진다.
 outer handle이 정의되어 있는 경우 해당 property를 true로 설정한다.</description>
</property>
<property name="cursorIsOver" type="boolean" deprecated="false" scope="instance" >
<description>다른 dd object에 의해 대상이 된 경우 확인하기 위해 테스팅 할때
 드래그와 드랍 object에 할당되는 property.
 이 property는 마우스 교차의 포커스를 결정하는데 도움을 주기 위하여
 교차 모드가 사용될 수 있다.
 LDDM.getBestMatch은 여러 대상들이 같은 상호작용의 일부분일때
 교차 모드에서 가장 가까운 일치점을 결정하는데 이 property를 처음으로 사용한다.</description>
</property>
</properties>
<events>
<event name="mouseDown" deprecated="false">
<description><![CDATA[
mousedown event에의 접근을 제공한다. mousedown는 드래그 작업에서 항상 같은 결과를 내지 않는다.
]]></description>
</event>
<event name="b4MouseDown" deprecated="false">
<description><![CDATA[
mouseDownEvent가 발생하기 전에 mousedown event에의 접근을 제공한다. false 반환은 드래그를 취소한다.
]]></description>
</event>
<event name="mouseUp" deprecated="false">
<description><![CDATA[
드래그 작업이 끝났을 때 LDragDropManager 안에서부터 발생하는 이벤트
]]></description>
</event>
<event name="b4StartDrag" deprecated="false">
<description><![CDATA[
startDragEvent 전에 발생하며 false 반환은 startDrag Event를 취소한다.
]]></description>
</event>
<event name="startDrag" deprecated="false">
<description><![CDATA[
mousedown과 드래그 threshold가 만난 이후에 발생한다. 드래그 threshold 기본값은 마우스 움직임의 3픽셀이거나 mousedown의 홀딩의 1초이다.
]]></description>
</event>
<event name="b4EndDrag" deprecated="false">
<description><![CDATA[
endDragEvent 이전에 발생한다. false 반환은 event를 취소한다.
]]></description>
</event>
<event name="endDrag" deprecated="false">
<description><![CDATA[
드래그가 초기화된 이후에 mouseup event에서 발생한다.(startDrag 발생)
]]></description>
</event>
<event name="drag" deprecated="false">
<description><![CDATA[
드래그 하는 동안 모든 mousemove event가 발생한다.
]]></description>
</event>
<event name="b4Drag" deprecated="false">
<description><![CDATA[
dragEvent 이전에 발생한다.
]]></description>
</event>
<event name="invalidDrop" deprecated="false">
<description><![CDATA[
드래그된 object가 드랍 대상을 포함하고 있지 않은 위치에 드랍되었을때 발생한다.
]]></description>
</event>
<event name="b4DragOut" deprecated="false">
<description><![CDATA[
dragOutEvent 이전에 발생한다.
]]></description>
</event>
<event name="dragOut" deprecated="false">
<description><![CDATA[
드래그된 object가 onDragEnter를 발생시킨 object 위에 더 이상 있지 않으면 발생한다.
]]></description>
</event>
<event name="dragEnter" deprecated="false">
<description><![CDATA[
드래그된 object가 다른 타겟가능한 드래그나 드랍 object와 처음으로 상호작용할 때 발생한다.
]]></description>
</event>
<event name="b4DragOver" deprecated="false">
<description><![CDATA[
dragOverEvent 이전에 발생한다.
]]></description>
</event>
<event name="dragOver" deprecated="false">
<description><![CDATA[
드래그와 드랍 object위에 있는 동안 모든 mousemove event가 발생한다.
]]></description>
</event>
<event name="b4DragDrop" deprecated="false">
<description><![CDATA[
dragDropEvent 이전에 발생한다.
]]></description>
</event>
<event name="dragDrop" deprecated="false">
<description><![CDATA[
드래그된 object가 다른데 드랍됐을 때 발생한다.
]]></description>
</event>
</events>
<methods>
<method name="lock" deprecated="false" scope="instance" >
<description><![CDATA[해당 인스턴스를 lock 한다.]]></description>
</method>
<method name="unlock" deprecated="false" scope="instance" >
<description><![CDATA[해당 인스턴스를 unlock 한다.]]></description>
</method>
<method name="startDrag" deprecated="false" scope="instance" >
<description><![CDATA[드래그/드랍 object가 클릭되고 드래그나 mousedown 시간 초입이
 만난 이후에 호출되는 추상 method.]]></description>
<parameters>
<parameter name="X" type="int" deprecated="false" usage="required">
<description><![CDATA[클릭 위치]]></description>
</parameter>
<parameter name="Y" type="int" deprecated="false" usage="required">
<description><![CDATA[클릭 위치]]></description>
</parameter>
</parameters>
</method>
<method name="getEl" deprecated="false" scope="instance" >
<description><![CDATA[linked element에 대한 참조를 반환한다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[html element]]></return-description>
</return-types>
</method>
<method name="getDragEl" deprecated="false" scope="instance" >
<description><![CDATA[드래그한 실제 element에 대한 참조를 반환한다.
 이것은 html element로써 같지만, 다른 element에 할당될 수도 있다.
 이에 대한 예제는 Rui.dd.LDDProxy에서 찾을 수 있다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[html element]]></return-description>
</return-types>
</method>
<method name="setPadding" deprecated="false" scope="instance" >
<description><![CDATA[대상 지역에 픽셀 단위의 padding을 설정한다.
 대상을 계산하는데에 대한 가상 object 사이즈를 효과적으로 증가(감소)시킨다.
 약칭의 css-style을 제공한다; 하나의 parameter만 전달된 경우 모든 side가
 padding을 가질 것이며, 두개만 전달된 경우 top과 bottom은 첫번째 parameter,
 left와 right는 두번째를 가질 것이다.]]></description>
<parameters>
<parameter name="iTop" type="int" deprecated="false" usage="required">
<description><![CDATA[Top pad]]></description>
</parameter>
<parameter name="iRight" type="int" deprecated="false" usage="required">
<description><![CDATA[Right pad]]></description>
</parameter>
<parameter name="iBot" type="int" deprecated="false" usage="required">
<description><![CDATA[Bot pad]]></description>
</parameter>
<parameter name="iLeft" type="int" deprecated="false" usage="required">
<description><![CDATA[Left pad]]></description>
</parameter>
</parameters>
</method>
<method name="addToGroup" deprecated="false" scope="instance" >
<description><![CDATA[해당 인스턴스를 연관된 드래그/드랍 object들의 그룹에 추가한다.
 모든 인스턴스는 적어도 하나의 그룹에 속하며, 필요한 만큼 많은 그룹에 속할 수 있다.]]></description>
<parameters>
<parameter name="group" type="string" deprecated="false" usage="required">
<description><![CDATA[그룹의 이름]]></description>
</parameter>
</parameters>
</method>
<method name="removeFromGroup" deprecated="false" scope="instance" >
<description><![CDATA[제공된 상호작용 그룹으로부터 해당 인스턴스를 제거한다.]]></description>
<parameters>
<parameter name="group" type="string" deprecated="false" usage="required">
<description><![CDATA[드랍할 그룹]]></description>
</parameter>
</parameters>
</method>
<method name="setDragElId" deprecated="false" scope="instance" >
<description><![CDATA[드래그 동안 커서와 함께 움직일 linked element이외의 element를
 명시하게 한다.]]></description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="required">
<description><![CDATA[드래그를 초기화 하기 위해 사용될 element의 id]]></description>
</parameter>
</parameters>
</method>
<method name="setHandleElId" deprecated="false" scope="instance" >
<description><![CDATA[드래그 작업을 초기화하기 위해 사용되어야 할 linked element의 child를
 명시하게 한다.
 content div가 텍스트와 링크들을 가지는 경우가 이에 대한 예제가 될 것이다.
 content 영역의 어디든지 클릭하는 것은 일반적으로 드래그 작업을 시작할 것이다.
 드래그 작업을 시작하는 content div 안의 element를 명시하기 위해
 이 method를 사용한다.]]></description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="required">
<description><![CDATA[드래그를 초기화 하기 위해 사용되는 element의 id]]></description>
</parameter>
</parameters>
</method>
<method name="setOuterHandleElId" deprecated="false" scope="instance" >
<description><![CDATA[드래그 handle로써 linked element의 바깥 element를 설정하게 한다.]]></description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="required">
<description><![CDATA[드래그를 초기화 하기 위해 사용되는 element의 id]]></description>
</parameter>
</parameters>
</method>
<method name="unreg" deprecated="false" scope="instance" >
<description><![CDATA[해당 element에 대한 모든 드래그와 드랍에 대한 연결 정보를 삭제한다.]]></description>
</method>
<method name="isLocked" deprecated="false" scope="instance" >
<description><![CDATA[해당 인스턴스가 lock 되어 있거나 드래그드랍 매니저가 lock 되어 있는 경우 true를 반환한다.
 (이는 페이지에 모든 드래그/드랍이 비활성되어 있는 것을 의미함.)]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[해당 obj나 모든 드래그/드랍이 lock되어 있으면 true, 아니면 false]]></return-description>
</return-types>
</method>
<method name="addInvalidHandleType" deprecated="false" scope="instance" >
<description><![CDATA[클릭됐을 때 드래그 작업을 시작하지 말아야할 tag 이름을 명시하게 한다.
 이것은 드래그를 시작하는 것 이외의 다른 일을 하는 드래그 handle 안에
 링크들을 끼워 넣기 용이하도록 디자인 된다.]]></description>
<parameters>
<parameter name="tagName" type="string" deprecated="false" usage="required">
<description><![CDATA[제외되는 element의 타입]]></description>
</parameter>
</parameters>
</method>
<method name="addInvalidHandleId" deprecated="false" scope="instance" >
<description><![CDATA[드래그를 초기화 하지 말아야 할 드래그 handle의 child에 대한 element id를 명시하게 해준다.]]></description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="required">
<description><![CDATA[무시하고자 하는 element의 id]]></description>
</parameter>
</parameters>
</method>
<method name="addInvalidHandleClass" deprecated="false" scope="instance" >
<description><![CDATA[드래그를 초기화 하지 않아야 할 element들의 css 클래스를 명시하게 해준다.]]></description>
<parameters>
<parameter name="cssClass" type="string" deprecated="false" usage="required">
<description><![CDATA[무시하고자 하는 element의 클래스]]></description>
</parameter>
</parameters>
</method>
<method name="removeInvalidHandleType" deprecated="false" scope="instance" >
<description><![CDATA[Unsets an excluded tag name set by addInvalidHandleType
 addInvalidHandleType에 의해 설정한 제외된 tag 이름을 unset한다.]]></description>
<parameters>
<parameter name="tagName" type="string" deprecated="false" usage="required">
<description><![CDATA[제외하지 않을 element의 타입]]></description>
</parameter>
</parameters>
</method>
<method name="removeInvalidHandleId" deprecated="false" scope="instance" >
<description><![CDATA[유효하지 않은 handle id를 제거한다.]]></description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="required">
<description><![CDATA[다시 활성화할 element의 id]]></description>
</parameter>
</parameters>
</method>
<method name="removeInvalidHandleClass" deprecated="false" scope="instance" >
<description><![CDATA[유효하지 않은 css 클래스를 제거한다.]]></description>
<parameters>
<parameter name="cssClass" type="string" deprecated="false" usage="required">
<description><![CDATA[다시 활성화하고자 하는 element의 클래스]]></description>
</parameter>
</parameters>
</method>
<method name="isValidHandleChild" deprecated="false" scope="instance" >
<description><![CDATA[해당 클릭이 무시되어야 하는 경우 확인하기 위한 tag 제외 목록을 체크한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[유효한 tag 타입인 경우 true, 아니면 false]]></return-description>
</return-types>
<parameters>
<parameter name="node" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[평가할 HTMLElement]]></description>
</parameter>
</parameters>
</method>
<method name="setXConstraint" deprecated="false" scope="instance" >
<description><![CDATA[기본적으로 element는 화면에서 어떤 곳에든 드래그될 수 있다.
 element의 수평 움직임을 제한하기 위해서 이 method를 사용한다.
 y 축에의 드래그를 lock 하고자 하는 경우 parameter에 0,0을 전달한다.]]></description>
<parameters>
<parameter name="iLeft" type="int" deprecated="false" usage="required">
<description><![CDATA[element가 left로 움직일 수 있는 픽셀 숫자]]></description>
</parameter>
<parameter name="iRight" type="int" deprecated="false" usage="required">
<description><![CDATA[element가 right로 움직일 수 있는 픽셀 숫자]]></description>
</parameter>
<parameter name="iTickSize" type="int" deprecated="false" usage="required">
<description><![CDATA[element가 한번에 움직여야 할 iTickSize 픽셀을 명시하기 위한 부가적인 parameter]]></description>
</parameter>
</parameters>
</method>
<method name="clearConstraints" deprecated="false" scope="instance" >
<description><![CDATA[해당 인스턴스에 적용된 모든 제한을 삭제한다.
 그것들은 시간에 대한 제한의 종속성을 유지할 수가 없기 때문에 tick들 또한 삭제한다.]]></description>
</method>
<method name="clearTicks" deprecated="false" scope="instance" >
<description><![CDATA[해당 인스턴스에 대해 정의된 tick 간격을 삭제한다.]]></description>
</method>
<method name="setYConstraint" deprecated="false" scope="instance" >
<description><![CDATA[기본적으로 element는 화면에서 어떤 곳에든 드래그될 수 있다.
 element의 수직 움직임을 제한하기 위해서 이 method를 사용한다.
 x 축에의 드래그를 lock 하고자 하는 경우 parameter에 0,0을 전달한다.]]></description>
<parameters>
<parameter name="iUp" type="int" deprecated="false" usage="required">
<description><![CDATA[element가 up으로 움직일 수 있는 픽셀 숫자]]></description>
</parameter>
<parameter name="iDown" type="int" deprecated="false" usage="required">
<description><![CDATA[element가 down으로 움직일 수 있는 픽셀 숫자]]></description>
</parameter>
<parameter name="iTickSize" type="int" deprecated="false" usage="required">
<description><![CDATA[element가 한번에 움직여야 할 iTickSize 픽셀을 명시하기 위한 부가적인 parameter]]></description>
</parameter>
</parameters>
</method>
<method name="resetConstraints" deprecated="false" scope="instance" >
<description><![CDATA[수동으로 dd element의 재위치 하고자 하는 경우 resetConstraints가 반드시 호출되어야 한다.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체명]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.dd.LDD" deprecated="false"  superclass="Rui.dd.LDragDrop" >
<description>드래그 하는 동안 연결된 element가 마우스 커서를 따라가는
 것에 대한 LDragDrop 구현</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>드래그 하는 동안 연결된 element가 마우스 커서를 따라가는
 것에 대한 LDragDrop 구현</description>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="instance">
<description><![CDATA[연결된 element의 id]]></description>
</parameter>
<parameter name="group" type="String" deprecated="false" usage="instance">
<description><![CDATA[연관된 LDragDrop 항목들의 그룹]]></description>
</parameter>
<parameter name="attributes" type="object" deprecated="false" usage="instance">
<description><![CDATA[LDD에 대한 설정 가능한 attribute Vaild attribute를 포함한 object: scroll]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="setDragElPos" deprecated="false" scope="instance" >
<description><![CDATA[드래그 element를 클릭된 element상의 위치에 관련된
 커서 위치를 포함하는 mousedown이나 클릭 event의 위치에 설정한다.
 커서가 있는 곳에 element를 놓고자 하는 경우 이것을 override 한다.]]></description>
<parameters>
<parameter name="iPageX" type="int" deprecated="false" usage="required">
<description><![CDATA[mousedown이나 드래그 event의 X 좌표]]></description>
</parameter>
<parameter name="iPageY" type="int" deprecated="false" usage="required">
<description><![CDATA[mousedown이나 드래그 event의 Y 좌표]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체명]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.dd.LDDProxy" deprecated="false"  superclass="Rui.dd.LDD" >
<description>드래그 작업동안 커서를 따라가는 document안의 빈 bordered div를 삽입하는 LDragDrop 구현
 클릭할 때, frame div은 연결된 html element의 치수로 사이즈가 변경되며,
 연결된 element의 정확한 위치로 이동된다.

 "frame" element에 대한 참조는 페이지의 모든 LDDProxy element들의 위치에
 드래그되면서 만들어진 싱글 proxy element를 참조하십시오.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>드래그 작업동안 커서를 따라가는 document안의 빈 bordered div를 삽입하는 LDragDrop 구현
 클릭할 때, frame div은 연결된 html element의 치수로 사이즈가 변경되며,
 연결된 element의 정확한 위치로 이동된다.

 "frame" element에 대한 참조는 페이지의 모든 LDDProxy element들의 위치에
 드래그되면서 만들어진 싱글 proxy element를 참조하십시오.</description>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="instance">
<description><![CDATA[연결된 html element의 id]]></description>
</parameter>
<parameter name="group" type="String" deprecated="false" usage="instance">
<description><![CDATA[연관된 LDragDrop object들의 그룹]]></description>
</parameter>
<parameter name="attributes" type="object" deprecated="false" usage="instance">
<description><![CDATA[설정 가능한 attribute를 포함한 object
                LDragDrop에 추가적으로 LDDProxy에 대해 유효한 속성들: resizeFrame, centerFrame, dragElId]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="dragElId" type="String" deprecated="false" scope="static" >
<description>기본 드래그 frame div id</description>
</property>
</properties>
<events>
<event name="mouseDown" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="b4MouseDown" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="mouseUp" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="b4StartDrag" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="startDrag" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="b4EndDrag" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="endDrag" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="drag" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="b4Drag" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="invalidDrop" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="b4DragOut" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="dragOut" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="dragEnter" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="b4DragOver" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="dragOver" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="b4DragDrop" deprecated="false">
<description><![CDATA[

]]></description>
</event>
<event name="dragDrop" deprecated="false">
<description><![CDATA[

]]></description>
</event>
</events>
<methods>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체명]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.dd.LDDTarget" deprecated="false"  superclass="Rui.dd.LDragDrop" >
<description>이동이 아닌, 대상이 드랍될 수 있는 LDragDrop 구현.
 You would get the same result by simply omitting implementation
 for the event callbacks, but this way we reduce the processing cost of the
 event listener and the callbacks.
 event callbakc에 대한 간단하게 생략된 구현에 의해 똑같은 결과를 얻을 수 있다.
 그러나 이러한 방법은 event listener나 callback의 처리 비용을 감소시킨다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>이동이 아닌, 대상이 드랍될 수 있는 LDragDrop 구현.
 You would get the same result by simply omitting implementation
 for the event callbacks, but this way we reduce the processing cost of the
 event listener and the callbacks.
 event callbakc에 대한 간단하게 생략된 구현에 의해 똑같은 결과를 얻을 수 있다.
 그러나 이러한 방법은 event listener나 callback의 처리 비용을 감소시킨다.</description>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="instance">
<description><![CDATA[드랍 대상인 element의 id]]></description>
</parameter>
<parameter name="group" type="String" deprecated="false" usage="instance">
<description><![CDATA[연관된 LDragDrop object들의 그룹]]></description>
</parameter>
<parameter name="attributes" type="object" deprecated="false" usage="instance">
<description><![CDATA[설정 가능한 attribute를 포함한 object
                 LDragDrop에 추가적으로 LDDTarget에 대해 유효한 속성들:
                    none]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<methods>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체명]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.data.LDataSet" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>콤포넌트와 연계된 데이터를 처리하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>콤포넌트와 연계된 데이터를 처리하는 객체</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LDataSet.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>dataSet의 id</description>
</property>
<property name="focusFirstRow" type="int" deprecated="false" scope="instance" >
<description>데이터 load 후에 선택될 레코드를 지정한다.
 기본값은 -1이며, 0 이상의 값을 입력시 해당 행의 레코드가 focus된다.</description>
</property>
<property name="fields" type="Array" deprecated="false" scope="instance" >
<description>Field 정보를 가지는 배열</description>
</property>
<property name="timeout" type="int" deprecated="false" scope="instance" >
<description>response timeout 시간 (async일때만 작동함.)</description>
</property>
<property name="canMarkableEvent" type="boolean" deprecated="false" scope="instance" >
<description>canMarkable 이벤트를 수행할 지 여부
 (사용할 경우 성능 저하가 발생합니다. 꼭 필요한 경우만 사용하세요.)</description>
</property>
<property name="remainRemoved" type="boolean" deprecated="false" scope="instance" >
<description>삭제시 삭제건으로 처리하지 않고 state만 바꾼다.</description>
</property>
<property name="defaultFailureHandler" type="boolean" deprecated="false" scope="instance" >
<description>rui_config.js 에 있는 기본 failure handler를 사용할지 여부를 리턴한다.</description>
</property>
<property name="loadCache" type="boolean" deprecated="false" scope="instance" >
<description>서버에서 받은 데이터가 기존에 받은 데이터와 같으면 데이터를 로딩하지 않는다. (같은 데이터면 모든 이벤트도 작동 안함)</description>
</property>
<property name="method" type="String" deprecated="false" scope="instance" >
<description>ajax request를 호출할 때 GET 방식으로 처리할 지 POST방식으로 처리할 지 결정한다.</description>
</property>
<property name="serializeMetaData" type="boolean" deprecated="false" scope="instance" >
<description>DataSet을 serialize할 때 metaData를 포함할지 여부.</description>
</property>
<property name="lazyLoad" type="boolean" deprecated="false" scope="instance" >
<description>대량건의 데이터를 로딩할 경우 timer로 처리하여 ie에서 스크립트 로딩 메시지가 출력하지 않게 한다.</description>
</property>
<property name="lazyLoadCount" type="Int" deprecated="false" scope="instance" >
<description>대량건의 데이터를 몇건씩 분할하여 처리할 것인지 결정하는 속성</description>
</property>
<property name="lazyLoadTime" type="Int" deprecated="false" scope="instance" >
<description>대량건의 데이터를 분할하여 처리할 때 timer의 시간(ms)</description>
</property>
<property name="multiSortable" type="Boolean" deprecated="false" scope="instance" >
<description>sortable을 멀티 필드로 적용할지 여부를 결정한다.</description>
</property>
</configs>
<properties>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>dataSet의 id</description>
</property>
</properties>
<events>
<event name="fieldsChanged" deprecated="false">
<description><![CDATA[
fields의 내용을 모둔 변경하면 수행하는 이벤트 setFields ...등
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="add" deprecated="false">
<description><![CDATA[
Record 객체가 추가될 경우 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="instance">
<description><![CDATA[record객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row의 값]]></description>
</parameter>
</parameters>
</event>
<event name="update" deprecated="false">
<description><![CDATA[
Record객체의 값이 변경될 경우 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="instance">
<description><![CDATA[record객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row의 값]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col의 값]]></description>
</parameter>
<parameter name="rowId" type="String" deprecated="false" usage="instance">
<description><![CDATA[row의 record id값]]></description>
</parameter>
<parameter name="colId" type="String" deprecated="false" usage="instance">
<description><![CDATA[col의 column field id값]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="instance">
<description><![CDATA[값]]></description>
</parameter>
<parameter name="originValue" type="Object" deprecated="false" usage="instance">
<description><![CDATA[원본값]]></description>
</parameter>
<parameter name="beforeValue" type="Object" deprecated="false" usage="instance">
<description><![CDATA[이전값]]></description>
</parameter>
</parameters>
</event>
<event name="remove" deprecated="false">
<description><![CDATA[
Record객체가 삭제될 경우 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="instance">
<description><![CDATA[record객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row의 값]]></description>
</parameter>
</parameters>
</event>
<event name="beforeLoad" deprecated="false">
<description><![CDATA[
load이 발생하기전 수행하는 이벤트
]]></description>
</event>
<event name="load" deprecated="false">
<description><![CDATA[
load 메소드가 실행되면 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="loadException" deprecated="false">
<description><![CDATA[
load딩시 에러가 발생했을 경우 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="throwObject" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Exception 객체]]></description>
</parameter>
</parameters>
</event>
<event name="canRowPosChange" deprecated="false">
<description><![CDATA[
Row가 변경되지전에 변경을 해도 되는지 체크하는 이벤트. 일반적으로 유효성 체크로 사용
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[target 위치]]></description>
</parameter>
<parameter name="oldRow" type="int" deprecated="false" usage="instance">
<description><![CDATA[현재 row 위치]]></description>
</parameter>
</parameters>
</event>
<event name="rowPosChanged" deprecated="false">
<description><![CDATA[
Row의 변경이 된 후 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[현재 위치]]></description>
</parameter>
<parameter name="oldRow" type="int" deprecated="false" usage="instance">
<description><![CDATA[이전 위치]]></description>
</parameter>
</parameters>
</event>
<event name="commit" deprecated="false">
<description><![CDATA[
commit시 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="undo" deprecated="false">
<description><![CDATA[
undo시 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[현재 위치]]></description>
</parameter>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="instance">
<description><![CDATA[record 객체]]></description>
</parameter>
<parameter name="beforeState" type="int" deprecated="false" usage="instance">
<description><![CDATA[이전 Record 상태 (Rui.data.LRecord.STATE_NORMAL | Rui.data.LRecord.STATE_INSERT | Rui.data.LRecord.STATE_UPDATE | Rui.data.LRecord.STATE_DELETE)]]></description>
</parameter>
</parameters>
</event>
<event name="canMarkable" deprecated="false">
<description><![CDATA[
row가 선택이 가능한지 여부를 리턴하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[현재 위치]]></description>
</parameter>
</parameters>
</event>
<event name="marked" deprecated="false">
<description><![CDATA[
marked를 호출 할 수 있는지 여부 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[현재 위치]]></description>
</parameter>
<parameter name="isSelect" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[선택 여부]]></description>
</parameter>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="instance">
<description><![CDATA[record 객체]]></description>
</parameter>
</parameters>
</event>
<event name="allMarked" deprecated="false">
<description><![CDATA[
setMarkAll메소드나 clearMark 메소드가 호출되면 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="isSelect" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[선택 여부]]></description>
</parameter>
</parameters>
</event>
<event name="invalid" deprecated="false">
<description><![CDATA[
데이터의 row가 invalid될 경우 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row의 위치값]]></description>
</parameter>
<parameter name="colId" type="String" deprecated="false" usage="instance">
<description><![CDATA[field의 아이디]]></description>
</parameter>
<parameter name="message" type="String" deprecated="false" usage="instance">
<description><![CDATA[출력될 메시지]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="instance">
<description><![CDATA[값]]></description>
</parameter>
</parameters>
</event>
<event name="valid" deprecated="false">
<description><![CDATA[
데이터의 row가 valid될 경우 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row의 위치값]]></description>
</parameter>
<parameter name="colId" type="String" deprecated="false" usage="instance">
<description><![CDATA[field의 아이디]]></description>
</parameter>
</parameters>
</event>
<event name="stateChanged" deprecated="false">
<description><![CDATA[
데이터의 row의 state가 변경되는 경우 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="instance">
<description><![CDATA[record객체]]></description>
</parameter>
<parameter name="state" type="int" deprecated="false" usage="instance">
<description><![CDATA[state값]]></description>
</parameter>
<parameter name="beforeState" type="int" deprecated="false" usage="instance">
<description><![CDATA[이전 state값]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="insert" deprecated="false" scope="instance" >
<description><![CDATA[idx위치에 Record객체를 추가하고 add 이벤트를 발생시킨다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[row 값]]></return-description>
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[입력 위치값]]></description>
</parameter>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="required">
<description><![CDATA[입력하고자 하는 record 객체]]></description>
</parameter>
<parameter name="option" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] 환경정보 객체
 &amp;lt;div class='param-options'&amp;gt;
 ignoreEvent {boolean} 이벤트 무시]]></description>
</parameter>
</parameters>
</method>
<method name="add" deprecated="false" scope="instance" >
<description><![CDATA[Record객체를 추가한다. 이 메소드는 다른 DataSet에 포함된 record객체를 add 하면 안된다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[row 값]]></return-description>
</return-types>
<parameters>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="required">
<description><![CDATA[입력하고자 하는 record 객체]]></description>
</parameter>
<parameter name="option" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] 환경정보 객체]]></description>
</parameter>
</parameters>
</method>
<method name="remove" deprecated="false" scope="instance" >
<description><![CDATA[id로 Record 객체를 삭제한다. (성능이 낮음)]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
<return-description><![CDATA[삭세된 Record객체]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[지우고자 하는 키값]]></description>
</parameter>
<parameter name="option" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] 환경정보 객체]]></description>
</parameter>
</parameters>
</method>
<method name="removeAt" deprecated="false" scope="instance" >
<description><![CDATA[Record객체를 삭제하고 remove 이벤트를 발생시킨다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
<return-description><![CDATA[삭세된 Record객체]]></return-description>
</return-types>
<parameters>
<parameter name="index" type="int" deprecated="false" usage="required">
<description><![CDATA[지우고자 하는 위치값]]></description>
</parameter>
<parameter name="option" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] 환경정보 객체]]></description>
</parameter>
</parameters>
</method>
<method name="removeAll" deprecated="false" scope="instance" >
<description><![CDATA[모든 Record객체를 지우고 dataChanged 이벤트를 발생시킨다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="option" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] 환경정보 객체]]></description>
</parameter>
</parameters>
</method>
<method name="clearData" deprecated="false" scope="instance" >
<description><![CDATA[fields 정보를 제외한 모든 정보를 초기화 한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="option" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] 환경정보 객체]]></description>
</parameter>
</parameters>
</method>
<method name="get" deprecated="false" scope="instance" >
<description><![CDATA[Id에 해당되는 Record객체를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
<return-description><![CDATA[아이디에 해당되는 LRecord 객체]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[얻고자 하는 Record객체의 아이디]]></description>
</parameter>
</parameters>
</method>
<method name="getAt" deprecated="false" scope="instance" >
<description><![CDATA[위치값에 해당되는 Record객체를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
<return-description><![CDATA[아이디에 해당되는 LRecord 객체]]></return-description>
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[얻고자 하는 Record객체의 위치값]]></description>
</parameter>
</parameters>
</method>
<method name="indexOfKey" deprecated="false" scope="instance" >
<description><![CDATA[Id에 해당되는 Record의 index를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[얻고자 하는 Record객체의 아이디]]></description>
</parameter>
</parameters>
</method>
<method name="findRow" deprecated="false" scope="instance" >
<description><![CDATA[Id에 해당되는 Record의 index를 리턴한다.
 주의! 이 메소드는 내부에서 전체 레코드를 대상으로 결과 index를 검색하므로 사용시 성능저하가 발생될 수 있습니다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="fieldName" type="String" deprecated="false" usage="required">
<description><![CDATA[검색할 field명]]></description>
</parameter>
<parameter name="value" type="String" deprecated="false" usage="required">
<description><![CDATA[검색할 field의 값]]></description>
</parameter>
<parameter name="startIndex" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] 검색 시작할 index]]></description>
</parameter>
</parameters>
</method>
<method name="getFieldIndex" deprecated="false" scope="instance" >
<description><![CDATA[id정보에 해당되는 field 배열 index를 리턴]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[field의 Id]]></description>
</parameter>
</parameters>
</method>
<method name="getFieldById" deprecated="false" scope="instance" >
<description><![CDATA[id정보에 해당되는 {Rui.data.LField} 객체 리턴]]></description>
<return-types>
<return-type type="Rui.data.LField" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[field의 Id]]></description>
</parameter>
</parameters>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DataSet객체 정보를 모두 지운다. (이벤트 포함)]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="load" deprecated="false" scope="instance" >
<description><![CDATA[URL을 통해 데이터정보를 읽어온다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="options" type="Object" deprecated="false" usage="required">
<description><![CDATA[환경정보 객체
 &amp;lt;div class='param-options'&amp;gt;
 url {String} 서버 호출 url&amp;lt;br&amp;gt;
 params {Object} 서버에 전달할 파라미터 객체&amp;lt;br&amp;gt;
 method {String} get or post&amp;lt;br&amp;gt;
 sync {boolean} sync 여부 (default : false)&amp;lt;br&amp;gt;
 state {Rui.data.LRecord.STATE_INSERT|Rui.data.LRecord.STATE_UPDATE|Rui.data.LRecord.STATE_DELETE} load시 record의 기본 상태
 dataSetId {String} 서버에서 받아온 결과값의 dataSet의 id]]></description>
</parameter>
</parameters>
</method>
<method name="getReadData" deprecated="false" scope="instance" >
<description><![CDATA[현재 DataSet 기준으로 결과 데이터를 Object로 변환하여 리턴]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="conn" type="Object" deprecated="false" usage="required">
<description><![CDATA[응답 객체]]></description>
</parameter>
</parameters>
</method>
<method name="getReadResponseData" deprecated="false" scope="instance" >
<description><![CDATA[현재 DataSet 기준으로 결과 데이터를 Object로 변환하여 리턴]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="conn" type="Object" deprecated="false" usage="required">
<description><![CDATA[응답 객체]]></description>
</parameter>
</parameters>
</method>
<method name="newRecord" deprecated="false" scope="instance" >
<description><![CDATA[신규 Record객체를 생성하고 row위치를 이동한다. 생성된 레코드는 DataSet에 반영된 상태이다. 반복적인 레코드 추가는 반드시 add 메소드를 이용한다. 성능차이가 많이 발생됨.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] 위치]]></description>
</parameter>
<parameter name="option" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] option객체
 &amp;lt;div class='param-options'&amp;gt;
 isInitData {boolean} 데이터를 초기화할지 여부를 설정&amp;lt;br&amp;gt;
 moveRow {boolean} record 추가시 해당 위치로 이동할지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="createRecord" deprecated="false" scope="instance" >
<description><![CDATA[Record객체를 생성한다. 생성된 레코드는 DataSet에 반영되지 않은 상태이다. 순수하게 LRecord객체만 생성된다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
</return-types>
<parameters>
<parameter name="data" type="Object" deprecated="false" usage="required">
<description><![CDATA[데이터 객체]]></description>
</parameter>
<parameter name="option" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] option 객체]]></description>
</parameter>
</parameters>
</method>
<method name="loadData" deprecated="false" scope="instance" >
<description><![CDATA[data를 읽어온다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="data" type="Object" deprecated="false" usage="required">
<description><![CDATA[데이터 객체]]></description>
</parameter>
<parameter name="options" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] 환경정보 객체
 &amp;lt;div class='param-options'&amp;gt;
  state {Rui.data.LRecord.STATE_INSERT|Rui.data.LRecord.STATE_UPDATE|Rui.data.LRecord.STATE_DELETE} load시 record의 기본 상태]]></description>
</parameter>
</parameters>
</method>
<method name="getCount" deprecated="false" scope="instance" >
<description><![CDATA[데이터의 갯수를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
</method>
<method name="getModifiedRecords" deprecated="false" scope="instance" >
<description><![CDATA[변경된 데이터 정보를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.util.LCollection" />
<return-description><![CDATA[변경된 Record객체 배열]]></return-description>
</return-types>
</method>
<method name="serialize" deprecated="false" scope="instance" >
<description><![CDATA[데이터 정보를 문자열로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[문자열]]></return-description>
</return-types>
</method>
<method name="serializeModified" deprecated="false" scope="instance" >
<description><![CDATA[변경된 데이터 정보를 문자열로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[변경된 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="isAll" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] true일 경우 변경된 전체 데이터를 리턴]]></description>
</parameter>
</parameters>
</method>
<method name="commit" deprecated="false" scope="instance" >
<description><![CDATA[변경된 데이터 정보를 확정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="undo" deprecated="false" scope="instance" >
<description><![CDATA[idx에 해당되는 Record를 복원한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[복원하고자 하는 위치값]]></description>
</parameter>
</parameters>
</method>
<method name="undoAll" deprecated="false" scope="instance" >
<description><![CDATA[전체 데이터를 초기 로딩데이터로 복원한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="dataChanged" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 dataChanged 이벤트를 수행한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getRow" deprecated="false" scope="instance" >
<description><![CDATA[현재 위치를 리턴]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[현재 위치를 리턴]]></return-description>
</return-types>
</method>
<method name="setRow" deprecated="false" scope="instance" >
<description><![CDATA[현재 위치를 변경하기전에 canRowPosChange이벤트를 발생하여 이동 가능여부를 체크하고 가능하면 현재 위치를 변경한 후 rowPosChanged 이벤트를 발생시킨다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[변경하고자 하는 위치값]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="required">
<description><![CDATA[config 객체
                 (forceRow : [optional] 같은 위치가 선택되어도 다시 이벤트를 호출하게 하는 속성,
                 ignoreCanRowPosChange : [optional] canRowPosChange 이벤트를 무시할지 여부)]]></description>
</parameter>
</parameters>
</method>
<method name="isRowInserted" deprecated="false" scope="instance" >
<description><![CDATA[현재 Row가 Insert상태 여부 확인]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[상태 확인 위치]]></description>
</parameter>
</parameters>
</method>
<method name="isRowUpdated" deprecated="false" scope="instance" >
<description><![CDATA[현재 Row가 Update상태 여부 확인]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[상태 확인 위치]]></description>
</parameter>
</parameters>
</method>
<method name="isRowDeleted" deprecated="false" scope="instance" >
<description><![CDATA[현재 Row가 delete상태 여부 확인. DataSet의 생성자속성의 remainRemoved값이 true일 경우만 사용이 가능하다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[상태 확인 위치]]></description>
</parameter>
</parameters>
</method>
<method name="isRowModified" deprecated="false" scope="instance" >
<description><![CDATA[현재 Row가 변경상태 여부 확인]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[상태 확인 위치]]></description>
</parameter>
</parameters>
</method>
<method name="isUpdated" deprecated="false" scope="instance" >
<description><![CDATA[DataSet에 변경정보가 존재하는지 확인]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isMarkable" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 row 위치를 마크가 가능한지 체크하는 canMarkable 이벤트를 발생시킨다. 리턴값이 false이면 마크되지 않는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[위치]]></description>
</parameter>
</parameters>
</method>
<method name="setMark" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 row 위치를 마크한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[위치]]></description>
</parameter>
<parameter name="isSelect" type="boolean" deprecated="false" usage="required">
<description><![CDATA[마크 여부]]></description>
</parameter>
</parameters>
</method>
<method name="setMarkOnly" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 row 위치 하나만 남기고 나머지는 모두 선택을 취소한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[위치]]></description>
</parameter>
<parameter name="isSelect" type="boolean" deprecated="false" usage="required">
<description><![CDATA[마크 여부]]></description>
</parameter>
</parameters>
</method>
<method name="setDemarkExcept" deprecated="false" scope="instance" >
<description><![CDATA[지정된 row외의 DataSet에 선택된 row를 선택 false로 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[지정된 row index외의 select된 행을 false로 설정한다.]]></description>
</parameter>
</parameters>
</method>
<method name="isMarked" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 row 위치가 마크되어 있는지 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[마크 여부]]></return-description>
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[위치]]></description>
</parameter>
</parameters>
</method>
<method name="getMarkedCount" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 마크된 건수를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[마크된 건수 리턴]]></return-description>
</return-types>
</method>
<method name="setMarkRange" deprecated="false" scope="instance" >
<description><![CDATA[DataSet을 sInx부터 eInx까지 마크한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="sInx" type="int" deprecated="false" usage="required">
<description><![CDATA[시작 위치]]></description>
</parameter>
<parameter name="eInx" type="int" deprecated="false" usage="required">
<description><![CDATA[종료 위치]]></description>
</parameter>
<parameter name="isSelect" type="boolean" deprecated="false" usage="required">
<description><![CDATA[마크 여부]]></description>
</parameter>
</parameters>
</method>
<method name="getMarkedRange" deprecated="false" scope="instance" >
<description><![CDATA[DataSet을 mark 모든 LRecord객체의 값을 가지는 LCollection을 리턴한다.]]></description>
<return-types>
<return-type type="Rui.util.LCollection" />
</return-types>
</method>
<method name="setMarkAll" deprecated="false" scope="instance" >
<description><![CDATA[DataSet을 전체의 마크를 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="isSelect" type="boolean" deprecated="false" usage="required">
<description><![CDATA[마크 여부]]></description>
</parameter>
</parameters>
</method>
<method name="clearMark" deprecated="false" scope="instance" >
<description><![CDATA[DataSet에 선택된 모든 마크 정보를 지운다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="removeMarkedRows" deprecated="false" scope="instance" >
<description><![CDATA[DataSet에 마크된 row를 모두 삭제한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="filter" deprecated="false" scope="instance" >
<description><![CDATA[DataSet에 filter를 적용한다.
 function에서 true인 데이터만 남는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[정보를 비교할 Function]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] scope정보 옵션]]></description>
</parameter>
<parameter name="focusRow" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 필터후 원 위치로 이동할지 여부(기본값 true)]]></description>
</parameter>
</parameters>
</method>
<method name="clearFilter" deprecated="false" scope="instance" >
<description><![CDATA[DataSet에 적용된 filter를 지운다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="isFiltered" deprecated="false" scope="instance" >
<description><![CDATA[DataSet에 filter가 적용되었는지 여부]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="query" deprecated="false" scope="instance" >
<description><![CDATA[DataSet에 query에 해당되는 데이터를 리턴한다.
 주의! 이 메소드는 반복 사용시 성능저하가 발생될 수 있습니다.]]></description>
<return-types>
<return-type type="Rui.util.LCollection" />
</return-types>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[정보를 비교할 Function]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[scope정보 옵션]]></description>
</parameter>
</parameters>
</method>
<method name="getTotalCount" deprecated="false" scope="instance" >
<description><![CDATA[서버에서 리턴한 DataSet의 총 갯수를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[총갯수]]></return-description>
</return-types>
</method>
<method name="getRecords" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 시작위치 부터 끝위치에 해당하는 Record배열을 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
<parameters>
<parameter name="startIndex" type="int" deprecated="false" usage="required">
<description><![CDATA[시작 위치]]></description>
</parameter>
<parameter name="endIndex" type="int" deprecated="false" usage="required">
<description><![CDATA[끝 위치]]></description>
</parameter>
</parameters>
</method>
<method name="sort" deprecated="false" scope="instance" >
<description><![CDATA[DataSet을 정렬한다.
 주의! 이 메소드는 반복 사용시 성능저하가 발생될 수 있습니다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[정보를 비교할 Function]]></description>
</parameter>
<parameter name="desc" type="String" deprecated="false" usage="required">
<description><![CDATA[정렬 방식 [asc|desc]]]></description>
</parameter>
</parameters>
</method>
<method name="sortField" deprecated="false" scope="instance" >
<description><![CDATA[field에 해당하는 DataSet을 정렬한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="fieldName" type="String" deprecated="false" usage="required">
<description><![CDATA[field 명]]></description>
</parameter>
<parameter name="desc" type="String" deprecated="false" usage="required">
<description><![CDATA[정렬 방식 [asc|desc]]]></description>
</parameter>
</parameters>
</method>
<method name="sorts" deprecated="false" scope="instance" >
<description><![CDATA[json형 object의 정보로 DataSet을 정렬한다. { col1: 'asc', col2: 'desc' }]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="sortInfos" type="Object" deprecated="false" usage="required">
<description><![CDATA[sort할 정보]]></description>
</parameter>
</parameters>
</method>
<method name="reverse" deprecated="false" scope="instance" >
<description><![CDATA[data의 reverse 메소드 수행]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="commitSort" deprecated="false" scope="instance" >
<description><![CDATA[현재 정렬된 기준으로 sort 데이터를 확정한다. 메소드가 호출되면 데이터는 현재 그대로 남기고 정렬정보만 모두 초기화 된다.]]></description>
<return-types>
<return-type type="viod" />
</return-types>
</method>
<method name="indexOfRecord" deprecated="false" scope="instance" >
<description><![CDATA[record의 row 위치를 리턴한다. 이 메소드는 데이터셋의 row 위치를 검색하므로 성능 느리니 권장하지 않는다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[Record의 row 위치]]></return-description>
</return-types>
<parameters>
<parameter name="LRecord" type="Rui.data.LRecord" deprecated="false" usage="required">
<description><![CDATA[객체]]></description>
</parameter>
</parameters>
</method>
<method name="setState" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 row 위치 데이터의 상태를 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[위치]]></description>
</parameter>
<parameter name="state" type="Rui.data.LRecord.STATE_NORMAL|Rui.data.LRecord.STATE_INSERT|Rui.data.LRecord.STATE_UPDATE|Rui.data.LRecord.STATE_DELETE" deprecated="false" usage="required">
<description><![CDATA[Record에 해당되는 상태값]]></description>
</parameter>
</parameters>
</method>
<method name="setFields" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 fields의 모든 항목을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="fields" type="Array" deprecated="false" usage="required">
<description><![CDATA[위치]]></description>
</parameter>
</parameters>
</method>
<method name="getFields" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 fields의 모든 항목을 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
</method>
<method name="getState" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 row 위치 데이터의 상태를 반환한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[state Record에 해당되는 상태값]]></return-description>
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치]]></description>
</parameter>
</parameters>
</method>
<method name="clone" deprecated="false" scope="instance" >
<description><![CDATA[DataSet를 newId객체로 복사하여 리턴한다.]]></description>
<return-types>
<return-type type="Rui.data.LDataSet" />
</return-types>
<parameters>
<parameter name="newId" type="String|Object" deprecated="false" usage="required">
<description><![CDATA[신규 DataSet객체 id 문자거나 id와 fields가 필수로 들어 있는 config객체]]></description>
</parameter>
</parameters>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 row와 col의 값을 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row의 위치]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="required">
<description><![CDATA[col의 위치]]></description>
</parameter>
</parameters>
</method>
<method name="getNameValue" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 row와 col의 값을 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row의 위치]]></description>
</parameter>
<parameter name="colId" type="String" deprecated="false" usage="required">
<description><![CDATA[col의 Id]]></description>
</parameter>
</parameters>
</method>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 row와 col의 값을 셋팅한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row의 위치]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="required">
<description><![CDATA[col의 위치]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[value 값]]></description>
</parameter>
</parameters>
</method>
<method name="setNameValue" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 row와 colId의 값을 셋팅한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row의 위치]]></description>
</parameter>
<parameter name="colId" type="String" deprecated="false" usage="required">
<description><![CDATA[col의 Id]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[value 값]]></description>
</parameter>
</parameters>
</method>
<method name="sum" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 colId의 해당되는 컬럼값의 합계를 리턴한다.
 주의! 이 메소드는 반복 사용시 성능저하가 발생될 수 있습니다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="colId" type="String" deprecated="false" usage="required">
<description><![CDATA[col의 Id]]></description>
</parameter>
<parameter name="startRow" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] row의 시작위치]]></description>
</parameter>
<parameter name="endRow" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] row의 종료위치]]></description>
</parameter>
</parameters>
</method>
<method name="max" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 colId의 해당되는 컬럼값의 max를 리턴한다.
 주의! 이 메소드는 반복 사용시 성능저하가 발생될 수 있습니다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="colId" type="String" deprecated="false" usage="required">
<description><![CDATA[col의 Id]]></description>
</parameter>
<parameter name="startRow" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] row의 시작위치]]></description>
</parameter>
<parameter name="endRow" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] row의 종료위치]]></description>
</parameter>
</parameters>
</method>
<method name="min" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 colId의 해당되는 컬럼값의 max를 리턴한다.
 주의! 이 메소드는 반복 사용시 성능저하가 발생될 수 있습니다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="colId" type="String" deprecated="false" usage="required">
<description><![CDATA[col의 Id]]></description>
</parameter>
<parameter name="startRow" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] row의 시작위치]]></description>
</parameter>
<parameter name="endRow" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] row의 종료위치]]></description>
</parameter>
</parameters>
</method>
<method name="max" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 colId의 해당되는 컬럼값의 평균을 리턴한다.
 주의! 이 메소드는 반복 사용시 성능저하가 발생될 수 있습니다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="colId" type="String" deprecated="false" usage="required">
<description><![CDATA[col의 Id]]></description>
</parameter>
<parameter name="startRow" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] row의 시작위치]]></description>
</parameter>
<parameter name="endRow" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] row의 종료위치]]></description>
</parameter>
</parameters>
</method>
<method name="validRow" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 row가 valid될경우 호출되는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row의 위치]]></description>
</parameter>
</parameters>
</method>
<method name="batch" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 대량건의 변경이 발생하여 성능 저하가 발생할 경우 이벤트를 발생시키지 않고 처리하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[수행할 Function]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] scope 정보]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.data.LField" deprecated="false" >
<description>LField utility.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LField utility.</description>
</constructor>
</constructors>
<configs>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>field의 id</description>
</property>
<property name="type" type="String" deprecated="false" scope="instance" >
<description>field객체의 종류(number, string, date)</description>
</property>
<property name="defaultValue" type="String|Int|Date" deprecated="false" scope="instance" >
<description>field의 기본 출력값</description>
</property>
</configs>
<properties>
</properties>
</class>
<class type="Rui.data.LRecord" deprecated="false" >
<description>데이터의 실제 값을 가지는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>데이터의 실제 값을 가지는 객체</description>
<parameters>
<parameter name="data" type="Object" deprecated="false" usage="instance">
<description><![CDATA[초기 데이터.]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LDataSet.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="data" type="Object" deprecated="false" scope="instance" >
<description>Record의 데이터 객체로 json형 데이터객체를 저장한다.</description>
</property>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>LRecord id</description>
</property>
</configs>
<properties>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>LRecord id</description>
</property>
</properties>
<methods>
<method name="getId" deprecated="false" scope="instance" >
<description><![CDATA[Record의 id를 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="get" deprecated="false" scope="instance" >
<description><![CDATA[key에 해당되는 데이터를 리턴하는 메소드]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[Field id]]></description>
</parameter>
</parameters>
</method>
<method name="set" deprecated="false" scope="instance" >
<description><![CDATA[key에 해당되는 value를 저장하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[Field id]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[Field에 대항되는 값]]></description>
</parameter>
<parameter name="option" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] 환경정보 객체]]></description>
</parameter>
</parameters>
</method>
<method name="getAttribute" deprecated="false" scope="instance" >
<description><![CDATA[ui용 attribute key에 해당되는 데이터를 리턴하는 메소드.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[Field id]]></description>
</parameter>
</parameters>
</method>
<method name="setAttribute" deprecated="false" scope="instance" >
<description><![CDATA[ui용 attribute key에 해당되는 value를 저장하는 메소드. 이 메소드로 값을 변경해도 데이터셋에서는 변경건 처리를 하지 않는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[Field id]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[Field에 대항되는 값]]></description>
</parameter>
</parameters>
</method>
<method name="undo" deprecated="false" scope="instance" >
<description><![CDATA[현재 Record를 undo하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setState" deprecated="false" scope="instance" >
<description><![CDATA[현재 Record의 상태를 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="state" type="Rui.data.LRecord.STATE_NORMAL|Rui.data.LRecord.STATE_INSERT|Rui.data.LRecord.STATE_UPDATE|Rui.data.LRecord.STATE_DELETE" deprecated="false" usage="required">
<description><![CDATA[Record에 해당되는 상태값]]></description>
</parameter>
</parameters>
</method>
<method name="getState" deprecated="false" scope="instance" >
<description><![CDATA[현재 Record의 상태를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord.STATE_NORMAL|Rui.data.LRecord.STATE_INSERT|Rui.data.LRecord.STATE_UPDATE|Rui.data.LRecord.STATE_DELETE" />
<return-description><![CDATA[Record에 해당되는 상태값]]></return-description>
</return-types>
</method>
<method name="commit" deprecated="false" scope="instance" >
<description><![CDATA[현재 상태를 commit한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getModifiedData" deprecated="false" scope="instance" >
<description><![CDATA[record 데이터중에 field의 값이 변경된 데이터만 json object형으로 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
<method name="getValues" deprecated="false" scope="instance" >
<description><![CDATA[Record의 전체값을 json형 Object 객체로 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
<method name="setValues" deprecated="false" scope="instance" >
<description><![CDATA[Record에 json형 Object의 객체 정보의 값을 반영한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="o" type="Object" deprecated="false" usage="required">
<description><![CDATA[Record에 반영할 Object 객체]]></description>
</parameter>
</parameters>
</method>
<method name="isModifiedField" deprecated="false" scope="instance" >
<description><![CDATA[Record에 id에 해당되는 Field가 변경 데이터인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[변경 여부]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="Object" deprecated="false" usage="required">
<description><![CDATA[검색할 Field의 id]]></description>
</parameter>
</parameters>
</method>
<method name="isModified" deprecated="false" scope="instance" >
<description><![CDATA[Record가 변경되었는지를 true or false로 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[변경 여부]]></return-description>
</return-types>
</method>
<method name="clone" deprecated="false" scope="instance" >
<description><![CDATA[Record를 newId객체로 복사하여 리턴한다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
</return-types>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="required">
<description><![CDATA[(optional) state:상태값, id:신규 Record객체 Id]]></description>
</parameter>
</parameters>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DataSet객체 정보를 모두 지운다. (이벤트 포함)]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="getNewRecordId" deprecated="false" scope="static" >
<description><![CDATA[LRecord 객체의 자동 순번 id]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.data.LJsonDataSet" deprecated="false"  superclass="Rui.data.LDataSet" >
<description>LJsonDataSet</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LJsonDataSet</description>
<parameters>
<parameter name="The" type="Object" deprecated="false" usage="instance">
<description><![CDATA[intial LJsonDataSet.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="serialize" deprecated="false" scope="instance" >
<description><![CDATA[데이터 정보를 문자열로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[문자열]]></return-description>
</return-types>
</method>
<method name="serializeModified" deprecated="false" scope="instance" >
<description><![CDATA[변경된 데이터 정보를 문자열로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[변경된 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="isAll" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] true일 경우 변경된 전체 데이터를 리턴]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.data.LDelimiterDataSet" deprecated="false"  superclass="Rui.data.LDataSet" >
<description>LDelimiterDataSet</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LDelimiterDataSet</description>
<parameters>
<parameter name="The" type="Object" deprecated="false" usage="instance">
<description><![CDATA[intial LDelimiterDataSet.
 { id:'dataSet',
      fields:[
          {id:'col1'}
      ]
 }]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="getReadResponseData" deprecated="false" scope="instance" >
<description><![CDATA[현재 DataSet 기준으로 결과 데이터를 Object로 변환하여 리턴]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="conn" type="Object" deprecated="false" usage="required">
<description><![CDATA[응답 객체]]></description>
</parameter>
</parameters>
</method>
<method name="createDelimiterRecord" deprecated="false" scope="instance" >
<description><![CDATA[Record객체를 생성한다. 생성된 레코드는 DataSet에 반영되지 않은 상태이다. 순수하게 LRecord객체만 생성된다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
</return-types>
<parameters>
<parameter name="data" type="String" deprecated="false" usage="required">
<description><![CDATA[데이터 문자]]></description>
</parameter>
<parameter name="option" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] option 객체]]></description>
</parameter>
</parameters>
</method>
<method name="get" deprecated="false" scope="instance" >
<description><![CDATA[Id에 해당되는 Record객체를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
<return-description><![CDATA[아이디에 해당되는 LRecord 객체]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[얻고자 하는 Record객체의 아이디]]></description>
</parameter>
</parameters>
</method>
<method name="getAt" deprecated="false" scope="instance" >
<description><![CDATA[위치값에 해당되는 Record객체를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
<return-description><![CDATA[아이디에 해당되는 LRecord 객체]]></return-description>
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[얻고자 하는 Record객체의 위치값]]></description>
</parameter>
</parameters>
</method>
<method name="serialize" deprecated="false" scope="instance" >
<description><![CDATA[데이터 정보를 문자열로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[문자열]]></return-description>
</return-types>
</method>
<method name="serializeModified" deprecated="false" scope="instance" >
<description><![CDATA[변경된 데이터 정보를 문자열로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[변경된 문자열]]></return-description>
</return-types>
<parameters>
<parameter name="isAll" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] true일 경우 변경된 전체 데이터를 리턴]]></description>
</parameter>
</parameters>
</method>
<method name="query" deprecated="false" scope="instance" >
<description><![CDATA[DataSet에 query에 해당되는 데이터를 리턴한다.
 주의! 이 메소드는 반복 사용시 성능저하가 발생될 수 있습니다.]]></description>
<return-types>
<return-type type="Rui.util.LCollection" />
</return-types>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[정보를 비교할 Function]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[scope정보 옵션]]></description>
</parameter>
</parameters>
</method>
<method name="sort" deprecated="false" scope="instance" >
<description><![CDATA[DataSet을 정렬한다.
 주의! 이 메소드는 반복 사용시 성능저하가 발생될 수 있습니다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
<parameters>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[정보를 비교할 Function]]></description>
</parameter>
<parameter name="desc" type="String" deprecated="false" usage="required">
<description><![CDATA[정렬 방식 [asc|desc]]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.data.LBind" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>html form object와 dataSet을 연결하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>html form object와 dataSet을 연결하는 객체</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LBind.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="bind" type="boolean" deprecated="false" scope="instance" >
<description>LBind 여부</description>
</property>
<property name="bindInfo" type="Object" deprecated="false" scope="instance" >
<description>Bind객체 정보</description>
</property>
<property name="isValidation" type="boolean" deprecated="false" scope="instance" >
<description>validate를 처리할 지 여부</description>
</property>
<property name="selector" type="String" deprecated="false" scope="instance" >
<description>bind 객체를 찾는 selector 문장</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="rebind" deprecated="false" scope="instance" >
<description><![CDATA[groupId에 있는 객체들을 다시 bind 시킨다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="addBindInfo" deprecated="false" scope="instance" >
<description><![CDATA[bindInfo 정보를 추가한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="bindInfo" type="Object" deprecated="false" usage="required">
<description><![CDATA[추가할 bindInfo]]></description>
</parameter>
</parameters>
</method>
<method name="clearBindInfoMap" deprecated="false" scope="instance" >
<description><![CDATA[bindInfoMap cache를 지운다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="load" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 row 위치에 해당되는 정보를 읽는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[읽어올 위치 값]]></description>
</parameter>
</parameters>
</method>
<method name="setDataSet" deprecated="false" scope="instance" >
<description><![CDATA[데이터셋을 변경하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dataSet" type="Rui.data.LDataSet" deprecated="false" usage="required">
<description><![CDATA[반영할 데이터셋]]></description>
</parameter>
</parameters>
</method>
<method name="setBind" deprecated="false" scope="instance" >
<description><![CDATA[bind 속성을 변경하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="isBind" type="boolean" deprecated="false" usage="required">
<description><![CDATA[바인드할지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.data.LDataSetManager" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>변경된 dataSet을 서버에 전송하거나 멀티건의 dataSet을 load하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>변경된 dataSet을 서버에 전송하거나 멀티건의 dataSet을 load하는 객체</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LDataSetManager.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="defaultSuccessHandler" type="boolean" deprecated="false" scope="instance" >
<description>rui_config.js에 있는 defaultSuccessHandler를 사용할지 여부</description>
</property>
<property name="defaultFailureHandler" type="boolean" deprecated="false" scope="instance" >
<description>rui_config.js에 있는 defaultFailureHandler를 사용할지 여부</description>
</property>
<property name="defaultLoadExceptionHandler" type="boolean" deprecated="false" scope="instance" >
<description>rui_config.js에 있는 defaultLoadExceptionHandler를 사용할지 여부</description>
</property>
<property name="disableCaching" type="boolean" deprecated="false" scope="instance" >
<description>URL에 대한 Cache 여부</description>
</property>
<property name="timeout" type="int" deprecated="false" scope="instance" >
<description>Request의 timeout값</description>
</property>
<property name="loadCache" type="boolean" deprecated="false" scope="instance" >
<description>서버에서 받은 데이터가 기존에 받은 데이터와 같으면 데이터를 로딩하지 않는다. (같은 데이터면 모든 이벤트도 작동 안함)</description>
</property>
<property name="useWaitPanel" type="boolean" deprecated="false" scope="instance" >
<description>waitPanel(mask)을 사용할지 여부를 결정한다.</description>
</property>
<property name="dataParameterName" type="String" deprecated="false" scope="instance" >
<description>updateDataSet할 때 서버로 전송될 DataSet 값의 parameter name.</description>
</property>
<property name="dataTypeParameterName" type="String" deprecated="false" scope="instance" >
<description>updateDataSet할 때 서버로 전송될 DataSet Type 값의 parameter name.</description>
</property>
</configs>
<properties>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>field의 id</description>
</property>
</properties>
<events>
<event name="success" deprecated="false">
<description><![CDATA[
Update가 성공할 경우 발생하는 이벤트
]]></description>
<parameters>
<parameter name="conn" type="XMLHttpRequest" deprecated="false" usage="instance">
<description><![CDATA[ajax response 객체]]></description>
</parameter>
</parameters>
</event>
<event name="failure" deprecated="false">
<description><![CDATA[
Update가 실패할 경우 발생하는 이벤트
]]></description>
<parameters>
<parameter name="conn" type="XMLHttpRequest" deprecated="false" usage="instance">
<description><![CDATA[ajax response 객체]]></description>
</parameter>
</parameters>
</event>
<event name="upload" deprecated="false">
<description><![CDATA[
upload를 할 경우 발생하는 이벤트.
]]></description>
<parameters>
<parameter name="conn" type="XMLHttpRequest" deprecated="false" usage="instance">
<description><![CDATA[ajax response 객체]]></description>
</parameter>
</parameters>
</event>
<event name="beforeUpdate" deprecated="false">
<description><![CDATA[
Update를 실행하기전에 실행여부를 판단하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="url" type="String" deprecated="false" usage="instance">
<description><![CDATA[url 정보]]></description>
</parameter>
<parameter name="form" type="HtmlElement" deprecated="false" usage="instance">
<description><![CDATA[form 객체]]></description>
</parameter>
<parameter name="params" type="Object" deprecated="false" usage="instance">
<description><![CDATA[parameter 객체]]></description>
</parameter>
<parameter name="dataSets" type="Rui.data.LDataSet" deprecated="false" usage="instance">
<description><![CDATA[dataset 객체]]></description>
</parameter>
</parameters>
</event>
<event name="beforeLoad" deprecated="false">
<description><![CDATA[
load이 발생하기전 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="load" deprecated="false">
<description><![CDATA[
loadDataSet메소드 호출시 수행되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="loadException" deprecated="false">
<description><![CDATA[
loadDataSet메소드 호출시 에러가 발생했을 경우
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="throwObject" type="Object" deprecated="false" usage="instance">
<description><![CDATA[exception 객체]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="update" deprecated="false" scope="instance" >
<description><![CDATA[params정보를 가지고 url로 서버를 호출하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="options" type="Object" deprecated="false" usage="required">
<description><![CDATA[호출할때 전달할 Option정보 객체]]></description>
</parameter>
</parameters>
</method>
<method name="updateForm" deprecated="false" scope="instance" >
<description><![CDATA[form의 element정보를 가지고 url로 서버를 호출하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="options" type="Object" deprecated="false" usage="required">
<description><![CDATA[호출할때 전달할 Option정보 객체]]></description>
</parameter>
</parameters>
</method>
<method name="updateDataSet" deprecated="false" scope="instance" >
<description><![CDATA[dataSet의 변경정보를 가지고 url로 서버를 호출하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="options" type="Object" deprecated="false" usage="required">
<description><![CDATA[호출할때 전달할 Option정보 객체]]></description>
</parameter>
</parameters>
</method>
<method name="serializeByModifiedDataSet" deprecated="false" scope="instance" >
<description><![CDATA[여러개의 {Rui.data.LDataSet}에 해당되는 queryString을 리턴한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dataSets" type="Array" deprecated="false" usage="required">
<description><![CDATA[데이터셋 리스트]]></description>
</parameter>
</parameters>
</method>
<method name="serializeByDataSet" deprecated="false" scope="instance" >
<description><![CDATA[여러개의 {Rui.data.LDataSet}에 해당되는 queryString을 리턴한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dataSets" type="Array" deprecated="false" usage="required">
<description><![CDATA[데이터셋 리스트]]></description>
</parameter>
</parameters>
</method>
<method name="loadDataSet" deprecated="false" scope="instance" >
<description><![CDATA[여러개의 {Rui.data.LDataSet}을 서버에서 load하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="options" type="Object" deprecated="false" usage="required">
<description><![CDATA[호출할때 전달할 Option정보 객체]]></description>
</parameter>
</parameters>
</method>
<method name="loadDataResponse" deprecated="false" scope="instance" >
<description><![CDATA[HttpResponse 결과를 여러개의 {Rui.data.LDataSet}에 반영하는 메소드
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/data/dataSetManagerMultidatasetSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dataSets" type="Array" deprecated="false" usage="required">
<description><![CDATA[DataSet 배열]]></description>
</parameter>
<parameter name="conn" type="Object" deprecated="false" usage="required">
<description><![CDATA[HttpResponse 객체]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="required">
<description><![CDATA[호출할때 전달할 Option정보 객체
 &amp;lt;div class='param-options'&amp;gt;
 state {Rui.data.LRecord.STATE_INSERT|Rui.data.LRecord.STATE_UPDATE|Rui.data.LRecord.STATE_DELETE} load시 record의 기본 상태]]></description>
</parameter>
</parameters>
</method>
<method name="abort" deprecated="false" scope="instance" >
<description><![CDATA[request를 중단하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="isUpdating" deprecated="false" scope="instance" >
<description><![CDATA[update를 호출했는지 판단하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="waitPanelShow" deprecated="false" scope="instance" >
<description><![CDATA[wait panel을 출력하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="waitPanelHide" deprecated="false" scope="instance" >
<description><![CDATA[wait panel을 숨기는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.validate.LValidator" deprecated="false" >
<description>Validator</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Validator</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="validate" deprecated="false" scope="instance" >
<description><![CDATA[validate하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[비교 결과값]]></return-description>
</return-types>
<parameters>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[비교 값]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.validate.LValidatorManager" deprecated="false" >
<description>LValidator 기반의 각종 FORM, UI Component, DataSet 등의 객체 유효성을 관리하는 컴포넌트</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LValidator 기반의 각종 FORM, UI Component, DataSet 등의 객체 유효성을 관리하는 컴포넌트</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LValidatorManager.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="validators" type="Array" deprecated="false" scope="instance" >
<description>LValidator들을 가지는 객체</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="add" deprecated="false" scope="instance" >
<description><![CDATA[Validator객체를 추가하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[validation할 객체의 id]]></description>
</parameter>
<parameter name="validator" type="Rui.validate.LValidator" deprecated="false" usage="required">
<description><![CDATA[validator 객체]]></description>
</parameter>
</parameters>
</method>
<method name="validate" deprecated="false" scope="instance" >
<description><![CDATA[validation를 object에 가지고 있는 키,값으로 수행하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[validate 여부]]></return-description>
</return-types>
<parameters>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[Validation할 object]]></description>
</parameter>
</parameters>
</method>
<method name="validateGroup" deprecated="false" scope="instance" >
<description><![CDATA[지정한 id의 DOM 하위에 구성된 INPUT, TextArea, CheckBox, Radio등의 입력폼 안에서 유효성을 검사하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[validate 여부]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[Validation할 group id]]></description>
</parameter>
</parameters>
</method>
<method name="validateField" deprecated="false" scope="instance" >
<description><![CDATA[지정한 id의 INPUT, TextArea, CheckBox, Radio등의 입력 폼 값의 유효성을 검사하는 메소드
 validation 결과 =&amp;gt; isValid: {boolean}, id: {string}, label: {string}, message: {string}, messages: {string[]}]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[row]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[Validation할 field]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[Validation할 object]]></description>
</parameter>
</parameters>
</method>
<method name="validateEl" deprecated="false" scope="instance" >
<description><![CDATA[지정한 el의 INPUT, TextArea, CheckBox, Radio 및 Rui.ui.form.LField 컴포넌트의 입력 폼 값의 유효성을 검사하는 메소드
 validation 결과 =&amp;gt; isValid: {boolean}, id: {string}, label: {string}, message: {string}, messages: {string[]}]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[validate 여부]]></return-description>
</return-types>
<parameters>
<parameter name="el" type="Rui.LElement" deprecated="false" usage="required">
<description><![CDATA[Validation할 Element객체]]></description>
</parameter>
</parameters>
</method>
<method name="validateDataSet" deprecated="false" scope="instance" >
<description><![CDATA[dataSet의 값을 기준으로 유효성체크를 한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[validate 여부]]></return-description>
</return-types>
<parameters>
<parameter name="dataSet" type="Rui.data.LDataSet" deprecated="false" usage="required">
<description><![CDATA[Validation할 dataSet객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] Validation할 dataSet객체의 행 번호, 생략할 경우 전체 행을 검사한다.]]></description>
</parameter>
</parameters>
</method>
<method name="clearInvalids" deprecated="false" scope="instance" >
<description><![CDATA[validate, validateField, validateGroup 메소드 실행의 결과로 invalid 상태가 된 각종 폼객체들을 일괄 valid 상태로 만든다.
 주의!! validateDataSet, validateGrid등에 의해 invalid 상태가 된 경우는 이 메소드를 사용해선 안된다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getValidatorList" deprecated="false" scope="instance" >
<description><![CDATA[validator의 id에 해당되는 LValidator를 배열로 리턴한다.]]></description>
<return-types>
<return-type type="ArrayList" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[validator id]]></description>
</parameter>
</parameters>
</method>
<method name="getValidator" deprecated="false" scope="instance" >
<description><![CDATA[validator의 id에 해당되는 LValidator를 리턴한다.]]></description>
<return-types>
<return-type type="object" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[validator id]]></description>
</parameter>
<parameter name="validatorId" type="String" deprecated="false" usage="required">
<description><![CDATA[validator 종류(ex. date, length, minDate 등)]]></description>
</parameter>
</parameters>
</method>
<method name="getInvalidList" deprecated="false" scope="instance" >
<description><![CDATA[invalid된 객체를 담아 배열로 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[invalid 배열]]></return-description>
</return-types>
</method>
<method name="getMessageList" deprecated="false" scope="instance" >
<description><![CDATA[출력했던 메시지를 문자로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[출력했던 전체 메시지]]></return-description>
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.validate.LLengthValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LLengthValidator 전체 글자의 길이를 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col2', validExp:'Col2:true:length=4'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LLengthValidator 전체 글자의 길이를 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col2', validExp:'Col2:true:length=4'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="length" type="int" deprecated="false" usage="instance">
<description><![CDATA[검사할 문자의 길이]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LDateValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>&amp;lt;pre&amp;gt;
 LDateValidator 날짜의 유효성을 체크하는 validator
 { id: 'col11', validExp:'Col11:true:date=YYYYMMDD'}
 format문자 :  YYYY,  -&amp;gt; 4자리 년도
               YY,    -&amp;gt; 2자리 년도. 2000년 이후.
               MM,    -&amp;gt; 2자리 숫자의 달.
               DD,    -&amp;gt; 2자리 숫자의 일.
               hh,    -&amp;gt; 2자리 숫자의 시간. 12시 기준
               HH,    -&amp;gt; 2자리 숫자의 시간. 24시 기준
               mm,    -&amp;gt; 2자리 숫자의 분.
               ss     -&amp;gt; 2자리 숫자의 초.

 예)
     'YYYYMMDD' -&amp;gt; '20020328'
     'YYYY/MM/DD' -&amp;gt; '2002/03/28'
     'Today : YY-MM-DD' -&amp;gt; 'Today : 02-03-28'

 참고)
       format문자가 중복해서 나오더라도 처음 나온 문자에 대해서만
       format문자로 인식된다. YYYY와 YY, hh와 HH 도 중복으로 본다.
       날짜는 년,월이 존재할 때만 정확히 체크하고 만일 년, 월이 없다면
       1 ~ 31 사이인지만 체크한다.
 &amp;lt;/pre&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>&amp;lt;pre&amp;gt;
 LDateValidator 날짜의 유효성을 체크하는 validator
 { id: 'col11', validExp:'Col11:true:date=YYYYMMDD'}
 format문자 :  YYYY,  -&amp;gt; 4자리 년도
               YY,    -&amp;gt; 2자리 년도. 2000년 이후.
               MM,    -&amp;gt; 2자리 숫자의 달.
               DD,    -&amp;gt; 2자리 숫자의 일.
               hh,    -&amp;gt; 2자리 숫자의 시간. 12시 기준
               HH,    -&amp;gt; 2자리 숫자의 시간. 24시 기준
               mm,    -&amp;gt; 2자리 숫자의 분.
               ss     -&amp;gt; 2자리 숫자의 초.

 예)
     'YYYYMMDD' -&amp;gt; '20020328'
     'YYYY/MM/DD' -&amp;gt; '2002/03/28'
     'Today : YY-MM-DD' -&amp;gt; 'Today : 02-03-28'

 참고)
       format문자가 중복해서 나오더라도 처음 나온 문자에 대해서만
       format문자로 인식된다. YYYY와 YY, hh와 HH 도 중복으로 본다.
       날짜는 년,월이 존재할 때만 정확히 체크하고 만일 년, 월이 없다면
       1 ~ 31 사이인지만 체크한다.
 &amp;lt;/pre&amp;gt;</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="dateExpr" type="string" deprecated="false" usage="instance">
<description><![CDATA[허용되는 byte길이]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LFormatValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LFormatValidator format에 맞는 값인지를 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col17', validExp:'Col17:true:format=abc'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LFormatValidator format에 맞는 값인지를 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col17', validExp:'Col17:true:format=abc'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="format" type="string" deprecated="false" usage="instance">
<description><![CDATA[검사 포맷]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LNumberValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LNumberValidator 숫자 여부를 판단하는 validator&amp;lt;br&amp;gt;
 { id: 'col6', validExp:'Col6:true:number'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LNumberValidator 숫자 여부를 판단하는 validator&amp;lt;br&amp;gt;
 { id: 'col6', validExp:'Col6:true:number'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="format" type="string" deprecated="false" usage="instance">
<description><![CDATA[검사할 숫자 포맷, 소숫점 포함 여부 등]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LRequiredValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LRequiredValidator 필수 여부</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LRequiredValidator 필수 여부</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LByteLengthValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LByteLengthValidator byte로 길이를 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col4', validExp:'Col4:true:byteLength=4'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LByteLengthValidator byte로 길이를 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col4', validExp:'Col4:true:byteLength=4'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="length" type="string" deprecated="false" usage="instance">
<description><![CDATA[허용되는 byte길이]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LFilterValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>&amp;lt;pre&amp;gt;
 filterValidator : 지정된 문자가 들어있을 경우 유효하지 않은 것으로 판단한다.
 { id: 'col16', validExp:'Col16:true:filter=%;&amp;lt;;\\h;\\;;haha' }
 Wild 문자
   ;    - \;
   한글 - \h
   영문 - \a
   숫자 - \n
 &amp;lt;/pre&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>&amp;lt;pre&amp;gt;
 filterValidator : 지정된 문자가 들어있을 경우 유효하지 않은 것으로 판단한다.
 { id: 'col16', validExp:'Col16:true:filter=%;&amp;lt;;\\h;\\;;haha' }
 Wild 문자
   ;    - \;
   한글 - \h
   영문 - \a
   숫자 - \n
 &amp;lt;/pre&amp;gt;</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="filterExpr" type="string" deprecated="false" usage="instance">
<description><![CDATA[허용되는 byte길이]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LInNumberValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LInNumberValidator 범위안에 숫자가 존재하는지 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col10', validExp:'Col10:true:inNumber=90~100'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LInNumberValidator 범위안에 숫자가 존재하는지 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col10', validExp:'Col10:true:inNumber=90~100'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="inNumber" type="string" deprecated="false" usage="instance">
<description><![CDATA[숫자의 범위 (ex, '90~100')]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LMinByteLengthValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LMinByteLengthValidator byte로 최소 길이를 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col5', validExp:'Col5:true:minByteLength=8'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LMinByteLengthValidator byte로 최소 길이를 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col5', validExp:'Col5:true:minByteLength=8'}</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LMinByteLengthValidator.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LMinDateValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LMinDateValidator 최소 입력 날짜인지 확인하는 validator&amp;lt;br&amp;gt;
 { id: 'col12', validExp:'Col12:true:minDate=2008/11/11(YYYY/MM/DD)'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LMinDateValidator 최소 입력 날짜인지 확인하는 validator&amp;lt;br&amp;gt;
 { id: 'col12', validExp:'Col12:true:minDate=2008/11/11(YYYY/MM/DD)'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="minDate" type="string" deprecated="false" usage="instance">
<description><![CDATA[검사할 min date string (ex, '20081111' or '2008/11/11(YYYY/MM/DD)')]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LMinLengthValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LMinLengthValidator 최소 길이를 확인하는 validator&amp;lt;br&amp;gt;
 { id: 'col3', validExp:'Col3:true:minLength=6'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LMinLengthValidator 최소 길이를 확인하는 validator&amp;lt;br&amp;gt;
 { id: 'col3', validExp:'Col3:true:minLength=6'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="minLength" type="int" deprecated="false" usage="instance">
<description><![CDATA[검사할 min length]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LMinNumberValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LMinNumberValidator 최소 숫자를 확인하는 validator&amp;lt;br&amp;gt;
 { id: 'col8', validExp:'Col8:true:minNumber=100'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LMinNumberValidator 최소 숫자를 확인하는 validator&amp;lt;br&amp;gt;
 { id: 'col8', validExp:'Col8:true:minNumber=100'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="minNumber" type="int" deprecated="false" usage="instance">
<description><![CDATA[검사할 min number]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LMaxByteLengthValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LMaxByteLengthValidator byte로 최대 길이를 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col5', validExp:'Col5:true:maxByteLength=8'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LMaxByteLengthValidator byte로 최대 길이를 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col5', validExp:'Col5:true:maxByteLength=8'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="length" type="int" deprecated="false" usage="instance">
<description><![CDATA[검사할 문자의 byte 길이]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LMaxDateValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LMaxDateValidator 기준 날짜를 초과하는지 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col13', validExp:'Col13:true:maxDate=20081111'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LMaxDateValidator 기준 날짜를 초과하는지 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col13', validExp:'Col13:true:maxDate=20081111'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="maxDate" type="string" deprecated="false" usage="instance">
<description><![CDATA[검사할 max date string (ex, '20081111' or '2008/11/11(YYYY/MM/DD)')]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LMaxLengthValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LMaxLengthValidator 최대 길이를 초과하는지 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col3', validExp:'Col3:true:maxLength=6'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LMaxLengthValidator 최대 길이를 초과하는지 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col3', validExp:'Col3:true:maxLength=6'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="maxLength" type="int" deprecated="false" usage="instance">
<description><![CDATA[검사할 max length]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LMaxNumberValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LMaxNumberValidator 최대 숫자를 초과하는지 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col9', validExp:'Col9:true:maxNumber=100'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LMaxNumberValidator 최대 숫자를 초과하는지 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col9', validExp:'Col9:true:maxNumber=100'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="maxNumber" type="int" deprecated="false" usage="instance">
<description><![CDATA[검사할 max number]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LSsnValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LSsnValidator 주민번호인지 체크하는 validator</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LSsnValidator 주민번호인지 체크하는 validator</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LCsnValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LCsnValidator 사업자 번호인지 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col15', validExp:'Col15:true:csn'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LCsnValidator 사업자 번호인지 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col15', validExp:'Col15:true:csn'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LEmailValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>LEmailValidator 이메일인지 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col18', validExp:'Col18:true:email'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LEmailValidator 이메일인지 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col18', validExp:'Col18:true:email'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LAllowValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>&amp;lt;pre&amp;gt;
 AllowCharValidator : 지정된 문자가 들어있을 경우 유효한것으로 판단한다.
 { id: 'col17', validExp:'Col17:true:allow=\\a;\\n'}
 Wild 문자
   ;    - \;
   한글 - \h
   영문 - \a
   숫자 - \n
 &amp;lt;/pre&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>&amp;lt;pre&amp;gt;
 AllowCharValidator : 지정된 문자가 들어있을 경우 유효한것으로 판단한다.
 { id: 'col17', validExp:'Col17:true:allow=\\a;\\n'}
 Wild 문자
   ;    - \;
   한글 - \h
   영문 - \a
   숫자 - \n
 &amp;lt;/pre&amp;gt;</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="allowExpr" type="string" deprecated="false" usage="instance">
<description><![CDATA[허용문자 표현식]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.validate.LGroupRequireValidator" deprecated="false"  superclass="Rui.validate.LValidator" >
<description>Checkbox나 Radiobox의 필수 여부를 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col18', validExp:'Col18:true:groupName=col8'}</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Checkbox나 Radiobox의 필수 여부를 체크하는 validator&amp;lt;br&amp;gt;
 { id: 'col18', validExp:'Col18:true:groupName=col8'}</description>
<parameters>
<parameter name="id" type="string" deprecated="false" usage="instance">
<description><![CDATA[field id]]></description>
</parameter>
<parameter name="groupName" type="string" deprecated="false" usage="instance">
<description><![CDATA[그룹명]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="instance">
<description><![CDATA[label등 validator 속성]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.ui.LUIComponent" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>UI Component들이 상속받는 추상 클래스</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>UI Component들이 상속받는 추상 클래스</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUIComponent.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="applyTo" type="String" deprecated="false" scope="instance" >
<description>객체를 render할 위치를 지정한다. 생성자 옵션이기때문에 생성시에 해당 html dom 객체의 id를 바로 찾아서 생성한다.</description>
</property>
<property name="renderTo" type="String" deprecated="false" scope="instance" >
<description>객체를 renderTo html dom 객체 하위에 dom객체를 생성한다. 생성자 옵션이기때문에 생성시에 해당 html dom 객체의 id를 바로 찾아서 생성한다.</description>
</property>
<property name="width" type="int" deprecated="false" scope="instance" >
<description>넓이 지정시 사용</description>
</property>
<property name="height" type="int" deprecated="false" scope="instance" >
<description>높이 지정시 사용</description>
</property>
<property name="disabled" type="boolean" deprecated="false" scope="instance" >
<description>객체의 disabled 여부를 관리한다.</description>
</property>
<property name="defaultClass" type="String" deprecated="false" scope="instance" >
<description>컴포넌트의 기본 class를 탑재한다.</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="disable" deprecated="false">
<description><![CDATA[
disable 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="enable" deprecated="false">
<description><![CDATA[
enable 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="show" deprecated="false">
<description><![CDATA[
show 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="hide" deprecated="false">
<description><![CDATA[
hide 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="focus" deprecated="false">
<description><![CDATA[
focus 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="blur" deprecated="false">
<description><![CDATA[
blur 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="render" deprecated="false">
<description><![CDATA[
render 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="destroy" deprecated="false">
<description><![CDATA[
destroy 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="resize" deprecated="false">
<description><![CDATA[
resize 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="move" deprecated="false">
<description><![CDATA[
move 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
</events>
<methods>
<method name="renderAt" deprecated="false" scope="instance" >
<description><![CDATA[컴포넌트를 지정된 노드에 랜더링한다. 이 경우 지정된 노드가 el이 된다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="el" type="String|HTMLElement" deprecated="false" usage="required">
<description><![CDATA[적용할 dom 객체나 아이디]]></description>
</parameter>
</parameters>
</method>
<method name="render" deprecated="false" scope="instance" >
<description><![CDATA[컴포넌트를 랜더링한다. 이때 부모 노드를 지정할 수 있으며 지정할 경우 지정된 노드의 자식노드로 랜더링된다.
 부모 노드를 지정하지 않거나 찾을 수 없는 경우 오류가 발생한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="appendTo" deprecated="false" scope="instance" >
<description><![CDATA[parentNode 중 하나에 HTMLElement를 append한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="parentNode" type="HTMLElement | Element" deprecated="false" usage="required">
<description><![CDATA[The node to append to]]></description>
</parameter>
</parameters>
</method>
<method name="setVisibilityMode" deprecated="false" scope="instance" >
<description><![CDATA[visMode가 true면 visibility에 설정 false거나 없으면 display에 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="visMode" type="boolean" deprecated="false" usage="required">
<description><![CDATA[visibility로 설정할지 display로 설정할지 결정하는 값]]></description>
</parameter>
</parameters>
</method>
<method name="enable" deprecated="false" scope="instance" >
<description><![CDATA[객체를 사용 가능하게 하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="disable" deprecated="false" scope="instance" >
<description><![CDATA[객체를 사용 불가능하게 하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="isDisable" deprecated="false" scope="instance" >
<description><![CDATA[disable 상태 여부를 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isShow" deprecated="false" scope="instance" >
<description><![CDATA[editor의 show 여부를 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="show" deprecated="false" scope="instance" >
<description><![CDATA[객체를 보이게 설정하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="anim" type="Boolean|Rui.fx.LAnim" deprecated="false" usage="required">
<description><![CDATA[(optional) Animation 여부를 설정한다. Boolean값이면 디폴트 animation을 실행하고 객체면 해당 객체에 설정된 animation을 수행한다.]]></description>
</parameter>
</parameters>
</method>
<method name="hide" deprecated="false" scope="instance" >
<description><![CDATA[객체를 안보이게 설정하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="anim" type="Boolean|Rui.fx.LAnim" deprecated="false" usage="required">
<description><![CDATA[(optional) Animation 여부를 설정한다. Boolean값이면 디폴트 animation을 실행하고 객체면 해당 객체에 설정된 animation을 수행한다.]]></description>
</parameter>
</parameters>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[객체를 focus한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="blur" deprecated="false" scope="instance" >
<description><![CDATA[객체를 blur한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getHeight" deprecated="false" scope="instance" >
<description><![CDATA[엘리먼트의 오프셋 높이를 리턴한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[The element's height]]></return-description>
</return-types>
<parameters>
<parameter name="contentHeight" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) : border와 padding을 뺀 높이를 가져오게 하려면 true]]></description>
</parameter>
</parameters>
</method>
<method name="setHeight" deprecated="false" scope="instance" >
<description><![CDATA[엘리먼트의 높이를 설정한다.
 &amp;lt;pre&amp;gt;&amp;lt;code&amp;gt;
// 높이를 200px로 바꾸고 default configuration으로 동작한다.
Rui.get('elementId').setHeight(200, true);

// 높이를 150px로 바꾸고 custom configuration으로 동작한다.
Rui.get('elId').setHeight(150, {
duration : .5, // 동작이 .5초 동안 지속된다
// 내용을 'finished'로 변환한다
callback: function(){ this.{]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="height" type="Mixed" deprecated="false" usage="required">
<description><![CDATA[새로운 높이. 다음 중 하나:&amp;lt;div class="mdetail-params"&amp;gt;&amp;lt;ul&amp;gt;]]></description>
</parameter>
</parameters>
</method>
<method name="getWidth" deprecated="false" scope="instance" >
<description><![CDATA[엘리먼트의 오프셋 넓이를 리턴한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[The element's width]]></return-description>
</return-types>
<parameters>
<parameter name="contentWidth" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) : border와 padding을 뺀 높이를 가져오게 하려면 true]]></description>
</parameter>
</parameters>
</method>
<method name="setWidth" deprecated="false" scope="instance" >
<description><![CDATA[엘리먼트의 넓이를 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="width" type="Mixed" deprecated="false" usage="required">
<description><![CDATA[새로운 넓이. 다음 중 하나:&amp;lt;div class="mdetail-params"&amp;gt;&amp;lt;ul&amp;gt;]]></description>
</parameter>
</parameters>
</method>
<method name="getLeft" deprecated="false" scope="instance" >
<description><![CDATA[엘리먼트의 오프셋 Left를 리턴한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[The element's left]]></return-description>
</return-types>
</method>
<method name="setLeft" deprecated="false" scope="instance" >
<description><![CDATA[엘리먼트의 Left를 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="left" type="int" deprecated="false" usage="required">
<description><![CDATA[새로운 Left]]></description>
</parameter>
</parameters>
</method>
<method name="getTop" deprecated="false" scope="instance" >
<description><![CDATA[엘리먼트의 오프셋 top를 리턴한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[The element's top]]></return-description>
</return-types>
</method>
<method name="setTop" deprecated="false" scope="instance" >
<description><![CDATA[엘리먼트의 top를 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="top" type="int" deprecated="false" usage="required">
<description><![CDATA[새로운 top]]></description>
</parameter>
</parameters>
</method>
<method name="parent" deprecated="false" scope="instance" >
<description><![CDATA[엘리먼트의 parent node를 가져온다. 선택사항으로 parent node와 일치하는 selector를 줄 수 있음.]]></description>
<return-types>
<return-type type="Rui.LElement|HTMLElement" />
<return-description><![CDATA[The parent node or null]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[(optional) Find a parent node that matches the passed simple selector]]></description>
</parameter>
<parameter name="returnDom" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) True to return a raw dom node instead of an Rui.LElement]]></description>
</parameter>
</parameters>
</method>
<method name="select" deprecated="false" scope="instance" >
<description><![CDATA[CSS Selector로 child 객체를 배열로 리턴한다.]]></description>
<return-types>
<return-type type="Rui.LElementList" />
<return-description><![CDATA[Rui.LElementList 객체 리턴]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[CSS selector 문자열]]></description>
</parameter>
<parameter name="firstOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 찾은 객체의 무조건 첫번째 객체를 리턴한다.]]></description>
</parameter>
</parameters>
</method>
<method name="query" deprecated="false" scope="instance" >
<description><![CDATA[CSS Selector로 child 객체를 배열로 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[Array 객체 리턴]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[CSS selector 문자열]]></description>
</parameter>
<parameter name="firstOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 찾은 객체의 무조건 첫번째 객체를 리턴한다.]]></description>
</parameter>
</parameters>
</method>
<method name="filter" deprecated="false" scope="instance" >
<description><![CDATA[CSS Selector로 현재 node중 selector로 지정된 child node만 배열로 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[Array 객체 리턴]]></return-description>
</return-types>
<parameters>
<parameter name="selector" type="String" deprecated="false" usage="required">
<description><![CDATA[CSS selector 문자열]]></description>
</parameter>
</parameters>
</method>
<method name="getContainer" deprecated="false" scope="instance" >
<description><![CDATA[컨테이너 객체를 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.LElement" />
</return-types>
</method>
<method name="availableHeight" deprecated="false" scope="instance" >
<description><![CDATA[부모의 dom 객체를 기준으로 height 100%으로 채운다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="parentId" type="String|HTMLElement" deprecated="false" usage="required">
<description><![CDATA[[optional] 기준이 되는 부모 객체의 id나 dom]]></description>
</parameter>
<parameter name="margin" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] 추가 여유 공간을 확보하기 위해 마이너스할 높이]]></description>
</parameter>
</parameters>
</method>
<method name="isRender" deprecated="false" scope="instance" >
<description><![CDATA[콤포넌트가 render가 됐는지 여부]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isRendered" deprecated="false" scope="instance" >
<description><![CDATA[콤포넌트가 render가 됐는지 여부]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LButton" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>LButton 객체는 form 입력 객체들을 추상 클래스</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LButton 객체는 form 입력 객체들을 추상 클래스</description>
<parameters>
<parameter name="id" type="HTMLElement | String" deprecated="false" usage="instance">
<description><![CDATA[The html element that represents the Element.]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial Field.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="label" type="String" deprecated="false" scope="instance" >
<description>field의 name으로 input, select태그들의 name 속성 값</description>
</property>
<property name="type" type="String" deprecated="false" scope="instance" >
<description>button 태그의 type값</description>
</property>
<property name="disableDbClick" type="boolean" deprecated="false" scope="instance" >
<description>더블클릭 방지 기능을 사용할 지 여부
 더블클릭 방지 기능을 사용할 경우 버튼이 클릭되는 순간부터 disableDbClickInterval에 설정된 시간동안 버튼이 disable된다.</description>
</property>
<property name="disableDbClickInterval" type="int" deprecated="false" scope="instance" >
<description>더블클릭 방지 기능을 사용할 경우의 disable interval</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="click" deprecated="false">
<description><![CDATA[
button이 click되면 호출되는 이벤
]]></description>
</event>
</events>
<methods>
<method name="_setLabel" deprecated="false" scope="instance" >
<description><![CDATA[setLabel 기능의 실제 적용 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="type" type="String" deprecated="false" usage="required">
<description><![CDATA[속성의 이름]]></description>
</parameter>
<parameter name="args" type="Array" deprecated="false" usage="required">
<description><![CDATA[속성의 값 배열]]></description>
</parameter>
<parameter name="obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[적용된 객체]]></description>
</parameter>
</parameters>
</method>
<method name="setLabel" deprecated="false" scope="instance" >
<description><![CDATA[버튼의 label을 설정 또는 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="label" type="String" deprecated="false" usage="required">
<description><![CDATA[변경할 label 값]]></description>
</parameter>
</parameters>
</method>
<method name="setLabel" deprecated="false" scope="instance" >
<description><![CDATA[버튼의 label을 반환한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[label 현재의 label 값]]></return-description>
</return-types>
</method>
<method name="getForm" deprecated="false" scope="instance" >
<description><![CDATA[버튼이 속해있는 Form Element 객체를 리턴한다.]]></description>
<return-types>
<return-type type="HTMLFormElement" />
</return-types>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[버튼을 focus한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="blur" deprecated="false" scope="instance" >
<description><![CDATA[버튼을 blur한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="click" deprecated="false" scope="instance" >
<description><![CDATA[버튼을 클릭한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy 한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LConfig" deprecated="false" >
<description>Config is a utility used within an Object to allow the implementer to
 maintain a list of local configuration properties and listen for changes
 to those properties dynamically using LCustomEvent. The initial values are
 also maintained so that the configuration can be reset at any given point
 to its initial state.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Config is a utility used within an Object to allow the implementer to
 maintain a list of local configuration properties and listen for changes
 to those properties dynamically using LCustomEvent. The initial values are
 also maintained so that the configuration can be reset at any given point
 to its initial state.</description>
<parameters>
<parameter name="owner" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The owner Object to which this Config Object belongs]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<events>
<event name="configChanged" deprecated="false">
<description><![CDATA[
Custom Event, notifying subscribers when Config properties are set
 (setProperty is called without the silent flag
]]></description>
</event>
</events>
<methods>
<method name="addProperty" deprecated="false" scope="instance" >
<description><![CDATA[Adds a property to the Config Object's private config hash.]]></description>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[The configuration property's name]]></description>
</parameter>
<parameter name="propertyObject" type="Object" deprecated="false" usage="required">
<description><![CDATA[The Object containing all of this
 property's arguments]]></description>
</parameter>
</parameters>
</method>
<method name="getConfig" deprecated="false" scope="instance" >
<description><![CDATA[Returns a key-value configuration map of the values currently set in
 the Config Object.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[The current config, represented in a key-value map]]></return-description>
</return-types>
</method>
<method name="getProperty" deprecated="false" scope="instance" >
<description><![CDATA[Returns the value of specified property.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[The value of the specified property]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[The name of the property]]></description>
</parameter>
</parameters>
</method>
<method name="resetProperty" deprecated="false" scope="instance" >
<description><![CDATA[Resets the specified property's value to its initial value.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[True is the property was reset, false if not]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[The name of the property]]></description>
</parameter>
</parameters>
</method>
<method name="setProperty" deprecated="false" scope="instance" >
<description><![CDATA[Sets the value of a property. If the silent property is passed as
 true, the property's event will not be fired.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[True, if the set was successful, false if it failed.]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[The name of the property]]></description>
</parameter>
<parameter name="value" type="String" deprecated="false" usage="required">
<description><![CDATA[The value to set the property to]]></description>
</parameter>
<parameter name="silent" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] Whether the value should be set silently,
 without firing the property event.]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representation of the Config object]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[The Config object in string format.]]></return-description>
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[Sets all properties to null, unsubscribes all listeners from each
 property's change event and all listeners from the configChangedEvent.]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.LPanel" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>Panel은 드래그 가능한 헤더와 top 우측의 선택적 close icon과 함께
 OS 윈도우 같이 행동하는 Panel구현체이다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Panel은 드래그 가능한 헤더와 top 우측의 선택적 close icon과 함께
 OS 윈도우 같이 행동하는 Panel구현체이다.</description>
<parameters>
<parameter name="el" type="String|HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[Panel을 나타내는 엘리먼트ID&amp;lt;em&amp;gt;또는&amp;lt;/em&amp;gt; Panel을 나타내는 엘리먼트]]></description>
</parameter>
<parameter name="userConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Panel에 설정되어야 할 환경설정을 포함한 configuration 오브젝트 문자
 더 자세한 사항은 configuration 문서를 참조하라.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="element" type="Array" deprecated="false" scope="instance" >
<description>The main module element that contains the header, body, and footer</description>
</property>
<property name="header" type="HTMLElement" deprecated="false" scope="instance" >
<description>The header element, denoted with CSS class "hd"</description>
</property>
<property name="body" type="HTMLElement" deprecated="false" scope="instance" >
<description>The body element, denoted with CSS class "bd"</description>
</property>
<property name="footer" type="HTMLElement" deprecated="false" scope="instance" >
<description>The footer element, denoted with CSS class "ft"</description>
</property>
<property name="visible" type="Boolean" deprecated="false" scope="instance" >
<description>Specifies whether the Module is visible on the page.</description>
</property>
<property name="effect" type="Object" deprecated="false" scope="instance" >
<description>&amp;lt;p&amp;gt;
 Object or array of objects representing the ContainerEffect
 classes that are active for animating the container.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 &amp;lt;strong&amp;gt;NOTE:&amp;lt;/strong&amp;gt; Although this configuration
 property is introduced at the Module level, an out of the box
 implementation is not shipped for the Module class so setting
 the proroperty on the Module class has no effect. The Overlay
 class is the first class to provide out of the box ContainerEffect
 support.
 &amp;lt;/p&amp;gt;</description>
</property>
<property name="monitorresize" type="Boolean" deprecated="false" scope="instance" >
<description>Specifies whether to create a special proxy iframe to monitor
 for user font resizing in the document</description>
</property>
<property name="x" type="Number" deprecated="false" scope="instance" >
<description>overlay의 x 절대좌표 위치</description>
</property>
<property name="y" type="Number" deprecated="false" scope="instance" >
<description>overlay의 y 절대좌표 위치</description>
</property>
<property name="xy" type="Number[]" deprecated="false" scope="instance" >
<description>overlay의 x와 y의 절대좌표 위치를 가진 배열</description>
</property>
<property name="context" type="Array" deprecated="false" scope="instance" >
<description>&amp;lt;p&amp;gt;
 context-sensitive 포지셔닝을 위한 컨텍스트 아규먼트들의 배열
 &amp;lt;/p&amp;gt;

 &amp;lt;p&amp;gt;
 배열의 포맷 : &amp;lt;code&amp;gt;[contextElementOrId, overlayCorner, contextCorner, arrayOfTriggerEvents (optional)]&amp;lt;/code&amp;gt;,
 4개의 배열 엘리먼트는 아래에 상세하게 기술되어 있다.
 &amp;lt;/p&amp;gt;

 &amp;lt;dl&amp;gt;
 &amp;lt;dt&amp;gt;contextElementOrId &amp;#60;String|HTMLElement&amp;#62;&amp;lt;/dt&amp;gt;
 &amp;lt;dd&amp;gt;overlay가 맞추어 정렬되는 컨텍스트 엘리먼트에 대한 레퍼런스(또는 해당 id).&amp;lt;/dd&amp;gt;
 &amp;lt;dt&amp;gt;overlayCorner &amp;#60;String&amp;#62;&amp;lt;/dt&amp;gt;
 &amp;lt;dd&amp;gt;정렬에 사용되는 overlay의 코너. 이 코너는 뒤에 오는 "contextCorner" 엔트리에 의해 정의된
 컨텍스트 엘리먼트의 코너이다. 지원되는 문자열 값 :
 "tr" (top right), "tl" (top left), "br" (bottom right), or "bl" (bottom left).&amp;lt;/dd&amp;gt;
 &amp;lt;dt&amp;gt;contextCorner &amp;#60;String&amp;#62;&amp;lt;/dt&amp;gt;
 &amp;lt;dd&amp;gt;정렬에 사용되는 컨텍스트 엘리먼트의 코너. 지원되는 문자열 값은 위의 overlayCorner 엔트리에서 리스트업 된 목록과 동일하다.&amp;lt;/dd&amp;gt;
 &amp;lt;dt&amp;gt;arrayOfTriggerEvents (optional) &amp;#60;Array[String|LCustomEvent]&amp;#62;&amp;lt;/dt&amp;gt;
 &amp;lt;dd&amp;gt;
 &amp;lt;p&amp;gt;
 기본적으로 컨텍스트 alignment는 일회성 오퍼레이션이며,
 컨텍스트 컨피그 정보가 설정되었을 때 또는 &amp;lt;a href="#method_align"&amp;gt;align&amp;lt;/a&amp;gt; 메소드가 invoke 되었을 때
 overlay를 컨텍스트 엘리먼트에 맞추어 조정한다.
 이는 다큐먼트 레이아웃이 변경되는 상황에서 유용하며 컨텍스트 엘리먼트의 위치가 변경되는 결과를 가져온다.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;

 이 배열은, 인스턴스가 Publish하는 이벤트의 이벤트 타입 문자열(e.g. "beforeShow") 또는 LCustomEvent 인스턴스 중 하나를 포함한다.
 추가적으로 뒤에 나오는 3가지 static 컨테이너 이벤트 타입들 역시 현재 지원된다 : &amp;lt;code&amp;gt;"windowResize", "windowScroll", "textResize"&amp;lt;/code&amp;gt; (defined in &amp;lt;a href="#property__TRIGGER_MAP"&amp;gt;_TRIGGER_MAP&amp;lt;/a&amp;gt; private property).
 &amp;lt;/p&amp;gt;
 &amp;lt;/dd&amp;gt;
 &amp;lt;/dl&amp;gt;

 &amp;lt;p&amp;gt;
 예를 들어, 이 속성을 &amp;lt;code&amp;gt;["img1", "tl", "bl"]&amp;lt;/code&amp;gt;로 설정하는 것은
 overlay의 왼쪽 상단 코너를 id "img1"로 컨텍스트 엘리먼트의 왼쪽 하단 코너에 맞추어 정렬하는 것이다.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 선택적인 트리거 값을 추가하는 경우 : &amp;lt;code&amp;gt;["img1", "tl", "bl", ["beforeShow", "windowResize"]]&amp;lt;/code&amp;gt;
 "beforeShow" 또는 "windowResize"이벤트가 fired될 때마다 항상 overlay 위치를 재정렬 할 것이다.
 &amp;lt;/p&amp;gt;</description>
</property>
<property name="fixedcenter" type="Boolean" deprecated="false" scope="instance" >
<description>overlay가 viewport 중앙에 고정되어야 할 경우 True</description>
</property>
<property name="autofillheight" type="String" deprecated="false" scope="instance" >
<description>height 설정 값이 정해지면 overlay의 높이를 자동적으로 늘리는 표준 모듈 엘리먼트
 지원되는 값은 "header", "body", "footer"</description>
</property>
<property name="zIndex" type="Number" deprecated="false" scope="instance" >
<description>Overlay의 CSS z-index</description>
</property>
<property name="iframe" type="Boolean" deprecated="false" scope="instance" >
<description></description>
</property>
<property name="preventcontextoverlap" type="Boolean" deprecated="false" scope="instance" >
<description></description>
</property>
<property name="close" type="Boolean" deprecated="false" scope="instance" >
<description>Panel이 "닫힘" 버튼을 보여주어야 한다면 참(true).</description>
</property>
<property name="draggable" type="Boolean" deprecated="false" scope="instance" >
<description>Panel이 드래그가 가능하게 되어야 할 경우 Boolean 설정.
 드래그앤드롭 유틸이 포함되어 있다면 기본값은 "true"이고 아니면 "false".
 &amp;lt;strong&amp;gt;PLEASE NOTE:&amp;lt;/strong&amp;gt; IE6(Strict모드와 Quirks모드)와
 IE7(Quirks모드)에서 이미 알려진 이슈, "width" 설정값을 위한 value set을
 가지고 있지 않거나 "width" 설정값이 "auto"로 설정되어 있는 Panel이
 마우스를 Panel의 헤더 엘리먼트 텍스트에 올려서만 드래그할 수 있다는 것이다.
 이 버그를 수정하기 위해, "width" 설정값에 대한 value를 잃어버린 또는
 "width"설정 값이 "auto"로 설정된 draggable Panels는, Panels가 보이기 전에
 root HTML 엘리먼트의 offsetWidth 값으로 설정해야 한다.
 계산된 width는 Panel이 숨겨질 때 제거된다.
 &amp;lt;em&amp;gt;이 수정본은 IE6(Strict모드와 Quirks모드)와 IE7(Quirks모드)에서의
 draggable Panels에서만 적용된다.&amp;lt;/em&amp;gt;
 자세한 사항은 이곳을 참조하라:
 SourceForge bugs #1726972 and #1589210.</description>
</property>
<property name="dragOnly" type="Boolean" deprecated="false" scope="instance" >
<description>draggable Panel이 페이지 위 drop할 대상과 상호 작용하는 것이 아니라
  drag만 되어야 할지 정의한다.
 &amp;lt;p&amp;gt;
 true로 설정할 때 draggable Panel은 drop 대상 위에 있는지의 여부 또는 LDragDrop 이벤트
 (drop할 대상에 동작하도록 지원이 필요함. onDragEnter, onDragOver, onDragOut, onDragDrop 등)
 를 fire하는지 체크하지 않는다.
 패널이 페이지의 어떠한 타겟 엘리먼트에도 drop되도록 설계되지 않는다면
 이 flag는 성능을 향상시키기 위해 true로 설정될 수 있다.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 false로 설정되면 이벤트와 관련된 모든 drop target이 fire 될 것이다.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 속성은 하위 버전 호환성을 유지하기 위해 기본으로 false로 설정되어 있다.
 그러나 drop 대상의 인터랙션이 패널에 필요하지 않다면 성능 향상을 위해 true로 설정되어야 한다.&amp;lt;/p&amp;gt;</description>
</property>
<property name="underlay" type="String" deprecated="false" scope="instance" >
<description>패널을 보여주는 underlay 타입을 설정한다.
 유효값은 "shadow," "matte,"와 "none". &amp;lt;strong&amp;gt;PLEASE NOTE:&amp;lt;/strong&amp;gt;
 underlay 엘리먼트 생성은 패널이 처음 보이게 될 때까지 늦추어진다.
 Mac OS X의 Gecko-based 브라우저에는,
 패널 인스턴스 아래로 Aqua 스크롤바가 뚫고 지나가는 것을 방지하기 위해
 underlay 엘리먼트가 shim(연결판)으로 사용됨으로써 underlay 엘리먼트가 항상 생성된다.
 (SourceForge bug #836476 참조)</description>
</property>
<property name="modal" type="Boolean" deprecated="false" scope="instance" >
<description>패널이 모달 방식으로 보여져야 한다면 True,
 패널이 해제될 때까지 제거되지 않는 문서 위로 투명한 mask를 자동 생성한다.</description>
</property>
<property name="keylisteners" type="Rui.util.LKeyListener[]" deprecated="false" scope="instance" >
<description>패널이 보여질 때 사용 가능하고 패널이 감추어졌을 때 사용 불가능한
 LKeyListener(또는 LKeyListener Array)</description>
</property>
<property name="strings" type="Object" deprecated="false" scope="instance" >
<description>UI Strings used by the Panel</description>
</property>
</configs>
<properties>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>The id of the element</description>
</property>
</properties>
<events>
<event name="textResize" deprecated="false">
<description><![CDATA[
Singleton LCustomEvent fired when the font size is changed in the browser.
 Opera's "zoom" functionality currently does not support text
 size detection.
]]></description>
</event>
<event name="windowScroll" deprecated="false">
<description><![CDATA[
윈도우 스크롤을 위한 DOM 이벤트에 반응하도록 사용되는 싱글톤 LCustomEvent
]]></description>
</event>
<event name="windowResize" deprecated="false">
<description><![CDATA[
윈도우 리사이즈를 위한 DOM 이벤트에 반응하도록 사용되는 싱글톤 LCustomEvent
]]></description>
</event>
<event name="beforeInit" deprecated="false">
<description><![CDATA[
Event fired prior to class initalization.
]]></description>
<parameters>
<parameter name="classRef" type="class" deprecated="false" usage="instance">
<description><![CDATA[class reference of the initializing
 class, such as this.beforeInitEvent.fire(Module)]]></description>
</parameter>
</parameters>
</event>
<event name="init" deprecated="false">
<description><![CDATA[
Event fired after class initalization.
]]></description>
<parameters>
<parameter name="classRef" type="class" deprecated="false" usage="instance">
<description><![CDATA[class reference of the initializing
 class, such as this.beforeInitEvent.fire(Module)]]></description>
</parameter>
</parameters>
</event>
<event name="beforeRender" deprecated="false">
<description><![CDATA[
Event fired before the Module is rendered
]]></description>
</event>
<event name="render" deprecated="false">
<description><![CDATA[
LCustomEvent fired after the Module is rendered
]]></description>
</event>
<event name="changeHeader" deprecated="false">
<description><![CDATA[
Event fired when the header content of the Module
 is modified
]]></description>
<parameters>
<parameter name="content" type="String/HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[String/element representing
 the new header content]]></description>
</parameter>
</parameters>
</event>
<event name="changeBody" deprecated="false">
<description><![CDATA[
Event fired when the body content of the Module is modified
]]></description>
<parameters>
<parameter name="content" type="String/HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[String/element representing
 the new body content]]></description>
</parameter>
</parameters>
</event>
<event name="changeFooter" deprecated="false">
<description><![CDATA[
Event fired when the footer content of the Module
 is modified
]]></description>
<parameters>
<parameter name="content" type="String/HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[String/element representing
 the new footer content]]></description>
</parameter>
</parameters>
</event>
<event name="changeContent" deprecated="false">
<description><![CDATA[
Event fired when the content of the Module is modified
]]></description>
</event>
<event name="destroy" deprecated="false">
<description><![CDATA[
Event fired when the Module is destroyed
]]></description>
</event>
<event name="beforeShow" deprecated="false">
<description><![CDATA[
Event fired before the Module is shown
]]></description>
</event>
<event name="beforeHide" deprecated="false">
<description><![CDATA[
Event fired before the Module is hidden
]]></description>
</event>
<event name="showMask" deprecated="false">
<description><![CDATA[
modal mask(팝업 뒤의 화면)가 보여진 후 LCustomEvent가 fired 된다.
]]></description>
</event>
<event name="hideMask" deprecated="false">
<description><![CDATA[
modal mask(팝업 뒤의 화면)가 숨겨진 후 LCustomEvent가 fired 된다
]]></description>
</event>
<event name="drag" deprecated="false">
<description><![CDATA[
Panel이 드래그될 때 LCustomEvent fired
]]></description>
</event>
<event name="beforeMove" deprecated="false">
<description><![CDATA[
panel 이동되기 전에 fire move event
]]></description>
<parameters>
<parameter name="x" type="Number" deprecated="false" usage="instance">
<description><![CDATA[x coordinate]]></description>
</parameter>
<parameter name="y" type="Number" deprecated="false" usage="instance">
<description><![CDATA[y coordinate]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="getHeader" deprecated="false" scope="instance" >
<description><![CDATA[header정보 반환]]></description>
<return-types>
<return-type type="HTMLElement " />
<return-description><![CDATA[} return element]]></return-description>
</return-types>
</method>
<method name="getBody" deprecated="false" scope="instance" >
<description><![CDATA[body정보 반환]]></description>
<return-types>
<return-type type="HTMLElement " />
<return-description><![CDATA[} return element]]></return-description>
</return-types>
</method>
<method name="getFooter" deprecated="false" scope="instance" >
<description><![CDATA[footer정보 반환]]></description>
<return-types>
<return-type type="HTMLElement " />
<return-description><![CDATA[} return element]]></return-description>
</return-types>
</method>
<method name="setHeader" deprecated="false" scope="instance" >
<description><![CDATA[Sets the Module's header content to the string specified, or appends
 the passed element to the header. If no header is present, one will
 be automatically created. An empty string can be passed to the method
 to clear the contents of the header.]]></description>
<parameters>
<parameter name="headerContent" type="String" deprecated="false" usage="required">
<description><![CDATA[The string used to set the header.
 As a convenience, non HTMLElement objects can also be passed into
 the method, and will be treated as strings, with the header innerHTML
 set to their default toString implementations.]]></description>
</parameter>
<parameter name="headerContent" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[The HTMLElement to append to]]></description>
</parameter>
<parameter name="headerContent" type="DocumentFragment" deprecated="false" usage="required">
<description><![CDATA[The document fragment
 containing elements which are to be added to the header]]></description>
</parameter>
</parameters>
</method>
<method name="setBody" deprecated="false" scope="instance" >
<description><![CDATA[Sets the Module's body content to the HTML specified.

 If no body is present, one will be automatically created.

 An empty string can be passed to the method to clear the contents of the body.]]></description>
<parameters>
<parameter name="bodyContent" type="String" deprecated="false" usage="required">
<description><![CDATA[The HTML used to set the body.
 As a convenience, non HTMLElement objects can also be passed into
 the method, and will be treated as strings, with the body innerHTML
 set to their default toString implementations.]]></description>
</parameter>
<parameter name="bodyContent" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[The HTMLElement to add as the first and only
 child of the body element.]]></description>
</parameter>
<parameter name="bodyContent" type="DocumentFragment" deprecated="false" usage="required">
<description><![CDATA[The document fragment
 containing elements which are to be added to the body]]></description>
</parameter>
</parameters>
</method>
<method name="setFooter" deprecated="false" scope="instance" >
<description><![CDATA[Sets the Module's footer content to the HTML specified, or appends
 the passed element to the footer. If no footer is present, one will
 be automatically created. An empty string can be passed to the method
 to clear the contents of the footer.]]></description>
<parameters>
<parameter name="footerContent" type="String" deprecated="false" usage="required">
<description><![CDATA[The HTML used to set the footer
 As a convenience, non HTMLElement objects can also be passed into
 the method, and will be treated as strings, with the footer innerHTML
 set to their default toString implementations.]]></description>
</parameter>
<parameter name="footerContent" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[The HTMLElement to append to
 the footer]]></description>
</parameter>
<parameter name="footerContent" type="DocumentFragment" deprecated="false" usage="required">
<description><![CDATA[The document fragment containing
 elements which are to be added to the footer]]></description>
</parameter>
</parameters>
</method>
<method name="appendToFooter" deprecated="false" scope="instance" >
<description><![CDATA[Appends the passed element to the footer. If no footer is present,
 one will be automatically created.]]></description>
<parameters>
<parameter name="element" type="HTMLElement | DocumentFragment" deprecated="false" usage="required">
<description><![CDATA[The element to
 append to the footer. In the case of a document fragment, the
 children of the fragment will be appended to the footer]]></description>
</parameter>
</parameters>
</method>
<method name="show" deprecated="false" scope="instance" >
<description><![CDATA[Shows the Module element by setting the visible configuration
 property to true. Also fires two events: beforeShowEvent prior to
 the visibility change, and showEvent after.]]></description>
</method>
<method name="hide" deprecated="false" scope="instance" >
<description><![CDATA[Hides the Module element by setting the visible configuration
 property to false. Also fires two events: beforeHideEvent prior to
 the visibility change, and hideEvent after.]]></description>
</method>
<method name="isShow" deprecated="false" scope="instance" >
<description><![CDATA[editor의 show 여부를 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="moveTo" deprecated="false" scope="instance" >
<description><![CDATA[panel를 특정 위치로 이동시킨다.
 이 함수는 this.cfg.setProperty("xy", [x,y])를 호출한 것과 동일하다.]]></description>
<parameters>
<parameter name="x" type="Number" deprecated="false" usage="required">
<description><![CDATA[The Overlay's new x position]]></description>
</parameter>
<parameter name="y" type="Number" deprecated="false" usage="required">
<description><![CDATA[The Overlay's new y position]]></description>
</parameter>
</parameters>
</method>
<method name="align" deprecated="false" scope="instance" >
<description><![CDATA[overlay를 특정 코너 포인트(상수 TOP_LEFT, TOP_RIGHT, BOTTOM_LEFT, BOTTOM_RIGHT)를 사용하여
 컨텍스트 엘리먼트에 맞추어 조정한다.]]></description>
<parameters>
<parameter name="elementAlign" type="String" deprecated="false" usage="required">
<description><![CDATA[The String representing the corner of
 the Overlay that should be aligned to the context element]]></description>
</parameter>
<parameter name="contextAlign" type="String" deprecated="false" usage="required">
<description><![CDATA[The corner of the context element
 that the elementAlign corner should stick to.]]></description>
</parameter>
</parameters>
</method>
<method name="center" deprecated="false" scope="instance" >
<description><![CDATA[viewport에서 컨테이너를 중앙에 위치시킨다.
 Centers the container in the viewport.]]></description>
</method>
<method name="syncPosition" deprecated="false" scope="instance" >
<description><![CDATA[DOM 에 있는 Panel의 위치를 Panel의 "xy", "x", "y" 속성과 동기화 한다.
 이는 주로 drag&amp;drop 동안에 위치 정보를 갱신하는데 사용된다.]]></description>
</method>
<method name="bringToTop" deprecated="false" scope="instance" >
<description><![CDATA[overlay를 Rui.ui.LOverlay의 모든 다른 인스턴스들의 top에 올려놓는다.]]></description>
</method>
<method name="focusFirst" deprecated="false" scope="instance" >
<description><![CDATA[Panel의 첫번째 엘리먼트에 포커스를 설정한다.]]></description>
</method>
<method name="focusLast" deprecated="false" scope="instance" >
<description><![CDATA[Panel의 마지막 엘리먼트에 포커스를 설정한다.]]></description>
</method>
<method name="setTabLoop" deprecated="false" scope="instance" >
<description><![CDATA[첫번째와 마지막 엘리먼트 사이에 tab, shift-tab loop를 설정한다.
 NOTE: preventBackTab과 preventTabOut LKeyListener 인스턴스 속성들을 설정한다.
 이들은 이 메소드가 invoke 될 때마다 리셋된다.]]></description>
</method>
<method name="getFocusableElements" deprecated="false" scope="instance" >
<description><![CDATA[Panel 내에 속한 현재 포커스 가능한 아이템을 array로 리턴한다.
 메소드가 찾는 포커스 가능한 엘리먼트 셋은 Panel에서 정의된다.
 FOCUSABLE static property]]></description>
<parameters>
<parameter name="root" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[element to start from.]]></description>
</parameter>
</parameters>
</method>
<method name="setFirstLastFocusable" deprecated="false" scope="instance" >
<description><![CDATA[Panel의 첫번째와 마지막의 포커스 가능한 엘리먼츠에
 firstElement와 lastElement 인스턴스 속성들을 설정한다.]]></description>
</method>
<method name="setTop" deprecated="false" scope="instance" >
<description><![CDATA[panel container top속성]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="top" type="int" deprecated="false" usage="required">
<description><![CDATA[새로운 top]]></description>
</parameter>
</parameters>
</method>
<method name="setLeft" deprecated="false" scope="instance" >
<description><![CDATA[panel container Left속성]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="left" type="int" deprecated="false" usage="required">
<description><![CDATA[새로운 Left]]></description>
</parameter>
</parameters>
</method>
<method name="toast" deprecated="false" scope="instance" >
<description><![CDATA[android의 toast 메시지 처럼 잠시 메시지를 잠시 출력했다가 사라진다. IE8이상 지원]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="text" type="String" deprecated="false" usage="required">
<description><![CDATA[출력할 메시지]]></description>
</parameter>
<parameter name="config" type="object" deprecated="false" usage="required">
<description><![CDATA[환경 설정값]]></description>
</parameter>
</parameters>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[해당 오브젝트를 String 으로 표현하여 리턴.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[The string representation of the Panel.]]></return-description>
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LDialog" deprecated="false"  superclass="Rui.ui.LPanel" >
<description>Dialog를 구현한 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Dialog를 구현한 객체</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The configuration object literal containing
 the configuration that should be set for this Dialog. See configuration
 documentation for more details.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="form" type="HTMLFormElement" deprecated="false" scope="instance" >
<description>Object reference to the Dialog's</description>
</property>
<property name="callback" type="Object" deprecated="false" scope="instance" >
<description>다이얼로그에서 submit시 호출될 callback 함수 (callback.success/callback.failure/callback.upload/callback.argument)</description>
</property>
<property name="postmethod" type="String" deprecated="false" scope="instance" >
<description>dialog의 submit 종류를 지정한다. 종류로는 'async', 'form', 'manual', 'none' 가 있다.</description>
</property>
<property name="hideaftersubmit" type="Boolean" deprecated="false" scope="instance" >
<description>dialog의 submit을 호출한 후에 dialog를 숨길것인지 여부를 결정한다.</description>
</property>
<property name="buttons" type="Array|String" deprecated="false" scope="instance" >
<description>dialog의 button 객체들 정보</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="beforeSubmit" deprecated="false">
<description><![CDATA[
submit 전에 호출되는 이벤트
]]></description>
</event>
<event name="submit" deprecated="false">
<description><![CDATA[
submit시 호출되는 이벤트
]]></description>
</event>
<event name="manualSubmit" deprecated="false">
<description><![CDATA[
postmethod값이 manual일 경우 submit 전에 호출되는 이벤트
]]></description>
</event>
<event name="asyncSubmit" deprecated="false">
<description><![CDATA[
postmethod값이 async일 경우 submit 전에 호출되는 이벤트
]]></description>
</event>
<event name="formSubmit" deprecated="false">
<description><![CDATA[
postmethod값이 form일 경우 submit 전에 호출되는 이벤트
]]></description>
</event>
<event name="cancel" deprecated="false">
<description><![CDATA[
cancel시 호출되는 이벤트
]]></description>
</event>
<event name="validate" deprecated="false">
<description><![CDATA[
validate시 호출되는 이벤트
]]></description>
</event>
</events>
<methods>
<method name="setFirstLastFocusable" deprecated="false" scope="instance" >
<description><![CDATA[Configures instance properties, pointing to the
 first and last focusable elements in the Dialog's form.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getButtons" deprecated="false" scope="instance" >
<description><![CDATA[LDialog의 button들의 정보를 배열로 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
</method>
<method name="setButtons" deprecated="false" scope="instance" >
<description><![CDATA[LDialog의 button들의 정보를 배열로 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="focusDefaultButton" deprecated="false" scope="instance" >
<description><![CDATA[Sets the focus to the button that is designated as the default via
 the 'buttons' configuration property. By default, this method is
 called when the Dialog is made visible.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="blurButtons" deprecated="false" scope="instance" >
<description><![CDATA[Blurs all the buttons defined via the 'buttons'
 configuration property.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="focusFirstButton" deprecated="false" scope="instance" >
<description><![CDATA[Sets the focus to the first button created via the 'buttons'
 configuration property.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="focusLastButton" deprecated="false" scope="instance" >
<description><![CDATA[Sets the focus to the last button created via the 'buttons'
 configuration property.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="submit" deprecated="false" scope="instance" >
<description><![CDATA[Executes a submit of the Dialog if validation
 is successful. By default the Dialog is hidden
 after submission, but you can set the 'hideaftersubmit'
 configuration property to false, to prevent the Dialog
 from being hidden.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="clearInvalid" deprecated="false" scope="instance" >
<description><![CDATA[form 객체의 invalid된 모든 객체를 초기화 하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="cancel" deprecated="false" scope="instance" >
<description><![CDATA[Executes the cancel of the Dialog followed by a hide.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getData" deprecated="false" scope="instance" >
<description><![CDATA[Returns a Json-compatible data structure representing the data
 currently contained in the form.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[A Json object reprsenting the data of thecurrent form.]]></return-description>
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[Removes the Dialog element from the DOM and sets all child elements to null.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representation of the object.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[The string representation of the Dialog]]></return-description>
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LSimpleDialog" deprecated="false"  superclass="Rui.ui.LDialog" >
<description>LSimpleDialog 는 간단한 다이얼로그 구현이다. 단일 값을 submit 하는데 사용될 수 있다.
 형태는 세 가지로 구성될 수 있다
 async connection utility call, 단순 form POST 또는 GET, 매뉴얼</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LSimpleDialog 는 간단한 다이얼로그 구현이다. 단일 값을 submit 하는데 사용될 수 있다.
 형태는 세 가지로 구성될 수 있다
 async connection utility call, 단순 form POST 또는 GET, 매뉴얼</description>
<parameters>
<parameter name="el" type="String|HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[LSimpleDialog를 나타내는 엘리먼트ID&amp;lt;em&amp;gt;또는&amp;lt;/em&amp;gt;LSimpleDialog를 나타내는 엘리먼트]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[LSimpleDialog에 설정되어야 할 환경설정을 포함한 configuration 오브젝트 문자
 더 자세한 사항은 configuration 문서를 참조하라.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="icon" type="String" deprecated="false" scope="instance" >
<description>LSimpleDialog에 대한 정보 icon을 설정한다.</description>
</property>
<property name="text" type="String" deprecated="false" scope="instance" >
<description>LSimpleDialog에 대한 text를 설정한다.</description>
</property>
</configs>
<properties>
<property name="ICON_BLOCK" type="String" deprecated="false" scope="static" >
<description>블로킹에 대한 표준 네트워크 아이콘 상수</description>
</property>
<property name="ICON_ALARM" type="String" deprecated="false" scope="static" >
<description>alarm에 대한 표준 네트워크 아이콘 상수</description>
</property>
<property name="ICON_HELP" type="String" deprecated="false" scope="static" >
<description>help에 대한 표준 네트워크 아이콘 상수</description>
</property>
<property name="ICON_INFO" type="String" deprecated="false" scope="static" >
<description>info에 대한 표준 네트워크 아이콘 상수</description>
</property>
<property name="ICON_WARN" type="String" deprecated="false" scope="static" >
<description>warn에 대한 표준 네트워크 아이콘 상수</description>
</property>
<property name="ICON_TIP" type="String" deprecated="false" scope="static" >
<description>tip에 대한 표준 네트워크 아이콘 상수</description>
</property>
<property name="ICON_CSS_CLASSNAME" type="String" deprecated="false" scope="static" >
<description>엘리먼트에 적용되는 CSS 클래스 이름을 나타내는 상수
 'icon' config property에 의해 생성</description>
</property>
<property name="CSS_SIMPLEDIALOG" type="String" deprecated="false" scope="static" >
<description>LSimpleDialog에 사용되는 기본 CSS 클래스를 나타내는 상수</description>
</property>
</properties>
<methods>
<method name="registerForm" deprecated="false" scope="instance" >
<description><![CDATA[LSimpleDialog의 내부 form 오브젝트 준비.
 이 form obj는 현재 없으면 생성하고 hidden field에 값을 추가.]]></description>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[Removes the Panel element from the DOM and sets all child elements
 to null.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[object를 string 형태로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[LSimpleDialog의 string 형태 값]]></return-description>
</return-types>
</method>
<method name="setBody" deprecated="false" scope="instance" >
<description><![CDATA[&amp;lt;p&amp;gt;
 HTML에 LSimpleDialog의 body 내용 설정
 body가 존재하지 않으면 자동으로 생성된다.
 빈 string 값이 body 내용을 클리어하는 메소드로 넘겨질 수 있다.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;NOTE:&amp;lt;/strong&amp;gt; LSimpleDialog는 &amp;lt;a href="#config_text"&amp;gt;text&amp;lt;/a&amp;gt;,
 그리고 &amp;lt;a href="#config_icon"&amp;gt;icon&amp;lt;/a&amp;gt; 를 제공한다.
 이들은 LSimpleDialog(icon과 message text)의 UI 디자인에 부합되게 body 엘리먼츠 내용을 설정한다.
 LSimpleDialog에서 setBody 호출은 이 UI 디자인 제한에 구애받지 않고
 LSimpleDialog body의 전체 내용을 교체한다.
 이는 custom makrup으로 LSimpleDialog 기본 icon/text body 구조를 교체하려고 할 때만 사용할 수 있다.&amp;lt;/p&amp;gt;]]></description>
<parameters>
<parameter name="bodyContent" type="String" deprecated="false" usage="required">
<description><![CDATA[body 설정하는데 사용되는 HTML.
 편의상, HTMLElement 오브젝트가 아닌 것들도 메소드로 넘겨질 수 있고
 string으로 취급되며 body innerHTML과 함께 기본 toString 구현으로 설정될 수 있다.]]></description>
</parameter>
<parameter name="bodyContent" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[body 엘리먼트의 첫번째이자 유일한 child로 추가되는 HTMLElement.]]></description>
</parameter>
<parameter name="bodyContent" type="DocumentFragment" deprecated="false" usage="required">
<description><![CDATA[body에 추가되는 엘리먼츠를 포함하는 문서]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.LMessageBox" deprecated="false" >
<description>메시지 박스를 띄울경우 사용한다.
 종류: alert, confirm, prompt</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>메시지 박스를 띄울경우 사용한다.
 종류: alert, confirm, prompt</description>
</constructor>
</constructors>
<methods>
<method name="alert" deprecated="false" scope="static" >
<description><![CDATA[alert message]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="option" type="String || Object" deprecated="false" usage="required">
<description><![CDATA[출력할 메시지나 출력 정보 객체]]></description>
</parameter>
</parameters>
</method>
<method name="confirm" deprecated="false" scope="static" >
<description><![CDATA[confirm message]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="option" type="String || Object" deprecated="false" usage="required">
<description><![CDATA[출력할 메시지나 출력 정보 객체]]></description>
</parameter>
</parameters>
</method>
<method name="prompt" deprecated="false" scope="static" >
<description><![CDATA[prompt message]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="option" type="String || Object" deprecated="false" usage="required">
<description><![CDATA[출력할 메시지나 출력 정보 객체]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.LWaitPanel" deprecated="false" >
<description>사용자로부터 기다려야 함을 요구할 때 사용</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>사용자로부터 기다려야 함을 요구할 때 사용</description>
</constructor>
</constructors>
<configs>
<property name="maskMsg" type="Object" deprecated="false" scope="instance" >
<description>mask message 객체
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/waitpanelSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="show" deprecated="false" scope="instance" >
<description><![CDATA[wait panel 객체를 출력하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="hide" deprecated="false" scope="instance" >
<description><![CDATA[wait panel 객체를 숨기는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getRegion" deprecated="false" scope="instance" >
<description><![CDATA[wait panel의 Region정보를 리턴하는 메소드]]></description>
<return-types>
<return-type type="Region | Array" />
</return-types>
</method>
<method name="setRegion" deprecated="false" scope="instance" >
<description><![CDATA[wait panel의 region 정보를 설정하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="g" type="Region | Array" deprecated="false" usage="required">
<description><![CDATA[Region 정보 객체]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.LScroller" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>LScroller</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LScroller</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[LScroller의 초기 설정값]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="content" type="String|HTMLElement|LElement" deprecated="false" scope="instance" >
<description>컨텐츠로 사용될 DOM의 정보를 지정한다. 이 값이 없을 경우는 랜더링될 DOM의 첫번째 자식(firstChild)이 컨텐츠 DOM이 된다.</description>
</property>
<property name="content" type="String|HTMLElement|LElement" deprecated="false" scope="instance" >
<description>스크롤러를 설정할 컨텐츠의 DOM 또는 DOM의 ID</description>
</property>
<property name="marginSafe" type="boolean" deprecated="false" scope="instance" >
<description>컨텐츠에 margin등이 있을경우 정확한 컨텐츠의 크기를 얻을 수 없기에 wrapper DOM(inline-block) 생성해서
 컨텐츠의 정확한 크기를 얻을 수 있는데, margin등이 없는 컨텐츠의 경우 wrapper DOM을 생성할 필요 없다.
 marginSafe기능을 true로 설정시 wrapper DOM을 생성하여 하위 컨텐츠의 margin을 포함한 정확한 크기를 얻을 수 있다.</description>
</property>
<property name="useVirtual" type="boolean" deprecated="false" scope="instance" >
<description>가상 스크롤을 사용할지 여부. 사용할 경우 true로 설정한다.</description>
</property>
<property name="scrollbar" type="boolean" deprecated="false" scope="instance" >
<description>scrollbar를 설정한다.
 auto : 필요에 따라 스크롤바가 나타남
 both : x, y 양쪽 스크롤바가 고정으로 나타나며 불필요시 비활성화됨
 x : x스크롤바는 고정이며 y스크롤바는 자동으로 나타남
 y : y스크롤바는 고정이며 x스크롤바는 자동으로 나타남</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="getMaxScrollTop" deprecated="false" scope="instance" >
<description><![CDATA[Y scroller의 최대 스크롤값(scrollTop)을 반환한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="margin" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional]]]></description>
</parameter>
</parameters>
</method>
<method name="getMaxScrollLeft" deprecated="false" scope="instance" >
<description><![CDATA[X scroller의 최대 스크롤값(scrollLeft)을 반환한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="margin" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional]]]></description>
</parameter>
</parameters>
</method>
<method name="getScrollWidth" deprecated="false" scope="instance" >
<description><![CDATA[scroll의 width를 반환한다.
 이 값은 일반적으로 scroller el의 width에서 scrollbar의 size등을 제한 값이다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getScrollHeight" deprecated="false" scope="instance" >
<description><![CDATA[scroll의 height을 반환한다.
 이 값은 일반적으로 scroller el의 height에서 scrollbar의 size등을 제한 값이다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getScrollTop" deprecated="false" scope="instance" >
<description><![CDATA[scroll의 scrollTop 값을 반환]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getScrollLeft" deprecated="false" scope="instance" >
<description><![CDATA[scroll의 scrollLeft 값을 반환]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getScroll" deprecated="false" scope="instance" >
<description><![CDATA[scroll x,y 가져오기]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[coord]]></return-description>
</return-types>
</method>
<method name="setScroll" deprecated="false" scope="instance" >
<description><![CDATA[scroll 이동하기]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="coord" type="Object" deprecated="false" usage="required">
<description><![CDATA[coord.top, coord.left]]></description>
</parameter>
</parameters>
</method>
<method name="existScrollbar" deprecated="false" scope="instance" >
<description><![CDATA[x, y축 scrollbar가 생성된 상태(사용중)인지 여부 반환]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="x" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] x-scrollbar를 조회하는지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="getScrollbarSize" deprecated="false" scope="instance" >
<description><![CDATA[scrollbar의 크기를 조회한다. y scrollbar의 경우 width,  x scrollbar의 경우 height이 반환되며
 보통 이 값은 17px이다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="x" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] x-scrollbar의 값을 조회하는지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="isStart" deprecated="false" scope="instance" >
<description><![CDATA[scroll이 처음 위치에 있는지 여부 반환.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="x" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] x-scrollbar의 값을 조회하는지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="isEnd" deprecated="false" scope="instance" >
<description><![CDATA[scroll이 끝 위치에 있는지 여부 반환.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="x" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] x-scrollbar의 값을 조회하는지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="go" deprecated="false" scope="instance" >
<description><![CDATA[scroll을 원하는 위치로 이동시킨다.
 go 함수의 경우 스크롤 위치를 기억한다. 이동되어야 할 위치가 없더라도 후에 재 랜더링 시에 이동되어야 할 위치가 확보되면 그때 이동한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="이동할" type="int" deprecated="false" usage="required">
<description><![CDATA[위치 px (scrollTop 또는 scrollLeft)]]></description>
</parameter>
<parameter name="x" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] x-scrollbar를 이동할지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="goStart" deprecated="false" scope="instance" >
<description><![CDATA[scroll을 시작 위치로 이동시킨다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="x" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] x-scrollbar를 이동할지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="goPrevious" deprecated="false" scope="instance" >
<description><![CDATA[scroll을 이전 위치로 이동 시킨다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="x" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] x-scrollbar를 이동할지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="goNext" deprecated="false" scope="instance" >
<description><![CDATA[scroll을 다음 위치로 이동 시킨다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="x" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] x-scrollbar를 이동할지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="goEnd" deprecated="false" scope="instance" >
<description><![CDATA[scroll을 끝 위치로 이동 시킨다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="x" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] x-scrollbar를 이동할지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="setWidth" deprecated="false" scope="instance" >
<description><![CDATA[스크롤의 넓이를 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="width" type="int" deprecated="false" usage="required">
<description><![CDATA[새로운 넓이]]></description>
</parameter>
<parameter name="skipRefresh" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] space적용 후 스크롤을 refresh할 지 여부. default true]]></description>
</parameter>
</parameters>
</method>
<method name="setHeight" deprecated="false" scope="instance" >
<description><![CDATA[스크롤의 높이를 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="height" type="int" deprecated="false" usage="required">
<description><![CDATA[새로운 높이.]]></description>
</parameter>
<parameter name="skipRefresh" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] space적용 후 스크롤을 refresh할 지 여부. default true]]></description>
</parameter>
</parameters>
</method>
<method name="refresh" deprecated="false" scope="instance" >
<description><![CDATA[window resize시 handler, 새로 그린다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체 String]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.calendar.LCalendar" deprecated="false" >
<description>달력</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>달력</description>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="instance">
<description><![CDATA[[optional] 달력 아이디]]></description>
</parameter>
<parameter name="container" type="String | HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[달력 컨테이너 dom 객체 아이디]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[[optional] config 객체]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="today" type="Date" deprecated="false" scope="instance" >
<description>오늘 날짜를 셋팅한다. (선택된 날짜가 아닙니다.)</description>
</property>
<property name="pagedate" type="String" deprecated="false" scope="instance" >
<description>The month/year representing the current visible LCalendar date (mm/yyyy)</description>
</property>
<property name="selected" type="String" deprecated="false" scope="instance" >
<description>The date or range of dates representing the current LCalendar selection</description>
</property>
<property name="title" type="String" deprecated="false" scope="instance" >
<description>The title to display above the LCalendar's month header</description>
</property>
<property name="close" type="Boolean" deprecated="false" scope="instance" >
<description>Whether or not a close button should be displayed for this LCalendar</description>
</property>
<property name="iframe" type="Boolean" deprecated="false" scope="instance" >
<description>Whether or not an iframe shim should be placed under the LCalendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.
 This property is enabled by default for IE6 and below. It is disabled by default for other browsers for performance reasons, but can be
 enabled if required.</description>
</property>
<property name="mindate" type="String" deprecated="false" scope="instance" >
<description>The minimum selectable date in the current LCalendar (mm/dd/yyyy)</description>
</property>
<property name="maxdate" type="String" deprecated="false" scope="instance" >
<description>The maximum selectable date in the current LCalendar (mm/dd/yyyy)</description>
</property>
<property name="MULTI_SELECT" type="Boolean" deprecated="false" scope="instance" >
<description>True if the LCalendar should allow multiple selections. False by default.</description>
</property>
<property name="START_WEEKDAY" type="number" deprecated="false" scope="instance" >
<description>The weekday the week begins on. Default is 0 (Sunday = 0, Monday = 1 ... Saturday = 6).</description>
</property>
<property name="SHOW_WEEKDAYS" type="Boolean" deprecated="false" scope="instance" >
<description>True if the LCalendar should show weekday labels. True by default.</description>
</property>
<property name="SHOW_WEEK_HEADER" type="Boolean" deprecated="false" scope="instance" >
<description>True if the LCalendar should show week row headers. False by default.</description>
</property>
<property name="SHOW_WEEK_FOOTER" type="Boolean" deprecated="false" scope="instance" >
<description>True if the LCalendar should show week row footers. False by default.</description>
</property>
<property name="HIDE_BLANK_WEEKS" type="Boolean" deprecated="false" scope="instance" >
<description>True if the LCalendar should suppress weeks that are not a part of the current month. False by default.</description>
</property>
<property name="MONTHS_SHORT" type="String[]" deprecated="false" scope="instance" >
<description>The short month labels for the current locale.</description>
</property>
<property name="MONTHS_LONG" type="String[]" deprecated="false" scope="instance" >
<description>The long month labels for the current locale.</description>
</property>
<property name="WEEKDAYS_1CHAR" type="String[]" deprecated="false" scope="instance" >
<description>The 1-character weekday labels for the current locale.</description>
</property>
<property name="WEEKDAYS_SHORT" type="String[]" deprecated="false" scope="instance" >
<description>The short weekday labels for the current locale.</description>
</property>
<property name="WEEKDAYS_MEDIUM" type="String[]" deprecated="false" scope="instance" >
<description>The medium weekday labels for the current locale.</description>
</property>
<property name="WEEKDAYS_LONG" type="String[]" deprecated="false" scope="instance" >
<description>The long weekday labels for the current locale.</description>
</property>
<property name="LOCALE_MONTHS" type="String" deprecated="false" scope="instance" >
<description>The setting that determines which length of month labels should be used. Possible values are 'short' and 'long'.</description>
</property>
<property name="LOCALE_WEEKDAYS" type="String" deprecated="false" scope="instance" >
<description>The setting that determines which length of weekday labels should be used. Possible values are '1char', 'short', 'medium', and 'long'.</description>
</property>
<property name="DATE_DELIMITER" type="String" deprecated="false" scope="instance" >
<description>The value used to delimit individual dates in a date string passed to various LCalendar functions.</description>
</property>
<property name="DATE_FIELD_DELIMITER" type="String" deprecated="false" scope="instance" >
<description>The value used to delimit date fields in a date string passed to various LCalendar functions.</description>
</property>
<property name="DATE_RANGE_DELIMITER" type="String" deprecated="false" scope="instance" >
<description>The value used to delimit date ranges in a date string passed to various LCalendar functions.</description>
</property>
<property name="MY_MONTH_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the month in a month/year date string</description>
</property>
<property name="MY_YEAR_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the year in a month/year date string</description>
</property>
<property name="MD_MONTH_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the month in a month/day date string</description>
</property>
<property name="MD_DAY_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the day in a month/year date string</description>
</property>
<property name="MDY_MONTH_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the month in a month/day/year date string</description>
</property>
<property name="MDY_DAY_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the day in a month/day/year date string</description>
</property>
<property name="MDY_YEAR_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the year in a month/day/year date string</description>
</property>
<property name="MY_LABEL_MONTH_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the month in the month year label string used as the LCalendar header</description>
</property>
<property name="MY_LABEL_YEAR_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the year in the month year label string used as the LCalendar header</description>
</property>
<property name="MY_LABEL_MONTH_SUFFIX" type="String" deprecated="false" scope="instance" >
<description>The suffix used after the month when rendering the LCalendar header</description>
</property>
<property name="MY_LABEL_YEAR_SUFFIX" type="String" deprecated="false" scope="instance" >
<description>The suffix used after the year when rendering the LCalendar header</description>
</property>
<property name="navigator" type="Object|Boolean" deprecated="false" scope="instance" >
<description>LConfiguration for the Month/Year LCalendarNavigator UI which allows the user to jump directly to a
 specific Month/Year without having to scroll sequentially through months.
 &amp;lt;p&amp;gt;
 Setting this property to null (default value) or false, will disable the LCalendarNavigator UI.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 Setting this property to true will enable the CalendarNavigatior UI with the default LCalendarNavigator configuration values.
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 This property can also be set to an object literal containing configuration properties for the LCalendarNavigator UI.
 The configuration object expects the the following case-sensitive properties, with the 'strings' property being a nested object.
 Any properties which are not provided will use the default values (defined in the LCalendarNavigator class).
 &amp;lt;/p&amp;gt;
 &amp;lt;dl&amp;gt;
 &amp;lt;dt&amp;gt;strings&amp;lt;/dt&amp;gt;
 &amp;lt;dd&amp;gt;&amp;lt;em&amp;gt;Object&amp;lt;/em&amp;gt; :  An object with the properties shown below, defining the string labels to use in the Navigator's UI
     &amp;lt;dl&amp;gt;
         &amp;lt;dt&amp;gt;month&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;lt;em&amp;gt;String&amp;lt;/em&amp;gt; : The string to use for the month label. Defaults to 'Month'.&amp;lt;/dd&amp;gt;
         &amp;lt;dt&amp;gt;year&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;lt;em&amp;gt;String&amp;lt;/em&amp;gt; : The string to use for the year label. Defaults to 'Year'.&amp;lt;/dd&amp;gt;
         &amp;lt;dt&amp;gt;submit&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;lt;em&amp;gt;String&amp;lt;/em&amp;gt; : The string to use for the submit button label. Defaults to 'Okay'.&amp;lt;/dd&amp;gt;
         &amp;lt;dt&amp;gt;cancel&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;lt;em&amp;gt;String&amp;lt;/em&amp;gt; : The string to use for the cancel button label. Defaults to 'Cancel'.&amp;lt;/dd&amp;gt;
         &amp;lt;dt&amp;gt;invalidYear&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;lt;em&amp;gt;String&amp;lt;/em&amp;gt; : The string to use for invalid year values. Defaults to 'Year needs to be a number'.&amp;lt;/dd&amp;gt;
     &amp;lt;/dl&amp;gt;
 &amp;lt;/dd&amp;gt;
 &amp;lt;dt&amp;gt;monthFormat&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;lt;em&amp;gt;String&amp;lt;/em&amp;gt; : The month format to use. Either Rui.ui.calendar.LCalendar.LONG, or Rui.ui.calendar.LCalendar.SHORT. Defaults to Rui.ui.calendar.LCalendar.LONG&amp;lt;/dd&amp;gt;
 &amp;lt;dt&amp;gt;initialFocus&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;lt;em&amp;gt;String&amp;lt;/em&amp;gt; : Either 'year' or 'month' specifying which input control should get initial focus. Defaults to 'year'&amp;lt;/dd&amp;gt;
 &amp;lt;/dl&amp;gt;
 &amp;lt;p&amp;gt;E.g.&amp;lt;/p&amp;gt;
 &amp;lt;pre&amp;gt;
 var navConfig = {
     strings: {
         month:'LCalendar Month',
         year:'LCalendar Year',
         submit: 'Submit',
         cancel: 'Cancel',
         invalidYear: 'Please enter a valid year'
     },
     monthFormat: Rui.ui.calendar.LCalendar.SHORT,
     initialFocus: 'month'
 }
 &amp;lt;/pre&amp;gt;</description>
</property>
<property name="strings" type="Object" deprecated="false" scope="instance" >
<description>The map of UI strings which the LCalendar UI uses.</description>
</property>
</configs>
<properties>
<property name="IMG_ROOT" type="String" deprecated="true" scope="static" >
<description>The path to be used for images loaded for the LCalendar</description>
</property>
<property name="DATE" type="String" deprecated="false" scope="static" >
<description>Type constant used for renderers to represent an individual date (M/D/Y)</description>
</property>
<property name="MONTH_DAY" type="String" deprecated="false" scope="static" >
<description>Type constant used for renderers to represent an individual date across any year (M/D)</description>
</property>
<property name="WEEKDAY" type="String" deprecated="false" scope="static" >
<description>Type constant used for renderers to represent a weekday</description>
</property>
<property name="RANGE" type="String" deprecated="false" scope="static" >
<description>Type constant used for renderers to represent a range of individual dates (M/D/Y-M/D/Y)</description>
</property>
<property name="MONTH" type="String" deprecated="false" scope="static" >
<description>Type constant used for renderers to represent a month across any year</description>
</property>
<property name="DISPLAY_DAYS" type="Number" deprecated="false" scope="static" >
<description>Constant that represents the total number of date cells that are displayed in a given month</description>
</property>
<property name="STOP_RENDER" type="String" deprecated="false" scope="static" >
<description>Constant used for halting the execution of the remainder of the render stack</description>
</property>
<property name="SHORT" type="String" deprecated="false" scope="static" >
<description>Constant used to represent short date field string formats (e.g. Tu or Feb)</description>
</property>
<property name="LONG" type="String" deprecated="false" scope="static" >
<description>Constant used to represent long date field string formats (e.g. Monday or February)</description>
</property>
<property name="MEDIUM" type="String" deprecated="false" scope="static" >
<description>Constant used to represent medium date field string formats (e.g. Mon)</description>
</property>
<property name="ONE_CHAR" type="String" deprecated="false" scope="static" >
<description>Constant used to represent single character date field string formats (e.g. M, T, W)</description>
</property>
<property name="browser" type="String" deprecated="true" scope="instance" >
<description>Returns a string representing the current browser.
 @deprecated As of 2.3.0, environment information is available in Rui.browser
 @see Rui.browser</description>
</property>
</properties>
<events>
<event name="beforeSelect" deprecated="false">
<description><![CDATA[
Fired before a date selection is made
]]></description>
</event>
<event name="select" deprecated="false">
<description><![CDATA[
Fired when a date selection is made
]]></description>
<parameters>
<parameter name="array" type="Array" deprecated="false" usage="instance">
<description><![CDATA[of Date field arrays in the format [YYYY, MM, LDD].]]></description>
</parameter>
</parameters>
</event>
<event name="beforeDeselect" deprecated="false">
<description><![CDATA[
Fired before a date or set of dates is deselected
]]></description>
</event>
<event name="deselect" deprecated="false">
<description><![CDATA[
Fired when a date or set of dates is deselected
]]></description>
<parameters>
<parameter name="array" type="Array" deprecated="false" usage="instance">
<description><![CDATA[of Date field arrays in the format [YYYY, MM, LDD].]]></description>
</parameter>
</parameters>
</event>
<event name="beforeChangePage" deprecated="false">
<description><![CDATA[
Fired when the LCalendar page is changed
]]></description>
</event>
<event name="changePage" deprecated="false">
<description><![CDATA[
Fired when the LCalendar page is changed
]]></description>
</event>
<event name="beforeRender" deprecated="false">
<description><![CDATA[
Fired before the LCalendar is rendered
]]></description>
</event>
<event name="render" deprecated="false">
<description><![CDATA[
Fired when the LCalendar is rendered
]]></description>
</event>
<event name="renderCell" deprecated="false">
<description><![CDATA[
Fired when the LCalendar is rendered
]]></description>
</event>
<event name="beforeDestroy" deprecated="false">
<description><![CDATA[
Fired just before the LCalendar is to be destroyed
]]></description>
</event>
<event name="destroy" deprecated="false">
<description><![CDATA[
Fired after the LCalendar is destroyed. This event should be used
 for notification only. When this event is fired, important LCalendar instance
 properties, dom references and event listeners have already been
 removed/dereferenced, and hence the LCalendar instance is not in a usable
 state.
]]></description>
</event>
<event name="reset" deprecated="false">
<description><![CDATA[
Fired when the LCalendar is reset
]]></description>
</event>
<event name="clear" deprecated="false">
<description><![CDATA[
Fired when the LCalendar is cleared
]]></description>
</event>
<event name="beforeShow" deprecated="false">
<description><![CDATA[
Fired just before the LCalendar is to be shown
]]></description>
</event>
<event name="show" deprecated="false">
<description><![CDATA[
Fired after the LCalendar is shown
]]></description>
</event>
<event name="beforeHide" deprecated="false">
<description><![CDATA[
Fired just before the LCalendar is to be hidden
]]></description>
</event>
<event name="hide" deprecated="false">
<description><![CDATA[
Fired after the LCalendar is hidden
]]></description>
</event>
<event name="beforeShowNav" deprecated="false">
<description><![CDATA[
Fired just before the LCalendarNavigator is to be shown
]]></description>
</event>
<event name="showNav" deprecated="false">
<description><![CDATA[
Fired after the LCalendarNavigator is shown
]]></description>
</event>
<event name="beforeHideNav" deprecated="false">
<description><![CDATA[
Fired just before the LCalendarNavigator is to be hidden
]]></description>
</event>
<event name="hideNav" deprecated="false">
<description><![CDATA[
Fired after the LCalendarNavigator is hidden
]]></description>
</event>
<event name="beforeRenderNav" deprecated="false">
<description><![CDATA[
Fired just before the LCalendarNavigator is to be rendered
]]></description>
</event>
<event name="renderNav" deprecated="false">
<description><![CDATA[
Fired after the LCalendarNavigator is rendered
]]></description>
</event>
</events>
<methods>
<method name="setProperty" deprecated="false" scope="instance" >
<description><![CDATA[사용자가 직접 .cfg.setProperty 를 호출하지 않도록 사용성을 위해 wrapping]]></description>
</method>
<method name="getProperty" deprecated="false" scope="instance" >
<description><![CDATA[사용자가 직접 .cfg.setProperty 를 호출하지 않도록 사용성을 위해 wrapping]]></description>
<return-types>
<return-type type="object" />
</return-types>
</method>
<method name="render" deprecated="false" scope="instance" >
<description><![CDATA[Renders the calendar after it has been configured. The render() method has a specific call chain that will execute
 when the method is called: renderHeader, renderBody, renderFooter.
 Refer to the documentation for those methods for information on
 individual render tasks.]]></description>
</method>
<method name="getDateByCellId" deprecated="false" scope="instance" >
<description><![CDATA[Retrieves the Date object for the specified LCalendar cell]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[The Date object for the specified LCalendar cell]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[The id of the cell]]></description>
</parameter>
</parameters>
</method>
<method name="getDateFieldsByCellId" deprecated="false" scope="instance" >
<description><![CDATA[Retrieves the Date object for the specified LCalendar cell]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[The array of Date fields for the specified LCalendar cell]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[The id of the cell]]></description>
</parameter>
</parameters>
</method>
<method name="getCellIndex" deprecated="false" scope="instance" >
<description><![CDATA[Find the LCalendar's cell index for a given date.
 If the date is not found, the method returns -1.
 &amp;lt;p&amp;gt;
 The returned index can be used to lookup the cell HTMLElement
 using the LCalendar's cells array or passed to selectCell to select
 cells by index.
 &amp;lt;/p&amp;gt;

 See &amp;lt;a href="#cells"&amp;gt;cells&amp;lt;/a&amp;gt;, &amp;lt;a href="#selectCell"&amp;gt;selectCell&amp;lt;/a&amp;gt;.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[The index of the date in Calendars cellDates/cells arrays, or -1 if the date]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[JavaScript Date object, for which to find a cell index.]]></description>
</parameter>
</parameters>
</method>
<method name="addMonths" deprecated="false" scope="instance" >
<description><![CDATA[Adds the designated number of months to the current calendar month, and sets the current
 calendar page date to the new month.]]></description>
<parameters>
<parameter name="count" type="Number" deprecated="false" usage="required">
<description><![CDATA[The number of months to add to the current calendar]]></description>
</parameter>
</parameters>
</method>
<method name="subtractMonths" deprecated="false" scope="instance" >
<description><![CDATA[Subtracts the designated number of months from the current calendar month, and sets the current
 calendar page date to the new month.]]></description>
<parameters>
<parameter name="count" type="Number" deprecated="false" usage="required">
<description><![CDATA[The number of months to subtract from the current calendar]]></description>
</parameter>
</parameters>
</method>
<method name="addYears" deprecated="false" scope="instance" >
<description><![CDATA[Adds the designated number of years to the current calendar, and sets the current
 calendar page date to the new month.]]></description>
<parameters>
<parameter name="count" type="Number" deprecated="false" usage="required">
<description><![CDATA[The number of years to add to the current calendar]]></description>
</parameter>
</parameters>
</method>
<method name="subtractYears" deprecated="false" scope="instance" >
<description><![CDATA[Subtcats the designated number of years from the current calendar, and sets the current
 calendar page date to the new month.]]></description>
<parameters>
<parameter name="count" type="Number" deprecated="false" usage="required">
<description><![CDATA[The number of years to subtract from the current calendar]]></description>
</parameter>
</parameters>
</method>
<method name="nextMonth" deprecated="false" scope="instance" >
<description><![CDATA[Navigates to the next month page in the calendar widget.]]></description>
</method>
<method name="previousMonth" deprecated="false" scope="instance" >
<description><![CDATA[Navigates to the previous month page in the calendar widget.]]></description>
</method>
<method name="nextYear" deprecated="false" scope="instance" >
<description><![CDATA[Navigates to the next year in the currently selected month in the calendar widget.]]></description>
</method>
<method name="previousYear" deprecated="false" scope="instance" >
<description><![CDATA[Navigates to the previous year in the currently selected month in the calendar widget.]]></description>
</method>
<method name="reset" deprecated="false" scope="instance" >
<description><![CDATA[Resets the calendar widget to the originally selected month and year, and
 sets the calendar to the initial selection(s).]]></description>
</method>
<method name="clear" deprecated="false" scope="instance" >
<description><![CDATA[Clears the selected dates in the current calendar widget and sets the calendar
 to the current month and year.]]></description>
</method>
<method name="select" deprecated="false" scope="instance" >
<description><![CDATA[Selects a date or a collection of dates on the current calendar. This method, by default,
 does not call the render method explicitly. Once selection has completed, render must be
 called for the changes to be reflected visually.

 Any dates which are OOB (out of bounds, not selectable) will not be selected and the array of
 selected dates passed to the selectEvent will not contain OOB dates.

 If all dates are OOB, the no state change will occur; beforeSelect and select events will not be fired.]]></description>
<return-types>
<return-type type="Date[]" />
<return-description><![CDATA[{Date[]}            Array of JavaScript Date objects representing all individual dates that are currently selected.]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="String/Date/Date[]" deprecated="false" usage="required">
<description><![CDATA[The date string of dates to select in the current calendar. Valid formats are]]></description>
</parameter>
<parameter name="fireEvent" type="bool" deprecated="false" usage="required">
<description><![CDATA[event를 발생시킬지 여부, 기본값 true, 단순히 값만 변경할 경우 false 설정.]]></description>
</parameter>
</parameters>
</method>
<method name="selectCell" deprecated="false" scope="instance" >
<description><![CDATA[Selects a date on the current calendar by referencing the index of the cell that should be selected.
 This method is used to easily select a single cell (usually with a mouse click) without having to do
 a full render. The selected style is applied to the cell directly.

 If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month
 or out of bounds cells), it will not be selected and in such a case beforeSelect and select events will not be fired.]]></description>
<return-types>
<return-type type="Date[]" />
<return-description><![CDATA[{Date[]}    Array of JavaScript Date objects representing all individual dates that are currently selected.]]></return-description>
</return-types>
<parameters>
<parameter name="cellIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[The index of the cell to select in the current calendar.]]></description>
</parameter>
</parameters>
</method>
<method name="deselect" deprecated="false" scope="instance" >
<description><![CDATA[Deselects a date or a collection of dates on the current calendar. This method, by default,
 does not call the render method explicitly. Once deselection has completed, render must be
 called for the changes to be reflected visually.

 The method will not attempt to deselect any dates which are OOB (out of bounds, and hence not selectable)
 and the array of deselected dates passed to the deselectEvent will not contain any OOB dates.

 If all dates are OOB, beforeDeselect and deselect events will not be fired.]]></description>
<return-types>
<return-type type="Date[]" />
<return-description><![CDATA[{Date[]}            Array of JavaScript Date objects representing all individual dates that are currently selected.]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="String/Date/Date[]" deprecated="false" usage="required">
<description><![CDATA[The date string of dates to deselect in the current calendar. Valid formats are]]></description>
</parameter>
</parameters>
</method>
<method name="deselectCell" deprecated="false" scope="instance" >
<description><![CDATA[Deselects a date on the current calendar by referencing the index of the cell that should be deselected.
 This method is used to easily deselect a single cell (usually with a mouse click) without having to do
 a full render. The selected style is removed from the cell directly.

 If the cell is not marked with the CSS_CELL_SELECTABLE class (as is the case by default for out of month
 or out of bounds cells), the method will not attempt to deselect it and in such a case, beforeDeselect and
 deselect events will not be fired.]]></description>
<return-types>
<return-type type="Date[]" />
<return-description><![CDATA[{Date[]}    Array of JavaScript Date objects representing all individual dates that are currently selected.]]></return-description>
</return-types>
<parameters>
<parameter name="cellIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[The index of the cell to deselect in the current calendar.]]></description>
</parameter>
</parameters>
</method>
<method name="deselectAll" deprecated="false" scope="instance" >
<description><![CDATA[Deselects all dates on the current calendar.]]></description>
<return-types>
<return-type type="Date[]" />
<return-description><![CDATA[Array of JavaScript Date objects representing all individual dates that are currently selected.]]></return-description>
</return-types>
</method>
<method name="toDate" deprecated="false" scope="instance" >
<description><![CDATA[Converts a date field array [yyyy,mm,dd] to a JavaScript Date object. The date field array
 is the format in which dates are as provided as arguments to selectEvent and deselectEvent listeners.]]></description>
<return-types>
<return-type type="Date" />
<return-description><![CDATA[{Date}  JavaScript Date object representing the date field array.]]></return-description>
</return-types>
<parameters>
<parameter name="dateFieldArray" type="Number[]" deprecated="false" usage="required">
<description><![CDATA[The date field array to convert to a JavaScript Date.]]></description>
</parameter>
</parameters>
</method>
<method name="validate" deprecated="false" scope="instance" >
<description><![CDATA[Validates the calendar widget. This method has no default implementation
 and must be extended by subclassing the widget.]]></description>
</method>
<method name="resetRenderers" deprecated="false" scope="instance" >
<description><![CDATA[Resets the render stack of the current calendar to its original pre-render value.]]></description>
</method>
<method name="removeRenderers" deprecated="false" scope="instance" >
<description><![CDATA[Removes all custom renderers added to the LCalendar through the addRenderer, addMonthRenderer and
 addWeekdayRenderer methods. LCalendar's render method needs to be called after removing renderers
 to re-render the LCalendar without custom renderers applied.]]></description>
</method>
<method name="clearElement" deprecated="false" scope="instance" >
<description><![CDATA[Clears the inner HTML, CSS class and style information from the specified cell.]]></description>
<parameters>
<parameter name="cell" type="HTMLTableCellElement" deprecated="false" usage="required">
<description><![CDATA[The cell to clear]]></description>
</parameter>
</parameters>
</method>
<method name="addRenderer" deprecated="false" scope="instance" >
<description><![CDATA[Adds a renderer to the render stack. The function reference passed to this method will be executed
 when a date cell matches the conditions specified in the date string for this renderer.]]></description>
<parameters>
<parameter name="sDates" type="String" deprecated="false" usage="required">
<description><![CDATA[A date string to associate with the specified renderer. Valid formats]]></description>
</parameter>
<parameter name="fnRender" type="Function" deprecated="false" usage="required">
<description><![CDATA[The function executed to render cells that match the render rules for this renderer.]]></description>
</parameter>
</parameters>
</method>
<method name="addMonthRenderer" deprecated="false" scope="instance" >
<description><![CDATA[Adds a month to the render stack. The function reference passed to this method will be executed
 when a date cell matches the month passed to this method.]]></description>
<parameters>
<parameter name="month" type="Number" deprecated="false" usage="required">
<description><![CDATA[The month (1-12) to associate with this renderer]]></description>
</parameter>
<parameter name="fnRender" type="Function" deprecated="false" usage="required">
<description><![CDATA[The function executed to render cells that match the render rules for this renderer.]]></description>
</parameter>
</parameters>
</method>
<method name="addWeekdayRenderer" deprecated="false" scope="instance" >
<description><![CDATA[Adds a weekday to the render stack. The function reference passed to this method will be executed
 when a date cell matches the weekday passed to this method.]]></description>
<parameters>
<parameter name="weekday" type="Number" deprecated="false" usage="required">
<description><![CDATA[The weekday (Sunday = 1, Monday = 2 ... Saturday = 7) to associate with this renderer]]></description>
</parameter>
<parameter name="fnRender" type="Function" deprecated="false" usage="required">
<description><![CDATA[The function executed to render cells that match the render rules for this renderer.]]></description>
</parameter>
</parameters>
</method>
<method name="clearAllBodyCellStyles" deprecated="false" scope="instance" >
<description><![CDATA[Removes all styles from all body cells in the current calendar table.]]></description>
<parameters>
<parameter name="style" type="style" deprecated="false" usage="required">
<description><![CDATA[The CSS class name to remove from all calendar body cells]]></description>
</parameter>
</parameters>
</method>
<method name="setMonth" deprecated="false" scope="instance" >
<description><![CDATA[Sets the calendar's month explicitly]]></description>
<parameters>
<parameter name="month" type="Number" deprecated="false" usage="required">
<description><![CDATA[The numeric month, from 0 (January) to 11 (December)]]></description>
</parameter>
</parameters>
</method>
<method name="setYear" deprecated="false" scope="instance" >
<description><![CDATA[Sets the calendar's year explicitly.]]></description>
<parameters>
<parameter name="year" type="Number" deprecated="false" usage="required">
<description><![CDATA[The numeric 4-digit year]]></description>
</parameter>
</parameters>
</method>
<method name="getSelectedDates" deprecated="false" scope="instance" >
<description><![CDATA[Gets the list of currently selected dates from the calendar.]]></description>
<return-types>
<return-type type="Date[]" />
<return-description><![CDATA[An array of currently selected JavaScript Date objects.]]></return-description>
</return-types>
</method>
<method name="hide" deprecated="false" scope="instance" >
<description><![CDATA[Hides the LCalendar's outer container from view.]]></description>
</method>
<method name="show" deprecated="false" scope="instance" >
<description><![CDATA[Shows the LCalendar's outer container.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representation of the object.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[A string representation of the LCalendar object.]]></return-description>
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[Destroys the LCalendar instance. The method will remove references
 to HTML elements, remove any event listeners added by the LCalendar,
 and destroy the Config and LCalendarNavigator instances it has created.]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.calendar.LCalendarGroup" deprecated="false" >
<description>Rui.ui.calendar.LCalendarGroup is a special container class for Rui.ui.calendar.LCalendar. This class facilitates
 the ability to have multi-page calendar views that share a single dataset and are
 dependent on each other.

 The calendar group instance will refer to each of its elements using a 0-based index.
 For example, to construct the placeholder for a calendar group widget with id 'cal1' and
 containerId of 'cal1Container', the markup would be as follows:
    &amp;lt;xmp&amp;gt;
        &amp;lt;div id='cal1Container_0'&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div id='cal1Container_1'&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/xmp&amp;gt;
 The tables for the calendars ('cal1_0' and 'cal1_1') will be inserted into those containers.

 &amp;lt;p&amp;gt;
 &amp;lt;strong&amp;gt;NOTE: As of 2.4.0, the constructor's ID argument is optional.&amp;lt;/strong&amp;gt;
 The LCalendarGroup can be constructed by simply providing a container ID string,
 or a reference to a container DIV HTMLElement (the element needs to exist
 in the document).

 E.g.:
    &amp;lt;xmp&amp;gt;
        var c = new Rui.ui.calendar.LCalendarGroup('calContainer', configOptions);
    &amp;lt;/xmp&amp;gt;
 or:
   &amp;lt;xmp&amp;gt;
       var containerDiv = Rui.util.LDom.get('calContainer');
        var c = new Rui.ui.calendar.LCalendarGroup(containerDiv, configOptions);
    &amp;lt;/xmp&amp;gt;
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 If not provided, the ID will be generated from the container DIV ID by adding an '_t' suffix.
 For example if an ID is not provided, and the container's ID is 'calContainer', the LCalendarGroup's ID will be set to 'calContainer_t'.
 &amp;lt;/p&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Rui.ui.calendar.LCalendarGroup is a special container class for Rui.ui.calendar.LCalendar. This class facilitates
 the ability to have multi-page calendar views that share a single dataset and are
 dependent on each other.

 The calendar group instance will refer to each of its elements using a 0-based index.
 For example, to construct the placeholder for a calendar group widget with id 'cal1' and
 containerId of 'cal1Container', the markup would be as follows:
    &amp;lt;xmp&amp;gt;
        &amp;lt;div id='cal1Container_0'&amp;gt;&amp;lt;/div&amp;gt;
        &amp;lt;div id='cal1Container_1'&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;/xmp&amp;gt;
 The tables for the calendars ('cal1_0' and 'cal1_1') will be inserted into those containers.

 &amp;lt;p&amp;gt;
 &amp;lt;strong&amp;gt;NOTE: As of 2.4.0, the constructor's ID argument is optional.&amp;lt;/strong&amp;gt;
 The LCalendarGroup can be constructed by simply providing a container ID string,
 or a reference to a container DIV HTMLElement (the element needs to exist
 in the document).

 E.g.:
    &amp;lt;xmp&amp;gt;
        var c = new Rui.ui.calendar.LCalendarGroup('calContainer', configOptions);
    &amp;lt;/xmp&amp;gt;
 or:
   &amp;lt;xmp&amp;gt;
       var containerDiv = Rui.util.LDom.get('calContainer');
        var c = new Rui.ui.calendar.LCalendarGroup(containerDiv, configOptions);
    &amp;lt;/xmp&amp;gt;
 &amp;lt;/p&amp;gt;
 &amp;lt;p&amp;gt;
 If not provided, the ID will be generated from the container DIV ID by adding an '_t' suffix.
 For example if an ID is not provided, and the container's ID is 'calContainer', the LCalendarGroup's ID will be set to 'calContainer_t'.
 &amp;lt;/p&amp;gt;</description>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="instance">
<description><![CDATA[optional The id of the table element that will represent the LCalendarGroup widget. As of 2.4.0, this argument is optional.]]></description>
</parameter>
<parameter name="container" type="String | HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[The id of the container div element that will wrap the LCalendarGroup table, or a reference to a DIV element which exists in the document.]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[optional The configuration object containing the initial configuration values for the LCalendarGroup.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="today" type="Date" deprecated="false" scope="instance" >
<description>페이지의 연월과 무관하게 오늘 날짜를 가리키는 값</description>
</property>
<property name="pages" type="Number" deprecated="false" scope="instance" >
<description>The number of pages to include in the LCalendarGroup. This value can only be set once, in the LCalendarGroup's constructor arguments.</description>
</property>
<property name="pagedate" type="String" deprecated="false" scope="instance" >
<description>The month/year representing the current visible LCalendar date (mm/yyyy)</description>
</property>
<property name="selected" type="String" deprecated="false" scope="instance" >
<description>The date or range of dates representing the current LCalendar selection</description>
</property>
<property name="title" type="String" deprecated="false" scope="instance" >
<description>The title to display above the LCalendarGroup's month header</description>
</property>
<property name="close" type="Boolean" deprecated="false" scope="instance" >
<description>Whether or not a close button should be displayed for this LCalendarGroup</description>
</property>
<property name="iframe" type="Boolean" deprecated="false" scope="instance" >
<description>Whether or not an iframe shim should be placed under the LCalendar to prevent select boxes from bleeding through in Internet Explorer 6 and below.
 This property is enabled by default for IE6 and below. It is disabled by default for other browsers for performance reasons, but can be
 enabled if required.</description>
</property>
<property name="mindate" type="String" deprecated="false" scope="instance" >
<description>The minimum selectable date in the current LCalendar (mm/dd/yyyy)</description>
</property>
<property name="maxdate" type="String" deprecated="false" scope="instance" >
<description>The maximum selectable date in the current LCalendar (mm/dd/yyyy)</description>
</property>
<property name="MULTI_SELECT" type="Boolean" deprecated="false" scope="instance" >
<description>True if the LCalendar should allow multiple selections. False by default.</description>
</property>
<property name="START_WEEKDAY" type="number" deprecated="false" scope="instance" >
<description>The weekday the week begins on. Default is 0 (Sunday).</description>
</property>
<property name="SHOW_WEEKDAYS" type="Boolean" deprecated="false" scope="instance" >
<description>True if the LCalendar should show weekday labels. True by default.</description>
</property>
<property name="SHOW_WEEK_HEADER" type="Boolean" deprecated="false" scope="instance" >
<description>True if the LCalendar should show week row headers. False by default.</description>
</property>
<property name="SHOW_WEEK_FOOTER" type="Boolean" deprecated="false" scope="instance" >
<description>True if the LCalendar should show week row footers. False by default.</description>
</property>
<property name="HIDE_BLANK_WEEKS" type="Boolean" deprecated="false" scope="instance" >
<description>True if the LCalendar should suppress weeks that are not a part of the current month. False by default.</description>
</property>
<property name="NAV_ARROW_LEFT" type="String" deprecated="true" scope="instance" >
<description>The image that should be used for the left navigation arrow.</description>
</property>
<property name="NAV_ARROW_RIGHT" type="String" deprecated="true" scope="instance" >
<description>The image that should be used for the right navigation arrow.</description>
</property>
<property name="MONTHS_SHORT" type="String[]" deprecated="false" scope="instance" >
<description>The short month labels for the current locale.</description>
</property>
<property name="MONTHS_LONG" type="String[]" deprecated="false" scope="instance" >
<description>The long month labels for the current locale.</description>
</property>
<property name="WEEKDAYS_1CHAR" type="String[]" deprecated="false" scope="instance" >
<description>The 1-character weekday labels for the current locale.</description>
</property>
<property name="WEEKDAYS_SHORT" type="String[]" deprecated="false" scope="instance" >
<description>The short weekday labels for the current locale.</description>
</property>
<property name="WEEKDAYS_MEDIUM" type="String[]" deprecated="false" scope="instance" >
<description>The medium weekday labels for the current locale.</description>
</property>
<property name="WEEKDAYS_LONG" type="String[]" deprecated="false" scope="instance" >
<description>The long weekday labels for the current locale.</description>
</property>
<property name="LOCALE_MONTHS" type="String" deprecated="false" scope="instance" >
<description>The setting that determines which length of month labels should be used. Possible values are 'short' and 'long'.</description>
</property>
<property name="LOCALE_WEEKDAYS" type="String" deprecated="false" scope="instance" >
<description>The setting that determines which length of weekday labels should be used. Possible values are '1char', 'short', 'medium', and 'long'.</description>
</property>
<property name="DATE_DELIMITER" type="String" deprecated="false" scope="instance" >
<description>The value used to delimit individual dates in a date string passed to various LCalendar functions.</description>
</property>
<property name="DATE_FIELD_DELIMITER" type="String" deprecated="false" scope="instance" >
<description>The value used to delimit date fields in a date string passed to various LCalendar functions.</description>
</property>
<property name="DATE_RANGE_DELIMITER" type="String" deprecated="false" scope="instance" >
<description>The value used to delimit date ranges in a date string passed to various LCalendar functions.</description>
</property>
<property name="MY_MONTH_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the month in a month/year date string</description>
</property>
<property name="MY_YEAR_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the year in a month/year date string</description>
</property>
<property name="MD_MONTH_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the month in a month/day date string</description>
</property>
<property name="MD_DAY_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the day in a month/year date string</description>
</property>
<property name="MDY_MONTH_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the month in a month/day/year date string</description>
</property>
<property name="MDY_DAY_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the day in a month/day/year date string</description>
</property>
<property name="MDY_YEAR_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the year in a month/day/year date string</description>
</property>
<property name="MY_LABEL_MONTH_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the month in the month year label string used as the LCalendar header</description>
</property>
<property name="MY_LABEL_YEAR_POSITION" type="Number" deprecated="false" scope="instance" >
<description>The position of the year in the month year label string used as the LCalendar header</description>
</property>
<property name="MY_LABEL_MONTH_SUFFIX" type="String" deprecated="false" scope="instance" >
<description>The suffix used after the month when rendering the LCalendar header</description>
</property>
<property name="MY_LABEL_YEAR_SUFFIX" type="String" deprecated="false" scope="instance" >
<description>The suffix used after the year when rendering the LCalendar header</description>
</property>
<property name="NAV" type="Object" deprecated="false" scope="instance" >
<description>LConfiguration for the Month Year Navigation UI. By default it is disabled</description>
</property>
<property name="strings" type="Object" deprecated="false" scope="instance" >
<description>The map of UI strings which the LCalendarGroup UI uses.</description>
</property>
</configs>
<properties>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>The unique id associated with the LCalendarGroup</description>
</property>
<property name="CSS_CONTAINER" type="String" deprecated="false" scope="static" >
<description>CSS class representing the container for the calendar</description>
</property>
<property name="CSS_MULTI_UP" type="String" deprecated="false" scope="static" >
<description>CSS class representing the container for the calendar</description>
</property>
<property name="CSS_2UPTITLE" type="String" deprecated="false" scope="static" >
<description>CSS class representing the title for the 2-up calendar</description>
</property>
<property name="CSS_2UPCLOSE" type="String" deprecated="true" scope="static" >
<description>CSS class representing the close icon for the 2-up calendar</description>
</property>
</properties>
<events>
<event name="beforeSelectEvent" deprecated="false">
<description><![CDATA[
Fired before a date selection is made
]]></description>
</event>
<event name="selectEvent" deprecated="false">
<description><![CDATA[
Fired when a date selection is made
]]></description>
<parameters>
<parameter name="Array" type="Array" deprecated="false" usage="instance">
<description><![CDATA[of Date field arrays in the format [YYYY, MM, LDD].]]></description>
</parameter>
</parameters>
</event>
<event name="beforeDeselectEvent" deprecated="false">
<description><![CDATA[
Fired before a date or set of dates is deselected
]]></description>
</event>
<event name="deselectEvent" deprecated="false">
<description><![CDATA[
Fired when a date or set of dates has been deselected
]]></description>
<parameters>
<parameter name="Array" type="Array" deprecated="false" usage="instance">
<description><![CDATA[of Date field arrays in the format [YYYY, MM, LDD].]]></description>
</parameter>
</parameters>
</event>
<event name="beforeChangePage" deprecated="false">
<description><![CDATA[
Fired when the LCalendar page is changed
]]></description>
</event>
<event name="changePageEvent" deprecated="false">
<description><![CDATA[
Fired when the LCalendar page is changed
]]></description>
</event>
<event name="beforeRenderEvent" deprecated="false">
<description><![CDATA[
Fired before the LCalendar is rendered
]]></description>
</event>
<event name="renderEvent" deprecated="false">
<description><![CDATA[
Fired when the LCalendar is rendered
]]></description>
</event>
<event name="resetEvent" deprecated="false">
<description><![CDATA[
Fired when the LCalendar is reset
]]></description>
</event>
<event name="clearEvent" deprecated="false">
<description><![CDATA[
Fired when the LCalendar is cleared
]]></description>
</event>
<event name="beforeShowEvent" deprecated="false">
<description><![CDATA[
Fired just before the LCalendarGroup is to be shown
]]></description>
</event>
<event name="showEvent" deprecated="false">
<description><![CDATA[
Fired after the LCalendarGroup is shown
]]></description>
</event>
<event name="beforeHideEvent" deprecated="false">
<description><![CDATA[
Fired just before the LCalendarGroup is to be hidden
]]></description>
</event>
<event name="hideEvent" deprecated="false">
<description><![CDATA[
Fired after the LCalendarGroup is hidden
]]></description>
</event>
<event name="beforeShowNavEvent" deprecated="false">
<description><![CDATA[
Fired just before the LCalendarNavigator is to be shown
]]></description>
</event>
<event name="showNavEvent" deprecated="false">
<description><![CDATA[
Fired after the LCalendarNavigator is shown
]]></description>
</event>
<event name="beforeHideNavEvent" deprecated="false">
<description><![CDATA[
Fired just before the LCalendarNavigator is to be hidden
]]></description>
</event>
<event name="hideNavEvent" deprecated="false">
<description><![CDATA[
Fired after the LCalendarNavigator is hidden
]]></description>
</event>
<event name="beforeRenderNavEvent" deprecated="false">
<description><![CDATA[
Fired just before the LCalendarNavigator is to be rendered
]]></description>
</event>
<event name="renderNavEvent" deprecated="false">
<description><![CDATA[
Fired after the LCalendarNavigator is rendered
]]></description>
</event>
<event name="beforeDestroyEvent" deprecated="false">
<description><![CDATA[
Fired just before the LCalendarGroup is to be destroyed
]]></description>
</event>
<event name="destroyEvent" deprecated="false">
<description><![CDATA[
Fired after the LCalendarGroup is destroyed. This event should be used
 for notification only. When this event is fired, important LCalendarGroup instance
 properties, dom references and event listeners have already been
 removed/dereferenced, and hence the LCalendarGroup instance is not in a usable
 state.
]]></description>
</event>
</events>
<methods>
<method name="setProperty" deprecated="false" scope="instance" >
<description><![CDATA[사용자가 직접 .cfg.setProperty 를 호출하지 않도록 사용성을 위해 wrapping]]></description>
</method>
<method name="setChildFunction" deprecated="false" scope="instance" >
<description><![CDATA[Adds a function to all child Calendars within this LCalendarGroup.]]></description>
<parameters>
<parameter name="fnName" type="String" deprecated="false" usage="required">
<description><![CDATA[The name of the function]]></description>
</parameter>
<parameter name="fn" type="Function" deprecated="false" usage="required">
<description><![CDATA[The function to apply to each LCalendar page object]]></description>
</parameter>
</parameters>
</method>
<method name="setMonth" deprecated="false" scope="instance" >
<description><![CDATA[Sets the calendar group's month explicitly. This month will be set into the first
 page of the multi-page calendar, and all other months will be iterated appropriately.]]></description>
<parameters>
<parameter name="month" type="Number" deprecated="false" usage="required">
<description><![CDATA[The numeric month, from 0 (January) to 11 (December)]]></description>
</parameter>
</parameters>
</method>
<method name="setYear" deprecated="false" scope="instance" >
<description><![CDATA[Sets the calendar group's year explicitly. This year will be set into the first
 page of the multi-page calendar, and all other months will be iterated appropriately.]]></description>
<parameters>
<parameter name="year" type="Number" deprecated="false" usage="required">
<description><![CDATA[The numeric 4-digit year]]></description>
</parameter>
</parameters>
</method>
<method name="render" deprecated="false" scope="instance" >
<description><![CDATA[Calls the render function of all child calendars within the group.]]></description>
</method>
<method name="select" deprecated="false" scope="instance" >
<description><![CDATA[Selects a date or a collection of dates on the current calendar. This method, by default,
 does not call the render method explicitly. Once selection has completed, render must be
 called for the changes to be reflected visually.]]></description>
<return-types>
<return-type type="Date[]" />
<return-description><![CDATA[{Date[]}            Array of JavaScript Date objects representing all individual dates that are currently selected.]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="String/Date/Date[]" deprecated="false" usage="required">
<description><![CDATA[The date string of dates to select in the current calendar. Valid formats are]]></description>
</parameter>
</parameters>
</method>
<method name="selectCell" deprecated="false" scope="instance" >
<description><![CDATA[Selects dates in the LCalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.
 The value of the MULTI_SELECT LConfiguration attribute will determine the set of dates which get selected.
 &amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;If MULTI_SELECT is false, selectCell will select the cell at the specified index for only the last displayed LCalendar page.&amp;lt;/li&amp;gt;
    &amp;lt;li&amp;gt;If MULTI_SELECT is true, selectCell will select the cell at the specified index, on each displayed LCalendar page.&amp;lt;/li&amp;gt;
 &amp;lt;/ul&amp;gt;]]></description>
<return-types>
<return-type type="Date[]" />
<return-description><![CDATA[{Date[]}    Array of JavaScript Date objects representing all individual dates that are currently selected.]]></return-description>
</return-types>
<parameters>
<parameter name="cellIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[The index of the cell to be selected.]]></description>
</parameter>
</parameters>
</method>
<method name="deselect" deprecated="false" scope="instance" >
<description><![CDATA[Deselects a date or a collection of dates on the current calendar. This method, by default,
 does not call the render method explicitly. Once deselection has completed, render must be
 called for the changes to be reflected visually.]]></description>
<return-types>
<return-type type="Date[]" />
<return-description><![CDATA[{Date[]}            Array of JavaScript Date objects representing all individual dates that are currently selected.]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="String/Date/Date[]" deprecated="false" usage="required">
<description><![CDATA[The date string of dates to deselect in the current calendar. Valid formats are]]></description>
</parameter>
</parameters>
</method>
<method name="deselectAll" deprecated="false" scope="instance" >
<description><![CDATA[Deselects all dates on the current calendar.]]></description>
<return-types>
<return-type type="Date[]" />
<return-description><![CDATA[Array of JavaScript Date objects representing all individual dates that are currently selected.]]></return-description>
</return-types>
</method>
<method name="deselectCell" deprecated="false" scope="instance" >
<description><![CDATA[Deselects dates in the LCalendarGroup based on the cell index provided. This method is used to select cells without having to do a full render. The selected style is applied to the cells directly.
 deselectCell will deselect the cell at the specified index on each displayed LCalendar page.]]></description>
<return-types>
<return-type type="Date[]" />
<return-description><![CDATA[{Date[]}    Array of JavaScript Date objects representing all individual dates that are currently selected.]]></return-description>
</return-types>
<parameters>
<parameter name="cellIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[The index of the cell to deselect.]]></description>
</parameter>
</parameters>
</method>
<method name="reset" deprecated="false" scope="instance" >
<description><![CDATA[Resets the calendar widget to the originally selected month and year, and
 sets the calendar to the initial selection(s).]]></description>
</method>
<method name="clear" deprecated="false" scope="instance" >
<description><![CDATA[Clears the selected dates in the current calendar widget and sets the calendar
 to the current month and year.]]></description>
</method>
<method name="nextMonth" deprecated="false" scope="instance" >
<description><![CDATA[Navigates to the next month page in the calendar widget.]]></description>
</method>
<method name="previousMonth" deprecated="false" scope="instance" >
<description><![CDATA[Navigates to the previous month page in the calendar widget.]]></description>
</method>
<method name="nextYear" deprecated="false" scope="instance" >
<description><![CDATA[Navigates to the next year in the currently selected month in the calendar widget.]]></description>
</method>
<method name="previousYear" deprecated="false" scope="instance" >
<description><![CDATA[Navigates to the previous year in the currently selected month in the calendar widget.]]></description>
</method>
<method name="addRenderer" deprecated="false" scope="instance" >
<description><![CDATA[Adds a renderer to the render stack. The function reference passed to this method will be executed
 when a date cell matches the conditions specified in the date string for this renderer.]]></description>
<parameters>
<parameter name="sDates" type="String" deprecated="false" usage="required">
<description><![CDATA[A date string to associate with the specified renderer. Valid formats]]></description>
</parameter>
<parameter name="fnRender" type="Function" deprecated="false" usage="required">
<description><![CDATA[The function executed to render cells that match the render rules for this renderer.]]></description>
</parameter>
</parameters>
</method>
<method name="addMonthRenderer" deprecated="false" scope="instance" >
<description><![CDATA[Adds a month to the render stack. The function reference passed to this method will be executed
 when a date cell matches the month passed to this method.]]></description>
<parameters>
<parameter name="month" type="Number" deprecated="false" usage="required">
<description><![CDATA[The month (1-12) to associate with this renderer]]></description>
</parameter>
<parameter name="fnRender" type="Function" deprecated="false" usage="required">
<description><![CDATA[The function executed to render cells that match the render rules for this renderer.]]></description>
</parameter>
</parameters>
</method>
<method name="addWeekdayRenderer" deprecated="false" scope="instance" >
<description><![CDATA[Adds a weekday to the render stack. The function reference passed to this method will be executed
 when a date cell matches the weekday passed to this method.]]></description>
<parameters>
<parameter name="weekday" type="Number" deprecated="false" usage="required">
<description><![CDATA[The weekday (1-7) to associate with this renderer. 1=Sunday, 2=Monday etc.]]></description>
</parameter>
<parameter name="fnRender" type="Function" deprecated="false" usage="required">
<description><![CDATA[The function executed to render cells that match the render rules for this renderer.]]></description>
</parameter>
</parameters>
</method>
<method name="addMonths" deprecated="false" scope="instance" >
<description><![CDATA[Adds the designated number of months to the current calendar month, and sets the current
 calendar page date to the new month.]]></description>
<parameters>
<parameter name="count" type="Number" deprecated="false" usage="required">
<description><![CDATA[The number of months to add to the current calendar]]></description>
</parameter>
</parameters>
</method>
<method name="subtractMonths" deprecated="false" scope="instance" >
<description><![CDATA[Subtracts the designated number of months from the current calendar month, and sets the current
 calendar page date to the new month.]]></description>
<parameters>
<parameter name="count" type="Number" deprecated="false" usage="required">
<description><![CDATA[The number of months to subtract from the current calendar]]></description>
</parameter>
</parameters>
</method>
<method name="addYears" deprecated="false" scope="instance" >
<description><![CDATA[Adds the designated number of years to the current calendar, and sets the current
 calendar page date to the new month.]]></description>
<parameters>
<parameter name="count" type="Number" deprecated="false" usage="required">
<description><![CDATA[The number of years to add to the current calendar]]></description>
</parameter>
</parameters>
</method>
<method name="subtractYears" deprecated="false" scope="instance" >
<description><![CDATA[Subtcats the designated number of years from the current calendar, and sets the current
 calendar page date to the new month.]]></description>
<parameters>
<parameter name="count" type="Number" deprecated="false" usage="required">
<description><![CDATA[The number of years to subtract from the current calendar]]></description>
</parameter>
</parameters>
</method>
<method name="getCalendarPage" deprecated="false" scope="instance" >
<description><![CDATA[Returns the LCalendar page instance which has a pagedate (month/year) matching the given date.
 Returns null if no match is found.]]></description>
<return-types>
<return-type type="LCalendar" />
<return-description><![CDATA[The LCalendar page instance representing the month to which the date]]></return-description>
</return-types>
<parameters>
<parameter name="date" type="Date" deprecated="false" usage="required">
<description><![CDATA[The JavaScript Date object for which a LCalendar page is to be found.]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representation of the object.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[A string representation of the LCalendarGroup object.]]></return-description>
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[Destroys the LCalendarGroup instance. The method will remove references
 to HTML elements, remove any event listeners added by the LCalendarGroup.

 It will also destroy the Config and LCalendarNavigator instances created by the
 LCalendarGroup and the individual LCalendar instances created for each page.]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.calendar.LCalendarNavigator" deprecated="false" >
<description>The LCalendarNavigator is used along with a LCalendar/LCalendarGroup to
 provide a Month/Year popup navigation control, allowing the user to navigate
 to a specific month/year in the LCalendar/LCalendarGroup without having to
 scroll through months sequentially</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>The LCalendarNavigator is used along with a LCalendar/LCalendarGroup to
 provide a Month/Year popup navigation control, allowing the user to navigate
 to a specific month/year in the LCalendar/LCalendarGroup without having to
 scroll through months sequentially</description>
<parameters>
<parameter name="cal" type="LCalendar|LCalendarGroup" deprecated="false" usage="instance">
<description><![CDATA[The instance of the LCalendar or LCalendarGroup to which this LCalendarNavigator should be attached.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="ID_SUFFIX" type="String" deprecated="false" scope="static" >
<description>The suffix added to the LCalendar/LCalendarGroup's ID, to generate
 a unique ID for the Navigator and it's bounding box.</description>
</property>
<property name="MONTH_SUFFIX" type="String" deprecated="false" scope="static" >
<description>The suffix added to the Navigator's ID, to generate
 a unique ID for the month control.</description>
</property>
<property name="YEAR_SUFFIX" type="String" deprecated="false" scope="static" >
<description>The suffix added to the Navigator's ID, to generate
 a unique ID for the year control.</description>
</property>
<property name="ERROR_SUFFIX" type="String" deprecated="false" scope="static" >
<description>The suffix added to the Navigator's ID, to generate
 a unique ID for the error bounding box.</description>
</property>
<property name="CANCEL_SUFFIX" type="String" deprecated="false" scope="static" >
<description>The suffix added to the Navigator's ID, to generate
 a unique ID for the 'Cancel' button.</description>
</property>
<property name="SUBMIT_SUFFIX" type="String" deprecated="false" scope="static" >
<description>The suffix added to the Navigator's ID, to generate
 a unique ID for the 'Submit' button.</description>
</property>
<property name="YR_MAX_DIGITS" type="Number" deprecated="false" scope="static" >
<description>The number of digits to which the year input control is to be limited.</description>
</property>
<property name="YR_MINOR_INC" type="Number" deprecated="false" scope="static" >
<description>The amount by which to increment the current year value,
 when the arrow up/down key is pressed on the year control</description>
</property>
<property name="YR_MAJOR_INC" type="Number" deprecated="false" scope="static" >
<description>The amount by which to increment the current year value,
 when the page up/down key is pressed on the year control</description>
</property>
<property name="UPDATE_DELAY" type="Number" deprecated="false" scope="static" >
<description>Artificial delay (in ms) between the time the Navigator is hidden
 and the LCalendar/LCalendarGroup state is updated. Allows the user
 the see the LCalendar/LCalendarGroup page changing. If set to 0
 the LCalendar/LCalendarGroup page will be updated instantly</description>
</property>
<property name="YR_PATTERN" type="RegExp" deprecated="false" scope="static" >
<description>Regular expression used to validate the year input</description>
</property>
<property name="TRIM" type="RegExp" deprecated="false" scope="static" >
<description>Regular expression used to trim strings</description>
</property>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>The unique ID for this LCalendarNavigator instance</description>
</property>
<property name="cal" type="LCalendar|LCalendarGroup" deprecated="false" scope="instance" >
<description>The LCalendar/LCalendarGroup instance to which the navigator belongs</description>
</property>
<property name="navEl" type="HTMLElement" deprecated="false" scope="instance" >
<description>Reference to the HTMLElement used to render the navigator's bounding box</description>
</property>
<property name="maskEl" type="HTMLElement" deprecated="false" scope="instance" >
<description>Reference to the HTMLElement used to render the navigator's mask</description>
</property>
<property name="yearEl" type="HTMLElement" deprecated="false" scope="instance" >
<description>Reference to the HTMLElement used to input the year</description>
</property>
<property name="monthEl" type="HTMLElement" deprecated="false" scope="instance" >
<description>Reference to the HTMLElement used to input the month</description>
</property>
<property name="errorEl" type="HTMLElement" deprecated="false" scope="instance" >
<description>Reference to the HTMLElement used to display validation errors</description>
</property>
<property name="submitEl" type="HTMLElement" deprecated="false" scope="instance" >
<description>Reference to the HTMLElement used to update the LCalendar/LCalendar group
 with the month/year values</description>
</property>
<property name="cancelEl" type="HTMLElement" deprecated="false" scope="instance" >
<description>Reference to the HTMLElement used to hide the navigator without updating the
 LCalendar/LCalendar group</description>
</property>
<property name="firstCtrl" type="HTMLElement" deprecated="false" scope="instance" >
<description>Reference to the first focusable control in the navigator (by default monthEl)</description>
</property>
<property name="lastCtrl" type="HTMLElement" deprecated="false" scope="instance" >
<description>Reference to the last focusable control in the navigator (by default cancelEl)</description>
</property>
</properties>
<methods>
<method name="getYear" deprecated="false" scope="instance" >
<description><![CDATA[Returns the current year set on the navigator

 Note: This may not be the year set in the UI, if
 the UI contains an invalid value.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[The Navigator's current year value]]></return-description>
</return-types>
</method>
<method name="render" deprecated="false" scope="instance" >
<description><![CDATA[Renders the HTML for the navigator, adding it to the
 document and attaches event listeners if it has not
 already been rendered.]]></description>
</method>
<method name="clearError" deprecated="false" scope="instance" >
<description><![CDATA[Clears the navigator's error message and hides the error panel]]></description>
</method>
<method name="erase" deprecated="false" scope="instance" >
<description><![CDATA[Removes all renderered HTML elements for the Navigator from
 the DOM, purges event listeners and clears (nulls) any property
 references to HTML references]]></description>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[Destroys the Navigator object and any HTML references]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.form.LForm" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>LForm</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LForm</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LForm.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="validatorManager" type="Rui.validate.LValidatorManager" deprecated="false" scope="instance" >
<description>Rui.validate.LValidatorManager 객체
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/simpleFormSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="dataSetManagerOptions" type="Object" deprecated="false" scope="instance" >
<description>Form 내부에서 사용하는 DataSetManager의 config</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="beforesubmit" deprecated="false">
<description><![CDATA[
sumbit 실행전 호출되는 이벤트, 이벤트 리턴값이 false면 submit이 호출되지 않는다.
]]></description>
</event>
<event name="invalid" deprecated="false">
<description><![CDATA[
invalid가 발생하는 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="invalidList" type="Array" deprecated="false" usage="instance">
<description><![CDATA[invalid 객체 List]]></description>
</parameter>
</parameters>
</event>
<event name="success" deprecated="false">
<description><![CDATA[
sumbit이 성공하면 발생하는 이벤트
]]></description>
<parameters>
<parameter name="conn" type="XMLHttpRequest" deprecated="false" usage="instance">
<description><![CDATA[ajax response 객체]]></description>
</parameter>
</parameters>
</event>
<event name="failure" deprecated="false">
<description><![CDATA[
sumbit이 실패하면 발생하는 이벤트
]]></description>
<parameters>
<parameter name="conn" type="XMLHttpRequest" deprecated="false" usage="instance">
<description><![CDATA[ajax response 객체]]></description>
</parameter>
</parameters>
</event>
<event name="reset" deprecated="false">
<description><![CDATA[
reset시 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.form.LForm" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="setValidatorManager" deprecated="false" scope="instance" >
<description><![CDATA[LValidatorManager 객체를 설정하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="validatorManager" type="Rui.validate.LValidatorManager" deprecated="false" usage="required">
<description><![CDATA[Rui.validate.LValidatorManager 객체]]></description>
</parameter>
</parameters>
</method>
<method name="submit" deprecated="false" scope="instance" >
<description><![CDATA[submit 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="reset" deprecated="false" scope="instance" >
<description><![CDATA[reset 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="clearInvalid" deprecated="false" scope="instance" >
<description><![CDATA[form 객체의 invalid된 모든 객체를 초기화 하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="enable" deprecated="false" scope="instance" >
<description><![CDATA[배열 객체에 해당되는 모든 객체를 활성화 한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="children" type="Array" deprecated="false" usage="required">
<description><![CDATA[enable할 배열 객체, 인수를 안 넘기면 모든 form객체 안의 child 모든 객체 자동 선택]]></description>
</parameter>
</parameters>
</method>
<method name="disable" deprecated="false" scope="instance" >
<description><![CDATA[배열 객체에 해당되는 모든 객체를 비활성화 한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="children" type="Array" deprecated="false" usage="required">
<description><![CDATA[enable할 배열 객체, 인수를 안 넘기면 모든 form객체 안의 child 모든 객체 자동 선택]]></description>
</parameter>
</parameters>
</method>
<method name="isDisable" deprecated="false" scope="instance" >
<description><![CDATA[배열 객체에 해당되는 모든 객체중 비활성화가 하나라도 있으면 false를 리턴한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="children" type="Array" deprecated="false" usage="required">
<description><![CDATA[enable할 배열 객체, 인수를 안 넘기면 모든 form객체 안의 child 모든 객체 자동 선택]]></description>
</parameter>
</parameters>
</method>
<method name="getValues" deprecated="false" scope="instance" >
<description><![CDATA[form 객체에 안에 있는 child객체 배열]]></description>
<return-types>
<return-type type="Array" />
</return-types>
</method>
<method name="setValues" deprecated="false" scope="instance" >
<description><![CDATA[form 객체에 안에 있는 child객체에 모든 값 대입]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="values" type="Array" deprecated="false" usage="required">
<description><![CDATA[values에 해당되는 모든 객체에 값 대입]]></description>
</parameter>
</parameters>
</method>
<method name="findField" deprecated="false" scope="instance" >
<description><![CDATA[form 객체에 안에 있는 child객체중에 ID에 해당되는 객체를 찾아서 리턴한다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[검색된 결과 객체]]></return-description>
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[검색할 ID 값]]></description>
</parameter>
</parameters>
</method>
<method name="isValid" deprecated="false" scope="instance" >
<description><![CDATA[form 객체에 안에 있는 child객체중에 invalid객체가 존재하면 false를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[valid 여부]]></return-description>
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[form 객체 destroy]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="updateRecord" deprecated="false" scope="instance" >
<description><![CDATA[Record객체를 form 객체의 child객체에 반영한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="required">
<description><![CDATA[form객체에 반영할 Record객체]]></description>
</parameter>
</parameters>
</method>
<method name="loadRecord" deprecated="false" scope="instance" >
<description><![CDATA[form 객체의 child 정보를 Record객체에 반영한다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
<return-description><![CDATA[반영된 Record객체]]></return-description>
</return-types>
<parameters>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="required">
<description><![CDATA[form객체의 정보를 반영할 Record객체]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.LActionMenuSupport" deprecated="false" >
<description>Rich UI에서 메뉴 인터페이스를 콤포넌트로 지원되게 하는 클래스(Beta)</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Rich UI에서 메뉴 인터페이스를 콤포넌트로 지원되게 하는 클래스(Beta)</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LActionMenuSupport.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.ui.LActionMenu" deprecated="false" >
<description>마우스나 키보드를 적용하는 action 메뉴를 출력한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>마우스나 키보드를 적용하는 action 메뉴를 출력한다.</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LActionMenu.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.ui.form.LField" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>LField 객체는 form 입력 객체들을 추상 클래스</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LField 객체는 form 입력 객체들을 추상 클래스</description>
<parameters>
<parameter name="id" type="HTMLElement | String" deprecated="false" usage="instance">
<description><![CDATA[The html element that represents the Element.]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial Field.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="name" type="String" deprecated="false" scope="instance" >
<description>field의 name으로 input, select태그들의 name 속성 값</description>
</property>
<property name="borderWidth" type="int" deprecated="false" scope="instance" >
<description>field 객체의 el에 CSS로 지정된 border size
 기본값은 1이며 CSS에서 border width를 변경할 경우 이 값도 동일하게 변경하여야 합니다.</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="changed" deprecated="false">
<description><![CDATA[
changed 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="valid" deprecated="false">
<description><![CDATA[
valid 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="invalid" deprecated="false">
<description><![CDATA[
invalid 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="specialkey" deprecated="false">
<description><![CDATA[
specialkey 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="e" type="Object" deprecated="false" usage="instance">
<description><![CDATA[window event 객체]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[Dom객체의 value값을 저장한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[저장할 결과값]]></description>
</parameter>
</parameters>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[Dom객체의 value값을 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[객체에 들어 있는 값]]></return-description>
</return-types>
</method>
<method name="valid" deprecated="false" scope="instance" >
<description><![CDATA[객체를 유효한 상태로 설정하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="invalid" deprecated="false" scope="instance" >
<description><![CDATA[객체를 유효하지 않은 상태로 설정하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setName" deprecated="false" scope="instance" >
<description><![CDATA[이름을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="name" type="String" deprecated="false" usage="required">
<description><![CDATA[이름]]></description>
</parameter>
</parameters>
</method>
<method name="getName" deprecated="false" scope="instance" >
<description><![CDATA[이름을 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="setEditable" deprecated="false" scope="instance" >
<description><![CDATA[editable 값을 셋팅하는 메소드
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="isEditable" type="boolean" deprecated="false" usage="required">
<description><![CDATA[editable 셋팅 값]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LTextBox" deprecated="false"  superclass="Rui.ui.form.LField" >
<description>일반적인 텍스트를 생성하는 LTextBox 편집기</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>일반적인 텍스트를 생성하는 LTextBox 편집기</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LTextBox.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="displayField" type="String" deprecated="false" scope="instance" >
<description>자동완성기능 구현을 위해 실제의 값(value)과 화면에 출력되는 값(text)이 존재 하는데 그중 화면에 출력되는 값에 해댕하는 필드(Field)명</description>
</property>
<property name="type" type="String" deprecated="false" scope="instance" >
<description>input type의 종류를 설정한다. text, password, email, url 등.</description>
</property>
<property name="editable" type="boolean" deprecated="false" scope="instance" >
<description>input박스에 키 입력이 가능한지 여부, 변경이 불가능한 읽기 전용 속성은 LUIComponent에 있는 disabled로 처리
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="width" type="int" deprecated="false" scope="instance" >
<description>가로 길이
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="height" type="int" deprecated="false" scope="instance" >
<description>세로 길이
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="defaultValue" type="String" deprecated="false" scope="instance" >
<description>객체에 기본적으로 들어 있을 값을 설정한다.
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="listWidth" type="int" deprecated="false" scope="instance" >
<description>목록창의 가로 길이 (-1일 경우 width의 규칙을 따른다.)
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="filterMode" type="String" deprecated="false" scope="instance" >
<description>자동완성기능을 처리할때 키 입력시 이미 로드된 메모리의 데이터로 처리할지 매번 서버에서 load할지를 결정
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="localDelayTime" type="int" deprecated="false" scope="instance" >
<description>local filter시 delayTime값
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="remoteDelayTime" type="int" deprecated="false" scope="instance" >
<description>remote filter시 delayTime값
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="filterUrl" type="String" deprecated="false" scope="instance" >
<description>remote filter시 url값
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="useDataSet" type="boolean" deprecated="false" scope="instance" >
<description>dataSet 사용 여부
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="autoComplete" type="boolean" deprecated="false" scope="instance" >
<description>자동 완성 기능 사용 여부
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="selectedIndex" type="int" deprecated="false" scope="instance" >
<description>데이터 로딩시 combo의 row 위치
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/comboSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="firstChangedEvent" type="int" deprecated="false" scope="instance" >
<description>데이터 로딩되면 changed 이벤트가 발생할지 여부</description>
</property>
<property name="dataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>자동 완성 기능을 정보를 가지는 dataSet</description>
</property>
<property name="inputType" type="Rui.util.LString.PATTERN_TYPE_NUMBER || Rui.util.LString.PATTERN_TYPE_NUMSTRING || Rui.util.LString.PATTERN_TYPE_STRING || Rui.util.LString.PATTERN_TYPE_KOREAN " deprecated="false" scope="instance" >
<description>입력문자열 형식 지정
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="imeMode" type="String" deprecated="false" scope="instance" >
<description>ime-mode값</description>
</property>
<property name="emptyText" type="String" deprecated="false" scope="instance" >
<description>기본 '선택하세요.' 메시지 값을 설정한다.
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="useEmptyText" type="boolean" deprecated="false" scope="instance" >
<description>기본 선택 항목 추가 여부
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="emptyValue" type="Object" deprecated="false" scope="instance" >
<description>값이 선택되어 있지 않을 경우 리턴시 값을 '' 공백 문자로 리턴할지 null로 리턴할지를 결정한다. 그리드의 데이터셋이 로딩후 연결된 콤보가 수정되지 않았는데도 수정된걸로 인식되면 null이나 undefined로 정의하여 맞춘다.</description>
</property>
<property name="mask" type="String" deprecated="false" scope="instance" >
<description>키 입력 mask 적용를 적용한다.</description>
</property>
<property name="maskValue" type="boolean" deprecated="false" scope="instance" >
<description>getValue시 적용된 mask값으로 리턴할지 여부</description>
</property>
<property name="definitions" type="String" deprecated="false" scope="instance" >
<description>mask의 형식 정의</description>
</property>
<property name="maskPlaceholder" type="String" deprecated="false" scope="instance" >
<description>mask가 적용된 값 입력시에 나오는 문자</description>
</property>
<property name="placeholder" type="String" deprecated="false" scope="instance" >
<description>html5에 있는 placeholder 기능</description>
</property>
<property name="invalidBlur" type="boolean" deprecated="false" scope="instance" >
<description>invalid focus 여부</description>
</property>
<property name="filterFn" type="function" deprecated="false" scope="instance" >
<description>filter시 function을 직접 지정해서 비교하여 처리하는 메소드</description>
</property>
<property name="expandCount" type="int" deprecated="false" scope="instance" >
<description>목록이 펼쳐질 경우 출력할 갯수</description>
</property>
<property name="stringFromChatCode" type="boolean" deprecated="false" scope="instance" >
<description>Unicode값을 문자로 반환하기 위해 내장함수  String.FromChatCode를 사용할지 결정</description>
</property>
<property name="stringFromChatCode" type="boolean" deprecated="false" scope="instance" >
<description>Unicode값을 문자로 반환하기 위해 내장함수  String.FromChatCode를 사용할지 결정</description>
</property>
<property name="listRenderer" type="Function" deprecated="false" scope="instance" >
<description>List item을 추가로 출력할 수 있게 렌더링 하는 평션</description>
</property>
<property name="dataSetId" type="String" deprecated="false" scope="instance" >
<description>LTextBox에서 사용하는 DataSet ID</description>
</property>
<property name="listPosition" type="String" deprecated="false" scope="instance" >
<description>list picker의 펼쳐짐 방향 (auto|up|down)</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="keydown" deprecated="false">
<description><![CDATA[
keydown 기능이 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="keyup" deprecated="false">
<description><![CDATA[
keyup 기능이 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="keypress" deprecated="false">
<description><![CDATA[
keypress 기능이 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="cut" deprecated="false">
<description><![CDATA[
cut 기능이 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="copy" deprecated="false">
<description><![CDATA[
copy 기능이 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="paste" deprecated="false">
<description><![CDATA[
paste 기능이 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="expand" deprecated="false">
<description><![CDATA[
expand 기능이 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="collapse" deprecated="false">
<description><![CDATA[
collapse 기능이 호출되면 수행하는 이벤트
]]></description>
</event>
<event name="changed" deprecated="false">
<description><![CDATA[
setValue 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="value" type="String" deprecated="false" usage="instance">
<description><![CDATA[code값]]></description>
</parameter>
<parameter name="displayValue" type="String" deprecated="false" usage="instance">
<description><![CDATA[displayValue값]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="listWidth" deprecated="false" scope="instance" >
<description><![CDATA[listWidth 값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="w" type="int" deprecated="false" usage="required">
<description><![CDATA[width 값]]></description>
</parameter>
</parameters>
</method>
<method name="getListWidth" deprecated="false" scope="instance" >
<description><![CDATA[listWidth 값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[width 값]]></return-description>
</return-types>
</method>
<method name="setAddEmptyText" deprecated="false" scope="instance" >
<description><![CDATA[useEmptyText 값을 변경하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="useEmptyText" type="boolean" deprecated="false" usage="required">
<description><![CDATA[변경하고자 하는 값]]></description>
</parameter>
</parameters>
</method>
<method name="getAddEmptyText" deprecated="false" scope="instance" >
<description><![CDATA[useEmptyText 값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="setHeight" deprecated="false" scope="instance" >
<description><![CDATA[height 값을 셋팅하는 메소드
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="w" type="int" deprecated="false" usage="required">
<description><![CDATA[height 값]]></description>
</parameter>
</parameters>
</method>
<method name="getHeight" deprecated="false" scope="instance" >
<description><![CDATA[height 값을 리턴하는 메소드
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[height 값]]></return-description>
</return-types>
</method>
<method name="setEditable" deprecated="false" scope="instance" >
<description><![CDATA[editable 값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="isEditable" type="boolean" deprecated="false" usage="required">
<description><![CDATA[editable 셋팅 값]]></description>
</parameter>
</parameters>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[Tries to focus the element. Any exceptions are caught and ignored.
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="blur" deprecated="false" scope="instance" >
<description><![CDATA[Tries to blur the element. Any exceptions are caught and ignored.
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="isValid" deprecated="false" scope="instance" >
<description><![CDATA[객체를 유효여부를 확인하는 메소드
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getItemByRecordId" deprecated="false" scope="instance" >
<description><![CDATA[목록중에 h와 같은 html을 찾아 객체의 index를 리턴]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="html" type="String" deprecated="false" usage="required">
<description><![CDATA[비교할 display 내용]]></description>
</parameter>
</parameters>
</method>
<method name="isExpand" deprecated="false" scope="instance" >
<description><![CDATA[목록이 펼쳐저 있는지 여부]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="setDefaultValue" deprecated="false" scope="instance" >
<description><![CDATA[DataSet이 load후 기본으로 셋팅될 값을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="o" type="String" deprecated="false" usage="required">
<description><![CDATA[기본 코드 값]]></description>
</parameter>
</parameters>
</method>
<method name="setSelectedIndex" deprecated="false" scope="instance" >
<description><![CDATA[DataSet이 load후 기본으로 셋팅될 row값을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="idx" type="Int" deprecated="false" usage="required">
<description><![CDATA[기본 index값]]></description>
</parameter>
</parameters>
</method>
<method name="findRowIndex" deprecated="false" scope="instance" >
<description><![CDATA[dom에서 row index return]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="dom" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[dom]]></description>
</parameter>
<parameter name="y" type="int" deprecated="false" usage="required">
<description><![CDATA[pageY]]></description>
</parameter>
</parameters>
</method>
<method name="clearFilter" deprecated="false" scope="instance" >
<description><![CDATA[DataSet에 적용된 filter를 지운다.
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[현재 값을 리턴
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
</method>
<method name="getDisplayValue" deprecated="false" scope="instance" >
<description><![CDATA[현재 값을 리턴
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
</method>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[값을 변경한다.
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="o" type="String" deprecated="false" usage="required">
<description><![CDATA[반영할 값]]></description>
</parameter>
</parameters>
</method>
<method name="getDataSet" deprecated="false" scope="instance" >
<description><![CDATA[자동완성 기능을 사용할때 dataset을 리턴한다.]]></description>
<return-types>
<return-type type="Rui.data.DataSet" />
</return-types>
</method>
<method name="setDataSet" deprecated="false" scope="instance" >
<description><![CDATA[dataset을 변경한다.]]></description>
<return-types>
<return-type type="Rui.data.DataSet" />
</return-types>
<parameters>
<parameter name="newDataSet" type="Rui.data.LDataSet" deprecated="false" usage="required">
<description><![CDATA[신규 DataSet]]></description>
</parameter>
</parameters>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy하는 메소드
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LCombo" deprecated="false"  superclass="Rui.ui.form.LTextBox" >
<description>데이터셋과 맵핑되어 있는 Combo 편집기</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>데이터셋과 맵핑되어 있는 Combo 편집기</description>
<parameters>
<parameter name="id" type="HTMLElement | String" deprecated="false" usage="instance">
<description><![CDATA[The html element that represents the Element.]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LCombo.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="valueField" type="String" deprecated="false" scope="instance" >
<description>Combo의 목록 구현을 위해 실제의 값(value)과 화면에 출력되는 값(text)이 존재 하는데 그중 실제의 값에 해댕하는 필드(Field)명
 주의! 이 값을 잘못 지정할 경우 선택된 item의 값을 getValue 등의 메소드를 이용하여 가져올 수 없다.</description>
</property>
<property name="displayField" type="String" deprecated="false" scope="instance" >
<description>Combo의 목록 구현을 위해 실제의 값(value)과 화면에 출력되는 값(text)이 존재 하는데 그중 화면에 출력되는 값에 해댕하는 필드(Field)명</description>
</property>
<property name="emptyTextMessageCode" type="String" deprecated="false" scope="instance" >
<description>기본 emptyText 메시지의 다국어 코드값</description>
</property>
<property name="emptyText" type="String" deprecated="false" scope="instance" >
<description>값이 비였을때 출력할 text값</description>
</property>
<property name="useEmptyText" type="boolean" deprecated="false" scope="instance" >
<description>'선택하세요.' 항목 추가 여부
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="iconWidth" type="int" deprecated="false" scope="instance" >
<description>Picker Icon의 width
 기본값은 20이며 CSS에서 icon width를 변경할 경우 이 값도 동일하게 변경하여야 합니다.</description>
</property>
<property name="iconMarginLeft" type="int" deprecated="false" scope="instance" >
<description>input과 Picker Icon간의 간격</description>
</property>
<property name="forceSelection" type="boolean" deprecated="false" scope="instance" >
<description>데이터를 반드시 선택해야 하는 필수 여부</description>
</property>
<property name="selectedIndex" type="int" deprecated="false" scope="instance" >
<description>데이터 로딩시 combo의 row 위치
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/comboSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="editable" type="boolean" deprecated="false" scope="instance" >
<description>edit 가능 여부</description>
</property>
<property name="useDataSet" type="boolean" deprecated="false" scope="instance" >
<description>dataSet 사용 여부
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="rendererField" type="String" deprecated="false" scope="instance" >
<description>bind시에 현재 combo의 displayField와 맵핑된 dataSet에 반영할 출력 필드</description>
</property>
<property name="autoMapping" type="boolean" deprecated="false" scope="instance" >
<description>콤보의 보이는 값(displayField)을 그리드와 맵팽해주는 속성</description>
</property>
<property name="dataSetId" type="String" deprecated="false" scope="instance" >
<description>LCombo에서 사용하는 DataSet ID</description>
</property>
<property name="items" type="Object" deprecated="false" scope="instance" >
<description>LCombo에서 초기 생성시 기본 데이터를 로드할 데이터 (예: items: [ { code: 'Y' }, { code: 'N' } ]
 items는 code와 value로 valueField와 displayField와 맵핑할 수 있다.</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="setSelectedIndex" deprecated="false" scope="instance" >
<description><![CDATA[Index 위치를 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[위치를 변경할 값]]></description>
</parameter>
</parameters>
</method>
<method name="getDisplayValue" deprecated="false" scope="instance" >
<description><![CDATA[출력 객체의 값을 리턴]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[출력값]]></return-description>
</return-types>
</method>
<method name="getBindValue" deprecated="false" scope="instance" >
<description><![CDATA[현재 DataSet의 fieldName에 해당되는 값을 리턴]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[출력값]]></return-description>
</return-types>
<parameters>
<parameter name="fieldName" type="String" deprecated="false" usage="required">
<description><![CDATA[[optional] 필드이름]]></description>
</parameter>
</parameters>
</method>
<method name="repaint" deprecated="false" scope="instance" >
<description><![CDATA[DataSet의 내용으로 목록을 재생성하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[현재 값을 리턴]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
</method>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[값을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="o" type="String" deprecated="false" usage="required">
<description><![CDATA[반영할 값]]></description>
</parameter>
</parameters>
</method>
<method name="setDataSet" deprecated="false" scope="instance" >
<description><![CDATA[dataset을 변경한다.]]></description>
<return-types>
<return-type type="Rui.data.DataSet" />
</return-types>
<parameters>
<parameter name="newDataSet" type="Rui.data.LDataSet" deprecated="false" usage="required">
<description><![CDATA[신규 DataSet]]></description>
</parameter>
</parameters>
</method>
<method name="findValueByDisplayValue" deprecated="false" scope="instance" >
<description><![CDATA[dislayField에 해당되는 값으로 validField에 해당하는 값을 찾는다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="displayValue" type="Sring" deprecated="false" usage="required">
<description><![CDATA[찾고자하는 display값]]></description>
</parameter>
</parameters>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LCheckBox" deprecated="false"  superclass="Rui.ui.form.LField" >
<description>input태그의 type이 checkbox로 정의된 LCheckBox 객체 편집기</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>input태그의 type이 checkbox로 정의된 LCheckBox 객체 편집기</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LCheckBox.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="label" type="String" deprecated="false" scope="instance" >
<description>label로 출력할 값</description>
</property>
<property name="value" type="String" deprecated="false" scope="instance" >
<description>input태그의 value값</description>
</property>
<property name="checked" type="boolean" deprecated="false" scope="instance" >
<description>체크 상태 여부</description>
</property>
<property name="bindValues" type="Array" deprecated="false" scope="instance" >
<description>value checkbox 선택시 dataset에 bind할 값
 bindValues를 사용시에는 반드시 value값을 bindValues의 0번째 값으로 지정하여야 정상 동작합니다.</description>
</property>
<property name="bindFn" type="Function" deprecated="false" scope="instance" >
<description>checkbox 선택시 dataset에 bind할 값을 리턴하는 function</description>
</property>
<property name="gridFixed" type="boolean" deprecated="false" scope="instance" >
<description>그리드에 고정된 형태로의 출력 여부</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[객체를 focus한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="blur" deprecated="false" scope="instance" >
<description><![CDATA[객체를 blur한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[값을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="val" type="String|boolean" deprecated="false" usage="required">
<description><![CDATA[반영할 값]]></description>
</parameter>
</parameters>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[현재 값을 리턴한다]]></description>
<return-types>
<return-type type="boolean || String" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
</method>
<method name="isChecked" deprecated="false" scope="instance" >
<description><![CDATA[현재 선택됬는지 여부를 반환한다.]]></description>
<return-types>
<return-type type="boolean || String" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
</method>
<method name="setChecked" deprecated="false" scope="instance" >
<description><![CDATA[현재 상태 여부를 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="isChecked" type="boolean" deprecated="false" usage="required">
<description><![CDATA[체크 여부]]></description>
</parameter>
</parameters>
</method>
<method name="getRawValue" deprecated="false" scope="instance" >
<description><![CDATA[화면 출력객체의 실제 value값을 값을 리턴]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LCheckBoxGroup" deprecated="false"  superclass="Rui.ui.form.LField" >
<description>LCheckBox의 그룹으로 묶어서 생성하는 LCheckBoxGroup 편집기</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LCheckBox의 그룹으로 묶어서 생성하는 LCheckBoxGroup 편집기</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LCheckBoxGroup.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[객체를 focus한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[item중에 value 맞는 항목을 선택하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="val" type="String" deprecated="false" usage="required">
<description><![CDATA[item의 value 값]]></description>
</parameter>
</parameters>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[선택된 item의 값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="getItem" deprecated="false" scope="instance" >
<description><![CDATA[index에 해당되는 LCheckBox객체를 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.ui.form.LCheckBox" />
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[index 값]]></description>
</parameter>
</parameters>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LRadio" deprecated="false"  superclass="Rui.ui.form.LCheckBox" >
<description>radio를 생성하는 LRadio 편집기</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>radio를 생성하는 LRadio 편집기</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LRadio.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
</methods>
</class>
<class type="Rui.ui.form.LRadioGroup" deprecated="false"  superclass="Rui.ui.form.LCheckBoxGroup" >
<description>LRadio를 그룹으로 묶어서 생성하는 LRadioGroup 편집기</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LRadio를 그룹으로 묶어서 생성하는 LRadioGroup 편집기</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LRadioGroup.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="" type="boolean" deprecated="false" scope="instance" >
<description>//     *  그리드에 고정된 형태로의 출력 여부
//     *</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="clearAllChecked" deprecated="false" scope="instance" >
<description><![CDATA[Check를 모두 취소하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getCheckedItem" deprecated="false" scope="instance" >
<description><![CDATA[check된 radio 객체를 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.ui.form.LRadio" />
</return-types>
</method>
<method name="getCheckedIndex" deprecated="false" scope="instance" >
<description><![CDATA[선택된 index를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="setCheckedIndex" deprecated="false" scope="instance" >
<description><![CDATA[idx 선택할 index를 지정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[선택할 index]]></description>
</parameter>
</parameters>
</method>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[val 해당되는 radio를 선택하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="val" type="String" deprecated="false" usage="required">
<description><![CDATA[radio의 value값에 해당되는 값]]></description>
</parameter>
</parameters>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[선택된 raio의 값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="getRadioElByVal" deprecated="false" scope="instance" >
<description><![CDATA[값에 해당되는 radio를 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.ui.form.LRadio" />
</return-types>
</method>
<method name="before" deprecated="false" scope="instance" >
<description><![CDATA[이전 radio 객체를 선택한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="next" deprecated="false" scope="instance" >
<description><![CDATA[다음 radio 객체를 선택한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LTextArea" deprecated="false"  superclass="Rui.ui.form.LTextBox" >
<description>textarea를 생성하는 LTextArea 편집기</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>textarea를 생성하는 LTextArea 편집기</description>
<parameters>
<parameter name="id" type="HTMLElement | String" deprecated="false" usage="instance">
<description><![CDATA[The html element that represents the Element.]]></description>
</parameter>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LTextArea.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="width" type="String" deprecated="false" scope="instance" >
<description>목록창의 가로 길이</description>
</property>
</configs>
<properties>
</properties>
<methods>
</methods>
</class>
<class type="Rui.ui.form.LNumberBox" deprecated="false"  superclass="Rui.ui.form.LTextBox" >
<description>숫자만 입력 가능하게 하고 숫자에 대한 입력 제어를 지원하는 객체 편집기(dataSet와 연동시 fields의 값의 type은 반드시 'number' 타입으로 선언되어야 한다.)</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>숫자만 입력 가능하게 하고 숫자에 대한 입력 제어를 지원하는 객체 편집기(dataSet와 연동시 fields의 값의 type은 반드시 'number' 타입으로 선언되어야 한다.)</description>
<parameters>
<parameter name="id" type="HTMLElement | String" deprecated="false" usage="instance">
<description><![CDATA[The html element that represents the Element.]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LNumberBox.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="decimalPrecision" type="int" deprecated="false" scope="instance" >
<description>소수점 허용 자리수
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/numberboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="minValue" type="int" deprecated="false" scope="instance" >
<description>입력 가능 최소값 정의</description>
</property>
<property name="maxValue" type="int" deprecated="false" scope="instance" >
<description>입력 가능 최대값 정의</description>
</property>
<property name="thousandsSeparator" type="String" deprecated="false" scope="instance" >
<description>천단위 구분자 출력 여부</description>
</property>
<property name="decimalSeparator" type="String" deprecated="false" scope="instance" >
<description>수숫점 구분자 출력 여부</description>
</property>
<property name="filterKey" type="boolean" deprecated="false" scope="instance" >
<description>FilterKey 적용여부</description>
</property>
<property name="emptyValue" type="Object" deprecated="false" scope="instance" >
<description>값이 선택되어 있지 않을 경우 리턴시 값을 '' 공백 문자로 리턴할지 null로 리턴할지를 결정한다. 그리드의 데이터셋이 로딩후 연결된 콤보가 수정되지 않았는데도 수정된걸로 인식되면 null이나 undefined로 정의하여 맞춘다.</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="Int|Float" />
</return-types>
</method>
<method name="getDecimalValue" deprecated="false" scope="instance" >
<description><![CDATA[decimal값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="value" type="int" deprecated="false" usage="required">
<description><![CDATA[값]]></description>
</parameter>
</parameters>
</method>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[값을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="val" type="int" deprecated="false" usage="required">
<description><![CDATA[반영할 값]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.form.LDateBox" deprecated="false"  superclass="Rui.ui.form.LTextBox" >
<description>날짜를 입력하는 LDateBox 편집기</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>날짜를 입력하는 LDateBox 편집기</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LDateBox.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="dateType" type="String" deprecated="false" scope="instance" >
<description>입출력 값을 Date형으로 할것인지 String형으로 할 것인지 결정한다.
 기본 값은 Date형 이며, String형으로 사용 할 경우 입출력 값의 포맷은 valueFormat 속성값에 따른다.</description>
</property>
<property name="valueFormat" type="String" deprecated="false" scope="instance" >
<description>mask를 제외한 실제 값의 format을 지정하는 속성, form submit시 적용되는 format</description>
</property>
<property name="width" type="int" deprecated="false" scope="instance" >
<description>width</description>
</property>
<property name="iconWidth" type="int" deprecated="false" scope="instance" >
<description>Picker Icon의 width
 기본값은 20이며 CSS에서 icon width를 변경할 경우 이 값도 동일하게 변경하여야 합니다.</description>
</property>
<property name="iconMarginLeft" type="int" deprecated="false" scope="instance" >
<description>input과 Picker Icon간의 간격</description>
</property>
<property name="localeMask" type="boolean" deprecated="false" scope="instance" >
<description>다국어 mask 적용 여부 / 다국어 마스크가 적용되면 mask 속성은 무시된다.</description>
</property>
<property name="listPosition" type="String" deprecated="false" scope="instance" >
<description>calendar picker의 펼쳐짐 방향 (auto|up|down)</description>
</property>
<property name="picker" type="boolean" deprecated="false" scope="instance" >
<description>달력아이콘 표시 여부</description>
</property>
<property name="emptyValue" type="Object" deprecated="false" scope="instance" >
<description>값이 선택되어 있지 않을 경우 리턴시 값을 '' 공백 문자로 리턴할지 null로 리턴할지를 결정한다. 그리드의 데이터셋이 로딩후 연결된 콤보가 수정되지 않았는데도 수정된걸로 인식되면 null이나 undefined로 정의하여 맞춘다.</description>
</property>
<property name="calendarConfig" type="Object" deprecated="false" scope="instance" >
<description>calendar의 생성자 options을 추가한다.</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="selectCalendarDate" deprecated="false" scope="instance" >
<description><![CDATA[입력된 날짜 선택하기]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getLocaleFormat" deprecated="false" scope="instance" >
<description><![CDATA[현재 설정되어 있는 localeMask의 format을 리턴한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[날짜값을 반영한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[입력된 날짜 가져오기]]></description>
<return-types>
<return-type type="Date" />
</return-types>
</method>
<method name="hide" deprecated="false" scope="instance" >
<description><![CDATA[달력 숨기기]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LTimeBox" deprecated="false"  superclass="Rui.ui.form.LTextBox" >
<description>시간을 출력하는 LTimeBox 편집기</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>시간을 출력하는 LTimeBox 편집기</description>
<parameters>
<parameter name="id" type="HTMLElement | String" deprecated="false" usage="instance">
<description><![CDATA[The html element that represents the Element.]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LTimeBox.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="width" type="int" deprecated="false" scope="instance" >
<description>가로 길이</description>
</property>
<property name="iconWidth" type="int" deprecated="false" scope="instance" >
<description>Picker Icon의 width
 기본값은 9이며 CSS에서 icon width를 변경할 경우 이 값도 동일하게 변경하여야 합니다.</description>
</property>
<property name="iconMarginLeft" type="int" deprecated="false" scope="instance" >
<description>input과 Picker Icon간의 간격</description>
</property>
<property name="spinner" type="boolean" deprecated="false" scope="instance" >
<description>spin button을 사용할 지 여부</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[값을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="o" type="String" deprecated="false" usage="required">
<description><![CDATA[반영할 값]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LCellMerge" deprecated="false" >
<description>Grid관련 Table cell처리 유틸</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Grid관련 Table cell처리 유틸</description>
</constructor>
</constructors>
<methods>
</methods>
</class>
<class type="Rui.ui.grid.LColumn" deprecated="false" >
<description>그리드의 LColumn 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드의 LColumn 객체</description>
<parameters>
<parameter name="oConfigs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[생성자 Config 객체]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>columnModel에서 구분할 수 있는 column객체의 id</description>
</property>
<property name="label" type="String" deprecated="false" scope="instance" >
<description>그리드의 헤더 이름을 출력하는 속성</description>
</property>
<property name="field" type="String" deprecated="false" scope="instance" >
<description>dataSet과 연결할 field 명</description>
</property>
<property name="width" type="int" deprecated="false" scope="instance" >
<description>Column width</description>
</property>
<property name="minWidth" type="int" deprecated="false" scope="instance" >
<description>Column의 최소 width</description>
</property>
<property name="autoWidth" type="boolean" deprecated="false" scope="instance" >
<description>Column 자동 width</description>
</property>
<property name="maxAutoWidth" type="int" deprecated="false" scope="instance" >
<description>Column 자동 max width</description>
</property>
<property name="hidden" type="boolean" deprecated="false" scope="instance" >
<description>Column hidden 속성 (hidden 이벤트 참조)</description>
</property>
<property name="selected" type="boolean" deprecated="false" scope="instance" >
<description>Column selected 속성</description>
</property>
<property name="resizable" type="boolean" deprecated="false" scope="instance" >
<description>Column resizable 속성</description>
</property>
<property name="fixed" type="boolean" deprecated="false" scope="instance" >
<description>Column의 width를 조정할 수 있는 여부를 설정한다.</description>
</property>
<property name="sortable" type="boolean" deprecated="false" scope="instance" >
<description>Column 정렬 속성. sortable 이벤트 참조</description>
</property>
<property name="align" type="String" deprecated="false" scope="instance" >
<description>내용의 Column 가로 정렬 속성. 값종류: left, center, right</description>
</property>
<property name="draggable" type="boolean" deprecated="false" scope="instance" >
<description>Column draggable 속성. 그리드 헤더를 drag를 통해 컬럼 순서를 변경할 수 있는지를 설정한다.</description>
</property>
<property name="editable" type="boolean" deprecated="false" scope="instance" >
<description>Column 편집 가능 여부 속성</description>
</property>
<property name="editor" type="Object" deprecated="false" scope="instance" >
<description>Column의 편집기 설정</description>
</property>
<property name="renderer" type="Function" deprecated="false" scope="instance" >
<description>Column 의 디자인이나 값을 변경할 수 있는 function</description>
</property>
<property name="freeze" type="boolean" deprecated="false" scope="instance" >
<description>그리드의 틀고정 Column을 지정한다.</description>
</property>
<property name="renderRow" type="boolean" deprecated="false" scope="instance" >
<description>Column 의 row의 값이 바뀌면 무조건 render를 할지 여부</description>
</property>
<property name="expression" type="Function" deprecated="false" scope="instance" >
<description>field가 없는 Column이 소계가 들어갈 경우 각 row별 공식을 적용하는 function</description>
</property>
<property name="expressionType" type="String|function" deprecated="false" scope="instance" >
<description>expression 속성 적용시 소계의 각 row의 합계 처리 방식을 어떤걸로 처리 할 지 결정 (sum/avg/max/min/count)</description>
</property>
<property name="vMerge" type="boolean" deprecated="false" scope="instance" >
<description>그리드에서 Column을 vertical merge 한다.</description>
</property>
<property name="hMerge" type="boolean" deprecated="false" scope="instance" >
<description>그리드에서 Column을 horizontal merge 한다.</description>
</property>
<property name="mergeDateFormat" type="String" deprecated="false" scope="instance" >
<description>그리드에서 Date형 Column을 merge 할때 포멧을 정의한다. 포멧은 LDate api 참조</description>
</property>
<property name="renderExcel" type="boolean" deprecated="false" scope="instance" >
<description>출력할 컬럼인지 여부를 결정한다. false로 설졍되면 공백값으로 출력된다.</description>
</property>
<property name="summary" type="Object" deprecated="false" scope="instance" >
<description>소계 정보를 가지는 객체 예) summary: { ids: ['col1', 'col2' ], type: 'sum', label: '소계', labelId: 'col2' }
 type 종류 : sum/avg/max/min/count</description>
</property>
<property name="sumIds" type="Array" deprecated="false" scope="instance" >
<description>소계의 기준이 되는 필드 정보 배열</description>
</property>
<property name="sumType" type="String" deprecated="false" scope="instance" >
<description>소계를 할때 sum/avg/max/min/count 종류를 지정하는 속성</description>
</property>
<property name="sumText" type="String" deprecated="false" scope="instance" >
<description>소계의 앞에 출력될 문장 속성</description>
</property>
<property name="headerTool" type="boolean" deprecated="false" scope="instance" >
<description>headerTool을 출력할지 여부를 결정한다. (Plugin중에 LHeaderContextMenu를 사용할 경우 작동된다.)</description>
</property>
<property name="clipboard" type="boolean" deprecated="false" scope="instance" >
<description>copy시 clipboard에 넣을지 여부를 결정한다.</description>
</property>
<property name="clipboardVirtual" type="boolean" deprecated="false" scope="instance" >
<description>copy시 clipboard에 넣을때 renderer 값으로 처리할지 DataSet의 원값으로 처리할지 여부를 결정한다.</description>
</property>
<property name="clipboardRenderer" type="Function" deprecated="false" scope="instance" >
<description>copy시 clipboard에 넣을때 처리할 renderer를 지정한다.</description>
</property>
<property name="ignoreViewFocus" type="boolean" deprecated="false" scope="instance" >
<description>enter key 입력이나 cell click 시 컬럼을 이동할지 여부를 결정한다.
 컬럼에 a태그 링크로 팝업이 뜨는 경우에 팝업창이 뒤에서 떴다가 앞으로 올 경우 적용한다.</description>
</property>
<property name="tablet" type="Object" deprecated="false" scope="instance" >
<description>Tablet 출력시 옵션
 예)
 { width: '20%', align: 'center' }
 Tablet은 width가 %로도 적용이 가능하고 문자여야 한다.</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="hidden" deprecated="false">
<description><![CDATA[
hidden 기능이 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="hidden" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[hidden값]]></description>
</parameter>
</parameters>
</event>
<event name="sortable" deprecated="false">
<description><![CDATA[
sortable 기능이 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="sortable" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[sortable값]]></description>
</parameter>
</parameters>
</event>
<event name="label" deprecated="false">
<description><![CDATA[
label일 변경되면 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="label" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[sortable값]]></description>
</parameter>
</parameters>
</event>
<event name="columnResize" deprecated="false">
<description><![CDATA[
LGridPanel의 컬럼의 width길이를 변경하면 호출되는 columnResize 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="oldWidth" type="int" deprecated="false" usage="instance">
<description><![CDATA[pixel]]></description>
</parameter>
<parameter name="newWidth" type="int" deprecated="false" usage="instance">
<description><![CDATA[pixel]]></description>
</parameter>
</parameters>
</event>
<event name="editorChanged" deprecated="false">
<description><![CDATA[
editor가 바뀌면 호출되는 editorChanged 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="getId" deprecated="false" scope="instance" >
<description><![CDATA[객체의 Id값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="getGroupId" deprecated="false" scope="instance" >
<description><![CDATA[객체의 groupId값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="getField" deprecated="false" scope="instance" >
<description><![CDATA[객체의 field값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="getColumnModel" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column model값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.ui.grid.LColumnModel" />
</return-types>
</method>
<method name="getLabel" deprecated="false" scope="instance" >
<description><![CDATA[객체의 lable값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="setLabel" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column label값을 셋팅하는 메소드. label 이벤트가 발생한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="label" type="String" deprecated="false" usage="required">
<description><![CDATA[column lable값]]></description>
</parameter>
</parameters>
</method>
<method name="getWidth" deprecated="false" scope="instance" >
<description><![CDATA[객체의 width값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="setWidth" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column width값을 셋팅하는 메소드. columnResize 이벤트가 발생한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="width" type="int" deprecated="false" usage="required">
<description><![CDATA[width 값]]></description>
</parameter>
</parameters>
</method>
<method name="getMinWidth" deprecated="false" scope="instance" >
<description><![CDATA[객체의 minWidth값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="setMinWidth" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column minWidth값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="minWidth" type="int" deprecated="false" usage="required">
<description><![CDATA[minWidth값]]></description>
</parameter>
</parameters>
</method>
<method name="getMaxAutoWidth" deprecated="false" scope="instance" >
<description><![CDATA[객체의 width값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="setMaxAutoWidth" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column maxAutoWidth값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="maxAutoWidth" type="int" deprecated="false" usage="required">
<description><![CDATA[maxAutoWidth값]]></description>
</parameter>
</parameters>
</method>
<method name="isHidden" deprecated="false" scope="instance" >
<description><![CDATA[객체의 hidden값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="setHidden" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column hidden 값을 셋팅하는 메소드. hidden 이벤트가 발생한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="hidden" type="boolean" deprecated="false" usage="required">
<description><![CDATA[hidden값]]></description>
</parameter>
</parameters>
</method>
<method name="isSelected" deprecated="false" scope="instance" >
<description><![CDATA[객체의 selected값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="setSelected" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column selected 값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="selected" type="boolean" deprecated="false" usage="required">
<description><![CDATA[selected 값]]></description>
</parameter>
</parameters>
</method>
<method name="isResizable" deprecated="false" scope="instance" >
<description><![CDATA[객체의 resizable값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="setResizable" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column resizable 값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="resizable" type="boolean" deprecated="false" usage="required">
<description><![CDATA[resizable 값]]></description>
</parameter>
</parameters>
</method>
<method name="isFixed" deprecated="false" scope="instance" >
<description><![CDATA[객체의 fixed값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="setFixed" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column fixed 값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="fixed" type="boolean" deprecated="false" usage="required">
<description><![CDATA[fixed 값]]></description>
</parameter>
</parameters>
</method>
<method name="isSortable" deprecated="false" scope="instance" >
<description><![CDATA[객체의 sortable값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="setSortable" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column sortable 값을 셋팅하는 메소드. sortable 이벤트가 발생한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="sortable" type="boolean" deprecated="false" usage="required">
<description><![CDATA[sortable 값]]></description>
</parameter>
</parameters>
</method>
<method name="isEditable" deprecated="false" scope="instance" >
<description><![CDATA[객체의 editable값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="setEditable" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column editable 값을 셋팅하는 메소드(사용안함)]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="editable" type="boolean" deprecated="false" usage="required">
<description><![CDATA[editable 값]]></description>
</parameter>
</parameters>
</method>
<method name="getEditor" deprecated="false" scope="instance" >
<description><![CDATA[객체의 editor값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
<method name="setEditor" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column editor 값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="editor" type="Object" deprecated="false" usage="required">
<description><![CDATA[editor 값]]></description>
</parameter>
</parameters>
</method>
<method name="isDraggable" deprecated="false" scope="instance" >
<description><![CDATA[객체의 draggable값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="setDraggable" deprecated="false" scope="instance" >
<description><![CDATA[객체의 column draggable 값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="draggable" type="boolean" deprecated="false" usage="required">
<description><![CDATA[draggable 값]]></description>
</parameter>
</parameters>
</method>
<method name="getColumnType" deprecated="false" scope="instance" >
<description><![CDATA[columnType 가져오기]]></description>
<return-types>
<return-type type="string" />
</return-types>
</method>
<method name="isDataColumn" deprecated="false" scope="instance" >
<description><![CDATA[columnType이 data인지 여부]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="setSummary" deprecated="false" scope="instance" >
<description><![CDATA[summary 정보를 변경한다. 예: { sumIds: ['company', 'date'], sumType: 'sum', sumText: '소계' }]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="summary" type="Object" deprecated="false" usage="required">
<description><![CDATA[summary 변경 객체 정보]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LTriggerColumn" deprecated="false"  superclass="Rui.ui.grid.LColumn" >
<description>LTriggerColumn</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LTriggerColumn</description>
<parameters>
<parameter name="oConfigs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Object literal of definitions.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="selected" type="boolean" deprecated="false" scope="instance" >
<description>selected 속성</description>
</property>
<property name="sortable" type="boolean" deprecated="false" scope="instance" >
<description>sortable 속성</description>
</property>
<property name="editor" type="Object" deprecated="false" scope="instance" >
<description>editor 속성</description>
</property>
</configs>
<properties>
</properties>
<methods>
</methods>
</class>
<class type="Rui.ui.grid.LNumberColumn" deprecated="false"  superclass="Rui.ui.grid.LTriggerColumn" >
<description>LNumberColumn</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LNumberColumn</description>
<parameters>
<parameter name="oConfigs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Object literal of definitions.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>Column id 속성</description>
</property>
<property name="mappingField" type="String" deprecated="false" scope="instance" >
<description>Column과 mapping field 속성</description>
</property>
<property name="label" type="String" deprecated="false" scope="instance" >
<description>Column의 label 속성</description>
</property>
<property name="align" type="String" deprecated="false" scope="instance" >
<description>Column의 align 속성</description>
</property>
<property name="width" type="int" deprecated="false" scope="instance" >
<description>Column의 width 속성</description>
</property>
<property name="resizable" type="boolean" deprecated="false" scope="instance" >
<description>resizable 속성</description>
</property>
</configs>
<properties>
</properties>
<methods>
</methods>
</class>
<class type="Rui.ui.grid.LStateColumn" deprecated="false"  superclass="Rui.ui.grid.LTriggerColumn" >
<description>LStateColumn</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LStateColumn</description>
<parameters>
<parameter name="oConfigs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[config 객체]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>Column id 속성</description>
</property>
<property name="label" type="String" deprecated="false" scope="instance" >
<description>Column의 label 속성</description>
</property>
<property name="align" type="String" deprecated="false" scope="instance" >
<description>Column의 align 속성</description>
</property>
<property name="width" type="int" deprecated="false" scope="instance" >
<description>Column의 width 속성</description>
</property>
<property name="clipboard" type="boolean" deprecated="false" scope="instance" >
<description>copy시 clipboard에 넣을지 여부를 결정한다.</description>
</property>
</configs>
<properties>
</properties>
<methods>
</methods>
</class>
<class type="Rui.ui.grid.LSelectionColumn" deprecated="false"  superclass="Rui.ui.grid.LTriggerColumn" >
<description>그리드의 row를 선택할 수 있게 하는 LColumn. 체크가 되면 LDataSet의 marked 이벤트가 발생한다. marked 이벤트 참조</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드의 row를 선택할 수 있게 하는 LColumn. 체크가 되면 LDataSet의 marked 이벤트가 발생한다. marked 이벤트 참조</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Object literal of definitions.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>Column id 속성</description>
</property>
<property name="selectionType" type="String" deprecated="false" scope="instance" >
<description>checkbox형식으로 출력할지 radio형식으로 출력할지 결정하는 속성</description>
</property>
<property name="label" type="String" deprecated="false" scope="instance" >
<description>Column의 label 속성</description>
</property>
<property name="align" type="String" deprecated="false" scope="instance" >
<description>Column의 align 속성</description>
</property>
<property name="width" type="int" deprecated="false" scope="instance" >
<description>Column의 width 속성</description>
</property>
<property name="syncRow" type="boolean" deprecated="false" scope="instance" >
<description>selectionType이 radio일 경우 dataSet의 row 위치에 자동으로 선택되하게 하는 기능</description>
</property>
<property name="clipboard" type="boolean" deprecated="false" scope="instance" >
<description>copy시 clipboard에 넣을지 여부를 결정한다.</description>
</property>
</configs>
<properties>
</properties>
<methods>
</methods>
</class>
<class type="Rui.ui.grid.LColumnModel" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>그리드에 출력할 LColumn들의 집합을 관리하는 객체로 LColumn의 전체 제어에 해당되는 기능을 가지고 있다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드에 출력할 LColumn들의 집합을 관리하는 객체로 LColumn의 전체 제어에 해당되는 기능을 가지고 있다.</description>
<parameters>
<parameter name="oConfigs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[생성자 config 객체]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="columns" type="Array" deprecated="false" scope="instance" >
<description>컬럼 정보를 받는 배열</description>
</property>
<property name="defaultWidth" type="int" deprecated="false" scope="instance" >
<description>LColumn default width 속성</description>
</property>
<property name="defaultSortable" type="boolean" deprecated="false" scope="instance" >
<description>LColumn default sortable 속성</description>
</property>
<property name="defaultEditable" type="boolean" deprecated="false" scope="instance" >
<description>LColumn default editable 속성</description>
</property>
<property name="autoWidthMargin" type="Int" deprecated="false" scope="instance" >
<description>autoWidth를 적용시 우측 마진값으로 값에 따라서 스크롤이 생기지 않게 한다.</description>
</property>
<property name="groupMerge" type="boolean" deprecated="false" scope="instance" >
<description>LColumn의 merge시 앞의 기준으로 merge가 되게 묶는 기능</description>
</property>
<property name="defaultDraggable" type="boolean" deprecated="false" scope="instance" >
<description>LColumn의 draggable 속성을 모두 default로 설정한다.</description>
</property>
<property name="freezeColumnId" type="String" deprecated="false" scope="instance" >
<description>틀고정을 할 LColumn의 id</description>
</property>
<property name="autoWidth" type="boolean" deprecated="false" scope="instance" >
<description>LTriggerColumn을 제외한 모든 컬럼에 autoWidth를 적용한다. autoWidth가 적용되면 세로 스크롤러는 무조건 출력됩니다.
 autoWidth를 적용하였을때는 기본적으로 그리드의 width보다 적을경우에만 반영한다.
 무조건 autoWidth로 계산을 처리해서 반영하려고 한다면 adjustAutoWidth 속성을 true로 적용한다.</description>
</property>
<property name="adjustAutoWidth" type="boolean" deprecated="false" scope="instance" >
<description>autoWidth를 적용할 경우 그리드의 사이즈와 상관없이 무조건 autoWidth를 적용할지 여부를 결정한다.</description>
</property>
<property name="skipTags" type="boolean" deprecated="false" scope="instance" >
<description>엑셀 다운로드나 클립보드 복사시 태그를 제외하게 하는 속성을 설정한다. (성능이 높여야 하는 경우 이 속성을 false로 적용하고 각 컬럼별로 renderer에서 구현한다.</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="columnMove" deprecated="false">
<description><![CDATA[
컬럼의 순서가 바뀌면 호출되면 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this]]></description>
</parameter>
</parameters>
</event>
<event name="columnsChanged" deprecated="false">
<description><![CDATA[
컬럼 정보가 바뀌면 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this]]></description>
</parameter>
</parameters>
</event>
<event name="cellConfigChanged" deprecated="false">
<description><![CDATA[
getRenderCell 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="css" type="Object" deprecated="false" usage="instance">
<description><![CDATA[css객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
<parameter name="rowId" type="String" deprecated="false" usage="instance">
<description><![CDATA[row id]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col값]]></description>
</parameter>
<parameter name="colId" type="String" deprecated="false" usage="instance">
<description><![CDATA[col id]]></description>
</parameter>
<parameter name="key" type="String" deprecated="false" usage="instance">
<description><![CDATA[config key]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="instance">
<description><![CDATA[config value]]></description>
</parameter>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="instance">
<description><![CDATA[record 객체]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="getColumnById" deprecated="false" scope="instance" >
<description><![CDATA[id에 해당되는 LColumn을 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.ui.grid.LColumn" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[column의 id값]]></description>
</parameter>
</parameters>
</method>
<method name="getColumnAt" deprecated="false" scope="instance" >
<description><![CDATA[idx 위치에 해당되는 LColumn을 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.ui.grid.LColumn" />
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[위치값]]></description>
</parameter>
<parameter name="isVisibleOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 보이는 컬럼만 선택 여부]]></description>
</parameter>
</parameters>
</method>
<method name="isHidden" deprecated="false" scope="instance" >
<description><![CDATA[idx에 해당되는 LColumn이 hidden인지를 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="col" type="int" deprecated="false" usage="required">
<description><![CDATA[위치값]]></description>
</parameter>
</parameters>
</method>
<method name="getIndexById" deprecated="false" scope="instance" >
<description><![CDATA[id에 해당되는 LColumn의 index를 리턴하는 메소드]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[id명]]></description>
</parameter>
<parameter name="isVisibleOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 보이는 컬럼]]></description>
</parameter>
</parameters>
</method>
<method name="getIndex" deprecated="false" scope="instance" >
<description><![CDATA[LColumn의 index를 리턴하는 메소드]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="column" type="Rui.ui.grid.LColumn" deprecated="false" usage="required">
<description><![CDATA[column 객체]]></description>
</parameter>
<parameter name="isVisibleOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 보이는 컬럼 기준 index]]></description>
</parameter>
</parameters>
</method>
<method name="getColumnByField" deprecated="false" scope="instance" >
<description><![CDATA[field에 해당되는 LColumn을 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.ui.grid.LColumn" />
</return-types>
<parameters>
<parameter name="field" type="String" deprecated="false" usage="required">
<description><![CDATA[field명]]></description>
</parameter>
</parameters>
</method>
<method name="moveColumn" deprecated="false" scope="instance" >
<description><![CDATA[oldIndex의 LColumn을 newIndex위치로 이동하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="oldIndex" type="int" deprecated="false" usage="required">
<description><![CDATA[이동할 LColumn의 위치]]></description>
</parameter>
<parameter name="newIndex" type="int" deprecated="false" usage="required">
<description><![CDATA[이동될 LColumn의 위치]]></description>
</parameter>
</parameters>
</method>
<method name="getTotalWidth" deprecated="false" scope="instance" >
<description><![CDATA[전체 column의 width를 리턴하는 메소드]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="isVisibleOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 보이는 컬럼만 선택 여부]]></description>
</parameter>
</parameters>
</method>
<method name="getColumnCount" deprecated="false" scope="instance" >
<description><![CDATA[전체 LColumn의 갯수를 리턴하는 메소드]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="isVisibleOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 보이는 컬럼만 선택 여부]]></description>
</parameter>
</parameters>
</method>
<method name="setCellConfig" deprecated="false" scope="instance" >
<description><![CDATA[cell config 정보를 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치]]></description>
</parameter>
<parameter name="col" type="int|String" deprecated="false" usage="required">
<description><![CDATA[col 위치]]></description>
</parameter>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[config 키]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[config 값]]></description>
</parameter>
</parameters>
</method>
<method name="getCellConfig" deprecated="false" scope="instance" >
<description><![CDATA[cell config 정보를 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치]]></description>
</parameter>
<parameter name="col" type="int|String" deprecated="false" usage="required">
<description><![CDATA[col 위치]]></description>
</parameter>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[config 키]]></description>
</parameter>
</parameters>
</method>
<method name="clearCellConfig" deprecated="false" scope="instance" >
<description><![CDATA[cell config 정보를 초기화한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="hasFreezeColumn" deprecated="false" scope="instance" >
<description><![CDATA[freeze column 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isMultiheader" deprecated="false" scope="instance" >
<description><![CDATA[multiheader여부]]></description>
<return-types>
<return-type type="Boolean" />
</return-types>
</method>
<method name="setColumns" deprecated="false" scope="instance" >
<description><![CDATA[컬럼들 모두 재정의 한다. (그리드의 전체 랜더링이 발생하므로 성능 저하 발생)]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="columns" type="Object" deprecated="false" usage="required">
<description><![CDATA[변경할 컬럼 config 정보]]></description>
</parameter>
</parameters>
</method>
<method name="isMerged" deprecated="false" scope="instance" >
<description><![CDATA[merge 되었는지 여부]]></description>
<return-types>
<return-type type="Boolean" />
</return-types>
</method>
<method name="setFreezeColumnId" deprecated="false" scope="instance" >
<description><![CDATA[틀고정 컬럼을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[LColumn의 id]]></description>
</parameter>
</parameters>
</method>
<method name="updateColumnsAutoWidth" deprecated="false" scope="instance" >
<description><![CDATA[autoWidth가 적용된 컬럼을 maxWidth에 맞춰서 자동으로 width를 변경한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="maxWidth" type="int" deprecated="false" usage="required">
<description><![CDATA[전체 컬럼에 적용할 width]]></description>
</parameter>
</parameters>
</method>
<method name="isSummary" deprecated="false" scope="instance" >
<description><![CDATA[summary 컬럼이 존재하는지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isAutoWidth" deprecated="false" scope="instance" >
<description><![CDATA[autoWidth가 적용된 LColumn이 있으면 true를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LRowModel" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>그리드에 출력할 row들의 집합을 관리하는 객체.
 row에 대한 랜더링 및 이벤트 제어용.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드에 출력할 row들의 집합을 관리하는 객체.
 row에 대한 랜더링 및 이벤트 제어용.</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[생성자 config 객체]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="renderer" type="Function" deprecated="false" scope="instance" >
<description>row renderer시 수행되는 메소드</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="rowConfigChanged" deprecated="false">
<description><![CDATA[
getRenderRow 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
<parameter name="rowId" type="String" deprecated="false" usage="instance">
<description><![CDATA[rowId값]]></description>
</parameter>
<parameter name="key" type="String" deprecated="false" usage="instance">
<description><![CDATA[key값]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="instance">
<description><![CDATA[value값]]></description>
</parameter>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="instance">
<description><![CDATA[record 객체]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="setRowConfig" deprecated="false" scope="instance" >
<description><![CDATA[row config 정보를 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치]]></description>
</parameter>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[config 키]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[config 값]]></description>
</parameter>
</parameters>
</method>
<method name="getRowConfig" deprecated="false" scope="instance" >
<description><![CDATA[row config 정보를 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치]]></description>
</parameter>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[config 키]]></description>
</parameter>
</parameters>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LColumnResizer" deprecated="false"  superclass="Rui.dd.LDDProxy" >
<description>LColumnResizer</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LColumnResizer</description>
<parameters>
<parameter name="oConfigs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Object literal of definitions.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.ui.grid.LColumnDD" deprecated="false"  superclass="Rui.dd.LDDProxy" >
<description>LColumnDD column을 drag drop으로 이동을 위한 class</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LColumnDD column을 drag drop으로 이동을 위한 class</description>
<parameters>
<parameter name="grid" type="Rui.ui.grid.LGridView" deprecated="false" usage="instance">
<description><![CDATA[column dd를 적용할 gridview]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
</methods>
</class>
<class type="Rui.ui.grid.LBufferGridView" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>LBufferGridView 성능을 위해 보이는 부분만 rendering하는 grid</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LBufferGridView 성능을 위해 보이는 부분만 rendering하는 grid</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LBufferGridView.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="columnModel" type="Rui.ui.grid.LColumnModel" deprecated="false" scope="instance" >
<description>LColumnModel 객체</description>
</property>
<property name="dataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>DataSet 객체</description>
</property>
<property name="syncDataSet" type="boolean" deprecated="false" scope="instance" >
<description>DataSet과 sync 여부 객체</description>
</property>
<property name="loadingMessage" type="String" deprecated="false" scope="instance" >
<description>load message</description>
</property>
<property name="emptyDataMessageCode" type="String" deprecated="false" scope="instance" >
<description>empty data message의 메시지코드</description>
</property>
<property name="scrollerConfig" type="Object" deprecated="false" scope="instance" >
<description>scroller 설정값 { scrollbar: 'y' }</description>
</property>
<property name="borderWidth" type="int" deprecated="false" scope="instance" >
<description>boder의 width 값
 나머지 모두는 cell div에 border를 할당했지만, right border는 td에 할당 =&amp;gt; 내부 div에 할당시 padding에 의해 우측 border가 td범위 넘어서서 출력되지 않음</description>
</property>
<property name="resizeHandleWidth" type="int" deprecated="false" scope="instance" >
<description>resize handle width</description>
</property>
<property name="rowHoverStyle" type="boolean" deprecated="false" scope="instance" >
<description>grid body영역의 row에 mouseover됬을 경우 L-grid-row-over class를 추가 할 지 여부</description>
</property>
<property name="minColumnWidth" type="int" deprecated="false" scope="instance" >
<description>minimum column width</description>
</property>
<property name="skipRowCellEvent" type="boolean" deprecated="false" scope="instance" >
<description>그리드가 render시 row와 cell 관련 render event들를 실행할지 여부
 (row, cell관련 render이벤트를 사용시 성능 저하가 발생하므로 대량건 처리시는 반드시 true로 설정하여 이 기능을 skip해야함)</description>
</property>
<property name="renderTime" type="int" deprecated="false" scope="instance" >
<description>그리드를 몇초간격으로 랜더링할지 시간(밀리세컨드)</description>
</property>
<property name="renderDataTime" type="int" deprecated="false" scope="instance" >
<description>그리드의 데이터를 몇초간격으로 랜더링할지 시간(밀리세컨드)</description>
</property>
<property name="rowRenderingLimit" type="int" deprecated="false" scope="instance" >
<description>행단위 렌더링 맥스값, 한번 스크롤에 limit이상 scroll되면 page단위 렌더링이 일어나며,
 scrollTimetout값에 따라서 page rendering이 skip될 수 있다.</description>
</property>
<property name="scrollTimeout" type="int" deprecated="false" scope="instance" >
<description>page rendering이 지정한 시간내에 두번 이상 발생하면 skip된다.</description>
</property>
<property name="autoMappingSortable" type="boolean" deprecated="false" scope="instance" >
<description>LColumn의 editor에 해당되는 객체가 autoMapping을 지원하는 rendererField가 있을 경우 rendererField 기준으로 정렬이 가능하게 한다.</description>
</property>
<property name="irregularScroll" type="boolean" deprecated="false" scope="instance" >
<description>불규칙적인 row height을 감안한 스크롤러를 사용할지 여부.
 이 값을 true로 해야 br, 소계등 기능 사용시 전체 row를 바르게 스크롤할 수 있다.
 또한 이 값을 true로 지정할 경우 성능 저하가 발생될 수 있으므로 반드시 필요한 경우에만 사용하여야 한다.
 기본 그리드뷰어인 LBufferGridView에서 irregularScroll 기능을 사용하지 않고, 몇가지 조건에 맞다면 LGridView 사용하는것이 좋다.
 이는 irregularScroll의 경우 스크롤 제어를 위한 스크립트 처리 비용이 높아 성능 저하가 발생하며, 부자연스러운 스크롤 동작이 발생할수 있는데 반해
 LGridView의 경우 브라우저가 생성해내는 스크롤을 직접 사용하므로 빠르고 매끄럽기 때문이다.
 다만 LGridView의 경우 대량건의 데이터 처리에 적합하지 않고, 소계, 합계 등 일부 기능을 지원 하지 않는다.</description>
</property>
<property name="irregularField" type="string" deprecated="false" scope="instance" >
<description>불규칙적인 row height을 감안한 스크롤러를 사용할때 불규칙적인 row의 원인 field를 지정하여 정확도를 높인다.
 BR 태그등이 사용되는 필드id를 지정한다.</description>
</property>
<property name="customSortable" type="boolean" deprecated="false" scope="instance" >
<description>콤포넌트 내부적으로 소팅을 하는게 아닌 개발자가 이벤트로 직접 DataSet의 sort를 처리할 수 있게 한다.</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="renderBody" deprecated="false">
<description><![CDATA[
그리드의 데이터부분이 다시 렌더링되면 호출되는 이벤트
]]></description>
</event>
<event name="syncDataSet" deprecated="false">
<description><![CDATA[
setSyncDataSet 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="isSync" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[sync 여부]]></description>
</parameter>
</parameters>
</event>
<event name="rowRendered" deprecated="false">
<description><![CDATA[
getRenderRow 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="css" type="Object" deprecated="false" usage="instance">
<description><![CDATA[css객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="instance">
<description><![CDATA[record 객체]]></description>
</parameter>
</parameters>
</event>
<event name="cellRendered" deprecated="false">
<description><![CDATA[
getRenderCell 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="css" type="Object" deprecated="false" usage="instance">
<description><![CDATA[css객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col값]]></description>
</parameter>
<parameter name="record" type="Rui.data.LRecord" deprecated="false" usage="instance">
<description><![CDATA[record 객체]]></description>
</parameter>
</parameters>
</event>
<event name="sortField" deprecated="false">
<description><![CDATA[
dataSet의 sortField 메소드가 호출되거나 그리드에서 정렬버튼을 클릭할 경우 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this 객체]]></description>
</parameter>
<parameter name="sortField" type="String" deprecated="false" usage="instance">
<description><![CDATA[sortField값]]></description>
</parameter>
<parameter name="sortDir" type="String" deprecated="false" usage="instance">
<description><![CDATA[sortDir값]]></description>
</parameter>
</parameters>
</event>
<event name="bodyScroll" deprecated="false">
<description><![CDATA[
panel이 bodyScroll 되면 호출되는 이벤트
]]></description>
</event>
</events>
<methods>
<method name="getDataSet" deprecated="false" scope="instance" >
<description><![CDATA[dataset return]]></description>
<return-types>
<return-type type="Rui.data.LDataSet" />
</return-types>
</method>
<method name="getScroller" deprecated="false" scope="instance" >
<description><![CDATA[scroller 객체를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.ui.LScroller" />
</return-types>
</method>
<method name="findRow" deprecated="false" scope="instance" >
<description><![CDATA[제공된 dom을 가지는 row를 찾아 그 index를 반환한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="dom" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[dom]]></description>
</parameter>
<parameter name="y" type="int" deprecated="false" usage="required">
<description><![CDATA[pageY]]></description>
</parameter>
<parameter name="isMerge" type="boolean" deprecated="false" usage="required">
<description><![CDATA[merge값 적용 여부에 대한 row 여부 (default true)]]></description>
</parameter>
</parameters>
</method>
<method name="getLastSortInfo" deprecated="false" scope="instance" >
<description><![CDATA[마지막 sort 정보]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[object.field object.dir]]></return-description>
</return-types>
</method>
<method name="clearFieldSortClass" deprecated="false" scope="instance" >
<description><![CDATA[그리드 header에 sort정보들 삭제]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getCellAlt" deprecated="false" scope="instance" >
<description><![CDATA[cell에 할당된 Alt값을 리턴한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row index]]></description>
</parameter>
<parameter name="cell" type="int" deprecated="false" usage="required">
<description><![CDATA[cell index]]></description>
</parameter>
</parameters>
</method>
<method name="addCellAlt" deprecated="false" scope="instance" >
<description><![CDATA[cell에 Alt값을 할당]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row index]]></description>
</parameter>
<parameter name="cell" type="int" deprecated="false" usage="required">
<description><![CDATA[cell index]]></description>
</parameter>
<parameter name="title" type="string" deprecated="false" usage="required">
<description><![CDATA[cell Alt]]></description>
</parameter>
</parameters>
</method>
<method name="removeCellAlt" deprecated="false" scope="instance" >
<description><![CDATA[cell에 Alt값을 삭제]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row index]]></description>
</parameter>
<parameter name="cell" type="int" deprecated="false" usage="required">
<description><![CDATA[cell index]]></description>
</parameter>
</parameters>
</method>
<method name="getColumnModel" deprecated="false" scope="instance" >
<description><![CDATA[grid column model return]]></description>
<return-types>
<return-type type="Rui.ui.grid.LColumnModel" />
</return-types>
</method>
<method name="getBorderWidth" deprecated="false" scope="instance" >
<description><![CDATA[grid border width return]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[객체를 focus한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="blur" deprecated="false" scope="instance" >
<description><![CDATA[객체를 blur한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="updateColumnFit" deprecated="false" scope="instance" >
<description><![CDATA[column의 width를 보이는 가장 긴 데이터를 기준으로 width를 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="colIdx" type="int" deprecated="false" usage="required">
<description><![CDATA[column idex]]></description>
</parameter>
</parameters>
</method>
<method name="updateColumnsAutoWidth" deprecated="false" scope="instance" >
<description><![CDATA[column의 width를 그리드의 width 맞게 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="maxWidth" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] 늘리고자 하는 최대값]]></description>
</parameter>
</parameters>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LSelectionModel" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>그리드에서 cell을 선택시 흐름 제어를 하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드에서 cell을 선택시 흐름 제어를 하는 객체</description>
</constructor>
</constructors>
<configs>
<property name="locked" type="boolean" deprecated="false" scope="instance" >
<description>locked 속성</description>
</property>
<property name="marked" type="boolean" deprecated="false" scope="instance" >
<description>row 선택시 자동 mark 를 처리할지 여부</description>
</property>
<property name="pageUpDownRow" type="int" deprecated="false" scope="instance" >
<description>page up/down시 row 이동 값 속성</description>
</property>
<property name="tabToMove" type="boolean" deprecated="false" scope="instance" >
<description>Tab키 입력시 이동여부</description>
</property>
<property name="enterToMove" type="boolean" deprecated="false" scope="instance" >
<description>editor상태에서 enter를 치면 다음 editor cell로 이동할지 여부 속성</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="selectRow" deprecated="false">
<description><![CDATA[
그리드에서 row 선택시 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
</parameters>
</event>
<event name="deselectRow" deprecated="false">
<description><![CDATA[
그리드에서 row 선택 취소시 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
</parameters>
</event>
<event name="selectCell" deprecated="false">
<description><![CDATA[
그리드에서 cell 선택시 발생하는 이벤트 (이 이벤트는 멀티 선택이 가능하다)
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row 값]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col값]]></description>
</parameter>
</parameters>
</event>
<event name="deselectCell" deprecated="false">
<description><![CDATA[
그리드에서 cell 선택 취소시 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row 값]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col값]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="lock" deprecated="false" scope="instance" >
<description><![CDATA[그리드의 row나 cell의 선택을 안되게 막는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="unlock" deprecated="false" scope="instance" >
<description><![CDATA[그리드의 row나 cell의 선택을 안되게 막혀 있던 기능을 다시 선택되게 하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="isLocked" deprecated="false" scope="instance" >
<description><![CDATA[그리드의 모든 row나 cell이 선택이 가능한지 여부를 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="selectCell" deprecated="false" scope="instance" >
<description><![CDATA[cell 위치로 이동시키는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[이동 위치]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="required">
<description><![CDATA[이동 위치]]></description>
</parameter>
</parameters>
</method>
<method name="clearSelection" deprecated="false" scope="instance" >
<description><![CDATA[selection된 값들을 모두 clear 한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getRow" deprecated="false" scope="instance" >
<description><![CDATA[row의 위치를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getSelection" deprecated="false" scope="instance" >
<description><![CDATA[선택한 cell 정보를 리턴합니다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
<method name="getCol" deprecated="false" scope="instance" >
<description><![CDATA[선택한 cell Index를 리턴합니다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getColId" deprecated="false" scope="instance" >
<description><![CDATA[현재 선택한 col의 id를 리턴합니다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LGridPanel" deprecated="false"  superclass="Rui.ui.LPanel" >
<description>그리드의 편집기능을 탑재하는 Panel, 이 외에</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드의 편집기능을 탑재하는 Panel, 이 외에</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LGridPanel.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="columnModel" type="Rui.ui.grid.LColumnModel" deprecated="false" scope="instance" >
<description>columnModel 객체</description>
</property>
<property name="rowModel" type="Rui.ui.grid.LRowModel" deprecated="false" scope="instance" >
<description>rowModel 객체</description>
</property>
<property name="borderWidth" type="int" deprecated="false" scope="instance" >
<description>LGridPanel의 border width값</description>
</property>
<property name="selectionModel" type="Rui.ui.grid.LSelectionModel" deprecated="false" scope="instance" >
<description>그리드의 row나 cell 선택시 기능을 처리하는 객체</description>
</property>
<property name="autoWidth" type="boolean" deprecated="false" scope="instance" >
<description>그리드의 width를 자동으로 부모 사이즈에 맞춰주는 기능.
 autoWidth를 적용하여도 width의 기본값은 반드시 적용한다.</description>
</property>
<property name="autoHeight" type="boolean" deprecated="false" scope="instance" >
<description>그리드의 height를 자동으로 부모 사이즈에 맞춰주는 기능. height를 맞추기 위해서는 그리드 부모 dom이 100%가 적용되어야 한다. 부모가 늘어나지 않으면 적용되지 않음.
 autoHeight를 적용하여도 height의 기본값은 반드시 적용한다.</description>
</property>
<property name="autoHeightParentId" type="String" deprecated="false" scope="instance" >
<description>autoHeight 적용시 기준이 될 부모 HTML 의 id를 적용한다. parent dom이 반드시 보여야 한다. 보아지 않을 경우 height는 0이 될 수 있다.</description>
</property>
<property name="clickToEdit" type="boolean" deprecated="false" scope="instance" >
<description>click시 edit상태로 전환할지 여부 속성</description>
</property>
<property name="autoToEdit" type="boolean" deprecated="false" scope="instance" >
<description>cell focus시 자동 edit상태로 전환할지 여부 속성
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/grid/gridpanelEditSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="enterToEdit" type="boolean" deprecated="false" scope="instance" >
<description>enter시 edit상태로 전환할지 여부 속성</description>
</property>
<property name="editable" type="boolean" deprecated="false" scope="instance" >
<description>편집기가 수행할 수 있는지 여부를 정하는 속성</description>
</property>
<property name="tooltip" type="Rui.ui.grid.LTooltip" deprecated="false" scope="instance" >
<description>그리드에 툴팁을 표시하기 위해 사용할 툴팁 객체</description>
</property>
<property name="stopEventBubble" type="boolean" deprecated="false" scope="instance" >
<description>그리드의 이벤트를 bubble 처리를 할지 여부를 결정한다.</description>
</property>
<property name="mouseEvent" type="boolean" deprecated="false" scope="instance" >
<description>그리드의 mouse관련 이벤트를 활성화 할지 여부를 결정</description>
</property>
<property name="virtualClipboard" type="boolean" deprecated="false" scope="instance" >
<description>복사/붙여넣기시 그리드의 가상 랜더링 기준으로 복사할지 여부를 결정한다. (false면 DataSet기준, true면 가상 랜더링 기준)</description>
</property>
<property name="multiLineEditor" type="boolean" deprecated="false" scope="instance" >
<description>multiLine이 들어가 있는 컬럼의 editor는 height를 30을 더 높게 출력한다.</description>
</property>
<property name="useMultiCellDeletable" type="boolean" deprecated="false" scope="instance" >
<description>multi cell을 선택한 후 delete key로 데이터를 삭제할 수 있는지 여부를 결정한다.</description>
</property>
<property name="usePasteCellEvent" type="boolean" deprecated="false" scope="instance" >
<description>paste 이벤트에서 cell단위 paste 이벤트를 발생할 지 여부를 결정한다.(true 로 하면 이벤트가 발생하나 성능이 떨어진다.)</description>
</property>
<property name="usePaste" type="boolean" deprecated="false" scope="instance" >
<description>paste 기능을 활성화 할지 여부를 결정한다.</description>
</property>
<property name="tabletMode" type="boolean" deprecated="false" scope="instance" >
<description>Tablet 모드를 적용할지 여부를 결정한다.</description>
</property>
<property name="tabletViewerUrl" type="String" deprecated="false" scope="instance" >
<description>Tablet 모드를 출력할 tabletViewer의 url를 지정한다.</description>
</property>
<property name="enableCtrlKey" type="Boolean" deprecated="false" scope="instance" >
<description>그리드에서 Ctrl Key를 이용하여 쉘을 선택할지 여부를 결정한다.</description>
</property>
<property name="enableShiftKey" type="Boolean" deprecated="false" scope="instance" >
<description>그리드에서 Shift Key를 이용하여 쉘을 선택할지 여부를 결정한다.</description>
</property>
<property name="syncDataSet" type="boolean" deprecated="false" scope="instance" >
<description>LBufferGridView의 DataSet과 sync 여부 객체</description>
</property>
<property name="loadingMessage" type="String" deprecated="false" scope="instance" >
<description>LBufferGridView의 load message</description>
</property>
<property name="emptyDataMessageCode" type="String" deprecated="false" scope="instance" >
<description>LBufferGridView의 empty data message의 메시지코드</description>
</property>
<property name="scrollerConfig" type="Object" deprecated="false" scope="instance" >
<description>LBufferGridView의 scroller 설정값 { scrollbar: 'y' }</description>
</property>
<property name="skipRowCellEvent" type="boolean" deprecated="false" scope="instance" >
<description>LBufferGridView의 그리드가 render시 row와 cell render event를 skip할지 여부(성능과 연관되므로 대량건 처리시는 false로 처리)</description>
</property>
<property name="renderTime" type="int" deprecated="false" scope="instance" >
<description>LBufferGridView의 그리드를 몇초간격으로 랜더링할지 시간(밀리세컨드)</description>
</property>
<property name="renderDataTime" type="int" deprecated="false" scope="instance" >
<description>LBufferGridView의 그리드의 데이터를 몇초간격으로 랜더링할지 시간(밀리세컨드)</description>
</property>
<property name="rowRenderingLimit" type="int" deprecated="false" scope="instance" >
<description>LBufferGridView의 행단위 렌더링 맥스값, 한번 스크롤에 limit이상 scroll되면 page단위 렌더링이 일어나며,
 scrollTimetout값에 따라서 page rendering이 skip될 수 있다.</description>
</property>
<property name="scrollTimeout" type="int" deprecated="false" scope="instance" >
<description>LBufferGridView의 page rendering이 지정한 시간내에 두번 이상 발생하면 skip된다.</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="click" deprecated="false">
<description><![CDATA[
panel이 click 되면 호출되는 이벤트
]]></description>
</event>
<event name="dblclick" deprecated="false">
<description><![CDATA[
panel이 dblClick 되면 호출되는 이벤트
]]></description>
</event>
<event name="mousedown" deprecated="false">
<description><![CDATA[
panel이 mousedown 되면 호출되는 이벤트
]]></description>
</event>
<event name="mouseup" deprecated="false">
<description><![CDATA[
panel이 mouseup 되면 호출되는 이벤트 (mouseEvent 생성자 속성이 true일 경우에만 작동한다. 성능이 느려지므로 그리드 3개 이상이 포함된 화면에서 사용 불가)
]]></description>
</event>
<event name="mouseover" deprecated="false">
<description><![CDATA[
panel이 mouseover 되면 호출되는 이벤트 (mouseEvent 생성자 속성이 true일 경우에만 작동한다. 성능이 느려지므로 그리드 3개 이상이 포함된 화면에서 사용 불가)
]]></description>
</event>
<event name="mouseout" deprecated="false">
<description><![CDATA[
panel이 mouseout 되면 호출되는 이벤트 (mouseEvent 생성자 속성이 true일 경우에만 작동한다. 성능이 느려지므로 그리드 3개 이상이 포함된 화면에서 사용 불가)
]]></description>
</event>
<event name="cellMouseDown" deprecated="false">
<description><![CDATA[
panel이 cellMouseDown 되면 호출되는 이벤트
]]></description>
</event>
<event name="rowMouseDown" deprecated="false">
<description><![CDATA[
panel이 rowMouseDown 되면 호출되는 이벤트
]]></description>
</event>
<event name="headerMouseDown" deprecated="false">
<description><![CDATA[
panel이 headerMouseDown 되면 호출되는 이벤트
]]></description>
</event>
<event name="cellClick" deprecated="false">
<description><![CDATA[
panel이 cellClick 되면 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col값]]></description>
</parameter>
<parameter name="colId" type="String" deprecated="false" usage="instance">
<description><![CDATA[col의 id]]></description>
</parameter>
<parameter name="e" type="Object" deprecated="false" usage="instance">
<description><![CDATA[event객체]]></description>
</parameter>
</parameters>
</event>
<event name="cellDblClick" deprecated="false">
<description><![CDATA[
panel이 cellDblClick 되면 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col값]]></description>
</parameter>
<parameter name="colId" type="String" deprecated="false" usage="instance">
<description><![CDATA[col의 id]]></description>
</parameter>
<parameter name="e" type="Object" deprecated="false" usage="instance">
<description><![CDATA[event객체]]></description>
</parameter>
</parameters>
</event>
<event name="rowClick" deprecated="false">
<description><![CDATA[
panel이 rowClick 되면 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
<parameter name="e" type="Object" deprecated="false" usage="instance">
<description><![CDATA[event객체]]></description>
</parameter>
</parameters>
</event>
<event name="rowDblClick" deprecated="false">
<description><![CDATA[
panel이 rowDblClick 되면 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
<parameter name="e" type="Object" deprecated="false" usage="instance">
<description><![CDATA[event객체]]></description>
</parameter>
</parameters>
</event>
<event name="headerClick" deprecated="false">
<description><![CDATA[
panel이 headerClick 되면 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col값]]></description>
</parameter>
<parameter name="e" type="Object" deprecated="false" usage="instance">
<description><![CDATA[event객체]]></description>
</parameter>
</parameters>
</event>
<event name="headerDblClick" deprecated="false">
<description><![CDATA[
panel이 headerDblClick 되면 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col값]]></description>
</parameter>
<parameter name="e" type="Object" deprecated="false" usage="instance">
<description><![CDATA[event객체]]></description>
</parameter>
</parameters>
</event>
<event name="keydown" deprecated="false">
<description><![CDATA[
panel이 keydown 되면 호출되는 이벤트
]]></description>
</event>
<event name="keypress" deprecated="false">
<description><![CDATA[
panel이 keypress 되면 호출되는 이벤트
]]></description>
</event>
<event name="widthResize" deprecated="false">
<description><![CDATA[
panel이 autoWidth === true일 경우 resizing이 발생했을 경우 발생하는 event
]]></description>
</event>
<event name="copy" deprecated="false">
<description><![CDATA[
copy시 호출되는 이벤트
]]></description>
</event>
<event name="paste" deprecated="false">
<description><![CDATA[
paste시 호출되는 이벤트
]]></description>
</event>
<event name="beforeEdit" deprecated="false">
<description><![CDATA[
edit가 되기전에 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col값]]></description>
</parameter>
<parameter name="colId" type="String" deprecated="false" usage="instance">
<description><![CDATA[colId값]]></description>
</parameter>
</parameters>
</event>
<event name="popup" deprecated="false">
<description><![CDATA[
cellClick시 해당 cell에 'L-popup-button-icon' css가 탑재되면 호출되는 popup 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col값]]></description>
</parameter>
<parameter name="colId" type="String" deprecated="false" usage="instance">
<description><![CDATA[colId값]]></description>
</parameter>
<parameter name="buttonEl" type="Rui.LElement" deprecated="false" usage="instance">
<description><![CDATA[클릭된 버튼]]></description>
</parameter>
<parameter name="editable" type="Boolean" deprecated="false" usage="instance">
<description><![CDATA[셀 에디터 가능 여부]]></description>
</parameter>
</parameters>
</event>
<event name="pasteCell" deprecated="false">
<description><![CDATA[
paste시 해당 cell에 붙여넣기 시 발생하는 이벤트로 usePasteCellEvent 생성자 값이 true일 경우에반 발생한다.
]]></description>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row값]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col값]]></description>
</parameter>
<parameter name="colId" type="String" deprecated="false" usage="instance">
<description><![CDATA[colId값]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="instance">
<description><![CDATA[현재 값]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="getSelectionModel" deprecated="false" scope="instance" >
<description><![CDATA[selection model을 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.ui.grid.LSelectionModel" />
</return-types>
</method>
<method name="setFooter" deprecated="false" scope="instance" >
<description><![CDATA[footer를 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="availableHeight" deprecated="false" scope="instance" >
<description><![CDATA[부모의 dom 객체를 기준으로 height 100%으로 채운다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="parentId" type="String|HTMLElement" deprecated="false" usage="required">
<description><![CDATA[[optional] 기준이 되는 부모 객체의 id나 dom]]></description>
</parameter>
<parameter name="margin" type="int" deprecated="false" usage="required">
<description><![CDATA[[optional] 추가 여유 공간을 확보하기 위해 마이너스할 높이]]></description>
</parameter>
</parameters>
</method>
<method name="setWidth" deprecated="false" scope="instance" >
<description><![CDATA[엘리먼트의 넓이를 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="width" type="int" deprecated="false" usage="required">
<description><![CDATA[새로운 넓이.]]></description>
</parameter>
</parameters>
</method>
<method name="setHeight" deprecated="false" scope="instance" >
<description><![CDATA[엘리먼트의 높이를 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="height" type="int" deprecated="false" usage="required">
<description><![CDATA[새로운 높이.]]></description>
</parameter>
</parameters>
</method>
<method name="getBorderWidth" deprecated="false" scope="instance" >
<description><![CDATA[grid panel border width]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="selectCell" deprecated="false" scope="instance" >
<description><![CDATA[cell 강제 선택하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치]]></description>
</parameter>
<parameter name="col" type="int|String" deprecated="false" usage="required">
<description><![CDATA[col 위치]]></description>
</parameter>
<parameter name="edit" type="boolean" deprecated="false" usage="required">
<description><![CDATA[edit 여부]]></description>
</parameter>
</parameters>
</method>
<method name="dataToClipboard" deprecated="false" scope="instance" >
<description><![CDATA[데이터를 클립보드로 복사한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="clipboardToLoad" deprecated="false" scope="instance" >
<description><![CDATA[클립보드의 데이터를 적용한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setSyncDataSet" deprecated="false" scope="instance" >
<description><![CDATA[dataSet과 sync상태를 셋팅하는 메소드 (대량 변경건 처리시 사용)]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="isSync" type="boolean" deprecated="false" usage="required">
<description><![CDATA[isSync값]]></description>
</parameter>
</parameters>
</method>
<method name="setDataSet" deprecated="false" scope="instance" >
<description><![CDATA[데이터셋을 변경하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dataSet" type="Rui.data.LDataSet" deprecated="false" usage="required">
<description><![CDATA[반영할 데이터셋]]></description>
</parameter>
</parameters>
</method>
<method name="setCellConfig" deprecated="false" scope="instance" >
<description><![CDATA[cell config 정보를 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치]]></description>
</parameter>
<parameter name="colId" type="String" deprecated="false" usage="required">
<description><![CDATA[col id]]></description>
</parameter>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[config 키]]></description>
</parameter>
<parameter name="value" type="Object" deprecated="false" usage="required">
<description><![CDATA[config 값]]></description>
</parameter>
</parameters>
</method>
<method name="stopEditor" deprecated="false" scope="instance" >
<description><![CDATA[edit 상태로 종료하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="isApply" type="boolean" deprecated="false" usage="required">
<description><![CDATA[종료시 dataSet에 반영 여부]]></description>
</parameter>
</parameters>
</method>
<method name="setEditable" deprecated="false" scope="instance" >
<description><![CDATA[객체의 editable 값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="editable" type="boolean" deprecated="false" usage="required">
<description><![CDATA[editable값]]></description>
</parameter>
</parameters>
</method>
<method name="isEditable" deprecated="false" scope="instance" >
<description><![CDATA[객체의 editable값을 리턴하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="getView" deprecated="false" scope="instance" >
<description><![CDATA[gridview를 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.ui.grid.LGridView" />
</return-types>
</method>
<method name="getRowModel" deprecated="false" scope="instance" >
<description><![CDATA[row model을 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.ui.grid.LRowModel" />
</return-types>
</method>
<method name="showSearchDialog" deprecated="false" scope="instance" >
<description><![CDATA[검색 dialog를 출력한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="updateColumnsAutoWidth" deprecated="false" scope="instance" >
<description><![CDATA[column의 width를 그리드의 width 맞게 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[객체를 focus한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="blur" deprecated="false" scope="instance" >
<description><![CDATA[객체를 blur한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="showTabletViewer" deprecated="false" scope="instance" >
<description><![CDATA[Tablet뷰어로 그리드를 출력합니다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="closeTabletViewer" deprecated="false" scope="instance" >
<description><![CDATA[Tablet뷰어를 닫습니다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LEditorPanel" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>LEditorPanel</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LEditorPanel</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LEditorPanel.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="editor" type="Object" deprecated="false" scope="instance" >
<description>editor 속성</description>
</property>
<property name="otype" type="Rui.ui.grid.LColumn" deprecated="false" scope="instance" >
<description>column 속성</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="setRegion" deprecated="false" scope="instance" >
<description><![CDATA[editor의 region값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="region" type="Rui.util.LRegion" deprecated="false" usage="required">
<description><![CDATA[region값]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LGridScroller" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>LGridScroller</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LGridScroller</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[LGridScroller의 초기 설정값]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="manageSteps" type="boolean" deprecated="false" scope="instance" >
<description>y스크롤바의 상하 스크롤 버튼을 제어하여 한번에 한개의 row씩만 스크롤할 수 있도록 한다.</description>
</property>
<property name="scrollStep" type="int" deprecated="false" scope="instance" >
<description>마우스 상하 스크롤 한 단위에 이동할 row수</description>
</property>
<property name="wheelStep" type="int" deprecated="false" scope="instance" >
<description>마우스 상하 휠스크롤 한 단위에 이동할 row수</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="isStart" deprecated="false" scope="instance" >
<description><![CDATA[scroll이 처음 위치에 있는지 여부 반환.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="x" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] x-scrollbar의 값을 조회하는지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="isEnd" deprecated="false" scope="instance" >
<description><![CDATA[scroll이 끝 위치에 있는지 여부 반환.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="x" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] x-scrollbar의 값을 조회하는지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="go" deprecated="false" scope="instance" >
<description><![CDATA[scroll을 원하는 위치로 이동시킨다.
 go 함수의 경우 스크롤 위치를 기억한다. 이동되어야 할 위치가 없더라도 후에 재 랜더링 시에 이동되어야 할 위치가 확보되면 그때 이동한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="이동할" type="int" deprecated="false" usage="required">
<description><![CDATA[위치 px (scrollTop 또는 scrollLeft)]]></description>
</parameter>
<parameter name="x" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] x-scrollbar를 이동할지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="getScroll" deprecated="false" scope="instance" >
<description><![CDATA[scroll x,y 가져오기]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[coord]]></return-description>
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LActionMenuGrid" deprecated="false" >
<description>마우스나 키보드를 적용하는 action 메뉴를 출력한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>마우스나 키보드를 적용하는 action 메뉴를 출력한다.</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LActionMenuGrid.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.LBootstrap" deprecated="false" >
<description>RichUI의 base, core, ui, form, grid 라이브러리를 runtime 환경에 맞게 로딩 시켜주는 기능을 하는 bootstrap 유틸리티 이며
 최적의 운영환경 제공과 동시에 원활한 디버깅을 제공하는것이 목적이다.
 즉, 최적의 성능을 위해 min 버전의 라이브러리를 사용하여 운영중인 페이지를 dev 또는 debug용 라이브러리로 교체하여 디버깅 할 수 있다.
&amp;lt;pre&amp;gt;
1. 일반 옵션
debug, dev, min, nodebug 네 종류의 rui_runtime을 사용할 수 있다.
단 localhost(127.0.0.1)의 경우 무조건 기본 debug로 동작하며, nodebug 옵션을 통해 압축된 min 버전을 테스트할 수 있다.
값:
dev, debug, min, nodebug
사용예:
http://www.myproject.com/myproject/page.html?rui_runtime=debug
http://www.myproject.com/myproject/page.html?rui_runtime=dev
http://www.myproject.com/myproject/page.html?rui_runtime=min
http://localhost:8080/myproject/page.html?rui_runtime=nodebug

2. 고정 옵션
rui_runtime에 hold 옵션을 적용하여 값을 고정시켜놓고 이후엔 지정하지 않아도 스스로 적용되도록 할 수 있다.
또한 rui_runtime이 iframe 내부까지 전달될 수 없으므로 hold옵션을 사용하여 iframe 내부와 무관하게 사용할수도 있다.
값:
dev-hold, debug-hold, min-hold
사용예:
http://www.myproject.com/myproject/page.html?rui_runtime=debug-hold
http://www.myproject.com/myproject/page.html?rui_runtime=dev-hold
http://www.myproject.com/myproject/page.html?rui_runtime=min-hold

3. 기본값
localhost, 127.0.0.1은 debug 라이브러리로 동작
localhost, 127.0.0.1을 제외한 기타 Host의 경우 min 라이브러리로 동작

4. 고정옵션인 hold 사용시 유지기간
Cookie를 사용하여 hold를 결정하며 브라우저 쿠키가 유효한 한 7일간 유지된다.

5. 고정옵션 hold 해제방법
nodebug 옵션으로 실행하면 이후 hold 옵션은 제거됨.

사용예:
1. 적용
http://www.myproject.com/myproject/page.html?rui_runtime=debug-hold
2. 해제
http://www.myproject.com/myproject/page.html?rui_runtime=nodebug

&amp;lt;/pre&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>RichUI의 base, core, ui, form, grid 라이브러리를 runtime 환경에 맞게 로딩 시켜주는 기능을 하는 bootstrap 유틸리티 이며
 최적의 운영환경 제공과 동시에 원활한 디버깅을 제공하는것이 목적이다.
 즉, 최적의 성능을 위해 min 버전의 라이브러리를 사용하여 운영중인 페이지를 dev 또는 debug용 라이브러리로 교체하여 디버깅 할 수 있다.
&amp;lt;pre&amp;gt;
1. 일반 옵션
debug, dev, min, nodebug 네 종류의 rui_runtime을 사용할 수 있다.
단 localhost(127.0.0.1)의 경우 무조건 기본 debug로 동작하며, nodebug 옵션을 통해 압축된 min 버전을 테스트할 수 있다.
값:
dev, debug, min, nodebug
사용예:
http://www.myproject.com/myproject/page.html?rui_runtime=debug
http://www.myproject.com/myproject/page.html?rui_runtime=dev
http://www.myproject.com/myproject/page.html?rui_runtime=min
http://localhost:8080/myproject/page.html?rui_runtime=nodebug

2. 고정 옵션
rui_runtime에 hold 옵션을 적용하여 값을 고정시켜놓고 이후엔 지정하지 않아도 스스로 적용되도록 할 수 있다.
또한 rui_runtime이 iframe 내부까지 전달될 수 없으므로 hold옵션을 사용하여 iframe 내부와 무관하게 사용할수도 있다.
값:
dev-hold, debug-hold, min-hold
사용예:
http://www.myproject.com/myproject/page.html?rui_runtime=debug-hold
http://www.myproject.com/myproject/page.html?rui_runtime=dev-hold
http://www.myproject.com/myproject/page.html?rui_runtime=min-hold

3. 기본값
localhost, 127.0.0.1은 debug 라이브러리로 동작
localhost, 127.0.0.1을 제외한 기타 Host의 경우 min 라이브러리로 동작

4. 고정옵션인 hold 사용시 유지기간
Cookie를 사용하여 hold를 결정하며 브라우저 쿠키가 유효한 한 7일간 유지된다.

5. 고정옵션 hold 해제방법
nodebug 옵션으로 실행하면 이후 hold 옵션은 제거됨.

사용예:
1. 적용
http://www.myproject.com/myproject/page.html?rui_runtime=debug-hold
2. 해제
http://www.myproject.com/myproject/page.html?rui_runtime=nodebug

&amp;lt;/pre&amp;gt;</description>
</constructor>
</constructors>
</class>
<class type="Rui.fx.LAnim" deprecated="false" >
<description>Base animation class는 animation효과들을 주는 interface를 제공한다.
 &amp;lt;p&amp;gt;Usage: var myAnim = new Rui.fx.LAnim(el, { width: { from: 10, to: 100 } }, 1, Rui.fx.LEasing.easeOut);&amp;lt;/p&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Base animation class는 animation효과들을 주는 interface를 제공한다.
 &amp;lt;p&amp;gt;Usage: var myAnim = new Rui.fx.LAnim(el, { width: { from: 10, to: 100 } }, 1, Rui.fx.LEasing.easeOut);&amp;lt;/p&amp;gt;</description>
<parameters>
<parameter name="el" type="String | HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[animation효과가 적용될 element]]></description>
</parameter>
<parameter name="attributes" type="Object" deprecated="false" usage="instance">
<description><![CDATA[animation효과 관련 attribute, 각 attribute는 object로 to나 by가 정의되어 있다. 이외에 from, units(px)가 있으며 camelCase로 표기한다.]]></description>
</parameter>
<parameter name="duration" type="Number" deprecated="false" usage="instance">
<description><![CDATA[(optional, defaults to 1 second) Length of animation (frames or seconds), defaults to time-based]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="instance">
<description><![CDATA[(optional, defaults to Rui.fx.LEasing.easeNone) Computes the values that are applied to the attributes per frame (generally a Rui.fx.LEasing method)]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<events>
<event name="start" deprecated="false">
<description><![CDATA[
animation이 시작되면 호출되는 이벤트
]]></description>
</event>
<event name="tween" deprecated="false">
<description><![CDATA[
animation의 매 frame마다 호출되는 이벤트
]]></description>
</event>
<event name="complete" deprecated="false">
<description><![CDATA[
animation이 종료되면 호출되는 이벤트
]]></description>
</event>
</events>
<methods>
<method name="animate" deprecated="false" scope="instance" >
<description><![CDATA[animation manager에 등록하면서 animation을 시작한다.]]></description>
</method>
<method name="stop" deprecated="false" scope="instance" >
<description><![CDATA[animation을 정지한다.  일반적으로 animation이 끝났을 경우 LAnimManager에 의해 call된다.]]></description>
<parameters>
<parameter name="finish" type="boolean" deprecated="false" usage="required">
<description><![CDATA[(optional) true면 마지막 frame로 이동한다.]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[LAnim instance에 대한 이름]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.fx.LAnimManager" deprecated="false" >
<description>animation과 theading 처리
 LAnim과 subclass 들에서 사용됨</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>animation과 theading 처리
 LAnim과 subclass 들에서 사용됨</description>
</constructor>
</constructors>
<properties>
<property name="fps" type="Int" deprecated="false" scope="instance" >
<description>기본 frame 비율 (frames per second).
 더 나은 x-browser calibration을 위해 임의로 증가(느린 브라우저들은 frame이 더 떨어짐)</description>
</property>
</properties>
<methods>
</methods>
</class>
<class type="Rui.fx.LEasing" deprecated="false" >
<description>처음부터 끝까지 어떻게 animation을 진행할지 결정하는 Singleton 패턴</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>처음부터 끝까지 어떻게 animation을 진행할지 결정하는 Singleton 패턴</description>
</constructor>
</constructors>
<methods>
<method name="easeNone" deprecated="false" scope="static" >
<description><![CDATA[point들 간의 speed를 통일한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="easeIn" deprecated="false" scope="static" >
<description><![CDATA[끝쪽을 향하여 천천히 가속하기 시작한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="easeOut" deprecated="false" scope="static" >
<description><![CDATA[끝쪽을 향하여 빠르게 감속하기 시작한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="easeBoth" deprecated="false" scope="static" >
<description><![CDATA[끝쪽을 향하여 천천히 감속하기 시작한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="easeInStrong" deprecated="false" scope="static" >
<description><![CDATA[끝쪽을 향하여 천천히 가속하기 시작한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="easeOutStrong" deprecated="false" scope="static" >
<description><![CDATA[끝쪽을 향하여 빠르게 감속하기 시작한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="easeBothStrong" deprecated="false" scope="static" >
<description><![CDATA[끝쪽을 향하여 천천히 감속하기 시작한다.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="elasticIn" deprecated="false" scope="static" >
<description><![CDATA[탄성 효과 snap in]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
<parameter name="a" type="Number" deprecated="false" usage="required">
<description><![CDATA[진폭 (optional)]]></description>
</parameter>
<parameter name="p" type="Number" deprecated="false" usage="required">
<description><![CDATA[주기 (optional)]]></description>
</parameter>
</parameters>
</method>
<method name="elasticOut" deprecated="false" scope="static" >
<description><![CDATA[탄성 효과 snap out]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
<parameter name="a" type="Number" deprecated="false" usage="required">
<description><![CDATA[진폭 (optional)]]></description>
</parameter>
<parameter name="p" type="Number" deprecated="false" usage="required">
<description><![CDATA[주기 (optional)]]></description>
</parameter>
</parameters>
</method>
<method name="elasticBoth" deprecated="false" scope="static" >
<description><![CDATA[탄성 효과 snap both]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
<parameter name="a" type="Number" deprecated="false" usage="required">
<description><![CDATA[진폭 (optional)]]></description>
</parameter>
<parameter name="p" type="Number" deprecated="false" usage="required">
<description><![CDATA[주기 (optional)]]></description>
</parameter>
</parameters>
</method>
<method name="backIn" deprecated="false" scope="static" >
<description><![CDATA[Backtracks slightly, then reverses direction and moves to end.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
<parameter name="s" type="Number" deprecated="false" usage="required">
<description><![CDATA[Overshoot (optional)]]></description>
</parameter>
</parameters>
</method>
<method name="backOut" deprecated="false" scope="static" >
<description><![CDATA[Overshoots end, then reverses and comes back to end.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
<parameter name="s" type="Number" deprecated="false" usage="required">
<description><![CDATA[Overshoot (optional)]]></description>
</parameter>
</parameters>
</method>
<method name="backBoth" deprecated="false" scope="static" >
<description><![CDATA[Backtracks slightly, then reverses direction, overshoots end,
 then reverses and comes back to end.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
<parameter name="s" type="Number" deprecated="false" usage="required">
<description><![CDATA[Overshoot (optional)]]></description>
</parameter>
</parameters>
</method>
<method name="bounceIn" deprecated="false" scope="static" >
<description><![CDATA[Bounce off of start.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="bounceOut" deprecated="false" scope="static" >
<description><![CDATA[Bounces off end.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
<method name="bounceBoth" deprecated="false" scope="static" >
<description><![CDATA[Bounces off start and end.]]></description>
<return-types>
<return-type type="Number" />
<return-description><![CDATA[현재 animation 프레임에 대한 계산된 값]]></return-description>
</return-types>
<parameters>
<parameter name="t" type="Number" deprecated="false" usage="required">
<description><![CDATA[현재값을 계산하기 위해 사용되는 시간값]]></description>
</parameter>
<parameter name="b" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값]]></description>
</parameter>
<parameter name="c" type="Number" deprecated="false" usage="required">
<description><![CDATA[시작값과 종료값 사이의 Delta]]></description>
</parameter>
<parameter name="d" type="Number" deprecated="false" usage="required">
<description><![CDATA[animation 총 길이]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.fx.LBezier" deprecated="false" >
<description>control point 들의 숫자에 대한 LBezier spline 들을 계산하기 위하여 사용된다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>control point 들의 숫자에 대한 LBezier spline 들을 계산하기 위하여 사용된다.</description>
</constructor>
</constructors>
<methods>
</methods>
</class>
<class type="Rui.fx.LMotionAnim" deprecated="false"  superclass="Rui.fx.LAnim" >
<description>'attribute'의 'points' member에 의해 정의된 경로를 따라 element들을 이동하기 위한 LAnim subclass.
 모든 'points'는 x, y 좌표 배열이다.
 &amp;lt;p&amp;gt;Usage: &amp;lt;code&amp;gt;var myAnim = new Rui.fx.LMotionAnim(el, { points: { to: [800, 800] } }, 1, Rui.fx.LEasing.easeOut);&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>'attribute'의 'points' member에 의해 정의된 경로를 따라 element들을 이동하기 위한 LAnim subclass.
 모든 'points'는 x, y 좌표 배열이다.
 &amp;lt;p&amp;gt;Usage: &amp;lt;code&amp;gt;var myAnim = new Rui.fx.LMotionAnim(el, { points: { to: [800, 800] } }, 1, Rui.fx.LEasing.easeOut);&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;</description>
<parameters>
<parameter name="el" type="String | HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[animated 되어질 element에 대한 참조]]></description>
</parameter>
<parameter name="attributes" type="Object" deprecated="false" usage="instance">
<description><![CDATA[animated될 attribute
 각각의 attribute는 최소한 'to'나 'by' member가 정의된 object이다.
 추가적인 옵션 member들은 'from'(defaults to current value)과 'unit'(defaults to 'px') 이다.
 모든 attribute 이름은 camelCase 방식을 사용한다.]]></description>
</parameter>
<parameter name="duration" type="Number" deprecated="false" usage="instance">
<description><![CDATA[(optional, 기본값 1초) animation의 길이 (frames or seconds), defaults to time-based]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="instance">
<description><![CDATA[(optional, Rui.fx.LEasing.easeNone 기본값) 각 frame별 attribute에 적용되는 값을 계산 (일반적으로 Rui.fx.LEasing method)]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<methods>
</methods>
</class>
<class type="Rui.fx.LColorAnim" deprecated="false"  superclass="Rui.fx.LAnim" >
<description>color 전환을 위한 LAnim subclass.
 &amp;lt;p&amp;gt;Usage: &amp;lt;code&amp;gt;var myAnim = new Y.LColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.LEasing.easeOut);&amp;lt;/code&amp;gt; 컬러값은 다음과 같이 지정될 수 있다. 112233, #112233,
 [255,255,255], or rgb(255,255,255)&amp;lt;/p&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>color 전환을 위한 LAnim subclass.
 &amp;lt;p&amp;gt;Usage: &amp;lt;code&amp;gt;var myAnim = new Y.LColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.LEasing.easeOut);&amp;lt;/code&amp;gt; 컬러값은 다음과 같이 지정될 수 있다. 112233, #112233,
 [255,255,255], or rgb(255,255,255)&amp;lt;/p&amp;gt;</description>
<parameters>
<parameter name="el" type="HTMLElement | String" deprecated="false" usage="instance">
<description><![CDATA[animated 되어질 element에 대한 참조]]></description>
</parameter>
<parameter name="attributes" type="Object" deprecated="false" usage="instance">
<description><![CDATA[animated될 attribute
 각각의 attribute는 최소한 "to"나 "by" member가 정의된 object이다.
 추가적인 옵션 member들은 "from"(defaults to current value)과 "unit"(defaults to "px") 이다.
 모든 attribute 이름은 camelCase 방식을 사용한다.]]></description>
</parameter>
<parameter name="duration" type="Number" deprecated="false" usage="instance">
<description><![CDATA[(optional, 기본값 1초) animation의 길이 (frames or seconds), defaults to time-based]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="instance">
<description><![CDATA[(optional, Rui.fx.LEasing.easeNone 기본값) 각 frame별 attribute에 적용되는 값을 계산 (일반적으로 Rui.fx.LEasing method)]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<methods>
</methods>
</class>
<class type="Rui.fx.LScrollAnim" deprecated="false" >
<description>LAnim subclass for scrolling elements to a position defined by the "scroll" member of "attributes".
 "attribute"의 "scroll" member에 의해 정의된 위치로 element들을 스크롤하기 위한 LAnim subclass.
 All "scroll" members are arrays with x, y scroll positions.
 모든 "scroll" member는 x, y 스크롤 위치 배열이다.
 &amp;lt;p&amp;gt;Usage: &amp;lt;code&amp;gt;var myAnim = new Rui.fx.LScrollAnim(el, { scroll: { to: [0, 800] } }, 1, Rui.fx.LEasing.easeOut);&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LAnim subclass for scrolling elements to a position defined by the "scroll" member of "attributes".
 "attribute"의 "scroll" member에 의해 정의된 위치로 element들을 스크롤하기 위한 LAnim subclass.
 All "scroll" members are arrays with x, y scroll positions.
 모든 "scroll" member는 x, y 스크롤 위치 배열이다.
 &amp;lt;p&amp;gt;Usage: &amp;lt;code&amp;gt;var myAnim = new Rui.fx.LScrollAnim(el, { scroll: { to: [0, 800] } }, 1, Rui.fx.LEasing.easeOut);&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;</description>
<parameters>
<parameter name="el" type="String or HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[animated 되어질 element에 대한 참조]]></description>
</parameter>
<parameter name="attributes" type="Object" deprecated="false" usage="instance">
<description><![CDATA[animated될 attribute
 각각의 attribute는 최소한 "to"나 "by" member가 정의된 object이다.
 추가적인 옵션 member들은 "from"(defaults to current value)과 "unit"(defaults to "px") 이다.
 모든 attribute 이름은 camelCase 방식을 사용한다.]]></description>
</parameter>
<parameter name="duration" type="Number" deprecated="false" usage="instance">
<description><![CDATA[(optional, 기본값 1초) animation의 길이 (frames or seconds), defaults to time-based]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="instance">
<description><![CDATA[(optional, Rui.fx.LEasing.easeNone 기본값) 각 frame별 attribute에 적용되는 값을 계산 (일반적으로 Rui.fx.LEasing method)]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<methods>
</methods>
</class>
<class type="Rui.ui.layout.LLayoutManager" deprecated="false"  superclass="Rui.LElement" >
<description>&amp;lt;p&amp;gt;
 Provides a fixed layout containing, top, bottom, left, right and center
 layout units. It can be applied to either the body or an element.
 &amp;lt;/p&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>&amp;lt;p&amp;gt;
 Provides a fixed layout containing, top, bottom, left, right and center
 layout units. It can be applied to either the body or an element.
 &amp;lt;/p&amp;gt;</description>
<parameters>
<parameter name="el" type="String/HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[The element to make contain a layout.]]></description>
</parameter>
<parameter name="attrs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Object liternal containing configuration parameters.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="browser" type="Object" deprecated="false" scope="instance" >
<description>A modified version of the Rui.browser
              object*</description>
</property>
</properties>
<events>
<event name="resize" deprecated="false">
<description><![CDATA[
Fired when this.resize is called
]]></description>
</event>
<event name="startResize" deprecated="false">
<description><![CDATA[
Fired when the Resize Utility for a Unit fires it's
              startResize Event.
]]></description>
</event>
<event name="beforeResize" deprecated="false">
<description><![CDATA[
Fires at the beginning of the resize method. If you return
              false, the resize is cancelled.
]]></description>
</event>
<event name="render" deprecated="false">
<description><![CDATA[
Fired after the render method completes.
]]></description>
</event>
</events>
<methods>
<method name="getLayoutById" deprecated="false" scope="static" >
<description><![CDATA[Get's a layout object by the HTML id of the element
              associated with the LLayoutManager object.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[The LLayoutManager Object]]></return-description>
</return-types>
</method>
<method name="getSizes" deprecated="false" scope="instance" >
<description><![CDATA[Get a reference to the internal LLayoutManager
              Unit sizes object used to build the
              layout wireframe]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[An object of the layout unit sizes]]></return-description>
</return-types>
</method>
<method name="getUnitByPosition" deprecated="false" scope="instance" >
<description><![CDATA[Get the LLayout by it's position in
              this layout]]></description>
<parameters>
<parameter name="pos" type="String" deprecated="false" usage="required">
<description><![CDATA[The position of the unit in this
            layout]]></description>
</parameter>
</parameters>
</method>
<method name="removeUnit" deprecated="false" scope="instance" >
<description><![CDATA[Remove the unit from this layout and
              resize the layout.]]></description>
<parameters>
<parameter name="unit" type="Object" deprecated="false" usage="required">
<description><![CDATA[The LLayout that you want to
            remove]]></description>
</parameter>
</parameters>
</method>
<method name="addUnit" deprecated="false" scope="instance" >
<description><![CDATA[Add a unit to this layout and if the
              layout is rendered, resize the layout.]]></description>
<parameters>
<parameter name="cfg" type="Object" deprecated="false" usage="required">
<description><![CDATA[The config for the LLayout that
            you want to add]]></description>
</parameter>
</parameters>
</method>
<method name="resize" deprecated="false" scope="instance" >
<description><![CDATA[Starts the chain of resize routines that
              will resize all the units.]]></description>
<parameters>
<parameter name="set" type="boolean" deprecated="false" usage="required">
<description><![CDATA[If set to false, it will NOT set the
            size, just perform the calculations (used
            for collapsing units)]]></description>
</parameter>
</parameters>
</method>
<method name="render" deprecated="false" scope="instance" >
<description><![CDATA[This method starts the render process,
              applying classnames and creating
              elements]]></description>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[Removes this layout from the page and
              destroys all units that it contains.
              This will destroy all data inside the
              layout and it's children.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representing the
              LLayoutManager.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.layout.LLayout" deprecated="false"  superclass="Rui.LElement" >
<description>&amp;lt;p&amp;gt;Provides a fixed position unit containing a header, body and footer for use with a Rui.ui.layout.LLayoutManager instance.&amp;lt;/p&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>&amp;lt;p&amp;gt;Provides a fixed position unit containing a header, body and footer for use with a Rui.ui.layout.LLayoutManager instance.&amp;lt;/p&amp;gt;</description>
<parameters>
<parameter name="el" type="String/HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[The element to make a unit.]]></description>
</parameter>
<parameter name="attrs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Object liternal containing configuration parameters.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
<property name="browser" type="Object" deprecated="false" scope="instance" >
<description>A modified version of the Rui.browser object</description>
</property>
<property name="header" type="HTMLELement" deprecated="false" scope="instance" >
<description>A reference to the HTML element used for the Header</description>
</property>
<property name="body" type="HTMLElement" deprecated="false" scope="instance" >
<description>A reference to the HTML element used for the body</description>
</property>
<property name="footer" type="HTMLElement" deprecated="false" scope="instance" >
<description>A reference to the HTML element used for the footer</description>
</property>
</properties>
<events>
<event name="resize" deprecated="false">
<description><![CDATA[
Fired when this.resize is called
]]></description>
</event>
<event name="startResize" deprecated="false">
<description><![CDATA[
Fired when the Resize Utility fires it's startResize Event.
]]></description>
</event>
<event name="endResize" deprecated="false">
<description><![CDATA[
Fired when the Resize Utility fires it's endResize Event.
]]></description>
</event>
<event name="beforeResize" deprecated="false">
<description><![CDATA[
Fired at the beginning of the resize method. If you return false, the resize is cancelled.
]]></description>
</event>
<event name="contentChange" deprecated="false">
<description><![CDATA[
Fired when the content in the header, body or footer is changed via the API
]]></description>
</event>
<event name="close" deprecated="false">
<description><![CDATA[
Fired when the unit is closed
]]></description>
</event>
<event name="beforeCollapse" deprecated="false">
<description><![CDATA[
Fired before the unit is collapsed. If you return false, the collapse is cancelled.
]]></description>
</event>
<event name="collapse" deprecated="false">
<description><![CDATA[
Fired when the unit is collapsed
]]></description>
</event>
<event name="expand" deprecated="false">
<description><![CDATA[
Fired when the unit is exanded
]]></description>
</event>
<event name="beforeExpand" deprecated="false">
<description><![CDATA[
Fired before the unit is exanded. If you return false, the collapse is cancelled.
]]></description>
</event>
<event name="load" deprecated="false">
<description><![CDATA[
Fired when data is loaded via the dataSrc config.
]]></description>
</event>
<event name="loadError" deprecated="false">
<description><![CDATA[
Fired when an error occurs loading data via the dataSrc config. Error message is passed as argument to this event.
]]></description>
</event>
</events>
<methods>
<method name="getLayoutUnitById" deprecated="false" scope="static" >
<description><![CDATA[Get's a layout unit object by the HTML id of the element associated with the LLayoutManager Unit object.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[The LLayoutManager Object]]></return-description>
</return-types>
</method>
<method name="resize" deprecated="false" scope="instance" >
<description><![CDATA[Resize either the unit or it's clipped state, also updating the box inside]]></description>
<return-types>
<return-type type="Rui.ui.layout.LLayout" />
<return-description><![CDATA[href="Rui.ui.layout.LLayout.html">Rui.ui.layout.LLayout</a>} The LLayout instance]]></return-description>
</return-types>
<parameters>
<parameter name="force" type="boolean" deprecated="false" usage="required">
<description><![CDATA[This will force full calculations even when the unit is collapsed]]></description>
</parameter>
</parameters>
</method>
<method name="getSizes" deprecated="false" scope="instance" >
<description><![CDATA[Get a reference to the internal sizes object for this unit]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[An object of the sizes used for calculations]]></return-description>
</return-types>
</method>
<method name="toggle" deprecated="false" scope="instance" >
<description><![CDATA[Toggles the Unit, replacing it with a clipped version.]]></description>
<return-types>
<return-type type="Rui.ui.layout.LLayout" />
<return-description><![CDATA[href="Rui.ui.layout.LLayout.html">Rui.ui.layout.LLayout</a>} The LLayout instance]]></return-description>
</return-types>
</method>
<method name="expand" deprecated="false" scope="instance" >
<description><![CDATA[Expand the Unit if it is collapsed.]]></description>
<return-types>
<return-type type="Rui.ui.layout.LLayout" />
<return-description><![CDATA[href="Rui.ui.layout.LLayout.html">Rui.ui.layout.LLayout</a>} The LLayout instance]]></return-description>
</return-types>
</method>
<method name="collapse" deprecated="false" scope="instance" >
<description><![CDATA[Collapse the Unit if it is not collapsed.]]></description>
<return-types>
<return-type type="Rui.ui.layout.LLayout" />
<return-description><![CDATA[href="Rui.ui.layout.LLayout.html">Rui.ui.layout.LLayout</a>} The LLayout instance]]></return-description>
</return-types>
</method>
<method name="close" deprecated="false" scope="instance" >
<description><![CDATA[Close the unit, removing it from the parent LLayoutManager.]]></description>
<return-types>
<return-type type="Rui.ui.layout.LLayoutManager" />
<return-description><![CDATA[href="Rui.ui.layout.LLayoutManager.html">Rui.ui.layout.LLayoutManager</a>} The parent LLayoutManager instance]]></return-description>
</return-types>
</method>
<method name="bodyHtml" deprecated="false" scope="instance" >
<description><![CDATA[unit의 body에 대한 content html을 설정한다.]]></description>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[Removes this unit from the parent and cleans up after itself.]]></description>
<return-types>
<return-type type="Rui.ui.layout.LLayoutManager" />
<return-description><![CDATA[href="Rui.ui.layout.LLayoutManager.html">Rui.ui.layout.LLayoutManager</a>} The parent LLayoutManager instance]]></return-description>
</return-types>
<parameters>
<parameter name="force" type="boolean" deprecated="false" usage="required">
<description><![CDATA[Don't report to the parent, because we are being called from the parent.]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representing the LLayout.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.menu.LMenuManager" deprecated="false" >
<description>Singleton that manages a collection of all menus and menu items.  Listens
 for DOM events at the document level and dispatches the events to the
 corresponding menu or menu item.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>Singleton that manages a collection of all menus and menu items.  Listens
 for DOM events at the document level and dispatches the events to the
 corresponding menu or menu item.</description>
</constructor>
</constructors>
<methods>
<method name="addMenu" deprecated="false" scope="instance" >
<description><![CDATA[Adds a menu to the collection of known menus.]]></description>
<parameters>
<parameter name="p_oMenu" type="Rui.ui.menu.LMenu" deprecated="false" usage="required">
<description><![CDATA[Object specifying the LMenu
 instance to be added.]]></description>
</parameter>
</parameters>
</method>
<method name="removeMenu" deprecated="false" scope="instance" >
<description><![CDATA[Removes a menu from the collection of known menus.]]></description>
<parameters>
<parameter name="p_oMenu" type="Rui.ui.menu.LMenu" deprecated="false" usage="required">
<description><![CDATA[Object specifying the LMenu
 instance to be removed.]]></description>
</parameter>
</parameters>
</method>
<method name="hideVisible" deprecated="false" scope="instance" >
<description><![CDATA[Hides all visible, dynamically positioned menus
 (excluding instances of Rui.ui.menu.LMenuBar).]]></description>
</method>
<method name="getVisible" deprecated="false" scope="instance" >
<description><![CDATA[Returns a collection of all visible menus registered with the menu manger.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
<method name="getMenus" deprecated="false" scope="instance" >
<description><![CDATA[Returns a collection of all menus registered with the menu manger.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
<method name="getMenu" deprecated="false" scope="instance" >
<description><![CDATA[Returns a menu with the specified id.]]></description>
<return-types>
<return-type type="Rui.ui.menu.LMenu" />
</return-types>
<parameters>
<parameter name="p_sId" type="String" deprecated="false" usage="required">
<description><![CDATA[String specifying the id of the]]></description>
</parameter>
</parameters>
</method>
<method name="getMenuItem" deprecated="false" scope="instance" >
<description><![CDATA[Returns a menu item with the specified id.]]></description>
<return-types>
<return-type type="Rui.ui.menu.LMenuItem" />
</return-types>
<parameters>
<parameter name="p_sId" type="String" deprecated="false" usage="required">
<description><![CDATA[String specifying the id of the]]></description>
</parameter>
</parameters>
</method>
<method name="getMenuItemGroup" deprecated="false" scope="instance" >
<description><![CDATA[Returns an array of menu item instances whose
 corresponding &amp;lt;code&amp;gt;&amp;#60;li&amp;#62;&amp;lt;/code&amp;gt; elements are child
 nodes of the &amp;lt;code&amp;gt;&amp;#60;ul&amp;#62;&amp;lt;/code&amp;gt; element with the
 specified id.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
<parameters>
<parameter name="p_sId" type="String" deprecated="false" usage="required">
<description><![CDATA[String specifying the id of the]]></description>
</parameter>
</parameters>
</method>
<method name="getFocusedMenuItem" deprecated="false" scope="instance" >
<description><![CDATA[Returns a reference to the menu item that currently]]></description>
<return-types>
<return-type type="Rui.ui.menu.LMenuItem" />
</return-types>
</method>
<method name="getFocusedMenu" deprecated="false" scope="instance" >
<description><![CDATA[Returns a reference to the menu that currently]]></description>
<return-types>
<return-type type="Rui.ui.menu.LMenu" />
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representing the menu manager.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.menu.LMenu" deprecated="false"  superclass="Rui.ui.LPanel" >
<description>The LMenu class creates a container that holds a vertical list representing
 a set of options or commands.  LMenu is the base class for all
 menu containers.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>The LMenu class creates a container that holds a vertical list representing
 a set of options or commands.  LMenu is the base class for all
 menu containers.</description>
<parameters>
<parameter name="p_oElement" type="String" deprecated="false" usage="instance">
<description><![CDATA[id]]></description>
</parameter>
<parameter name="p_oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[config]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="effect" type="Object" deprecated="false" scope="instance" >
<description>Object or array of objects representing the ContainerEffect
 classes that are active for animating the container.  When set this
 property is automatically applied to all submenus.</description>
</property>
<property name="x" type="Number" deprecated="false" scope="instance" >
<description>Number representing the absolute x-coordinate position of
 the LMenu.  This property is only applied when the "position"
 configuration property is set to dynamic.</description>
</property>
<property name="y" type="Number" deprecated="false" scope="instance" >
<description>Number representing the absolute y-coordinate position of
 the LMenu.  This property is only applied when the "position"
 configuration property is set to dynamic.</description>
</property>
<property name="xy" type="Number[]" deprecated="false" scope="instance" >
<description>Array of the absolute x and y positions of the LMenu.  This
 property is only applied when the "position" configuration property is
 set to dynamic.</description>
</property>
<property name="context" type="Array" deprecated="false" scope="instance" >
<description>Array of context arguments for context-sensitive positioning.
 The format is: [id or element, element corner, context corner].
 For example, setting this property to ["img1", "tl", "bl"] would
 align the Mnu's top left corner to the context element's
 bottom left corner.  This property is only applied when the "position"
 configuration property is set to dynamic.</description>
</property>
<property name="fixedcenter" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if the LMenu should be anchored to the
 center of the viewport.  This property is only applied when the
 "position" configuration property is set to dynamic.</description>
</property>
<property name="iframe" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating whether or not the LMenu should
 have an IFRAME shim; used to prevent SELECT elements from
 poking through an Overlay instance in IE6.  When set to "true",
 the iframe shim is created when the LMenu instance is intially
 made visible.  This property is only applied when the "position"
 configuration property is set to dynamic and is automatically applied
 to all submenus.</description>
</property>
<property name="visible" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating whether or not the menu is visible.  If
 the menu's "position" configuration property is set to "dynamic" (the
 default), this property toggles the menu's &amp;lt;code&amp;gt;&amp;#60;div&amp;#62;&amp;lt;/code&amp;gt;
 element's "visibility" style property between "visible" (true) or
 "hidden" (false).  If the menu's "position" configuration property is
 set to "static" this property toggles the menu's
 &amp;lt;code&amp;gt;&amp;#60;div&amp;#62;&amp;lt;/code&amp;gt; element's "display" style property
 between "block" (true) or "none" (false).</description>
</property>
<property name="constraintoviewport" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if the menu will try to remain inside
 the boundaries of the size of viewport.  This property is only applied
 when the "position" configuration property is set to dynamic and is
 automatically applied to all submenus.</description>
</property>
<property name="preventcontextoverlap" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating whether or not a submenu should overlap its parent LMenuItem
 when the "constraintoviewport" configuration property is set to "true".</description>
</property>
<property name="position" type="String" deprecated="false" scope="instance" >
<description>String indicating how a menu should be positioned on the
 screen.  Possible values are "static" and "dynamic."  Static menus are
 visible by default and reside in the normal flow of the document
 (CSS position: static).  Dynamic menus are hidden by default, reside
 out of the normal flow of the document (CSS position: absolute), and
 can overlay other elements on the screen.</description>
</property>
<property name="submenualignment" type="Array" deprecated="false" scope="instance" >
<description>Array defining how submenus should be aligned to their
 parent menu item. The format is: [itemCorner, submenuCorner]. By default
 a submenu's top left corner is aligned to its parent menu item's top
 right corner.</description>
</property>
<property name="autosubmenudisplay" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if submenus are automatically made
 visible when the user mouses over the menu's items.</description>
</property>
<property name="showdelay" type="Number" deprecated="false" scope="instance" >
<description>Number indicating the time (in milliseconds) that should
 expire before a submenu is made visible when the user mouses over
 the menu's items.  This property is only applied when the "position"
 configuration property is set to dynamic and is automatically applied
 to all submenus.</description>
</property>
<property name="hidedelay" type="Number" deprecated="false" scope="instance" >
<description>Number indicating the time (in milliseconds) that should
 expire before the menu is hidden.  This property is only applied when
 the "position" configuration property is set to dynamic and is
 automatically applied to all submenus.</description>
</property>
<property name="submenuhidedelay" type="Number" deprecated="false" scope="instance" >
<description>Number indicating the time (in milliseconds) that should
 expire before a submenu is hidden when the user mouses out of a menu item
 heading in the direction of a submenu.  The value must be greater than or
 equal to the value specified for the "showdelay" configuration property.
 This property is only applied when the "position" configuration property
 is set to dynamic and is automatically applied to all submenus.</description>
</property>
<property name="clicktohide" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if the menu will automatically be
 hidden if the user clicks outside of it.  This property is only
 applied when the "position" configuration property is set to dynamic
 and is automatically applied to all submenus.</description>
</property>
<property name="container" type="HTMLElement" deprecated="false" scope="instance" >
<description>HTML element reference or string specifying the id
 attribute of the HTML element that the menu's markup should be
 rendered into.</description>
</property>
<property name="scrollincrement" type="Number" deprecated="false" scope="instance" >
<description>Number used to control the scroll speed of a menu.  Used to
 increment the "scrollTop" property of the menu's body by when a menu's
 content is scrolling.  When set this property is automatically applied
 to all submenus.</description>
</property>
<property name="minscrollheight" type="Number" deprecated="false" scope="instance" >
<description>Number defining the minimum threshold for the "maxheight"
 configuration property.  When set this property is automatically applied
 to all submenus.</description>
</property>
<property name="maxheight" type="Number" deprecated="false" scope="instance" >
<description>Number defining the maximum height (in pixels) for a menu's
 body element (&amp;lt;code&amp;gt;&amp;#60;div class="bd"&amp;#60;&amp;lt;/code&amp;gt;).  Once a menu's body
 exceeds this height, the contents of the body are scrolled to maintain
 this value.  This value cannot be set lower than the value of the
 "minscrollheight" configuration property.</description>
</property>
<property name="classname" type="String" deprecated="false" scope="instance" >
<description>String representing the CSS class to be applied to the
 menu's root &amp;lt;code&amp;gt;&amp;#60;div&amp;#62;&amp;lt;/code&amp;gt; element.  The specified class(es)
 are appended in addition to the default class as specified by the menu's
 CSS_CLASS_NAME constant. When set this property is automatically
 applied to all submenus.</description>
</property>
<property name="disabled" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if the menu should be disabled.
 Disabling a menu disables each of its items.  (Disabled menu items are
 dimmed and will not respond to user input or fire events.)  Disabled
 menus have a corresponding "disabled" CSS class applied to their root
 &amp;lt;code&amp;gt;&amp;#60;div&amp;#62;&amp;lt;/code&amp;gt; element.</description>
</property>
<property name="shadow" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if the menu should have a shadow.</description>
</property>
<property name="keepopen" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if the menu should remain open when clicked.</description>
</property>
</configs>
<properties>
<property name="lazyLoad" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if the menu's "lazy load" feature is
 enabled.  If set to "true," initialization and rendering of the menu's
 items will be deferred until the first time it is made visible.  This
 property should be set via the constructor using the configuration
 object literal.</description>
</property>
<property name="itemData" type="Array" deprecated="false" scope="instance" >
<description>Array of items to be added to the menu.  The array can contain
 strings representing the text for each item to be created, object literals
 representing the menu item configuration properties, or LMenuItem instances.
 This property should be set via the constructor using the configuration
 object literal.</description>
</property>
<property name="activeItem" type="Rui.ui.menu.LMenuItem" deprecated="false" scope="instance" >
<description>Object reference to the item in the menu that has is selected.</description>
</property>
<property name="parent" type="Rui.ui.menu.LMenuItem" deprecated="false" scope="instance" >
<description>Object reference to the menu's parent menu or menu item.
 This property can be set via the constructor using the configuration
 object literal.</description>
</property>
<property name="srcElement" type="HTMLSelectElement" deprecated="false" scope="instance" >
<description>Object reference to the HTML element (either
 &amp;lt;code&amp;gt;&amp;#60;select&amp;#62;&amp;lt;/code&amp;gt; or &amp;lt;code&amp;gt;&amp;#60;div&amp;#62;&amp;lt;/code&amp;gt;) used to
 create the menu.</description>
</property>
<property name="dataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>Menu의 Data가될 dataset</description>
</property>
<property name="fields" type="object" deprecated="false" scope="instance" >
<description>Menu의 Data가될 DataSet의 field 정보</description>
</property>
</properties>
<events>
<event name="mouseOver" deprecated="false">
<description><![CDATA[
Fires when the mouse has entered the menu.  Passes back
 the DOM Event object as an argument.
]]></description>
</event>
<event name="mouseOut" deprecated="false">
<description><![CDATA[
Fires when the mouse has left the menu.  Passes back the DOM
 Event object as an argument.
]]></description>
</event>
<event name="mouseDown" deprecated="false">
<description><![CDATA[
Fires when the user mouses down on the menu.  Passes back the
 DOM Event object as an argument.
]]></description>
</event>
<event name="mouseUp" deprecated="false">
<description><![CDATA[
Fires when the user releases a mouse button while the mouse is
 over the menu.  Passes back the DOM Event object as an argument.
]]></description>
</event>
<event name="click" deprecated="false">
<description><![CDATA[
Fires when the user clicks the on the menu.  Passes back the
 DOM Event object as an argument.
]]></description>
</event>
<event name="keyPress" deprecated="false">
<description><![CDATA[
Fires when the user presses an alphanumeric key when one of the
 menu's items has focus.  Passes back the DOM Event object as an argument.
]]></description>
</event>
<event name="keyDown" deprecated="false">
<description><![CDATA[
Fires when the user presses a key when one of the menu's items
 has focus.  Passes back the DOM Event object as an argument.
]]></description>
</event>
<event name="keyUp" deprecated="false">
<description><![CDATA[
Fires when the user releases a key when one of the menu's items
 has focus.  Passes back the DOM Event object as an argument.
]]></description>
</event>
<event name="itemAdded" deprecated="false">
<description><![CDATA[
Fires when an item is added to the menu.
]]></description>
</event>
<event name="itemRemoved" deprecated="false">
<description><![CDATA[
Fires when an item is removed to the menu.
]]></description>
</event>
</events>
<methods>
<method name="show" deprecated="false" scope="instance" >
<description><![CDATA[Shows the Module element by setting the visible configuration
 property to true. Also fires two events: beforeShowEvent prior to
 the visibility change, and showEvent after.]]></description>
</method>
<method name="positionOffScreen" deprecated="false" scope="instance" >
<description><![CDATA[Positions the menu outside of the boundaries of the browser's
 viewport.  Called automatically when a menu is hidden to ensure that
 it doesn't force the browser to render unnecessary scrollbars.
 Menu가 browser를 벗어 났을 경우 필요없는 scrollbar를 생기지 않게 하는 method]]></description>
</method>
<method name="getRoot" deprecated="false" scope="instance" >
<description><![CDATA[Finds the menu's root menu.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representing the menu.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="setItemGroupTitle" deprecated="false" scope="instance" >
<description><![CDATA[Sets the title of a group of menu items.]]></description>
<parameters>
<parameter name="p_sGroupTitle" type="String" deprecated="false" usage="required">
<description><![CDATA[String specifying the title of the group.]]></description>
</parameter>
<parameter name="p_nGroupIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[Optional. Number specifying the group to which
 the title belongs.]]></description>
</parameter>
</parameters>
</method>
<method name="addItem" deprecated="false" scope="instance" >
<description><![CDATA[Appends an item to the menu.]]></description>
<return-types>
<return-type type="Rui.ui.menu.LMenuItem" />
</return-types>
<parameters>
<parameter name="p_oItem" type="Rui.ui.menu.LMenuItem" deprecated="false" usage="required">
<description><![CDATA[Object reference for the LMenuItem
 instance to be added to the menu.]]></description>
</parameter>
<parameter name="p_oItem" type="String" deprecated="false" usage="required">
<description><![CDATA[String specifying the text of the item to be added
 to the menu.]]></description>
</parameter>
<parameter name="p_oItem" type="Object" deprecated="false" usage="required">
<description><![CDATA[Object literal containing a set of menu item
 configuration properties.]]></description>
</parameter>
<parameter name="p_nGroupIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[Optional. Number indicating the group to
 which the item belongs.]]></description>
</parameter>
</parameters>
</method>
<method name="addItems" deprecated="false" scope="instance" >
<description><![CDATA[Adds an array of items to the menu.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
<parameters>
<parameter name="p_aItems" type="Array" deprecated="false" usage="required">
<description><![CDATA[Array of items to be added to the menu.  The array
 can contain strings specifying the text for each item to be created, object
 literals specifying each of the menu item configuration properties,
 or LMenuItem instances.]]></description>
</parameter>
<parameter name="p_nGroupIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[Optional. Number specifying the group to
 which the items belongs.]]></description>
</parameter>
</parameters>
</method>
<method name="addItemsByDataSet" deprecated="false" scope="instance" >
<description><![CDATA[DataSet에서 menu item을 추출해서 addItems를 수행한다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
<parameters>
<parameter name="Menu정보를" type="LDataSet" deprecated="false" usage="required">
<description><![CDATA[포함하는 LDataSet]]></description>
</parameter>
<parameter name="fields는" type="Array" deprecated="false" usage="required">
<description><![CDATA[rootValue값과, parentId, id, text, url 정보를 가지고 있는 field name을 저장한다.]]></description>
</parameter>
<parameter name="p_nGroupIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[Optional. Number specifying the group to
 which the items belongs.]]></description>
</parameter>
</parameters>
</method>
<method name="insertItem" deprecated="false" scope="instance" >
<description><![CDATA[Inserts an item into the menu at the specified index.]]></description>
<return-types>
<return-type type="Rui.ui.menu.LMenuItem" />
</return-types>
<parameters>
<parameter name="p_oItem" type="Rui.ui.menu.LMenuItem" deprecated="false" usage="required">
<description><![CDATA[Object reference for the LMenuItem
 instance to be added to the menu.]]></description>
</parameter>
<parameter name="p_oItem" type="String" deprecated="false" usage="required">
<description><![CDATA[String specifying the text of the item to be added
 to the menu.]]></description>
</parameter>
<parameter name="p_oItem" type="Object" deprecated="false" usage="required">
<description><![CDATA[Object literal containing a set of menu item
 configuration properties.]]></description>
</parameter>
<parameter name="p_nItemIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[Number indicating the ordinal position at which
 the item should be added.]]></description>
</parameter>
<parameter name="p_nGroupIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[Optional. Number indicating the group to which
 the item belongs.]]></description>
</parameter>
</parameters>
</method>
<method name="removeItem" deprecated="false" scope="instance" >
<description><![CDATA[Removes the specified item from the menu.]]></description>
<return-types>
<return-type type="Rui.ui.menu.LMenuItem" />
</return-types>
<parameters>
<parameter name="p_oObject" type="Rui.ui.menu.LMenuItem" deprecated="false" usage="required">
<description><![CDATA[Object reference for the LMenuItem
 instance to be removed from the menu.]]></description>
</parameter>
<parameter name="p_oObject" type="Number" deprecated="false" usage="required">
<description><![CDATA[Number specifying the index of the item
 to be removed.]]></description>
</parameter>
<parameter name="p_nGroupIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[Optional. Number specifying the group to
 which the item belongs.]]></description>
</parameter>
</parameters>
</method>
<method name="getItems" deprecated="false" scope="instance" >
<description><![CDATA[Returns an array of all of the items in the menu.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
</method>
<method name="getItemGroups" deprecated="false" scope="instance" >
<description><![CDATA[Multi-dimensional Array representing the menu items as they]]></description>
<return-types>
<return-type type="Array" />
</return-types>
</method>
<method name="getItem" deprecated="false" scope="instance" >
<description><![CDATA[Returns the item at the specified index.]]></description>
<return-types>
<return-type type="Rui.ui.menu.LMenuItem" />
</return-types>
<parameters>
<parameter name="p_nItemIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[Number indicating the ordinal position of the
 item to be retrieved.]]></description>
</parameter>
<parameter name="p_nGroupIndex" type="Number" deprecated="false" usage="required">
<description><![CDATA[Optional. Number indicating the group to which
 the item belongs.]]></description>
</parameter>
</parameters>
</method>
<method name="getSubmenus" deprecated="false" scope="instance" >
<description><![CDATA[Returns an array of all of the submenus that are immediate
 children of the menu.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
</method>
<method name="clearContent" deprecated="false" scope="instance" >
<description><![CDATA[Removes all of the content from the menu, including the menu
 items, group titles, header and footer.]]></description>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[Removes the menu's &amp;lt;code&amp;gt;&amp;#60;div&amp;#62;&amp;lt;/code&amp;gt; element
 (and accompanying child nodes) from the document.]]></description>
</method>
<method name="setInitialFocus" deprecated="false" scope="instance" >
<description><![CDATA[Sets focus to the menu's first enabled item.]]></description>
</method>
<method name="setInitialSelection" deprecated="false" scope="instance" >
<description><![CDATA[Sets the "selected" configuration property of the menu's first
 enabled item to "true."]]></description>
</method>
<method name="clearActiveItem" deprecated="false" scope="instance" >
<description><![CDATA[Sets the "selected" configuration property of the menu's active
 item to "false" and hides the item's submenu.]]></description>
<parameters>
<parameter name="p_bBlur" type="boolean" deprecated="false" usage="required">
<description><![CDATA[Boolean indicating if the menu's active item
 should be blurred.]]></description>
</parameter>
</parameters>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[Causes the menu to receive focus and fires the "focus" event.]]></description>
</method>
<method name="blur" deprecated="false" scope="instance" >
<description><![CDATA[Causes the menu to lose focus and fires the "blur" event.]]></description>
</method>
<method name="hasFocus" deprecated="false" scope="instance" >
<description><![CDATA[Returns a boolean indicating whether or not the menu has focus.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="disable" deprecated="false" scope="instance" >
<description><![CDATA[menu를 disable 상태로 만들기]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="enable" deprecated="false" scope="instance" >
<description><![CDATA[menu를 enable 상태로 만들기]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="subscribe" deprecated="false" scope="instance" >
<description><![CDATA[Adds the specified LCustomEvent subscriber to the menu and each of
 its submenus.]]></description>
<parameters>
<parameter name="p_type" type="string" deprecated="false" usage="required">
<description><![CDATA[the type, or name of the event]]></description>
</parameter>
<parameter name="p_fn" type="function" deprecated="false" usage="required">
<description><![CDATA[the function to exectute when the event fires]]></description>
</parameter>
<parameter name="p_obj" type="Object" deprecated="false" usage="required">
<description><![CDATA[An object to be passed along when the event
                              fires]]></description>
</parameter>
<parameter name="p_override" type="boolean" deprecated="false" usage="required">
<description><![CDATA[If true, the obj passed in becomes the
                              execution scope of the listener]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.menu.LMenuItem" deprecated="false" >
<description>Creates an item for a menu.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Creates an item for a menu.</description>
<parameters>
<parameter name="p_oObject" type="String" deprecated="false" usage="instance">
<description><![CDATA[String specifying the text of the menu item.]]></description>
</parameter>
<parameter name="p_oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Optional. Object literal specifying the
 configuration for the menu item. See configuration class documentation
 for more details.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="text" type="String" deprecated="false" scope="instance" >
<description></description>
</property>
<property name="helptext" type="
 HTMLElement" deprecated="true" scope="instance" >
<description>String specifying additional instructional text to
 accompany the text for the menu item.</description>
</property>
<property name="url" type="String" deprecated="false" scope="instance" >
<description>String specifying the URL for the menu item's anchor's
 "href" attribute.  When building a menu from existing HTML the value
 of this property will be interpreted from the menu's markup.</description>
</property>
<property name="target" type="String" deprecated="false" scope="instance" >
<description>String specifying the value for the "target" attribute
 of the menu item's anchor element. &amp;lt;strong&amp;gt;Specifying a target will
 require the user to click directly on the menu item's anchor node in
 order to cause the browser to navigate to the specified URL.&amp;lt;/strong&amp;gt;
 When building a menu from existing HTML the value of this property
 will be interpreted from the menu's markup.</description>
</property>
<property name="emphasis" type="Boolean" deprecated="true" scope="instance" >
<description>Boolean indicating if the text of the menu item will be
 rendered with emphasis.</description>
</property>
<property name="strongemphasis" type="Boolean" deprecated="true" scope="instance" >
<description>Boolean indicating if the text of the menu item will be
 rendered with strong emphasis.</description>
</property>
<property name="checked" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if the menu item should be rendered
 with a checkmark.</description>
</property>
<property name="disabled" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if the menu item should be disabled.
 (Disabled menu items are  dimmed and will not respond to user input
 or fire events.)</description>
</property>
<property name="selected" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if the menu item should
 be highlighted.</description>
</property>
<property name="submenu" type="
 HTMLElement" deprecated="false" scope="instance" >
<description>Object specifying the submenu to be appended to the
 menu item.  The value can be one of the following: &amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;Object
 specifying a LMenu instance.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;Object literal specifying the
 menu to be created.  Format: &amp;lt;code&amp;gt;{ id: [menu id], itemdata:
 [&amp;lt;a href="Rui.ui.menu.LMenu.html#itemData"&amp;gt;array of values for
 items&amp;lt;/a&amp;gt;] }&amp;lt;/code&amp;gt;.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;String specifying the id attribute
 of the &amp;lt;code&amp;gt;&amp;#60;div&amp;#62;&amp;lt;/code&amp;gt; element of the menu.&amp;lt;/li&amp;gt;&amp;lt;li&amp;gt;
 Object specifying the &amp;lt;code&amp;gt;&amp;#60;div&amp;#62;&amp;lt;/code&amp;gt; element of the
 menu.&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;</description>
</property>
<property name="onclick" type="Object" deprecated="false" scope="instance" >
<description>Object literal representing the code to be executed when
 the item is clicked.  Format:&amp;lt;br&amp;gt; &amp;lt;code&amp;gt; {&amp;lt;br&amp;gt;
 &amp;lt;strong&amp;gt;fn:&amp;lt;/strong&amp;gt; Function,   &amp;#47;&amp;#47; The handler to call when
 the event fires.&amp;lt;br&amp;gt; &amp;lt;strong&amp;gt;obj:&amp;lt;/strong&amp;gt; Object, &amp;#47;&amp;#47; An
 object to  pass back to the handler.&amp;lt;br&amp;gt; &amp;lt;strong&amp;gt;scope:&amp;lt;/strong&amp;gt;
 Object &amp;#47;&amp;#47; The object to use for the scope of the handler.
 &amp;lt;br&amp;gt; } &amp;lt;/code&amp;gt;</description>
</property>
<property name="classname" type="String" deprecated="false" scope="instance" >
<description>CSS class to be applied to the menu item's root
 &amp;lt;code&amp;gt;&amp;#60;li&amp;#62;&amp;lt;/code&amp;gt; element.  The specified class(es) are
 appended in addition to the default class as specified by the menu
 item's CSS_CLASS_NAME constant.</description>
</property>
<property name="keylistener" type="Object" deprecated="false" scope="instance" >
<description>Object literal representing the key(s) that can be used
 to trigger the LMenuItem's "click" event.  Possible attributes are
 shift (boolean), alt (boolean), ctrl (boolean) and keys (either an int
 or an array of ints representing keycodes).</description>
</property>
</configs>
<properties>
<property name="constructor" type="Rui.ui.menu.LMenuItem" deprecated="false" scope="instance" >
<description>Object reference to the menu item's constructor function.</description>
</property>
<property name="index" type="Number" deprecated="false" scope="instance" >
<description>Number indicating the ordinal position of the menu item in
 its group.</description>
</property>
<property name="groupIndex" type="Number" deprecated="false" scope="instance" >
<description>Number indicating the index of the group to which the menu
 item belongs.</description>
</property>
<property name="parent" type="Rui.ui.menu.LMenu" deprecated="false" scope="instance" >
<description>Object reference to the menu item's parent menu.</description>
</property>
<property name="element" type="HTMLLIElement" deprecated="false" scope="instance" >
<description>Object reference to the menu item's
 &amp;lt;code&amp;gt;&amp;#60;li&amp;#62;&amp;lt;/code&amp;gt; element.</description>
</property>
<property name="srcElement" type="HTMLLIElement" deprecated="false" scope="instance" >
<description>Object reference to the HTML element (either
 &amp;lt;code&amp;gt;&amp;#60;li&amp;#62;&amp;lt;/code&amp;gt;, &amp;lt;code&amp;gt;&amp;#60;optgroup&amp;#62;&amp;lt;/code&amp;gt; or
 &amp;lt;code&amp;gt;&amp;#60;option&amp;#62;&amp;lt;/code&amp;gt;) used create the menu item.</description>
</property>
<property name="value" type="Object" deprecated="false" scope="instance" >
<description>Object reference to the menu item's value.</description>
</property>
<property name="browser" type="String" deprecated="true" scope="instance" >
<description>@deprecated Use Rui.browser</description>
</property>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>Id of the menu item's root &amp;lt;code&amp;gt;&amp;#60;li&amp;#62;&amp;lt;/code&amp;gt;
 element.  This property should be set via the constructor using the
 configuration object literal.  If an id is not specified, then one will
 be created using the "generateId" method of the Dom utility.</description>
</property>
</properties>
<events>
<event name="destroy" deprecated="false">
<description><![CDATA[
Fires when the menu item's &amp;lt;code&amp;gt;&amp;#60;li&amp;#62;&amp;lt;/code&amp;gt;
 element is removed from its parent &amp;lt;code&amp;gt;&amp;#60;ul&amp;#62;&amp;lt;/code&amp;gt; element.
]]></description>
</event>
<event name="mouseOver" deprecated="false">
<description><![CDATA[
Fires when the mouse has entered the menu item.  Passes
 back the DOM Event object as an argument.
]]></description>
</event>
<event name="mouseOut" deprecated="false">
<description><![CDATA[
Fires when the mouse has left the menu item.  Passes back
 the DOM Event object as an argument.
]]></description>
</event>
<event name="mouseDown" deprecated="false">
<description><![CDATA[
Fires when the user mouses down on the menu item.  Passes
 back the DOM Event object as an argument.
]]></description>
</event>
<event name="mouseUp" deprecated="false">
<description><![CDATA[
Fires when the user releases a mouse button while the mouse
 is over the menu item.  Passes back the DOM Event object as an argument.
]]></description>
</event>
<event name="click" deprecated="false">
<description><![CDATA[
Fires when the user clicks the on the menu item.  Passes
 back the DOM Event object as an argument.
]]></description>
</event>
<event name="keyPress" deprecated="false">
<description><![CDATA[
Fires when the user presses an alphanumeric key when the
 menu item has focus.  Passes back the DOM Event object as an argument.
]]></description>
</event>
<event name="keyDown" deprecated="false">
<description><![CDATA[
Fires when the user presses a key when the menu item has
 focus.  Passes back the DOM Event object as an argument.
]]></description>
</event>
<event name="keyUp" deprecated="false">
<description><![CDATA[
Fires when the user releases a key when the menu item has
 focus.  Passes back the DOM Event object as an argument.
]]></description>
</event>
<event name="focus" deprecated="false">
<description><![CDATA[
Fires when the menu item receives focus.
]]></description>
</event>
<event name="blur" deprecated="false">
<description><![CDATA[
Fires when the menu item loses the input focus.
]]></description>
</event>
</events>
<methods>
<method name="getNextEnabledSibling" deprecated="false" scope="instance" >
<description><![CDATA[Finds the menu item's next enabled sibling.]]></description>
</method>
<method name="getPreviousEnabledSibling" deprecated="false" scope="instance" >
<description><![CDATA[Finds the menu item's previous enabled sibling.]]></description>
<return-types>
<return-type type="Rui.ui.menu.LMenuItem" />
</return-types>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[Causes the menu item to receive the focus and fires the
 focus event.]]></description>
</method>
<method name="blur" deprecated="false" scope="instance" >
<description><![CDATA[Causes the menu item to lose focus and fires the
 blur event.]]></description>
</method>
<method name="hasFocus" deprecated="false" scope="instance" >
<description><![CDATA[Returns a boolean indicating whether or not the menu item
 has focus.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="hasSubmenu" deprecated="false" scope="instance" >
<description><![CDATA[하위 메뉴를 가졌는지 true/false return]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="getRootMenu" deprecated="false" scope="instance" >
<description><![CDATA[LMenu - LMenuItem - LMenu - MenuItem의 Parent - Child 구조에서, 최상위 menu를 return]]></description>
<return-types>
<return-type type="Rui.ui.menu.LMenu" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[Removes the menu item's &amp;lt;code&amp;gt;&amp;#60;li&amp;#62;&amp;lt;/code&amp;gt; element
 from its parent &amp;lt;code&amp;gt;&amp;#60;ul&amp;#62;&amp;lt;/code&amp;gt; element.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representing the menu item.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="setText" deprecated="false" scope="instance" >
<description><![CDATA[text 변경]]></description>
<parameters>
<parameter name="text" type="String" deprecated="false" usage="required">
<description><![CDATA[String 메뉴명]]></description>
</parameter>
</parameters>
</method>
<method name="getText" deprecated="false" scope="instance" >
<description><![CDATA[메뉴 text 가져오기]]></description>
</method>
<method name="setURL" deprecated="false" scope="instance" >
<description><![CDATA[url 변경]]></description>
<parameters>
<parameter name="text" type="String" deprecated="false" usage="required">
<description><![CDATA[String url]]></description>
</parameter>
</parameters>
</method>
<method name="getURL" deprecated="false" scope="instance" >
<description><![CDATA[메뉴 url 가져오기]]></description>
</method>
<method name="setTarget" deprecated="false" scope="instance" >
<description><![CDATA[url target 변경]]></description>
<parameters>
<parameter name="text" type="String" deprecated="false" usage="required">
<description><![CDATA[String url target]]></description>
</parameter>
</parameters>
</method>
<method name="getTarget" deprecated="false" scope="instance" >
<description><![CDATA[메뉴 url target 가져오기]]></description>
</method>
<method name="check" deprecated="false" scope="instance" >
<description><![CDATA[메뉴 check 표시]]></description>
</method>
<method name="unCheck" deprecated="false" scope="instance" >
<description><![CDATA[메뉴 check 표시 제거]]></description>
</method>
<method name="disable" deprecated="false" scope="instance" >
<description><![CDATA[메뉴 비활성화]]></description>
</method>
<method name="enable" deprecated="false" scope="instance" >
<description><![CDATA[메뉴 활성화]]></description>
</method>
<method name="select" deprecated="false" scope="instance" >
<description><![CDATA[메뉴 선택]]></description>
</method>
<method name="unSelect" deprecated="false" scope="instance" >
<description><![CDATA[메뉴 선택해제]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.menu.LMenuBar" deprecated="false"  superclass="Rui.ui.menu.LMenu" >
<description>Horizontal collection of items, each of which can contain a submenu.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Horizontal collection of items, each of which can contain a submenu.</description>
<parameters>
<parameter name="p_oElement" type="String" deprecated="false" usage="instance">
<description><![CDATA[String specifying the id attribute of the]]></description>
</parameter>
<parameter name="p_oElement" type="String" deprecated="false" usage="instance">
<description><![CDATA[String specifying the id attribute of the]]></description>
</parameter>
<parameter name="p_oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Optional. Object literal specifying the
 configuration for the menu bar. See configuration class documentation for
 more details.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="position" type="String" deprecated="false" scope="instance" >
<description>String indicating how a menu bar should be positioned on the
 screen.  Possible values are "static" and "dynamic."  Static menu bars
 are visible by default and reside in the normal flow of the document
 (CSS position: static).  Dynamic menu bars are hidden by default, reside
 out of the normal flow of the document (CSS position: absolute), and can
 overlay other elements on the screen.</description>
</property>
<property name="submenualignment" type="Array" deprecated="false" scope="instance" >
<description>Array defining how submenus should be aligned to their
 parent menu bar item. The format is: [itemCorner, submenuCorner].</description>
</property>
<property name="autosubmenudisplay" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if submenus are automatically made
 visible when the user mouses over the menu bar's items.</description>
</property>
<property name="submenutoggleregion" type="Boolean" deprecated="false" scope="instance" >
<description>Boolean indicating if only a specific region of a LMenuBarItem should toggle the
 display of a submenu.  The default width of the region is determined by the value of the
 SUBMENU_TOGGLE_REGION_WIDTH property.  If set to true, the autosubmenudisplay
 configuration property will be set to false, and any click event listeners will not be
 called when the user clicks inside the submenu toggle region of a LMenuBarItem.  If the
 user clicks outside of the submenu toggle region, the LMenuBarItem will maintain its
 standard behavior.</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representing the menu bar.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.menu.LMenuBarItem" deprecated="false"  superclass="Rui.ui.menu.LMenuItem" >
<description>Creates an item for a menu bar.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Creates an item for a menu bar.</description>
<parameters>
<parameter name="p_oObject" type="String" deprecated="false" usage="instance">
<description><![CDATA[String specifying the text of the menu bar item.]]></description>
</parameter>
<parameter name="p_oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Optional. Object literal specifying the
 configuration for the menu bar item. See configuration class documentation
 for more details.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representing the menu bar item.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.menu.LContextMenu" deprecated="false"  superclass="Rui.ui.menu.LMenu" >
<description>html context 메뉴를 생성한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>html context 메뉴를 생성한다.</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LContextMenu.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="trigger" type="String|HTMLElement|Array" deprecated="false" scope="instance" >
<description>context menu가 출력될 경우의 범위를 지정하는 html dom id</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="cancel" deprecated="false" scope="instance" >
<description><![CDATA[Cancels the display of the context menu.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="defaultContextMenu" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 브라우져 기본 context메뉴 출력 여부 (기본 true)]]></description>
</parameter>
</parameters>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representing the context menu.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[Removes the context menu's &amp;lt;code&amp;gt;&amp;#60;div&amp;#62;&amp;lt;/code&amp;gt; element
 (and accompanying child nodes) from the document.]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.LUnorderedList" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>LUnorderedList</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LUnorderedList</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUnorderedList.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.ui.LUnorderedList" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>tree나 menu와 같이 계층 구조를 가지는 객체들의 수정용(CUD) 상위 추상 클래스</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>tree나 menu와 같이 계층 구조를 가지는 객체들의 수정용(CUD) 상위 추상 클래스</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUnorderedList.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="dataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>dataset</description>
</property>
<property name="renderer" type="Function" deprecated="false" scope="instance" >
<description>label출력시 사용되는 renderer</description>
</property>
<property name="focusLastest" type="boolean" deprecated="false" scope="instance" >
<description>마지막에 FOCUS되었던 노드 다시 focus할 지 여부.  dataSet load시.</description>
</property>
<property name="childDataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>동적으로 load시 사용할 child용 dataSet</description>
</property>
<property name="hasChildValue" type="Object" deprecated="false" scope="instance" >
<description>fields hasChild의 값이 hasChildValue일 경우 child를 가지고 있는 것으로 처리한다.  child를 가지고 있는 여부를 나타내는 flag값중 참인값</description>
</property>
<property name="defaultOpenDepth" type="int" deprecated="false" scope="instance" >
<description>최초에 펼처질 depth를 결정한다.</description>
</property>
<property name="defaultOpenTopIndex" type="int" deprecated="false" scope="instance" >
<description>tree나 menu가 로드될 경우 최초에 펼처질 레벨의 index</description>
</property>
<property name="onlyOneTopOpen" type="boolean" deprecated="false" scope="instance" >
<description>하나의 node만 열리게 설정하고 하나가 열리면 다른 node는 다 닫힌다.</description>
</property>
<property name="useTooltip" type="boolean" deprecated="false" scope="instance" >
<description>각 node div에 title을 지정하여 브라우저 기본 tooltip이 나타나도록 한다.</description>
</property>
<property name="useAnimation" type="boolean" deprecated="false" scope="instance" >
<description>Expand 또는 Collapse시에 Animation 사용 할지 여부</description>
</property>
<property name="syncDataSet" type="boolean" deprecated="false" scope="instance" >
<description>DataSet과 sync 여부 객체</description>
</property>
<property name="autoMark" type="boolean" deprecated="false" scope="instance" >
<description>mark시 자식 노드들도 함께 자동으로 mark할지 여부</description>
</property>
<property name="contextMenu" type="Rui.ui.menu.LContextMenu" deprecated="false" scope="instance" >
<description>context context menu를 연결하는 LContextMenu의 객체</description>
</property>
<property name="useTempId" type="boolean" deprecated="false" scope="instance" >
<description>복사하고 붙여넣기시 tempId 사용할 지 여부, tempId를 사용하지 않으면 직접 id를 생성해서 작업해야 한다.
 id는 업무 로직에 따라 생성 권장. 임시 id는 사용시 주의 요망(timestamp기반 값이 들어가므로 업무적으로 실제 id로 변경 처리 필요)</description>
</property>
</configs>
<properties>
<property name="dataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>dataset</description>
</property>
<property name="renderer" type="Function" deprecated="false" scope="instance" >
<description>label출력시 사용되는 renderer</description>
</property>
<property name="endDepth" type="int" deprecated="false" scope="instance" >
<description>endDepth을 지정할 경우 해당 depth이상은 생성하지 않는다.</description>
</property>
<property name="currentFocus" type="Rui.ui.LUnorderedListNode" deprecated="false" scope="instance" >
<description>A reference to the Node currently having the focus or null if none.</description>
</property>
<property name="focusLastest" type="Boolean" deprecated="false" scope="instance" >
<description>마지막에 FOCUS되었던 노드 다시 focus할 지 여부.  dataSet load시.</description>
</property>
<property name="childDataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>동적으로 load시 사용할 child용 dataSet</description>
</property>
<property name="hasChildValue" type="Object" deprecated="false" scope="instance" >
<description>fields hasChild의 값이 hasChildValue일 경우 child를 가지고 있는 것으로 처리한다.  child를 가지고 있는 여부를 나타내는 flag값중 참인값</description>
</property>
<property name="defaultOpenDepth" type="int" deprecated="false" scope="instance" >
<description>tree나 menu가 로드될 경우 최초에 펼처질 레벨</description>
</property>
<property name="defaultOpenTopIndex" type="int" deprecated="false" scope="instance" >
<description>menu가 로드될 경우 최초에 펼처질 레벨의 index</description>
</property>
<property name="onlyOneTopOpen" type="boolean" deprecated="false" scope="instance" >
<description>하나의 node만 열리게 설정하고 하나가 열리면 다른 node는 다 닫힌다.</description>
</property>
<property name="useTooltip" type="boolean" deprecated="false" scope="instance" >
<description>각 node div에 title을 지정하여 브라우저 기본 tooltip이 나타나도록 한다.</description>
</property>
<property name="useAnimation" type="boolean" deprecated="false" scope="instance" >
<description>Expand 또는 Collapse시에 Animation 사용 할지 여부</description>
</property>
<property name="animDuration" type="float" deprecated="false" scope="instance" >
<description>메뉴의 animation효과 작동 시간 기본 0.3초</description>
</property>
<property name="liWidth" type="int" deprecated="false" scope="instance" >
<description>li width를 고정할 경우 사용.</description>
</property>
<property name="container" type="string" deprecated="false" scope="instance" >
<description>apply to treeview dom Id</description>
</property>
<property name="autoMark" type="boolean" deprecated="false" scope="instance" >
<description>mark시 자식 노드들도 함께 자동으로 mark할지 여부</description>
</property>
<property name="contextMenu" type="Rui.ui.menu.LContextMenu" deprecated="false" scope="instance" >
<description>context context menu를 연결하는 LContextMenu의 객체</description>
</property>
<property name="useTempId" type="boolean" deprecated="false" scope="instance" >
<description>복사하고 붙여넣기시 tempId 사용할 지 여부, tempId를 사용하지 않으면 직접 id를 생성해서 작업해야 한다.
 id는 업무 로직에 따라 생성 권장. 임시 id는 사용시 주의 요망(timestamp기반 값이 들어가므로 업무적으로 실제 id로 변경 처리 필요)</description>
</property>
</properties>
<events>
<event name="nodeClick" deprecated="false">
<description><![CDATA[
node click시 발생하는 event, node가 collapse/expand toggle된다.
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[click한 node object]]></description>
</parameter>
</parameters>
</event>
<event name="dynamicLoadChild" deprecated="false">
<description><![CDATA[
childDataSet을 지정했을 경우 node click시 발생하는 event로 child dataset을 load하면 된다.
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[click한 node object]]></description>
</parameter>
<parameter name="parentId" type="Object" deprecated="false" usage="instance">
<description><![CDATA[click한 node의 record.get(this.fields.id)한 값]]></description>
</parameter>
</parameters>
</event>
<event name="focusChanged" deprecated="false">
<description><![CDATA[
리스트의 각 node가 선택되어 해당 node가 focus 되었을 경우 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="oldNode" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[이전 focus node]]></description>
</parameter>
<parameter name="newNode" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[현재 focus node]]></description>
</parameter>
</parameters>
</event>
<event name="collapse" deprecated="false">
<description><![CDATA[
node가 닫쳐졌을때 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="expand" deprecated="false">
<description><![CDATA[
node를 expand했을 때 발생
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="renderData" deprecated="false">
<description><![CDATA[
dataSet의 내용으로 전체를 다시 그렸을때 발생하는 이벤트
]]></description>
</event>
<event name="syncDataSet" deprecated="false">
<description><![CDATA[
setSyncDataSet 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="isSync" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[sync 여부]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="setSyncDataSet" deprecated="false" scope="instance" >
<description><![CDATA[dataSet과 sync상태를 셋팅하는 메소드 (대량 변경건 처리시 사용)]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="isSync" type="boolean" deprecated="false" usage="required">
<description><![CDATA[isSync값]]></description>
</parameter>
</parameters>
</method>
<method name="getNodeById" deprecated="false" scope="instance" >
<description><![CDATA[node id에 해당하는 노드를 반환]]></description>
<return-types>
<return-type type="Rui.ui.LUnorderedListNode" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[node의 id 필드에 해당되는 값]]></description>
</parameter>
</parameters>
</method>
<method name="getFocusNode" deprecated="false" scope="instance" >
<description><![CDATA[마지막에 선택한 node return하기]]></description>
<return-types>
<return-type type="Rui.ui.LUnorderedListNode" />
</return-types>
</method>
<method name="setFocusById" deprecated="false" scope="instance" >
<description><![CDATA[id값을 참조해서 수동으로 focus 주기]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setRootValue" deprecated="false" scope="instance" >
<description><![CDATA[지정한 rootValue값으로 tree 다시 그리기]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setDataSet" deprecated="false" scope="instance" >
<description><![CDATA[데이터셋을 변경하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dataSet" type="Rui.data.LDataSet" deprecated="false" usage="required">
<description><![CDATA[반영할 데이터셋]]></description>
</parameter>
</parameters>
</method>
<method name="getAllChildRecords" deprecated="false" scope="instance" >
<description><![CDATA[parentId를 가진 모든 record 가져오기]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[record의 array]]></return-description>
</return-types>
<parameters>
<parameter name="dataSet" type="Rui.data.LDataSet" deprecated="false" usage="required">
<description><![CDATA[검색할 dataSet으로 입력하지 않으면 tree의  dataSet으 사용한다.]]></description>
</parameter>
<parameter name="rs" type="Array" deprecated="false" usage="required">
<description><![CDATA[record의 array 재귀호출용]]></description>
</parameter>
</parameters>
</method>
<method name="addTopNode" deprecated="false" scope="instance" >
<description><![CDATA[최상위 depth에 label을 가지는 record 추가]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[row [optional] 생성한 record의 index return]]></return-description>
</return-types>
</method>
<method name="addChildNode" deprecated="false" scope="instance" >
<description><![CDATA[선택된 node 밑에 label을 가지는 record 추가]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[row 생성한 record의 index return]]></return-description>
</return-types>
<parameters>
<parameter name="addTop" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 최상위에 추가할 지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="deleteNode" deprecated="false" scope="instance" >
<description><![CDATA[특정 node 지우기, 지운 후에 clone한 record array를 return한다.]]></description>
<return-types>
<return-type type="array" />
</return-types>
<parameters>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="required">
<description><![CDATA[삭제할 node]]></description>
</parameter>
<parameter name="clone" type="boolean" deprecated="false" usage="required">
<description><![CDATA[clone할지 여부]]></description>
</parameter>
<parameter name="childOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[자신을 제외하고 자식만 삭제 여부]]></description>
</parameter>
<parameter name="parentId" type="Object" deprecated="false" usage="required">
<description><![CDATA[이미 record가 삭제된 상태일 경우 record를 가져올 수 없으므로 parentId를 넘겨서 refresh 만 함.]]></description>
</parameter>
</parameters>
</method>
<method name="cutNode" deprecated="false" scope="instance" >
<description><![CDATA[node cut하기]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="required">
<description><![CDATA[cut할 node]]></description>
</parameter>
</parameters>
</method>
<method name="copyNode" deprecated="false" scope="instance" >
<description><![CDATA[node copy하기, useTempId가 false이면 자식까지 copy되지 않는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="widthChilds" type="boolean" deprecated="false" usage="required">
<description><![CDATA[자식들도 같이 복사할지 여부]]></description>
</parameter>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="required">
<description><![CDATA[optional 지정하지 않으면 현재 선택된 node]]></description>
</parameter>
</parameters>
</method>
<method name="pasteNode" deprecated="false" scope="instance" >
<description><![CDATA[node paste하기]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="parentNode" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="required">
<description><![CDATA[optional 지정하지 않으면 현재 선택된 node]]></description>
</parameter>
</parameters>
</method>
<method name="isRendered" deprecated="false" scope="instance" >
<description><![CDATA[콤포넌트가 render가 됐는지 여부]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.LUnorderedListNode" deprecated="false" >
<description>LUnorderedListNode</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LUnorderedListNode</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUnorderedListNode.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.ui.LUnorderedListNode" deprecated="false" >
<description>tree나 menu 콤포넌트의 node의 최상위 클래스</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>tree나 menu 콤포넌트의 node의 최상위 클래스</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUnorderedList.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="useAnimation" type="boolean" deprecated="false" scope="instance" >
<description>animation 작동 여부</description>
</property>
<property name="useCollapseAllSibling" type="boolean" deprecated="false" scope="instance" >
<description>expand시 다른 slibling을 닫을지 여부</description>
</property>
</configs>
<properties>
<property name="useAnimation" type="boolean" deprecated="false" scope="instance" >
<description>animation 작동 여부</description>
</property>
<property name="useCollapseAllSibling" type="boolean" deprecated="false" scope="instance" >
<description>expand시 다른 slibling을 닫을지 여부</description>
</property>
<property name="childULHeight" type="int" deprecated="false" scope="instance" >
<description>expand시 자식 ul의 height</description>
</property>
</properties>
<methods>
<method name="getRecordId" deprecated="false" scope="instance" >
<description><![CDATA[현재 자신의 dataSet에 해당되는 record의 id를 리턴한다.]]></description>
<return-types>
<return-type type="string" />
<return-description><![CDATA[recordId]]></return-description>
</return-types>
</method>
<method name="getParentId" deprecated="false" scope="instance" >
<description><![CDATA[자신의 부모 node에 대한 dataSet에 해당되는 record의 id를 리턴한다.]]></description>
<return-types>
<return-type type="string" />
<return-description><![CDATA[recordId]]></return-description>
</return-types>
</method>
<method name="getParentNode" deprecated="false" scope="instance" >
<description><![CDATA[자신의 부모에 해당되는 node를 찾아 리턴한다.]]></description>
<return-types>
<return-type type="Rui.ui.LUnorderedListNode" />
</return-types>
</method>
<method name="getIdValue" deprecated="false" scope="instance" >
<description><![CDATA[ID field에 해당하는 값을 반환한다.]]></description>
<return-types>
<return-type type="object" />
</return-types>
</method>
<method name="getRecord" deprecated="false" scope="instance" >
<description><![CDATA[현재 node에 해당되는 dataSet의 record 객체를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
</return-types>
</method>
<method name="getRow" deprecated="false" scope="instance" >
<description><![CDATA[현재 node에 해당되는 dataSet의 record index를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getDepth" deprecated="false" scope="instance" >
<description><![CDATA[depth return]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[depth]]></return-description>
</return-types>
</method>
<method name="hasChild" deprecated="false" scope="instance" >
<description><![CDATA[자식을 가지고 있는지 검사]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[자식이 있으면 true]]></return-description>
</return-types>
</method>
<method name="isFocus" deprecated="false" scope="instance" >
<description><![CDATA[현재 node가 focus된 상태인지를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isMarked" deprecated="false" scope="instance" >
<description><![CDATA[현재 node의 상태가 마크되었는지를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="mark" deprecated="false" scope="instance" >
<description><![CDATA[현재 node의 상태를 mark 상태로 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="unmark" deprecated="false" scope="instance" >
<description><![CDATA[현재 node의 상태를 mark 상태를 취소한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="isLast" deprecated="false" scope="instance" >
<description><![CDATA[현재 node가 현재 같은 레벨(sibling)의 마지막 node인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isTop" deprecated="false" scope="instance" >
<description><![CDATA[최상위(root) node인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isExpand" deprecated="false" scope="instance" >
<description><![CDATA[현재 node가 펼쳐진 상태인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isCollaps" deprecated="false" scope="instance" >
<description><![CDATA[현재 node가 닫혀진 상태인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="toggleChild" deprecated="false" scope="instance" >
<description><![CDATA[노드 펼치고 접기 토글]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="expand" deprecated="false" scope="instance" >
<description><![CDATA[현재 node를 펼친다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="collapse" deprecated="false" scope="instance" >
<description><![CDATA[현재 node를 닫는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="collapseAllSibling" deprecated="false" scope="instance" >
<description><![CDATA[자신의 노드를 제외한 다른 형제노드들을 모두 접는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="exceptIndex" type="int" deprecated="false" usage="required">
<description><![CDATA[닫지 않는 top node index]]></description>
</parameter>
</parameters>
</method>
<method name="getOrder" deprecated="false" scope="instance" >
<description><![CDATA[순서 index 가져오기]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getChildNodes" deprecated="false" scope="instance" >
<description><![CDATA[하위 노드들을 배열로 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.menu.LSlideMenu" deprecated="false"  superclass="Rui.ui.LUnorderedList" >
<description>메뉴를 slide 형식으로 생성한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>메뉴를 slide 형식으로 생성한다.</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LSlideMenu.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
</methods>
</class>
<class type="Rui.ui.menu.LSlideMenuNode" deprecated="false"  superclass="Rui.ui.LUnorderedListNode" >
<description>SlideMenu의 Node</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>SlideMenu의 Node</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LSlideMenuNode.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
</class>
<class type="Rui.ui.menu.LTabMenu" deprecated="false"  superclass="Rui.ui.LUnorderedList" >
<description>tab 형식의 menu를 생성한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>tab 형식의 menu를 생성한다.</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LTabMenu.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="expandOnOver" type="Rui.ui.grid.LColumnModel" deprecated="false" scope="instance" >
<description>click이 아닌 mouseover만으로도 하위 메뉴를 나타낼지 여부</description>
</property>
</configs>
<properties>
<property name="expandOnOver" type="Rui.ui.grid.LColumnModel" deprecated="false" scope="instance" >
<description>click이 아닌 mouseover만으로도 하위 메뉴를 나타낼지 여부</description>
</property>
<property name="collapseWhenOut" type="Rui.ui.grid.LColumnModel" deprecated="false" scope="instance" >
<description>mouseover만으로도 하위 메뉴를 나타내는 expandOnOver기능을 사용시 메뉴들로부터 mouseout되면 하위메뉴들을 자동으로 collapse할지 여부</description>
</property>
</properties>
<events>
<event name="nodeOver" deprecated="false">
<description><![CDATA[
node에 mouseover시 발생하는 event, node가 expand된다.
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[click한 node object]]></description>
</parameter>
</parameters>
</event>
<event name="nodeOut" deprecated="false">
<description><![CDATA[
node에 mouseout시 발생하는 event, 사용자 설정에 따라 node가 collapse된다.
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[click한 node object]]></description>
</parameter>
</parameters>
</event>
<event name="nodeLazyCollapsed" deprecated="false">
<description><![CDATA[
node가 lazy collapsed되면 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="collapsed된" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[node object]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
</methods>
</class>
<class type="Rui.ui.menu.LTabMenuNode" deprecated="false"  superclass="Rui.ui.LUnorderedListNode" >
<description>LTabMenuNode</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LTabMenuNode</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LTabMenuNode.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
</class>
<class type="Rui.ui.tab.LTabView" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>Tab을 생성하고 관리하는 TabView 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Tab을 생성하고 관리하는 TabView 객체</description>
</constructor>
</constructors>
<configs>
<property name="tabs" type="Array" deprecated="false" scope="instance" >
<description>각 탭의 항목들을 json형식으로 정의한 배열</description>
</property>
</configs>
<properties>
<property name="contentHeight" type="int" deprecated="false" scope="instance" >
<description>content Height</description>
</property>
<property name="tabs" type="Object" deprecated="false" scope="instance" >
<description>각 탭의 항목들을 json형식으로 정의한 배열</description>
</property>
</properties>
<events>
<event name="canActiveTabChange" deprecated="false">
<description><![CDATA[
탭이 변경되었을때 발생
]]></description>
<parameters>
<parameter name="activeIndex" type="int" deprecated="false" usage="instance">
<description><![CDATA[active된 탭의 index]]></description>
</parameter>
<parameter name="activeTab" type="Rui.ui.tab.LTab" deprecated="false" usage="instance">
<description><![CDATA[active된 탭 객체]]></description>
</parameter>
<parameter name="beforeActiveTab" type="Rui.ui.tab.LTab" deprecated="false" usage="instance">
<description><![CDATA[현재 active된 탭 이전에 active 상태였던 탭 객체]]></description>
</parameter>
</parameters>
</event>
<event name="activeTabChange" deprecated="false">
<description><![CDATA[
탭이 변경되었을때 발생
]]></description>
<parameters>
<parameter name="activeIndex" type="int" deprecated="false" usage="instance">
<description><![CDATA[active된 탭의 index]]></description>
</parameter>
<parameter name="isFirst" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[처음 active 됬는지 여부]]></description>
</parameter>
<parameter name="activeTab" type="Rui.ui.tab.LTab" deprecated="false" usage="instance">
<description><![CDATA[active된 탭 객체]]></description>
</parameter>
<parameter name="beforeActiveTab" type="Rui.ui.tab.LTab" deprecated="false" usage="instance">
<description><![CDATA[현재 active된 탭 이전에 active 상태였던 탭 객체]]></description>
</parameter>
</parameters>
</event>
<event name="activeIndexChange" deprecated="false">
<description><![CDATA[
탭의 인덱스가 변경되었을때 발생
]]></description>
<parameters>
<parameter name="activeIndex" type="int" deprecated="false" usage="instance">
<description><![CDATA[active된 탭의 index]]></description>
</parameter>
<parameter name="isFirst" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[처음 active 됬는지 여부]]></description>
</parameter>
<parameter name="activeTab" type="Rui.ui.tab.LTab" deprecated="false" usage="instance">
<description><![CDATA[active된 탭 객체]]></description>
</parameter>
<parameter name="beforeActiveTab" type="Rui.ui.tab.LTab" deprecated="false" usage="instance">
<description><![CDATA[현재 active된 탭 이전에 active 상태였던 탭 객체]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="getTabCount" deprecated="false" scope="instance" >
<description><![CDATA[tab의 갯수를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="selectTab" deprecated="false" scope="instance" >
<description><![CDATA[활성화할 tab을 선택한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="index" type="int" deprecated="false" usage="required">
<description><![CDATA[선택할 탭 index]]></description>
</parameter>
</parameters>
</method>
<method name="addTabs" deprecated="false" scope="instance" >
<description><![CDATA[config를 통해 들어온 tabs 배열로 tab들을 추가한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="addTab" deprecated="false" scope="instance" >
<description><![CDATA[LTabView에 LTab을 추가하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="tab" type="Rui.ui.tab.LTab" deprecated="false" usage="required">
<description><![CDATA[LTab 객체]]></description>
</parameter>
<parameter name="index" type="Integer" deprecated="false" usage="required">
<description><![CDATA[[optional] 추가할 index]]></description>
</parameter>
</parameters>
</method>
<method name="moveTo" deprecated="false" scope="instance" >
<description><![CDATA[render후 호출되는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="index" type="int" deprecated="false" usage="required">
<description><![CDATA[스크롤을 이동할 탭의 인덱스]]></description>
</parameter>
<parameter name="useAmim" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 탭 스크롤시 animation 사용여부]]></description>
</parameter>
</parameters>
</method>
<method name="removeAt" deprecated="false" scope="instance" >
<description><![CDATA[index에 해당되는 LTab을 삭제한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="inx" type="int" deprecated="false" usage="required">
<description><![CDATA[삭제할 tab index]]></description>
</parameter>
</parameters>
</method>
<method name="getActiveIndex" deprecated="false" scope="instance" >
<description><![CDATA[현재 선택된 Tab의 index]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getActiveTab" deprecated="false" scope="instance" >
<description><![CDATA[현재 선택된 Tab을 리턴한다.]]></description>
<return-types>
<return-type type="Rui.ui.tab.LTab" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체 정보]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.tab.LTab" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>TabView에 의해 생성되어 관리되는 Tab 객체
 탭의 label을 표시하며 컨텐츠를 표시한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>TabView에 의해 생성되어 관리되는 Tab 객체
 탭의 label을 표시하며 컨텐츠를 표시한다.</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUIComponent.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="CONTENT" type="String" deprecated="false" scope="instance" >
<description>The tab's content. CONTENT_EL의 innerHTML에 할달될 내용</description>
</property>
</configs>
<properties>
<property name="label" type="String || HtmlElement" deprecated="false" scope="instance" >
<description>The tab's label text or innerHTML</description>
</property>
<property name="contentEl" type="string || HtmlElement " deprecated="false" scope="instance" >
<description>The tab's label text or innerHTML</description>
</property>
</properties>
<methods>
<method name="getContainer" deprecated="false" scope="instance" >
<description><![CDATA[컨테이너 객체를 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.LElement" />
</return-types>
</method>
<method name="addClass" deprecated="false" scope="instance" >
<description><![CDATA[Dom에 css를 추가한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="className" type="String" deprecated="false" usage="required">
<description><![CDATA[추가할 className]]></description>
</parameter>
</parameters>
</method>
<method name="hasClass" deprecated="false" scope="instance" >
<description><![CDATA[Dom에 css가 존재하는지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[element가 class name을 가지고 있는지에 대한 여부]]></return-description>
</return-types>
<parameters>
<parameter name="className" type="String" deprecated="false" usage="required">
<description><![CDATA[The className to add]]></description>
</parameter>
</parameters>
</method>
<method name="removeClass" deprecated="false" scope="instance" >
<description><![CDATA[Dom에 적용된 css를 삭제한다.]]></description>
<return-types>
<return-type type="Rui.LElement" />
<return-description><![CDATA[this]]></return-description>
</return-types>
<parameters>
<parameter name="className" type="String|Array" deprecated="false" usage="required">
<description><![CDATA[삭제할 className]]></description>
</parameter>
</parameters>
</method>
<method name="setLabel" deprecated="false" scope="instance" >
<description><![CDATA[label을 바꾼다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="html" type="String" deprecated="false" usage="required">
<description><![CDATA[text or html]]></description>
</parameter>
</parameters>
</method>
<method name="getLabel" deprecated="false" scope="instance" >
<description><![CDATA[label 값을 리턴한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Provides a readable name for the tab.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LUnorderedList" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>LUnorderedList</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LUnorderedList</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUnorderedList.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.ui.LUnorderedList" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>tree나 menu와 같이 계층 구조를 가지는 객체들의 수정용(CUD) 상위 추상 클래스</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>tree나 menu와 같이 계층 구조를 가지는 객체들의 수정용(CUD) 상위 추상 클래스</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUnorderedList.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="dataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>dataset</description>
</property>
<property name="renderer" type="Function" deprecated="false" scope="instance" >
<description>label출력시 사용되는 renderer</description>
</property>
<property name="focusLastest" type="boolean" deprecated="false" scope="instance" >
<description>마지막에 FOCUS되었던 노드 다시 focus할 지 여부.  dataSet load시.</description>
</property>
<property name="childDataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>동적으로 load시 사용할 child용 dataSet</description>
</property>
<property name="hasChildValue" type="Object" deprecated="false" scope="instance" >
<description>fields hasChild의 값이 hasChildValue일 경우 child를 가지고 있는 것으로 처리한다.  child를 가지고 있는 여부를 나타내는 flag값중 참인값</description>
</property>
<property name="defaultOpenDepth" type="int" deprecated="false" scope="instance" >
<description>최초에 펼처질 depth를 결정한다.</description>
</property>
<property name="defaultOpenTopIndex" type="int" deprecated="false" scope="instance" >
<description>tree나 menu가 로드될 경우 최초에 펼처질 레벨의 index</description>
</property>
<property name="onlyOneTopOpen" type="boolean" deprecated="false" scope="instance" >
<description>하나의 node만 열리게 설정하고 하나가 열리면 다른 node는 다 닫힌다.</description>
</property>
<property name="useTooltip" type="boolean" deprecated="false" scope="instance" >
<description>각 node div에 title을 지정하여 브라우저 기본 tooltip이 나타나도록 한다.</description>
</property>
<property name="useAnimation" type="boolean" deprecated="false" scope="instance" >
<description>Expand 또는 Collapse시에 Animation 사용 할지 여부</description>
</property>
<property name="syncDataSet" type="boolean" deprecated="false" scope="instance" >
<description>DataSet과 sync 여부 객체</description>
</property>
<property name="autoMark" type="boolean" deprecated="false" scope="instance" >
<description>mark시 자식 노드들도 함께 자동으로 mark할지 여부</description>
</property>
<property name="contextMenu" type="Rui.ui.menu.LContextMenu" deprecated="false" scope="instance" >
<description>context context menu를 연결하는 LContextMenu의 객체</description>
</property>
<property name="useTempId" type="boolean" deprecated="false" scope="instance" >
<description>복사하고 붙여넣기시 tempId 사용할 지 여부, tempId를 사용하지 않으면 직접 id를 생성해서 작업해야 한다.
 id는 업무 로직에 따라 생성 권장. 임시 id는 사용시 주의 요망(timestamp기반 값이 들어가므로 업무적으로 실제 id로 변경 처리 필요)</description>
</property>
</configs>
<properties>
<property name="dataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>dataset</description>
</property>
<property name="renderer" type="Function" deprecated="false" scope="instance" >
<description>label출력시 사용되는 renderer</description>
</property>
<property name="endDepth" type="int" deprecated="false" scope="instance" >
<description>endDepth을 지정할 경우 해당 depth이상은 생성하지 않는다.</description>
</property>
<property name="currentFocus" type="Rui.ui.LUnorderedListNode" deprecated="false" scope="instance" >
<description>A reference to the Node currently having the focus or null if none.</description>
</property>
<property name="focusLastest" type="Boolean" deprecated="false" scope="instance" >
<description>마지막에 FOCUS되었던 노드 다시 focus할 지 여부.  dataSet load시.</description>
</property>
<property name="childDataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>동적으로 load시 사용할 child용 dataSet</description>
</property>
<property name="hasChildValue" type="Object" deprecated="false" scope="instance" >
<description>fields hasChild의 값이 hasChildValue일 경우 child를 가지고 있는 것으로 처리한다.  child를 가지고 있는 여부를 나타내는 flag값중 참인값</description>
</property>
<property name="defaultOpenDepth" type="int" deprecated="false" scope="instance" >
<description>tree나 menu가 로드될 경우 최초에 펼처질 레벨</description>
</property>
<property name="defaultOpenTopIndex" type="int" deprecated="false" scope="instance" >
<description>menu가 로드될 경우 최초에 펼처질 레벨의 index</description>
</property>
<property name="onlyOneTopOpen" type="boolean" deprecated="false" scope="instance" >
<description>하나의 node만 열리게 설정하고 하나가 열리면 다른 node는 다 닫힌다.</description>
</property>
<property name="useTooltip" type="boolean" deprecated="false" scope="instance" >
<description>각 node div에 title을 지정하여 브라우저 기본 tooltip이 나타나도록 한다.</description>
</property>
<property name="useAnimation" type="boolean" deprecated="false" scope="instance" >
<description>Expand 또는 Collapse시에 Animation 사용 할지 여부</description>
</property>
<property name="animDuration" type="float" deprecated="false" scope="instance" >
<description>메뉴의 animation효과 작동 시간 기본 0.3초</description>
</property>
<property name="liWidth" type="int" deprecated="false" scope="instance" >
<description>li width를 고정할 경우 사용.</description>
</property>
<property name="container" type="string" deprecated="false" scope="instance" >
<description>apply to treeview dom Id</description>
</property>
<property name="autoMark" type="boolean" deprecated="false" scope="instance" >
<description>mark시 자식 노드들도 함께 자동으로 mark할지 여부</description>
</property>
<property name="contextMenu" type="Rui.ui.menu.LContextMenu" deprecated="false" scope="instance" >
<description>context context menu를 연결하는 LContextMenu의 객체</description>
</property>
<property name="useTempId" type="boolean" deprecated="false" scope="instance" >
<description>복사하고 붙여넣기시 tempId 사용할 지 여부, tempId를 사용하지 않으면 직접 id를 생성해서 작업해야 한다.
 id는 업무 로직에 따라 생성 권장. 임시 id는 사용시 주의 요망(timestamp기반 값이 들어가므로 업무적으로 실제 id로 변경 처리 필요)</description>
</property>
</properties>
<events>
<event name="nodeClick" deprecated="false">
<description><![CDATA[
node click시 발생하는 event, node가 collapse/expand toggle된다.
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[click한 node object]]></description>
</parameter>
</parameters>
</event>
<event name="dynamicLoadChild" deprecated="false">
<description><![CDATA[
childDataSet을 지정했을 경우 node click시 발생하는 event로 child dataset을 load하면 된다.
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[click한 node object]]></description>
</parameter>
<parameter name="parentId" type="Object" deprecated="false" usage="instance">
<description><![CDATA[click한 node의 record.get(this.fields.id)한 값]]></description>
</parameter>
</parameters>
</event>
<event name="focusChanged" deprecated="false">
<description><![CDATA[
리스트의 각 node가 선택되어 해당 node가 focus 되었을 경우 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="oldNode" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[이전 focus node]]></description>
</parameter>
<parameter name="newNode" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[현재 focus node]]></description>
</parameter>
</parameters>
</event>
<event name="collapse" deprecated="false">
<description><![CDATA[
node가 닫쳐졌을때 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="expand" deprecated="false">
<description><![CDATA[
node를 expand했을 때 발생
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="renderData" deprecated="false">
<description><![CDATA[
dataSet의 내용으로 전체를 다시 그렸을때 발생하는 이벤트
]]></description>
</event>
<event name="syncDataSet" deprecated="false">
<description><![CDATA[
setSyncDataSet 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="isSync" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[sync 여부]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="setSyncDataSet" deprecated="false" scope="instance" >
<description><![CDATA[dataSet과 sync상태를 셋팅하는 메소드 (대량 변경건 처리시 사용)]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="isSync" type="boolean" deprecated="false" usage="required">
<description><![CDATA[isSync값]]></description>
</parameter>
</parameters>
</method>
<method name="getNodeById" deprecated="false" scope="instance" >
<description><![CDATA[node id에 해당하는 노드를 반환]]></description>
<return-types>
<return-type type="Rui.ui.LUnorderedListNode" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[node의 id 필드에 해당되는 값]]></description>
</parameter>
</parameters>
</method>
<method name="getFocusNode" deprecated="false" scope="instance" >
<description><![CDATA[마지막에 선택한 node return하기]]></description>
<return-types>
<return-type type="Rui.ui.LUnorderedListNode" />
</return-types>
</method>
<method name="setFocusById" deprecated="false" scope="instance" >
<description><![CDATA[id값을 참조해서 수동으로 focus 주기]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setRootValue" deprecated="false" scope="instance" >
<description><![CDATA[지정한 rootValue값으로 tree 다시 그리기]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setDataSet" deprecated="false" scope="instance" >
<description><![CDATA[데이터셋을 변경하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dataSet" type="Rui.data.LDataSet" deprecated="false" usage="required">
<description><![CDATA[반영할 데이터셋]]></description>
</parameter>
</parameters>
</method>
<method name="getAllChildRecords" deprecated="false" scope="instance" >
<description><![CDATA[parentId를 가진 모든 record 가져오기]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[record의 array]]></return-description>
</return-types>
<parameters>
<parameter name="dataSet" type="Rui.data.LDataSet" deprecated="false" usage="required">
<description><![CDATA[검색할 dataSet으로 입력하지 않으면 tree의  dataSet으 사용한다.]]></description>
</parameter>
<parameter name="rs" type="Array" deprecated="false" usage="required">
<description><![CDATA[record의 array 재귀호출용]]></description>
</parameter>
</parameters>
</method>
<method name="addTopNode" deprecated="false" scope="instance" >
<description><![CDATA[최상위 depth에 label을 가지는 record 추가]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[row [optional] 생성한 record의 index return]]></return-description>
</return-types>
</method>
<method name="addChildNode" deprecated="false" scope="instance" >
<description><![CDATA[선택된 node 밑에 label을 가지는 record 추가]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[row 생성한 record의 index return]]></return-description>
</return-types>
<parameters>
<parameter name="addTop" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 최상위에 추가할 지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="deleteNode" deprecated="false" scope="instance" >
<description><![CDATA[특정 node 지우기, 지운 후에 clone한 record array를 return한다.]]></description>
<return-types>
<return-type type="array" />
</return-types>
<parameters>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="required">
<description><![CDATA[삭제할 node]]></description>
</parameter>
<parameter name="clone" type="boolean" deprecated="false" usage="required">
<description><![CDATA[clone할지 여부]]></description>
</parameter>
<parameter name="childOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[자신을 제외하고 자식만 삭제 여부]]></description>
</parameter>
<parameter name="parentId" type="Object" deprecated="false" usage="required">
<description><![CDATA[이미 record가 삭제된 상태일 경우 record를 가져올 수 없으므로 parentId를 넘겨서 refresh 만 함.]]></description>
</parameter>
</parameters>
</method>
<method name="cutNode" deprecated="false" scope="instance" >
<description><![CDATA[node cut하기]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="required">
<description><![CDATA[cut할 node]]></description>
</parameter>
</parameters>
</method>
<method name="copyNode" deprecated="false" scope="instance" >
<description><![CDATA[node copy하기, useTempId가 false이면 자식까지 copy되지 않는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="widthChilds" type="boolean" deprecated="false" usage="required">
<description><![CDATA[자식들도 같이 복사할지 여부]]></description>
</parameter>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="required">
<description><![CDATA[optional 지정하지 않으면 현재 선택된 node]]></description>
</parameter>
</parameters>
</method>
<method name="pasteNode" deprecated="false" scope="instance" >
<description><![CDATA[node paste하기]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="parentNode" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="required">
<description><![CDATA[optional 지정하지 않으면 현재 선택된 node]]></description>
</parameter>
</parameters>
</method>
<method name="isRendered" deprecated="false" scope="instance" >
<description><![CDATA[콤포넌트가 render가 됐는지 여부]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.LUnorderedListNode" deprecated="false" >
<description>LUnorderedListNode</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LUnorderedListNode</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUnorderedListNode.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.ui.LUnorderedListNode" deprecated="false" >
<description>tree나 menu 콤포넌트의 node의 최상위 클래스</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>tree나 menu 콤포넌트의 node의 최상위 클래스</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUnorderedList.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="useAnimation" type="boolean" deprecated="false" scope="instance" >
<description>animation 작동 여부</description>
</property>
<property name="useCollapseAllSibling" type="boolean" deprecated="false" scope="instance" >
<description>expand시 다른 slibling을 닫을지 여부</description>
</property>
</configs>
<properties>
<property name="useAnimation" type="boolean" deprecated="false" scope="instance" >
<description>animation 작동 여부</description>
</property>
<property name="useCollapseAllSibling" type="boolean" deprecated="false" scope="instance" >
<description>expand시 다른 slibling을 닫을지 여부</description>
</property>
<property name="childULHeight" type="int" deprecated="false" scope="instance" >
<description>expand시 자식 ul의 height</description>
</property>
</properties>
<methods>
<method name="getRecordId" deprecated="false" scope="instance" >
<description><![CDATA[현재 자신의 dataSet에 해당되는 record의 id를 리턴한다.]]></description>
<return-types>
<return-type type="string" />
<return-description><![CDATA[recordId]]></return-description>
</return-types>
</method>
<method name="getParentId" deprecated="false" scope="instance" >
<description><![CDATA[자신의 부모 node에 대한 dataSet에 해당되는 record의 id를 리턴한다.]]></description>
<return-types>
<return-type type="string" />
<return-description><![CDATA[recordId]]></return-description>
</return-types>
</method>
<method name="getParentNode" deprecated="false" scope="instance" >
<description><![CDATA[자신의 부모에 해당되는 node를 찾아 리턴한다.]]></description>
<return-types>
<return-type type="Rui.ui.LUnorderedListNode" />
</return-types>
</method>
<method name="getIdValue" deprecated="false" scope="instance" >
<description><![CDATA[ID field에 해당하는 값을 반환한다.]]></description>
<return-types>
<return-type type="object" />
</return-types>
</method>
<method name="getRecord" deprecated="false" scope="instance" >
<description><![CDATA[현재 node에 해당되는 dataSet의 record 객체를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
</return-types>
</method>
<method name="getRow" deprecated="false" scope="instance" >
<description><![CDATA[현재 node에 해당되는 dataSet의 record index를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getDepth" deprecated="false" scope="instance" >
<description><![CDATA[depth return]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[depth]]></return-description>
</return-types>
</method>
<method name="hasChild" deprecated="false" scope="instance" >
<description><![CDATA[자식을 가지고 있는지 검사]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[자식이 있으면 true]]></return-description>
</return-types>
</method>
<method name="isFocus" deprecated="false" scope="instance" >
<description><![CDATA[현재 node가 focus된 상태인지를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isMarked" deprecated="false" scope="instance" >
<description><![CDATA[현재 node의 상태가 마크되었는지를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="mark" deprecated="false" scope="instance" >
<description><![CDATA[현재 node의 상태를 mark 상태로 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="unmark" deprecated="false" scope="instance" >
<description><![CDATA[현재 node의 상태를 mark 상태를 취소한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="isLast" deprecated="false" scope="instance" >
<description><![CDATA[현재 node가 현재 같은 레벨(sibling)의 마지막 node인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isTop" deprecated="false" scope="instance" >
<description><![CDATA[최상위(root) node인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isExpand" deprecated="false" scope="instance" >
<description><![CDATA[현재 node가 펼쳐진 상태인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isCollaps" deprecated="false" scope="instance" >
<description><![CDATA[현재 node가 닫혀진 상태인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="toggleChild" deprecated="false" scope="instance" >
<description><![CDATA[노드 펼치고 접기 토글]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="expand" deprecated="false" scope="instance" >
<description><![CDATA[현재 node를 펼친다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="collapse" deprecated="false" scope="instance" >
<description><![CDATA[현재 node를 닫는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="collapseAllSibling" deprecated="false" scope="instance" >
<description><![CDATA[자신의 노드를 제외한 다른 형제노드들을 모두 접는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="exceptIndex" type="int" deprecated="false" usage="required">
<description><![CDATA[닫지 않는 top node index]]></description>
</parameter>
</parameters>
</method>
<method name="getOrder" deprecated="false" scope="instance" >
<description><![CDATA[순서 index 가져오기]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getChildNodes" deprecated="false" scope="instance" >
<description><![CDATA[하위 노드들을 배열로 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.tree.LTreeView" deprecated="false"  superclass="Rui.ui.LUnorderedList" >
<description>트리를 출력하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>트리를 출력하는 객체</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LTreeView.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="toggleByLabel" type="boolean" deprecated="false" scope="instance" >
<description>label click시 toggle할지 여부</description>
</property>
<property name="nodeType" type="string" deprecated="false" scope="instance" >
<description>nodeType : 트리의 checkbox를 출력할지 단순 text를 출력할지 결정한다.</description>
</property>
<property name="showFolder" type="boolean" deprecated="false" scope="instance" >
<description>folder image를 보여 줄 지 여부</description>
</property>
</configs>
<properties>
<property name="toggleByLabel" type="boolean" deprecated="false" scope="instance" >
<description>label click시 toggle할지 여부</description>
</property>
<property name="nodeType" type="string" deprecated="false" scope="instance" >
<description>nodeType : text|checkbox</description>
</property>
<property name="showFolder" type="boolean" deprecated="false" scope="instance" >
<description>folder image를 보여 줄 지 여부</description>
</property>
</properties>
<events>
<event name="nodeImageClick" deprecated="false">
<description><![CDATA[
node의 +/- image를 click했을 때 발생
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="labelClick" deprecated="false">
<description><![CDATA[
node의 label을 click했을 때 발생
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="checkboxClick" deprecated="false">
<description><![CDATA[
node의 check box를 click했을 때 발생
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="checked" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[check여부]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="openDepthNode" deprecated="false" scope="instance" >
<description><![CDATA[Open node depth]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.tree.LTreeViewNode" deprecated="false"  superclass="Rui.ui.LUnorderedListNode" >
<description>TreeView의 Node</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>TreeView의 Node</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LTreeViewNode.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
</methods>
</class>
<class type="Rui.data.LXmlDataSet" deprecated="false"  superclass="Rui.data.LDataSet" >
<description>LXmlDataSet</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LXmlDataSet</description>
<parameters>
<parameter name="The" type="Object" deprecated="false" usage="instance">
<description><![CDATA[intial LXmlDataSet.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="getReadResponseData" deprecated="false" scope="instance" >
<description><![CDATA[현재 DataSet 기준으로 결과 데이터를 Object로 변환하여 리턴]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="conn" type="Object" deprecated="false" usage="required">
<description><![CDATA[응답 객체]]></description>
</parameter>
</parameters>
</method>
<method name="serialize" deprecated="false" scope="instance" >
<description><![CDATA[데이터 정보를 문자열로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[문자열]]></return-description>
</return-types>
</method>
<method name="serializeModified" deprecated="false" scope="instance" >
<description><![CDATA[변경된 데이터 정보를 문자열로 리턴한다.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[변경된 문자열]]></return-description>
</return-types>
</method>
</methods>
</class>
<class type="Rui.dd.LDDList" deprecated="false"  superclass="Rui.dd.LDDProxy" >
<description></description>
<constructors>
<constructor scope="instance" deprecated="false">
<description></description>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="instance">
<description><![CDATA[드랍 대상인 element의 id]]></description>
</parameter>
<parameter name="group" type="String" deprecated="false" usage="instance">
<description><![CDATA[연관된 LDragDrop object들의 그룹]]></description>
</parameter>
<parameter name="attributes" type="object" deprecated="false" usage="instance">
<description><![CDATA[설정 가능한 attribute를 포함한 object
                 LDragDrop에 추가적으로 LDDList에 대해 유효한 속성들:]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.dd.LDDOnTop" deprecated="false"  superclass="Rui.dd.LDD" >
<description></description>
<constructors>
<constructor scope="instance" deprecated="false">
<description></description>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="instance">
<description><![CDATA[드랍 대상인 element의 id]]></description>
</parameter>
<parameter name="group" type="String" deprecated="false" usage="instance">
<description><![CDATA[연관된 LDragDrop object들의 그룹]]></description>
</parameter>
<parameter name="attributes" type="object" deprecated="false" usage="instance">
<description><![CDATA[설정 가능한 attribute를 포함한 object
                 LDragDrop에 추가적으로 LDDOnTop에 대해 유효한 속성들:]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.dd.LDDPlayer" deprecated="false"  superclass="Rui.dd.LDDProxy" >
<description></description>
<constructors>
<constructor scope="instance" deprecated="false">
<description></description>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="instance">
<description><![CDATA[드랍 대상인 element의 id]]></description>
</parameter>
<parameter name="group" type="String" deprecated="false" usage="instance">
<description><![CDATA[연관된 LDragDrop object들의 그룹]]></description>
</parameter>
<parameter name="attributes" type="object" deprecated="false" usage="instance">
<description><![CDATA[설정 가능한 attribute를 포함한 object
                 LDragDrop에 추가적으로 LDDPlayer에 대해 유효한 속성들:]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.dd.LDDRegion" deprecated="false"  superclass="Rui.dd.LDD" >
<description></description>
<constructors>
<constructor scope="instance" deprecated="false">
<description></description>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="instance">
<description><![CDATA[드랍 대상인 element의 id]]></description>
</parameter>
<parameter name="group" type="String" deprecated="false" usage="instance">
<description><![CDATA[연관된 LDragDrop object들의 그룹]]></description>
</parameter>
<parameter name="attributes" type="object" deprecated="false" usage="instance">
<description><![CDATA[설정 가능한 attribute를 포함한 object
                 LDragDrop에 추가적으로 LDDRegion에 대해 유효한 속성들:]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.fx.LColorAnim" deprecated="false"  superclass="Rui.fx.LAnim" >
<description>color 전환을 위한 LAnim subclass.
 &amp;lt;p&amp;gt;Usage: &amp;lt;code&amp;gt;var myAnim = new Y.LColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.LEasing.easeOut);&amp;lt;/code&amp;gt; 컬러값은 다음과 같이 지정될 수 있다. 112233, #112233,
 [255,255,255], or rgb(255,255,255)&amp;lt;/p&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>color 전환을 위한 LAnim subclass.
 &amp;lt;p&amp;gt;Usage: &amp;lt;code&amp;gt;var myAnim = new Y.LColorAnim(el, { backgroundColor: { from: '#FF0000', to: '#FFFFFF' } }, 1, Y.LEasing.easeOut);&amp;lt;/code&amp;gt; 컬러값은 다음과 같이 지정될 수 있다. 112233, #112233,
 [255,255,255], or rgb(255,255,255)&amp;lt;/p&amp;gt;</description>
<parameters>
<parameter name="el" type="HTMLElement | String" deprecated="false" usage="instance">
<description><![CDATA[animated 되어질 element에 대한 참조]]></description>
</parameter>
<parameter name="attributes" type="Object" deprecated="false" usage="instance">
<description><![CDATA[animated될 attribute
 각각의 attribute는 최소한 "to"나 "by" member가 정의된 object이다.
 추가적인 옵션 member들은 "from"(defaults to current value)과 "unit"(defaults to "px") 이다.
 모든 attribute 이름은 camelCase 방식을 사용한다.]]></description>
</parameter>
<parameter name="duration" type="Number" deprecated="false" usage="instance">
<description><![CDATA[(optional, 기본값 1초) animation의 길이 (frames or seconds), defaults to time-based]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="instance">
<description><![CDATA[(optional, Rui.fx.LEasing.easeNone 기본값) 각 frame별 attribute에 적용되는 값을 계산 (일반적으로 Rui.fx.LEasing method)]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<methods>
</methods>
</class>
<class type="Rui.fx.LScrollAnim" deprecated="false" >
<description>LAnim subclass for scrolling elements to a position defined by the "scroll" member of "attributes".
 "attribute"의 "scroll" member에 의해 정의된 위치로 element들을 스크롤하기 위한 LAnim subclass.
 All "scroll" members are arrays with x, y scroll positions.
 모든 "scroll" member는 x, y 스크롤 위치 배열이다.
 &amp;lt;p&amp;gt;Usage: &amp;lt;code&amp;gt;var myAnim = new Rui.fx.LScrollAnim(el, { scroll: { to: [0, 800] } }, 1, Rui.fx.LEasing.easeOut);&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LAnim subclass for scrolling elements to a position defined by the "scroll" member of "attributes".
 "attribute"의 "scroll" member에 의해 정의된 위치로 element들을 스크롤하기 위한 LAnim subclass.
 All "scroll" members are arrays with x, y scroll positions.
 모든 "scroll" member는 x, y 스크롤 위치 배열이다.
 &amp;lt;p&amp;gt;Usage: &amp;lt;code&amp;gt;var myAnim = new Rui.fx.LScrollAnim(el, { scroll: { to: [0, 800] } }, 1, Rui.fx.LEasing.easeOut);&amp;lt;/code&amp;gt;&amp;lt;/p&amp;gt;</description>
<parameters>
<parameter name="el" type="String or HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[animated 되어질 element에 대한 참조]]></description>
</parameter>
<parameter name="attributes" type="Object" deprecated="false" usage="instance">
<description><![CDATA[animated될 attribute
 각각의 attribute는 최소한 "to"나 "by" member가 정의된 object이다.
 추가적인 옵션 member들은 "from"(defaults to current value)과 "unit"(defaults to "px") 이다.
 모든 attribute 이름은 camelCase 방식을 사용한다.]]></description>
</parameter>
<parameter name="duration" type="Number" deprecated="false" usage="instance">
<description><![CDATA[(optional, 기본값 1초) animation의 길이 (frames or seconds), defaults to time-based]]></description>
</parameter>
<parameter name="method" type="Function" deprecated="false" usage="instance">
<description><![CDATA[(optional, Rui.fx.LEasing.easeNone 기본값) 각 frame별 attribute에 적용되는 값을 계산 (일반적으로 Rui.fx.LEasing method)]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<methods>
</methods>
</class>
<class type="Rui.ui.LCommonPanel" deprecated="false" >
<description>LCommonPanel</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LCommonPanel</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LCommonPanel.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
</methods>
</class>
<class type="Rui.ui.LFileUploadDialog" deprecated="false"  superclass="Rui.ui.LDialog" >
<description>파일을 첨부하여 서버로 업로드하는데 필요한 업로드용 dialog
 LFileUploadDialog</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>파일을 첨부하여 서버로 업로드하는데 필요한 업로드용 dialog
 LFileUploadDialog</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LFileUploadDialog.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="url" type="String" deprecated="false" scope="instance" >
<description>upload url 경로</description>
</property>
<property name="name" type="String" deprecated="false" scope="instance" >
<description>dialog내에 생성되는 fileBox의 name값</description>
</property>
<property name="emptyMsg" type="String" deprecated="false" scope="instance" >
<description>파일 선택 메시지</description>
</property>
<property name="statusUrl" type="String" deprecated="false" scope="instance" >
<description>상태를 확인하는 url</description>
</property>
<property name="params" type="Object" deprecated="false" scope="instance" >
<description>파일 업로드시 request의 파라미터 설정한다.</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="setProgressValue" deprecated="false" scope="instance" >
<description><![CDATA[progress의 진행 값을 반영한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="percent" type="int" deprecated="false" usage="required">
<description><![CDATA[진행값]]></description>
</parameter>
</parameters>
</method>
<method name="getParams" deprecated="false" scope="instance" >
<description><![CDATA[params 객체를 리턴한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
<method name="setParams" deprecated="false" scope="instance" >
<description><![CDATA[params 객체를 변경한다.]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LFileUploadPanel" deprecated="false"  superclass="Rui.ui.LCommonPanel" >
<description>파일을 첨부하여 서버로 업로드하는데 필요한 업로드용 panel
 LFileUploadPanel</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>파일을 첨부하여 서버로 업로드하는데 필요한 업로드용 panel
 LFileUploadPanel</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LFileUploadPanel.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="show" deprecated="false" scope="instance" >
<description><![CDATA[객체 render]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="hide" deprecated="false" scope="instance" >
<description><![CDATA[객체 render]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LFocusNotification" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>특정 영역에 포커스하여 알림 메시지를 출력하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>특정 영역에 포커스하여 알림 메시지를 출력하는 객체</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LFocusNotification.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="arrowCss" type="String" deprecated="false" scope="instance" >
<description>viewer의 Arrow 이미지 css를 적용한다.</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="closed" deprecated="false">
<description><![CDATA[
창이 닫으면 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="hide" deprecated="false" scope="instance" >
<description><![CDATA[메시지 창을 숨긴다. LFocusNotification은 hide시 자신의 객체를 destory 한다.]]></description>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LFrameDialog" deprecated="false"  superclass="Rui.ui.LDialog" >
<description>IFRAME으로 채워지는 Dialog
 Dialog내부 BODY의 컨텐츠를 IFRAME을 이용하여 구성하며, 이 IFRAME에 URL을 지정하여 화면에 출력한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>IFRAME으로 채워지는 Dialog
 Dialog내부 BODY의 컨텐츠를 IFRAME을 이용하여 구성하며, 이 IFRAME에 URL을 지정하여 화면에 출력한다.</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LFrameDialog.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="title" type="String" deprecated="false" scope="instance" >
<description>Dialog의 Title</description>
</property>
<property name="hostDialogDeliveryInterval" type="int" deprecated="false" scope="instance" >
<description>IFrame의 contentWindow에 FrameDialog 객체를 전달할 Interval 값
 FrameDialog 내부에 생성되는 IFrame에 컨텐츠가 준비되면 이 FrameDialog 객체를 IFrame내 contentWindow에 전달하여 컨텐츠내에서 사용할 수 있어야 한다.
 이때 전달할 시점을 정하는 Timer의 interval값</description>
</property>
<property name="visible" type="Boolean" deprecated="false" scope="instance" >
<description>Specifies whether the Module is visible on the page.</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="getFrameWindow" deprecated="false" scope="instance" >
<description><![CDATA[iframe의 window 객체를 리턴한다.]]></description>
<return-types>
<return-type type="HTMLElement" />
</return-types>
</method>
<method name="getFrameDocumentEl" deprecated="false" scope="instance" >
<description><![CDATA[iframe의 document 객체를 리턴한다.]]></description>
<return-types>
<return-type type="HTMLElement" />
</return-types>
</method>
<method name="setUrl" deprecated="false" scope="instance" >
<description><![CDATA[iframe에 url를 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="hide" deprecated="false" scope="instance" >
<description><![CDATA[hide]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
<method name="setWidth" deprecated="false" scope="instance" >
<description><![CDATA[다이얼로그의 너비 설정]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
<method name="setHeight" deprecated="false" scope="instance" >
<description><![CDATA[다이얼로그의 높이 설정]]></description>
<return-types>
<return-type type="Object" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LGuide" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>화면 가이드를 지원하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>화면 가이드를 지원하는 객체</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LGuide.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="pageName" type="String" deprecated="false" scope="instance" >
<description>현재 페이지의 고유 문자열</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="getBoolean" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 boolean값으로 얻어오는 메소드]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[키 이름에 해당되는 결과 값]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[상태정보를 얻어오는 키 이름]]></description>
</parameter>
</parameters>
</method>
<method name="getInt" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 Int로 얻어오는 메소드]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[키 이름에 해당되는 결과 값]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[상태정보를 얻어오는 키 이름]]></description>
</parameter>
</parameters>
</method>
<method name="getToday" deprecated="false" scope="instance" >
<description><![CDATA[상태정보를 하루에 한번만 값을 true로 얻어오는 메소드]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[키 이름에 해당되는 결과 값]]></return-description>
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[상태정보를 얻어오는 키 이름]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.LGuideManager" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>화면 가이드를 지원하는 LGuide객체 관리자</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>화면 가이드를 지원하는 LGuide객체 관리자</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LGuideManager.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="showPageGuide" type="boolean" deprecated="false" scope="instance" >
<description>가이드 기능을 실행할 것인지 여부</description>
</property>
<property name="pageName" type="String" deprecated="false" scope="instance" >
<description>현재 페이지의 고유 문자열</description>
</property>
<property name="pageUrl" type="String" deprecated="false" scope="instance" >
<description>guide 스크립트가 포함된 js 파일(쓰지 않으면 pageName + '_guide.js'로 기본지정)</description>
</property>
<property name="webStore" type="Rui.webdb.LWebStorage" deprecated="false" scope="instance" >
<description>Rui.webdb.LWebStorage 객체</description>
</property>
<property name="params" type="Object" deprecated="false" scope="instance" >
<description>params 객체</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="clear" deprecated="false" scope="instance" >
<description><![CDATA[현재 페이지의 가이드 상태 정보를 모두 초기화한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="invokeGuideFn" deprecated="false" scope="instance" >
<description><![CDATA[사용자 가이드 메소드를 호출한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="name" type="String" deprecated="false" usage="required">
<description><![CDATA[호출할 메소드 명]]></description>
</parameter>
</parameters>
</method>
<method name="addParams" deprecated="false" scope="instance" >
<description><![CDATA[params 정보를 추가한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="params" type="Object" deprecated="false" usage="required">
<description><![CDATA[params 정보]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.LInlineEditor" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>LInlineEditor</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LInlineEditor</description>
</constructor>
</constructors>
<configs>
<property name="field" type="Object" deprecated="false" scope="instance" >
<description>field 객체</description>
</property>
<property name="isDisable" type="boolean" deprecated="false" scope="instance" >
<description>disable 여부</description>
</property>
<property name="enterStopEdit" type="boolean" deprecated="false" scope="instance" >
<description>enter key 입력시 stop edit 여부</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="isEdit" deprecated="false">
<description><![CDATA[
edit가 시작할때 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this 객체]]></description>
</parameter>
<parameter name="target" type="HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[target객체]]></description>
</parameter>
<parameter name="event" type="Object" deprecated="false" usage="instance">
<description><![CDATA[event객체]]></description>
</parameter>
</parameters>
</event>
<event name="startEdit" deprecated="false">
<description><![CDATA[
edit가 시작할때 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this 객체]]></description>
</parameter>
<parameter name="field" type="Rui.form.LField" deprecated="false" usage="instance">
<description><![CDATA[편집 editor 객체]]></description>
</parameter>
</parameters>
</event>
<event name="endEdit" deprecated="false">
<description><![CDATA[
edit가 시작할때 호출되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this 객체]]></description>
</parameter>
<parameter name="field" type="Rui.form.LField" deprecated="false" usage="instance">
<description><![CDATA[편집 editor 객체]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="enable" deprecated="false" scope="instance" >
<description><![CDATA[editor를 사용 가능 하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="disable" deprecated="false" scope="instance" >
<description><![CDATA[editor를 사용 불가능 하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LLoadPage" deprecated="false" >
<description>LLoadPage</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LLoadPage</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LLoadPage.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="timeout" type="Object" deprecated="false" scope="instance" >
<description>Load Page가 자동으로 hide되는 시간</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="show" deprecated="false" scope="instance" >
<description><![CDATA[wait panel 객체를 출력하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="hide" deprecated="false" scope="instance" >
<description><![CDATA[wait panel 객체를 숨기는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LPanelManager" deprecated="false" >
<description>여러개의 패널이 걸쳐있을 경우 focus상태를 관리하는데 이용</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>여러개의 패널이 걸쳐있을 경우 focus상태를 관리하는데 이용</description>
<parameters>
<parameter name="Panels" type="Array" deprecated="false" usage="instance">
<description><![CDATA[Optional. A collection of Panels to register
 with the manager.]]></description>
</parameter>
<parameter name="userConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The object literal representing the user
 configuration of the LPanelManager]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="overlays" type="Rui.ui.LOverlay[]" deprecated="false" scope="instance" >
<description>The collection of registered Overlays in use by
 the LPanelManager</description>
</property>
<property name="focusevent" type="String" deprecated="false" scope="instance" >
<description>The default DOM event that should be used to focus an Overlay</description>
</property>
</configs>
<properties>
<property name="cfg" type="Config" deprecated="false" scope="instance" >
<description>The LPanelManager's Config object used for monitoring
 configuration properties.</description>
</property>
</properties>
<methods>
<method name="getActive" deprecated="false" scope="instance" >
<description><![CDATA[Returns the currently focused Overlay]]></description>
<return-types>
<return-type type="Overlay" />
<return-description><![CDATA[The currently focused Overlay]]></return-description>
</return-types>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[Focuses the specified Overlay]]></description>
<parameters>
<parameter name="overlay" type="Overlay" deprecated="false" usage="required">
<description><![CDATA[The Overlay to focus]]></description>
</parameter>
<parameter name="overlay" type="String" deprecated="false" usage="required">
<description><![CDATA[The id of the Overlay to focus]]></description>
</parameter>
</parameters>
</method>
<method name="remove" deprecated="false" scope="instance" >
<description><![CDATA[Removes the specified Overlay from the manager]]></description>
<parameters>
<parameter name="overlay" type="Overlay" deprecated="false" usage="required">
<description><![CDATA[The Overlay to remove]]></description>
</parameter>
<parameter name="overlay" type="String" deprecated="false" usage="required">
<description><![CDATA[The id of the Overlay to remove]]></description>
</parameter>
</parameters>
</method>
<method name="blurAll" deprecated="false" scope="instance" >
<description><![CDATA[Removes focus from all registered Overlays in the manager]]></description>
</method>
<method name="register" deprecated="false" scope="instance" >
<description><![CDATA[Registers an Overlay or an array of Overlays with the manager. Upon
 registration, the Overlay receives functions for focus and blur,
 along with CustomEvents for each.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[true if any Overlays are registered.]]></return-description>
</return-types>
<parameters>
<parameter name="overlay" type="Overlay" deprecated="false" usage="required">
<description><![CDATA[An Overlay to register with the manager.]]></description>
</parameter>
<parameter name="overlay" type="Overlay[]" deprecated="false" usage="required">
<description><![CDATA[An array of Overlays to register with
 the manager.]]></description>
</parameter>
</parameters>
</method>
<method name="bringToTop" deprecated="false" scope="instance" >
<description><![CDATA[Places the specified Overlay instance on top of all other
 Overlay instances.]]></description>
<parameters>
<parameter name="p_oOverlay" type="Rui.ui.LOverlay" deprecated="false" usage="required">
<description><![CDATA[Object representing an
 Overlay instance.]]></description>
</parameter>
<parameter name="p_oOverlay" type="String" deprecated="false" usage="required">
<description><![CDATA[String representing the id of an
 Overlay instance.]]></description>
</parameter>
</parameters>
</method>
<method name="find" deprecated="false" scope="instance" >
<description><![CDATA[Attempts to locate an Overlay by instance or ID.]]></description>
<return-types>
<return-type type="Overlay" />
<return-description><![CDATA[The requested Overlay, if found, or null if it]]></return-description>
</return-types>
<parameters>
<parameter name="overlay" type="Overlay" deprecated="false" usage="required">
<description><![CDATA[An Overlay to locate within the manager]]></description>
</parameter>
<parameter name="overlay" type="String" deprecated="false" usage="required">
<description><![CDATA[An Overlay id to locate within the manager]]></description>
</parameter>
</parameters>
</method>
<method name="showAll" deprecated="false" scope="instance" >
<description><![CDATA[Shows all Overlays in the manager.]]></description>
</method>
<method name="hideAll" deprecated="false" scope="instance" >
<description><![CDATA[Hides all Overlays in the manager.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representation of the object.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[The string representation of the LPanelManager]]></return-description>
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LNotification" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>알림 메시지를 출력하는 패널</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>알림 메시지를 출력하는 패널</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LNotification.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="hide" deprecated="false" scope="instance" >
<description><![CDATA[알림메시지를 숨긴다.]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.LNotificationManager" deprecated="false"  superclass="Rui.util.LEventProvider" >
<description>알림 메시지 패널을 관리하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>알림 메시지 패널을 관리하는 객체</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LNotificationManager.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="getInstance" deprecated="false" scope="static" >
<description><![CDATA[인스턴스를 얻어오는 메소드]]></description>
<return-types>
<return-type type="Rui.ui.LNotificationManager" />
</return-types>
</method>
<method name="show" deprecated="false" scope="instance" >
<description><![CDATA[공지 메시지 출력하는 메소드
 options 정보 : { body: '출력할 메시지', buttons: [ { text: '취소하기', handler: function(e) { 수행할 내용 } } ] }]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="options" type="String|Object" deprecated="false" usage="required">
<description><![CDATA[옵션정보]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.LPager" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>페이징 처리를 할 수 있게 지원하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>페이징 처리를 할 수 있게 지원하는 객체</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LPager.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="pageNumber" type="int" deprecated="false" scope="instance" >
<description>페이지번호: 출력할 현재 페이지번호
 페이지당 데이터(레코드)수 가 10이며, 페이지번호가 3인 경우 데이터(레코드)의 출력 범위는 31~40 이다.</description>
</property>
<property name="pageSize" type="int" deprecated="false" scope="instance" >
<description>페이지당 데이터(레코드) 수: 한개의 페이지에 보여질 데이터(레코드)의 수
 총 500개의 데이터가 존재한다면, 이 값인 pageSize가 10인 경우 총 50개의 페이지로 나눠진다.</description>
</property>
<property name="pageGroupSize" type="int" deprecated="false" scope="instance" >
<description>페이지그룹 크기: 사용자가 페이지를 이동시키는데 사용할 페이지 네비게이터에 표시될 페이저 링크의 갯수
 총 500개의 데이터가 존재하며, pageSize가 10인 경우 총 50개의 페이지로 나눠진다. 이때 이 값인 pageGroupSize가 10인 경우
 페이지 네비게이터에 총 5개의 페이지그룹이 생성된다.</description>
</property>
<property name="useDivider" type="boolean" deprecated="false" scope="instance" >
<description>페이저인 페이지 이동 링크 사이에 구분자를 넣을 지 여부</description>
</property>
<property name="pageNumberFieldName" type="string" deprecated="false" scope="instance" >
<description>페이지 이동을 위해 서버로 전송될 요청의 query string에 포함될 pageNumber명으로 이 값을 key로 하여 설정된 pageNumber가 전송된다.
 ex) ./list?pageNumber=3</description>
</property>
<property name="pageSizeFieldName" type="string" deprecated="false" scope="instance" >
<description>페이지 이동을 위해 서버로 전송될 요청의 query string에 포함될 pageSize 명으로 이 값을 Key로 하여 설정된 pageSize가 전송된다.
 ex) ./list?pageSize=10</description>
</property>
<property name="viewPageStartRowIndexFieldName" type="string" deprecated="false" scope="instance" >
<description>페이지 이동을 위해 서버로 전송될 요청의 query string에 포함될 시작 데이터(레코드) index 명으로 이 값을 Key로 하여 시작 데이터(레코드)의 index가 전송된다.
 ex) pageSize가 10이며, pageNumber가 2인 경우 출력될 데이터의 범위는 11~20이다. 이때의 startowIndex는 11이며 다음과 같이 전송된다.
 ./list?pageNumber=1&amp;pageSize=10&amp;startRowIndex=11</description>
</property>
<property name="sortFieldName" type="string" deprecated="false" scope="instance" >
<description>페이지 정렬을 위해 서버로 전송될 요청의 query string에 포함될 정렬 대상 필드명으로 이 값을 key로 하여 정렬대상 필드명이 전송된다.
 ex) ./list?sortField=NAME</description>
</property>
<property name="sortDirFieldName" type="string" deprecated="false" scope="instance" >
<description>페이지 정렬을 위해 서버로 전송될 요청의 query string에 포함될 정렬 방향으로 이 값을 key로 하여 정렬 방향이 전송된다.
 ex) ./list?sortDir=DESC</description>
</property>
<property name="sortQueryFieldName" type="string" deprecated="false" scope="instance" >
<description>페이지 정렬을 위해 서버로 전송될 요청의 query string에 포함될 정렬 조건이며, 이 값을 key로 DB Query이 생성되어 전송된다.
 ex) ./list?sortQuery=order by NAME DESC</description>
</property>
</configs>
<properties>
<property name="prevPageText" type="string" deprecated="false" scope="instance" >
<description>이전 페이지 이동 표시에 문자를 사용할 경우 문자 기술</description>
</property>
<property name="nextPageGroupText" type="string" deprecated="false" scope="instance" >
<description>다음 페이지 그룹 이동 표시에 문자를 사용할 경우 문자 기술</description>
</property>
</properties>
<events>
<event name="beforeChange" deprecated="false">
<description><![CDATA[
페이지가 변경 되기전에 발생하는 이벤트
]]></description>
<parameters>
<parameter name="pageNumber" type="int" deprecated="false" usage="instance">
<description><![CDATA[이동된 page 번호]]></description>
</parameter>
<parameter name="beforeViewPageNumber" type="int" deprecated="false" usage="instance">
<description><![CDATA[이동전 page 번호]]></description>
</parameter>
</parameters>
</event>
<event name="changed" deprecated="false">
<description><![CDATA[
page number 선택으로 page가 변경된후 발생하는 event
]]></description>
<parameters>
<parameter name="pageNumber" type="int" deprecated="false" usage="instance">
<description><![CDATA[이동된 page 번호]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="render" deprecated="false" scope="instance" >
<description><![CDATA[객체를 Render하는 메소드]]></description>
<return-types>
<return-type type="HTMLElement" />
</return-types>
<parameters>
<parameter name="appendToNode" type="String|Object" deprecated="false" usage="required">
<description><![CDATA[객체를 붙이고자 하는 Node정보]]></description>
</parameter>
</parameters>
</method>
<method name="goPage" deprecated="false" scope="instance" >
<description><![CDATA[페이지 이동]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="number" type="int" deprecated="false" usage="required">
<description><![CDATA[이동할 page번호]]></description>
</parameter>
<parameter name="reload" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] dataset을 reload할지 여부. default는 dataset을 reload 한다.]]></description>
</parameter>
</parameters>
</method>
<method name="moveFirstPage" deprecated="false" scope="instance" >
<description><![CDATA[first page로 이동]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="movePrevGroup" deprecated="false" scope="instance" >
<description><![CDATA[prev page group으로 이동]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="movePrevPage" deprecated="false" scope="instance" >
<description><![CDATA[prev page로 이동]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="moveNextPage" deprecated="false" scope="instance" >
<description><![CDATA[next page로 이동]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="moveNextGroup" deprecated="false" scope="instance" >
<description><![CDATA[next page group으로 이동]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="moveLastPage" deprecated="false" scope="instance" >
<description><![CDATA[last page로 이동]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getPageNumber" deprecated="false" scope="instance" >
<description><![CDATA[현재 페이지를 번호를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[pageNumber 현재 page번호]]></return-description>
</return-types>
</method>
<method name="setPageNumber" deprecated="false" scope="instance" >
<description><![CDATA[현재 페이지를 다른 페이지로 이동한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="pageNumber" type="int" deprecated="false" usage="required">
<description><![CDATA[현재 page번호]]></description>
</parameter>
<parameter name="reload" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 이동될 페이지를 reload한다. 기본값 true]]></description>
</parameter>
</parameters>
</method>
<method name="getParams" deprecated="false" scope="instance" >
<description><![CDATA[서버에 전송하기 위해 paging 관련 parameter 값을 얻어온다.]]></description>
<return-types>
<return-type type="object" />
<return-description><![CDATA[parameters]]></return-description>
</return-types>
<parameters>
<parameter name="pageNumber" type="int " deprecated="false" usage="required">
<description><![CDATA[[optional] 해당 page번호를 가지는 page naviagtion query를 return]]></description>
</parameter>
</parameters>
</method>
<method name="setPageSize" deprecated="false" scope="instance" >
<description><![CDATA[페이지당 데이터(레코드) 수인 pageSize값을 변경한 후 필요시 페이저를 다시 랜더링한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="rerender" type="boolean" deprecated="false" usage="required">
<description><![CDATA[다시 render할지 여부, default로 true]]></description>
</parameter>
</parameters>
</method>
<method name="setPageGroupSize" deprecated="false" scope="instance" >
<description><![CDATA[페이지그룹 크기 값을 변경한 후 필요시 페이저를 다시 랜더링한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="rerender" type="boolean" deprecated="false" usage="required">
<description><![CDATA[다시 render할지 여부, default로 true]]></description>
</parameter>
</parameters>
</method>
<method name="setTotalCount" deprecated="false" scope="instance" >
<description><![CDATA[전체 데이터(레코드) 수를 재 설정하며 필요시 페이저를 다시 랜더링한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="rerender" type="boolean" deprecated="false" usage="required">
<description><![CDATA[다시 render할지 여부, default로 true]]></description>
</parameter>
</parameters>
</method>
<method name="setDataSet" deprecated="false" scope="instance" >
<description><![CDATA[dataSet 재 할당하기]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LPanelManager" deprecated="false" >
<description>여러개의 패널이 걸쳐있을 경우 focus상태를 관리하는데 이용</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>여러개의 패널이 걸쳐있을 경우 focus상태를 관리하는데 이용</description>
<parameters>
<parameter name="Panels" type="Array" deprecated="false" usage="instance">
<description><![CDATA[Optional. A collection of Panels to register
 with the manager.]]></description>
</parameter>
<parameter name="userConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The object literal representing the user
 configuration of the LPanelManager]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="overlays" type="Rui.ui.LOverlay[]" deprecated="false" scope="instance" >
<description>The collection of registered Overlays in use by
 the LPanelManager</description>
</property>
<property name="focusevent" type="String" deprecated="false" scope="instance" >
<description>The default DOM event that should be used to focus an Overlay</description>
</property>
</configs>
<properties>
<property name="cfg" type="Config" deprecated="false" scope="instance" >
<description>The LPanelManager's Config object used for monitoring
 configuration properties.</description>
</property>
</properties>
<methods>
<method name="getActive" deprecated="false" scope="instance" >
<description><![CDATA[Returns the currently focused Overlay]]></description>
<return-types>
<return-type type="Overlay" />
<return-description><![CDATA[The currently focused Overlay]]></return-description>
</return-types>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[Focuses the specified Overlay]]></description>
<parameters>
<parameter name="overlay" type="Overlay" deprecated="false" usage="required">
<description><![CDATA[The Overlay to focus]]></description>
</parameter>
<parameter name="overlay" type="String" deprecated="false" usage="required">
<description><![CDATA[The id of the Overlay to focus]]></description>
</parameter>
</parameters>
</method>
<method name="remove" deprecated="false" scope="instance" >
<description><![CDATA[Removes the specified Overlay from the manager]]></description>
<parameters>
<parameter name="overlay" type="Overlay" deprecated="false" usage="required">
<description><![CDATA[The Overlay to remove]]></description>
</parameter>
<parameter name="overlay" type="String" deprecated="false" usage="required">
<description><![CDATA[The id of the Overlay to remove]]></description>
</parameter>
</parameters>
</method>
<method name="blurAll" deprecated="false" scope="instance" >
<description><![CDATA[Removes focus from all registered Overlays in the manager]]></description>
</method>
<method name="register" deprecated="false" scope="instance" >
<description><![CDATA[Registers an Overlay or an array of Overlays with the manager. Upon
 registration, the Overlay receives functions for focus and blur,
 along with CustomEvents for each.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[true if any Overlays are registered.]]></return-description>
</return-types>
<parameters>
<parameter name="overlay" type="Overlay" deprecated="false" usage="required">
<description><![CDATA[An Overlay to register with the manager.]]></description>
</parameter>
<parameter name="overlay" type="Overlay[]" deprecated="false" usage="required">
<description><![CDATA[An array of Overlays to register with
 the manager.]]></description>
</parameter>
</parameters>
</method>
<method name="bringToTop" deprecated="false" scope="instance" >
<description><![CDATA[Places the specified Overlay instance on top of all other
 Overlay instances.]]></description>
<parameters>
<parameter name="p_oOverlay" type="Rui.ui.LOverlay" deprecated="false" usage="required">
<description><![CDATA[Object representing an
 Overlay instance.]]></description>
</parameter>
<parameter name="p_oOverlay" type="String" deprecated="false" usage="required">
<description><![CDATA[String representing the id of an
 Overlay instance.]]></description>
</parameter>
</parameters>
</method>
<method name="find" deprecated="false" scope="instance" >
<description><![CDATA[Attempts to locate an Overlay by instance or ID.]]></description>
<return-types>
<return-type type="Overlay" />
<return-description><![CDATA[The requested Overlay, if found, or null if it]]></return-description>
</return-types>
<parameters>
<parameter name="overlay" type="Overlay" deprecated="false" usage="required">
<description><![CDATA[An Overlay to locate within the manager]]></description>
</parameter>
<parameter name="overlay" type="String" deprecated="false" usage="required">
<description><![CDATA[An Overlay id to locate within the manager]]></description>
</parameter>
</parameters>
</method>
<method name="showAll" deprecated="false" scope="instance" >
<description><![CDATA[Shows all Overlays in the manager.]]></description>
</method>
<method name="hideAll" deprecated="false" scope="instance" >
<description><![CDATA[Hides all Overlays in the manager.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Returns a string representation of the object.]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[The string representation of the LPanelManager]]></return-description>
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.LSideBar" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>스크롤되지 않고 고정된 영역의 Bar를 관리한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>스크롤되지 않고 고정된 영역의 Bar를 관리한다.</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LSideBar.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="x" type="int" deprecated="false" scope="instance" >
<description>side bar에 놓여질 컨텐츠의 좌측 마진 값을 설정한다 (px)</description>
</property>
<property name="y" type="int" deprecated="false" scope="instance" >
<description>side bar에 놓여질 컨텐츠의 상단 마진 값을 설정한다 (px)</description>
</property>
<property name="type" type="String" deprecated="false" scope="instance" >
<description>side bar가 고정될 형태를 지정한다.
 [static, vertical, horizontal]을 지정할 수 있다.</description>
</property>
</configs>
<properties>
<property name="x" type="int" deprecated="false" scope="instance" >
<description>side bar에 놓여질 컨텐츠의 좌측 마진 값을 설정한다 (px)</description>
</property>
<property name="y" type="int" deprecated="false" scope="instance" >
<description>side bar에 놓여질 컨텐츠의 상단 마진 값을 설정한다 (px)</description>
</property>
<property name="type" type="String" deprecated="false" scope="instance" >
<description>side bar가 고정될 형태를 지정한다.
 [static, vertical, horizontal]을 지정할 수 있다.</description>
</property>
</properties>
<methods>
</methods>
</class>
<class type="Rui.ui.LSwitch" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>LSwitch</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LSwitch</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LSwitch.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="toggle" type="boolean" deprecated="false" scope="instance" >
<description>버튼을 toggle로 사용할지 여부.
 toggle일 경우 모든 버튼은 각각 on/off 되며, false로 지정하여 toggle을 사용하지 않을 경우 모든 버튼들 중 단 하나만 on된다.</description>
</property>
<property name="count" type="int" deprecated="false" scope="instance" >
<description>생성할 버튼의 갯수를 지정한다.
 items 속성을 지정할 경우 이 값은 무시되며, items에 지정한 만큼 버튼이 생성된다.</description>
</property>
<property name="items" type="object" deprecated="false" scope="instance" >
<description>label등을 가질 수 있는 버튼들을 정의한다.</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="push" deprecated="false" scope="instance" >
<description><![CDATA[switch를 push 한다. toggle 속성 값이 true인 경우에는 toggle로 동작한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="index" type="int" deprecated="false" usage="required">
<description><![CDATA[push할 버튼의 index]]></description>
</parameter>
</parameters>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[Dom객체의 value값을 리턴한다.]]></description>
<return-types>
<return-type type="int|Array" />
<return-description><![CDATA[객체에 들어 있는 값]]></return-description>
</return-types>
</method>
<method name="setLabel" deprecated="false" scope="instance" >
<description><![CDATA[switch button의 label을 변경한다. HTML 사용가능하다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="index" type="int" deprecated="false" usage="required">
<description><![CDATA[변경할 button의 index]]></description>
</parameter>
<parameter name="label" type="string" deprecated="false" usage="required">
<description><![CDATA[label로 사용할 문자열(HTML 가능)]]></description>
</parameter>
</parameters>
</method>
<method name="getLabel" deprecated="false" scope="instance" >
<description><![CDATA[switch button의 label을 가져온다.]]></description>
<return-types>
<return-type type="string" />
</return-types>
<parameters>
<parameter name="index" type="int" deprecated="false" usage="required">
<description><![CDATA[가져올 button의 index]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.LTooltip" deprecated="false" >
<description>LTooltip</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LTooltip</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LTooltip.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>툴팁 div id</description>
</property>
<property name="showdelay" type="Int" deprecated="false" scope="instance" >
<description>툴팁 표시 delaytime(ms 단위)</description>
</property>
<property name="autodismissdelay" type="Int" deprecated="false" scope="instance" >
<description>툴팁 표시 후 hide time(ms 단위)</description>
</property>
<property name="showmove" type="boolean" deprecated="false" scope="instance" >
<description>마우스 이동시 툴팁 동시 이동 여부</description>
</property>
<property name="context" type="Object" deprecated="false" scope="instance" >
<description>툴팁이 적용될 DOM element</description>
</property>
<property name="text" type="String" deprecated="false" scope="instance" >
<description>툴팁에 표시될 텍스트</description>
</property>
<property name="margin" type="int" deprecated="false" scope="instance" >
<description>툴팁이 표시될 위치 margin</description>
</property>
</configs>
<properties>
<property name="showdelay" type="Int" deprecated="false" scope="instance" >
<description>툴팁 표시 delaytime(ms 단위)</description>
</property>
<property name="autodismissdelay" type="Int" deprecated="false" scope="instance" >
<description>툴팁 표시 후 hide time(ms 단위)</description>
</property>
<property name="showmove" type="boolean" deprecated="false" scope="instance" >
<description>마우스 이동시 툴팁 동시 이동 여부</description>
</property>
<property name="context" type="Object" deprecated="false" scope="instance" >
<description>툴팁이 적용될 DOM element</description>
</property>
<property name="text" type="String" deprecated="false" scope="instance" >
<description>툴팁에 표시될 텍스트</description>
</property>
<property name="margin" type="int" deprecated="false" scope="instance" >
<description>툴팁이 표시될 위치 margin</description>
</property>
</properties>
<methods>
<method name="setText" deprecated="false" scope="instance" >
<description><![CDATA[툴팁 표시 text를 변경한다.]]></description>
<parameters>
<parameter name="text" type="String" deprecated="false" usage="required">
<description><![CDATA[tooltip에 표현될 text]]></description>
</parameter>
</parameters>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 tooltip 엘리먼트를 제거하고 관련 이벤트를 unOn처리 한다.]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.LUnorderedList" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>LUnorderedList</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LUnorderedList</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUnorderedList.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.ui.LUnorderedList" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>tree나 menu와 같이 계층 구조를 가지는 객체들의 수정용(CUD) 상위 추상 클래스</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>tree나 menu와 같이 계층 구조를 가지는 객체들의 수정용(CUD) 상위 추상 클래스</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUnorderedList.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="dataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>dataset</description>
</property>
<property name="renderer" type="Function" deprecated="false" scope="instance" >
<description>label출력시 사용되는 renderer</description>
</property>
<property name="focusLastest" type="boolean" deprecated="false" scope="instance" >
<description>마지막에 FOCUS되었던 노드 다시 focus할 지 여부.  dataSet load시.</description>
</property>
<property name="childDataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>동적으로 load시 사용할 child용 dataSet</description>
</property>
<property name="hasChildValue" type="Object" deprecated="false" scope="instance" >
<description>fields hasChild의 값이 hasChildValue일 경우 child를 가지고 있는 것으로 처리한다.  child를 가지고 있는 여부를 나타내는 flag값중 참인값</description>
</property>
<property name="defaultOpenDepth" type="int" deprecated="false" scope="instance" >
<description>최초에 펼처질 depth를 결정한다.</description>
</property>
<property name="defaultOpenTopIndex" type="int" deprecated="false" scope="instance" >
<description>tree나 menu가 로드될 경우 최초에 펼처질 레벨의 index</description>
</property>
<property name="onlyOneTopOpen" type="boolean" deprecated="false" scope="instance" >
<description>하나의 node만 열리게 설정하고 하나가 열리면 다른 node는 다 닫힌다.</description>
</property>
<property name="useTooltip" type="boolean" deprecated="false" scope="instance" >
<description>각 node div에 title을 지정하여 브라우저 기본 tooltip이 나타나도록 한다.</description>
</property>
<property name="useAnimation" type="boolean" deprecated="false" scope="instance" >
<description>Expand 또는 Collapse시에 Animation 사용 할지 여부</description>
</property>
<property name="syncDataSet" type="boolean" deprecated="false" scope="instance" >
<description>DataSet과 sync 여부 객체</description>
</property>
<property name="autoMark" type="boolean" deprecated="false" scope="instance" >
<description>mark시 자식 노드들도 함께 자동으로 mark할지 여부</description>
</property>
<property name="contextMenu" type="Rui.ui.menu.LContextMenu" deprecated="false" scope="instance" >
<description>context context menu를 연결하는 LContextMenu의 객체</description>
</property>
<property name="useTempId" type="boolean" deprecated="false" scope="instance" >
<description>복사하고 붙여넣기시 tempId 사용할 지 여부, tempId를 사용하지 않으면 직접 id를 생성해서 작업해야 한다.
 id는 업무 로직에 따라 생성 권장. 임시 id는 사용시 주의 요망(timestamp기반 값이 들어가므로 업무적으로 실제 id로 변경 처리 필요)</description>
</property>
</configs>
<properties>
<property name="dataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>dataset</description>
</property>
<property name="renderer" type="Function" deprecated="false" scope="instance" >
<description>label출력시 사용되는 renderer</description>
</property>
<property name="endDepth" type="int" deprecated="false" scope="instance" >
<description>endDepth을 지정할 경우 해당 depth이상은 생성하지 않는다.</description>
</property>
<property name="currentFocus" type="Rui.ui.LUnorderedListNode" deprecated="false" scope="instance" >
<description>A reference to the Node currently having the focus or null if none.</description>
</property>
<property name="focusLastest" type="Boolean" deprecated="false" scope="instance" >
<description>마지막에 FOCUS되었던 노드 다시 focus할 지 여부.  dataSet load시.</description>
</property>
<property name="childDataSet" type="Rui.data.LDataSet" deprecated="false" scope="instance" >
<description>동적으로 load시 사용할 child용 dataSet</description>
</property>
<property name="hasChildValue" type="Object" deprecated="false" scope="instance" >
<description>fields hasChild의 값이 hasChildValue일 경우 child를 가지고 있는 것으로 처리한다.  child를 가지고 있는 여부를 나타내는 flag값중 참인값</description>
</property>
<property name="defaultOpenDepth" type="int" deprecated="false" scope="instance" >
<description>tree나 menu가 로드될 경우 최초에 펼처질 레벨</description>
</property>
<property name="defaultOpenTopIndex" type="int" deprecated="false" scope="instance" >
<description>menu가 로드될 경우 최초에 펼처질 레벨의 index</description>
</property>
<property name="onlyOneTopOpen" type="boolean" deprecated="false" scope="instance" >
<description>하나의 node만 열리게 설정하고 하나가 열리면 다른 node는 다 닫힌다.</description>
</property>
<property name="useTooltip" type="boolean" deprecated="false" scope="instance" >
<description>각 node div에 title을 지정하여 브라우저 기본 tooltip이 나타나도록 한다.</description>
</property>
<property name="useAnimation" type="boolean" deprecated="false" scope="instance" >
<description>Expand 또는 Collapse시에 Animation 사용 할지 여부</description>
</property>
<property name="animDuration" type="float" deprecated="false" scope="instance" >
<description>메뉴의 animation효과 작동 시간 기본 0.3초</description>
</property>
<property name="liWidth" type="int" deprecated="false" scope="instance" >
<description>li width를 고정할 경우 사용.</description>
</property>
<property name="container" type="string" deprecated="false" scope="instance" >
<description>apply to treeview dom Id</description>
</property>
<property name="autoMark" type="boolean" deprecated="false" scope="instance" >
<description>mark시 자식 노드들도 함께 자동으로 mark할지 여부</description>
</property>
<property name="contextMenu" type="Rui.ui.menu.LContextMenu" deprecated="false" scope="instance" >
<description>context context menu를 연결하는 LContextMenu의 객체</description>
</property>
<property name="useTempId" type="boolean" deprecated="false" scope="instance" >
<description>복사하고 붙여넣기시 tempId 사용할 지 여부, tempId를 사용하지 않으면 직접 id를 생성해서 작업해야 한다.
 id는 업무 로직에 따라 생성 권장. 임시 id는 사용시 주의 요망(timestamp기반 값이 들어가므로 업무적으로 실제 id로 변경 처리 필요)</description>
</property>
</properties>
<events>
<event name="nodeClick" deprecated="false">
<description><![CDATA[
node click시 발생하는 event, node가 collapse/expand toggle된다.
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[click한 node object]]></description>
</parameter>
</parameters>
</event>
<event name="dynamicLoadChild" deprecated="false">
<description><![CDATA[
childDataSet을 지정했을 경우 node click시 발생하는 event로 child dataset을 load하면 된다.
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[click한 node object]]></description>
</parameter>
<parameter name="parentId" type="Object" deprecated="false" usage="instance">
<description><![CDATA[click한 node의 record.get(this.fields.id)한 값]]></description>
</parameter>
</parameters>
</event>
<event name="focusChanged" deprecated="false">
<description><![CDATA[
리스트의 각 node가 선택되어 해당 node가 focus 되었을 경우 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="oldNode" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[이전 focus node]]></description>
</parameter>
<parameter name="newNode" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="instance">
<description><![CDATA[현재 focus node]]></description>
</parameter>
</parameters>
</event>
<event name="collapse" deprecated="false">
<description><![CDATA[
node가 닫쳐졌을때 발생하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="expand" deprecated="false">
<description><![CDATA[
node를 expand했을 때 발생
]]></description>
<parameters>
<parameter name="target" type="Rui.ui.LUnorderedList" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="renderData" deprecated="false">
<description><![CDATA[
dataSet의 내용으로 전체를 다시 그렸을때 발생하는 이벤트
]]></description>
</event>
<event name="syncDataSet" deprecated="false">
<description><![CDATA[
setSyncDataSet 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="isSync" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[sync 여부]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="setSyncDataSet" deprecated="false" scope="instance" >
<description><![CDATA[dataSet과 sync상태를 셋팅하는 메소드 (대량 변경건 처리시 사용)]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="isSync" type="boolean" deprecated="false" usage="required">
<description><![CDATA[isSync값]]></description>
</parameter>
</parameters>
</method>
<method name="getNodeById" deprecated="false" scope="instance" >
<description><![CDATA[node id에 해당하는 노드를 반환]]></description>
<return-types>
<return-type type="Rui.ui.LUnorderedListNode" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[node의 id 필드에 해당되는 값]]></description>
</parameter>
</parameters>
</method>
<method name="getFocusNode" deprecated="false" scope="instance" >
<description><![CDATA[마지막에 선택한 node return하기]]></description>
<return-types>
<return-type type="Rui.ui.LUnorderedListNode" />
</return-types>
</method>
<method name="setFocusById" deprecated="false" scope="instance" >
<description><![CDATA[id값을 참조해서 수동으로 focus 주기]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setRootValue" deprecated="false" scope="instance" >
<description><![CDATA[지정한 rootValue값으로 tree 다시 그리기]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setDataSet" deprecated="false" scope="instance" >
<description><![CDATA[데이터셋을 변경하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dataSet" type="Rui.data.LDataSet" deprecated="false" usage="required">
<description><![CDATA[반영할 데이터셋]]></description>
</parameter>
</parameters>
</method>
<method name="getAllChildRecords" deprecated="false" scope="instance" >
<description><![CDATA[parentId를 가진 모든 record 가져오기]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[record의 array]]></return-description>
</return-types>
<parameters>
<parameter name="dataSet" type="Rui.data.LDataSet" deprecated="false" usage="required">
<description><![CDATA[검색할 dataSet으로 입력하지 않으면 tree의  dataSet으 사용한다.]]></description>
</parameter>
<parameter name="rs" type="Array" deprecated="false" usage="required">
<description><![CDATA[record의 array 재귀호출용]]></description>
</parameter>
</parameters>
</method>
<method name="addTopNode" deprecated="false" scope="instance" >
<description><![CDATA[최상위 depth에 label을 가지는 record 추가]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[row [optional] 생성한 record의 index return]]></return-description>
</return-types>
</method>
<method name="addChildNode" deprecated="false" scope="instance" >
<description><![CDATA[선택된 node 밑에 label을 가지는 record 추가]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[row 생성한 record의 index return]]></return-description>
</return-types>
<parameters>
<parameter name="addTop" type="boolean" deprecated="false" usage="required">
<description><![CDATA[[optional] 최상위에 추가할 지 여부]]></description>
</parameter>
</parameters>
</method>
<method name="deleteNode" deprecated="false" scope="instance" >
<description><![CDATA[특정 node 지우기, 지운 후에 clone한 record array를 return한다.]]></description>
<return-types>
<return-type type="array" />
</return-types>
<parameters>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="required">
<description><![CDATA[삭제할 node]]></description>
</parameter>
<parameter name="clone" type="boolean" deprecated="false" usage="required">
<description><![CDATA[clone할지 여부]]></description>
</parameter>
<parameter name="childOnly" type="boolean" deprecated="false" usage="required">
<description><![CDATA[자신을 제외하고 자식만 삭제 여부]]></description>
</parameter>
<parameter name="parentId" type="Object" deprecated="false" usage="required">
<description><![CDATA[이미 record가 삭제된 상태일 경우 record를 가져올 수 없으므로 parentId를 넘겨서 refresh 만 함.]]></description>
</parameter>
</parameters>
</method>
<method name="cutNode" deprecated="false" scope="instance" >
<description><![CDATA[node cut하기]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="required">
<description><![CDATA[cut할 node]]></description>
</parameter>
</parameters>
</method>
<method name="copyNode" deprecated="false" scope="instance" >
<description><![CDATA[node copy하기, useTempId가 false이면 자식까지 copy되지 않는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="widthChilds" type="boolean" deprecated="false" usage="required">
<description><![CDATA[자식들도 같이 복사할지 여부]]></description>
</parameter>
<parameter name="node" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="required">
<description><![CDATA[optional 지정하지 않으면 현재 선택된 node]]></description>
</parameter>
</parameters>
</method>
<method name="pasteNode" deprecated="false" scope="instance" >
<description><![CDATA[node paste하기]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="parentNode" type="Rui.ui.LUnorderedListNode" deprecated="false" usage="required">
<description><![CDATA[optional 지정하지 않으면 현재 선택된 node]]></description>
</parameter>
</parameters>
</method>
<method name="isRendered" deprecated="false" scope="instance" >
<description><![CDATA[콤포넌트가 render가 됐는지 여부]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
</method>
</methods>
</class>
<class type="Rui.ui.LUnorderedListNode" deprecated="false" >
<description>LUnorderedListNode</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LUnorderedListNode</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUnorderedListNode.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.ui.LUnorderedListNode" deprecated="false" >
<description>tree나 menu 콤포넌트의 node의 최상위 클래스</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>tree나 menu 콤포넌트의 node의 최상위 클래스</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LUnorderedList.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="useAnimation" type="boolean" deprecated="false" scope="instance" >
<description>animation 작동 여부</description>
</property>
<property name="useCollapseAllSibling" type="boolean" deprecated="false" scope="instance" >
<description>expand시 다른 slibling을 닫을지 여부</description>
</property>
</configs>
<properties>
<property name="useAnimation" type="boolean" deprecated="false" scope="instance" >
<description>animation 작동 여부</description>
</property>
<property name="useCollapseAllSibling" type="boolean" deprecated="false" scope="instance" >
<description>expand시 다른 slibling을 닫을지 여부</description>
</property>
<property name="childULHeight" type="int" deprecated="false" scope="instance" >
<description>expand시 자식 ul의 height</description>
</property>
</properties>
<methods>
<method name="getRecordId" deprecated="false" scope="instance" >
<description><![CDATA[현재 자신의 dataSet에 해당되는 record의 id를 리턴한다.]]></description>
<return-types>
<return-type type="string" />
<return-description><![CDATA[recordId]]></return-description>
</return-types>
</method>
<method name="getParentId" deprecated="false" scope="instance" >
<description><![CDATA[자신의 부모 node에 대한 dataSet에 해당되는 record의 id를 리턴한다.]]></description>
<return-types>
<return-type type="string" />
<return-description><![CDATA[recordId]]></return-description>
</return-types>
</method>
<method name="getParentNode" deprecated="false" scope="instance" >
<description><![CDATA[자신의 부모에 해당되는 node를 찾아 리턴한다.]]></description>
<return-types>
<return-type type="Rui.ui.LUnorderedListNode" />
</return-types>
</method>
<method name="getIdValue" deprecated="false" scope="instance" >
<description><![CDATA[ID field에 해당하는 값을 반환한다.]]></description>
<return-types>
<return-type type="object" />
</return-types>
</method>
<method name="getRecord" deprecated="false" scope="instance" >
<description><![CDATA[현재 node에 해당되는 dataSet의 record 객체를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.data.LRecord" />
</return-types>
</method>
<method name="getRow" deprecated="false" scope="instance" >
<description><![CDATA[현재 node에 해당되는 dataSet의 record index를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getDepth" deprecated="false" scope="instance" >
<description><![CDATA[depth return]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[depth]]></return-description>
</return-types>
</method>
<method name="hasChild" deprecated="false" scope="instance" >
<description><![CDATA[자식을 가지고 있는지 검사]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[자식이 있으면 true]]></return-description>
</return-types>
</method>
<method name="isFocus" deprecated="false" scope="instance" >
<description><![CDATA[현재 node가 focus된 상태인지를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isMarked" deprecated="false" scope="instance" >
<description><![CDATA[현재 node의 상태가 마크되었는지를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="mark" deprecated="false" scope="instance" >
<description><![CDATA[현재 node의 상태를 mark 상태로 설정한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="unmark" deprecated="false" scope="instance" >
<description><![CDATA[현재 node의 상태를 mark 상태를 취소한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="isLast" deprecated="false" scope="instance" >
<description><![CDATA[현재 node가 현재 같은 레벨(sibling)의 마지막 node인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isTop" deprecated="false" scope="instance" >
<description><![CDATA[최상위(root) node인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isExpand" deprecated="false" scope="instance" >
<description><![CDATA[현재 node가 펼쳐진 상태인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="isCollaps" deprecated="false" scope="instance" >
<description><![CDATA[현재 node가 닫혀진 상태인지 여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="toggleChild" deprecated="false" scope="instance" >
<description><![CDATA[노드 펼치고 접기 토글]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="expand" deprecated="false" scope="instance" >
<description><![CDATA[현재 node를 펼친다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="collapse" deprecated="false" scope="instance" >
<description><![CDATA[현재 node를 닫는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="collapseAllSibling" deprecated="false" scope="instance" >
<description><![CDATA[자신의 노드를 제외한 다른 형제노드들을 모두 접는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="exceptIndex" type="int" deprecated="false" usage="required">
<description><![CDATA[닫지 않는 top node index]]></description>
</parameter>
</parameters>
</method>
<method name="getOrder" deprecated="false" scope="instance" >
<description><![CDATA[순서 index 가져오기]]></description>
<return-types>
<return-type type="int" />
</return-types>
</method>
<method name="getChildNodes" deprecated="false" scope="instance" >
<description><![CDATA[하위 노드들을 배열로 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.calendar.LFromToCalendar" deprecated="false" >
<description>LFromToCalendar</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LFromToCalendar</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LFromToCalendar.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<events>
<event name="select" deprecated="false">
<description><![CDATA[
시작, 종료일자 모두 선택되면 호출되는 이벤트
]]></description>
</event>
</events>
<methods>
</methods>
</class>
<class type="Rui.ui.calendar.LMonthCalendar" deprecated="false" >
<description>LMonthCalendar</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LMonthCalendar</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LMonthCalendar.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
</class>
<class type="Rui.ui.calendar.LSimpleCalendar" deprecated="false" >
<description>LSimpleCalendar (미완성: 사용하면 안됨)</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LSimpleCalendar (미완성: 사용하면 안됨)</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LSimpleCalendar.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<events>
<event name="cellRendered" deprecated="false">
<description><![CDATA[
Cell이 render되기전에 수행하는 이벤트
]]></description>
<parameters>
<parameter name="date" type="int" deprecated="false" usage="instance">
<description><![CDATA[일자]]></description>
</parameter>
<parameter name="currentDate" type="Date" deprecated="false" usage="instance">
<description><![CDATA[날짜 객체]]></description>
</parameter>
<parameter name="css" type="Object" deprecated="false" usage="instance">
<description><![CDATA[css객체]]></description>
</parameter>
</parameters>
</event>
<event name="beforeSelect" deprecated="false">
<description><![CDATA[
Cell이 선택되기전에 수행하는 이벤트
]]></description>
<parameters>
<parameter name="date" type="int" deprecated="false" usage="instance">
<description><![CDATA[일자]]></description>
</parameter>
<parameter name="currentDate" type="Date" deprecated="false" usage="instance">
<description><![CDATA[날짜 객체]]></description>
</parameter>
</parameters>
</event>
<event name="select" deprecated="false">
<description><![CDATA[
Cell이 선택되기후에 수행하는 이벤트
]]></description>
<parameters>
<parameter name="date" type="int" deprecated="false" usage="instance">
<description><![CDATA[일자]]></description>
</parameter>
<parameter name="currentDate" type="Date" deprecated="false" usage="instance">
<description><![CDATA[날짜 객체]]></description>
</parameter>
</parameters>
</event>
<event name="beforeDeselect" deprecated="false">
<description><![CDATA[
Cell이 선택취소되기전에 수행하는 이벤트
]]></description>
<parameters>
<parameter name="date" type="int" deprecated="false" usage="instance">
<description><![CDATA[일자]]></description>
</parameter>
<parameter name="currentDate" type="Date" deprecated="false" usage="instance">
<description><![CDATA[날짜 객체]]></description>
</parameter>
</parameters>
</event>
<event name="deselect" deprecated="false">
<description><![CDATA[
Cell이 선택취소후에 수행하는 이벤트
]]></description>
<parameters>
<parameter name="date" type="int" deprecated="false" usage="instance">
<description><![CDATA[일자]]></description>
</parameter>
<parameter name="currentDate" type="Date" deprecated="false" usage="instance">
<description><![CDATA[날짜 객체]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="getRenderFooter" deprecated="false" scope="instance" >
<description><![CDATA[footer html을 생성하여 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="setMonth" deprecated="false" scope="instance" >
<description><![CDATA[월을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="month" type="int" deprecated="false" usage="required">
<description><![CDATA[월, 0(January)부터 11(December)까지]]></description>
</parameter>
</parameters>
</method>
<method name="setYear" deprecated="false" scope="instance" >
<description><![CDATA[년도를 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="year" type="int" deprecated="false" usage="required">
<description><![CDATA[년도]]></description>
</parameter>
</parameters>
</method>
<method name="clear" deprecated="false" scope="instance" >
<description><![CDATA[선택된 날짜를 초기화 한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[달력 객체를 focus 시킨다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LBasicCombo" deprecated="false"  superclass="Rui.ui.form.LCombo" >
<description>SELECT Markup을 사용하는 Combo</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>SELECT Markup을 사용하는 Combo</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LBasicCombo.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="forceSelection" type="boolean" deprecated="false" scope="instance" >
<description>선택 필수 여부</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[현재 값을 리턴]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
</method>
<method name="getDisplayValue" deprecated="false" scope="instance" >
<description><![CDATA[현재 값을 리턴
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
</method>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[값을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="o" type="String" deprecated="false" usage="required">
<description><![CDATA[반영할 값]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.form.LComboLoader" deprecated="false" >
<description>여러 개의 LCombo를 동시에 생성하면서 서버측 로딩까지 한번에 적용하는 클래스</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>여러 개의 LCombo를 동시에 생성하면서 서버측 로딩까지 한번에 적용하는 클래스</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LComboLoader.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="comboList" type="Array" deprecated="false" scope="instance" >
<description>생성된 LCombo 정보를 가지는 배열</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="load" deprecated="false" scope="instance" >
<description><![CDATA[comboInfo에 등록된 LCombo 혹은 정보를 이용해 콤보를 생성하고, 콤보 데이터셋을 로딩한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="options" type="Object" deprecated="false" usage="required">
<description><![CDATA[환경정보 객체
 &amp;lt;div class='param-options'&amp;gt;
 url {String} 서버 호출 url&amp;lt;br&amp;gt;
 comboInfo {Object} LCombo 객체 혹은 LCombo 생성자 파라미터&amp;lt;br&amp;gt;
 method {String} get or post&amp;lt;br&amp;gt;]]></description>
</parameter>
</parameters>
</method>
<method name="getCombo" deprecated="false" scope="instance" >
<description><![CDATA[LCombo list에 id에 대한하는 LCombo를 리턴한다.]]></description>
<return-types>
<return-type type="Rui.ui.form.LCombo" />
</return-types>
<parameters>
<parameter name="id" type="String" deprecated="false" usage="required">
<description><![CDATA[얻고자 하는 LCombo객체의 아이디]]></description>
</parameter>
</parameters>
</method>
<method name="getComboList" deprecated="false" scope="instance" >
<description><![CDATA[생성된 LCombo 객체들을 배열로 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
<return-description><![CDATA[LCombo 배열]]></return-description>
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LDateTimeBox" deprecated="false"  superclass="Rui.ui.form.LTextBox" >
<description>날짜를 입력하는 LDateTimeBox (Beta)</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>날짜를 입력하는 LDateTimeBox (Beta)</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LDateTimeBox.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="valueFormat" type="String" deprecated="false" scope="instance" >
<description>mask를 제외한 실제 값의 format을 지정하는 속성, form submit시 적용되는 format</description>
</property>
<property name="dateType" type="String" deprecated="false" scope="instance" >
<description>입출력 값을 Date형으로 할것인지 String형으로 할 것인지 결정한다.
 기본 값은 Date형 이며, String형으로 사용 할 경우 입출력 값의 포맷은 valueFormat 속성값에 따른다.</description>
</property>
<property name="dateBoxWidth" type="int" deprecated="false" scope="instance" >
<description>DateTimeBox에서 DateBox의 width를 지정한다.</description>
</property>
<property name="timeBoxWidth" type="int" deprecated="false" scope="instance" >
<description>DateTimeBox에서 TimeBox의 width를 지정한다.</description>
</property>
<property name="datePlaceholder" type="String" deprecated="false" scope="instance" >
<description>html5에 있는 placeholder 기능과 같은 역할이며, DateBox에 지정할 placeholder값</description>
</property>
<property name="timePlaceholder" type="String" deprecated="false" scope="instance" >
<description>html5에 있는 placeholder 기능과 같은 역할이며, TimeBox에 지정할 placeholder값</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[날짜 및 시간값을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[입력된 날짜 및 시간 가져오기]]></description>
<return-types>
<return-type type="Date" />
</return-types>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[Tries to focus the element. Any exceptions are caught and ignored.
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="blur" deprecated="false" scope="instance" >
<description><![CDATA[Tries to blur the element. Any exceptions are caught and ignored.
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LFileBox" deprecated="false"  superclass="Rui.ui.form.LTextBox" >
<description>파일 첨부용 input box
 LFileBox</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>파일 첨부용 input box
 LFileBox</description>
<parameters>
<parameter name="The" type="Object" deprecated="false" usage="instance">
<description><![CDATA[intial LFileBox.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="width" type="int" deprecated="false" scope="instance" >
<description>가로 길이
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="iconWidth" type="int" deprecated="false" scope="instance" >
<description>Picker Icon의 width
 기본값은 20이며 CSS에서 icon width를 변경할 경우 이 값도 동일하게 변경하여야 합니다.</description>
</property>
<property name="buttonMarginLeft" type="int" deprecated="false" scope="instance" >
<description>iconMarginLeft, input과 달력 icon간의 간격</description>
</property>
<property name="title" type="String" deprecated="false" scope="instance" >
<description>버튼의 글자</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[선택된 값을 반환]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LFromToDateBox" deprecated="false"  superclass="Rui.ui.form.LField" >
<description>기간을 입력하는 LFromToDateBox</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>기간을 입력하는 LFromToDateBox</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial Field.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="valueFormat" type="String" deprecated="false" scope="instance" >
<description>mask를 제외한 실제 값의 format을 지정하는 속성, form submit시 적용되는 format</description>
</property>
<property name="separator" type="String" deprecated="false" scope="instance" >
<description>시작일과 종료일을 구분하는 구분자</description>
</property>
<property name="dateBoxWidth" type="int" deprecated="false" scope="instance" >
<description>DateTimeBox에서 DateBox의 width를 지정한다.</description>
</property>
<property name="separatorWidth" type="int" deprecated="false" scope="instance" >
<description>시작일 달력과 종료일 달력 사이의 구분자 DOM의 간격</description>
</property>
<property name="iconWidth" type="int" deprecated="false" scope="instance" >
<description>Picker Icon의 width
 기본값은 20이며 CSS에서 icon width를 변경할 경우 이 값도 동일하게 변경하여야 합니다.</description>
</property>
<property name="iconMarginLeft" type="int" deprecated="false" scope="instance" >
<description>input과 Picker Icon간의 간격</description>
</property>
<property name="picker" type="boolean" deprecated="false" scope="instance" >
<description>달력아이콘 표시 여부</description>
</property>
<property name="fromPlaceholder" type="String" deprecated="false" scope="instance" >
<description>html5에 있는 placeholder 기능과 같은 역할이며, From DateBox에 지정할 placeholder값</description>
</property>
<property name="toPlaceholder" type="String" deprecated="false" scope="instance" >
<description>html5에 있는 placeholder 기능과 같은 역할이며, To DateBox에 지정할 placeholder값</description>
</property>
<property name="editable" type="boolean" deprecated="false" scope="instance" >
<description>input박스에 키 입력이 가능한지 여부, 변경이 불가능한 읽기 전용 속성은 LUIComponent에 있는 disabled로 처리</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="changed" deprecated="false">
<description><![CDATA[
시작 및 종료일 폼의 값이 변경되면 발생되는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="startValue" type="Date|String" deprecated="false" usage="instance">
<description><![CDATA[시작일자 폼의 값으로 dateType에 맞는 유형의 값]]></description>
</parameter>
<parameter name="endValue" type="Date|String" deprecated="false" usage="instance">
<description><![CDATA[종료일자 폼의 값으로 dateType에 맞는 유형의 값]]></description>
</parameter>
<parameter name="value" type="String" deprecated="false" usage="instance">
<description><![CDATA[시작 및 종료일자 폼의 값 문자열]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[날짜 및 시간값을 변경한다.
 값의 format은 valueFormat에 따른다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="setStartValue" deprecated="false" scope="instance" >
<description><![CDATA[시작일자 폼의 값을 dateType에 맞는 유형으로 지정]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="value" type="Date|String" deprecated="false" usage="required">
<description><![CDATA[입력할 값]]></description>
</parameter>
</parameters>
</method>
<method name="setEndValue" deprecated="false" scope="instance" >
<description><![CDATA[종료일자 폼의 값을 dateType에 맞는 유형으로 지정]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="value" type="Date|String" deprecated="false" usage="required">
<description><![CDATA[입력할 값]]></description>
</parameter>
</parameters>
</method>
<method name="getStartValue" deprecated="false" scope="instance" >
<description><![CDATA[시작일자 폼의 값을 dateType에 맞는 유형으로 반환]]></description>
<return-types>
<return-type type="Date|String" />
</return-types>
</method>
<method name="getEndValue" deprecated="false" scope="instance" >
<description><![CDATA[종료일자 폼의 값을 dateType에 맞는 유형으로 반환]]></description>
<return-types>
<return-type type="Date|String" />
</return-types>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[입력된 날짜 및 시간 가져오기]]></description>
<return-types>
<return-type type="Date" />
</return-types>
</method>
<method name="setEditable" deprecated="false" scope="instance" >
<description><![CDATA[editable 값을 셋팅하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="isEditable" type="boolean" deprecated="false" usage="required">
<description><![CDATA[editable 셋팅 값]]></description>
</parameter>
</parameters>
</method>
<method name="focus" deprecated="false" scope="instance" >
<description><![CDATA[Tries to focus the element. Any exceptions are caught and ignored.
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="blur" deprecated="false" scope="instance" >
<description><![CDATA[Tries to blur the element. Any exceptions are caught and ignored.
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[DOM에서 패널 엘리먼트를 제거하고 모든 자식 엘리먼트들을 null로 설정한다.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LMonthBox" deprecated="false"  superclass="Rui.ui.form.LDateBox" >
<description>연월을 입력받는 월력 입력 INPUT 박스
 LMonthBox</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>연월을 입력받는 월력 입력 INPUT 박스
 LMonthBox</description>
<parameters>
<parameter name="The" type="Object" deprecated="false" usage="instance">
<description><![CDATA[intial LMonthBox.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="width" type="int" deprecated="false" scope="instance" >
<description>width</description>
</property>
<property name="valueFormat" type="String" deprecated="false" scope="instance" >
<description>mask를 제외한 실제 값의 format을 지정하는 속성, form submit시 적용되는 format</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[날짜값을 반영한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[입력된 날짜 가져오기]]></description>
<return-types>
<return-type type="Date" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.form.LMultiCombo" deprecated="false"  superclass="Rui.ui.form.LCombo" >
<description>Combo의 값을 여러개 선택할 수 있는 콤보</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Combo의 값을 여러개 선택할 수 있는 콤보</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LMultiCombo.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="useEmptyText" type="boolean" deprecated="false" scope="instance" >
<description>'선택하세요.' 항목 추가 여부
 &amp;lt;p&amp;gt;Sample: &amp;lt;a href="./../sample/general/ui/form/textboxSample.html" target="_sample"&amp;gt;보기&amp;lt;/a&amp;gt;&amp;lt;/p&amp;gt;</description>
</property>
<property name="forceSelection" type="boolean" deprecated="false" scope="instance" >
<description>데이터를 반드시 선택해야 하는 필수 여부</description>
</property>
<property name="separator" type="String" deprecated="false" scope="instance" >
<description>getValue나 getValue시 멀티 선택값의 구분자 문자열</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="setSelectedIndex" deprecated="false" scope="instance" >
<description><![CDATA[이 메소드는 LMultiCombo에서 지원 안한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[위치를 변경할 값]]></description>
</parameter>
</parameters>
</method>
<method name="findRowByDisplayValue" deprecated="false" scope="instance" >
<description><![CDATA[dislayField에 해당되는 값으로 row를 찾는다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="displayValue" type="Sring" deprecated="false" usage="required">
<description><![CDATA[찾고자하는 display값]]></description>
</parameter>
</parameters>
</method>
<method name="getDisplayValueByValue" deprecated="false" scope="instance" >
<description><![CDATA[sVal에 해당되는 값을 찾아서 리턴한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
<parameters>
<parameter name="items" type="Rui.util.LCollection" deprecated="false" usage="required">
<description><![CDATA[찾고자 하는 컬렉션 객체]]></description>
</parameter>
<parameter name="displayValue" type="Sring" deprecated="false" usage="required">
<description><![CDATA[찾고자하는 display값]]></description>
</parameter>
</parameters>
</method>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[값을 변경한다. 멀티로 선택할 경우에는 구분자 값(생성자 속성:separator)으로 처리해야 한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="o" type="String" deprecated="false" usage="required">
<description><![CDATA[반영할 값 문자]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.form.LPopupTextBox" deprecated="false"  superclass="Rui.ui.form.LTextBox" >
<description>TextBox에 팝업아이콘을 생성하는 PopupTextBox (beta)
 LTextBox의 모든 속성이 적용되지 않는다. (mask)
 LMonthBox</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>TextBox에 팝업아이콘을 생성하는 PopupTextBox (beta)
 LTextBox의 모든 속성이 적용되지 않는다. (mask)
 LMonthBox</description>
<parameters>
<parameter name="The" type="Object" deprecated="false" usage="instance">
<description><![CDATA[intial LPopupTextBox.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="iconWidth" type="int" deprecated="false" scope="instance" >
<description>Picker Icon의 width
 기본값은 20이며 CSS에서 icon width를 변경할 경우 이 값도 동일하게 변경하여야 합니다.</description>
</property>
<property name="iconMarginLeft" type="int" deprecated="false" scope="instance" >
<description>input과 Picker Icon간의 간격</description>
</property>
<property name="editable" type="boolean" deprecated="false" scope="instance" >
<description>input박스에 키 입력이 가능한지 여부, 변경이 불가능한 읽기 전용 속성은 LUIComponent에 있는 disabled로 처리</description>
</property>
<property name="useHiddenValue" type="boolean" deprecated="false" scope="instance" >
<description>내부에 hidden input 태그를 생성하여 출력용 필드와 구분하여 처리할지 여부를 결정한다.</description>
</property>
<property name="enterToPopup" type="boolean" deprecated="false" scope="instance" >
<description>엔터를 치면 popup 이벤트가 발생한다.</description>
</property>
<property name="picker" type="boolean" deprecated="false" scope="instance" >
<description>팝업 아이콘 표시 여부</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="popup" deprecated="false">
<description><![CDATA[
popup 메소드가 호출되면 수행하는 이벤트
]]></description>
</event>
</events>
<methods>
<method name="setValue" deprecated="false" scope="instance" >
<description><![CDATA[값을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="o" type="String" deprecated="false" usage="required">
<description><![CDATA[반영할 값]]></description>
</parameter>
</parameters>
</method>
<method name="setDisplayValue" deprecated="false" scope="instance" >
<description><![CDATA[출력객체에 내용을 변경한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="o" type="String" deprecated="false" usage="required">
<description><![CDATA[출력객체에 내용을 변경할 값]]></description>
</parameter>
</parameters>
</method>
<method name="getValue" deprecated="false" scope="instance" >
<description><![CDATA[현재 값을 리턴]]></description>
<return-types>
<return-type type="String" />
<return-description><![CDATA[결과값]]></return-description>
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LEditButtonColumn" deprecated="true"  superclass="Rui.ui.grid.LTriggerColumn" >
<description>button의 code값과 display값을 분리하여 처리하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>button의 code값과 display값을 분리하여 처리하는 객체</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Object literal of definitions.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
</methods>
</class>
<class type="Rui.ui.grid.LExpandableView" deprecated="false"  superclass="Rui.ui.grid.LGridView" >
<description>Table태그를 사용한 rendering하는 grid</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Table태그를 사용한 rendering하는 grid</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LExpandableView.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="rowRenderer" type="Function" deprecated="false" scope="instance" >
<description>expandable에 단순히 내용만 출력하는 function. 리턴값을 바로 하단에 출력한다.
 function의 파라미터 : row, record, 리턴형은 문자</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="expand" deprecated="false">
<description><![CDATA[
expand 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="expandableTarget" type="HtmlElement" deprecated="false" usage="instance">
<description><![CDATA[그리드안에 target되는 dom객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row 아이디]]></description>
</parameter>
<parameter name="isFirst" type="boolean" deprecated="false" usage="instance">
<description><![CDATA[처음 펼쳐졌는지 여부]]></description>
</parameter>
</parameters>
</event>
<event name="collapse" deprecated="false">
<description><![CDATA[
collapse 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="expandableTarget" type="HtmlElement" deprecated="false" usage="instance">
<description><![CDATA[그리드안에 target되는 dom객체]]></description>
</parameter>
<parameter name="row" type="int" deprecated="false" usage="instance">
<description><![CDATA[row 아이디]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="hasExpand" deprecated="false" scope="instance" >
<description><![CDATA[row의 expand 속성 여부]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[현재행 번호]]></description>
</parameter>
</parameters>
</method>
<method name="setExpand" deprecated="false" scope="instance" >
<description><![CDATA[row의 expand 속성 설정]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[현재행 번호]]></description>
</parameter>
<parameter name="isExpand" type="boolean" deprecated="false" usage="required">
<description><![CDATA[expand 여부]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LEditButtonColumn" deprecated="false"  superclass="Rui.ui.grid.LTriggerColumn" >
<description>button의 code값과 display값을 분리하여 처리하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>button의 code값과 display값을 분리하여 처리하는 객체</description>
<parameters>
<parameter name="oConfigs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Object literal of definitions.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
</methods>
</class>
<class type="Rui.ui.grid.LColumnModel" deprecated="false" >
<description>그리드에 출력할 LColumn들의 집합을 관리하는 객체로 LColumn의 전체 제어에 해당되는 기능을 가지고 있다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드에 출력할 LColumn들의 집합을 관리하는 객체로 LColumn의 전체 제어에 해당되는 기능을 가지고 있다.</description>
<parameters>
<parameter name="oConfigs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[생성자 config 객체]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="showStaticColumn" type="boolean" deprecated="false" scope="instance" >
<description>엑셀 columnModel을 생성할 때 static column도 생성할지 여부</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="createExcelColumnModel" deprecated="false" scope="instance" >
<description><![CDATA[그리드를 엑셀 저장하기 위한 columnModel을 리턴한다.]]></description>
<return-types>
<return-type type="Rui.ui.grid.LColumnModel" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LGridPanel" deprecated="false"  superclass="Rui.ui.LUIComponent" >
<description>그리드를 출력하는 LGridPanel</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드를 출력하는 LGridPanel</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LGridPanel.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<methods>
<method name="saveExcel" deprecated="false" scope="instance" >
<description><![CDATA[그리드를 엑셀 파일로 저장한다
 config.js에 [$.ext.grid.excelDownLoadUrl] 경로의 값이 있어야함.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="fileName" type="String" deprecated="false" usage="required">
<description><![CDATA[저장할 파일명]]></description>
</parameter>
<parameter name="config" type="Object" deprecated="false" usage="required">
<description><![CDATA[[optional] 저장할 컬럼 정보를 가지는 컬럼모델 {ColumnModel: 엑셀 포멧을 정의할 새로운 컬럼 모델, url: 서버 주소, useXmlExcel: Xml 포멧, useJsonExcel, markedOnly: marked된 row만 다운로드(단, 셀병합제외 기능만 지원) }]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.uigrid..LGridSearchDialog" deprecated="false" >
<description>그리드에서 컬럼에 대한 데이터 검색 기능</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드에서 컬럼에 대한 데이터 검색 기능</description>
</constructor>
</constructors>
</class>
<class type="Rui.uigrid..LGridStatusBar" deprecated="false" >
<description>그리드의 데이터 처리 성능을 출력하는 bar로 샘플에서만 사용한다.</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드의 데이터 처리 성능을 출력하는 bar로 샘플에서만 사용한다.</description>
</constructor>
</constructors>
</class>
<class type="Rui.ui.grid.LGridView" deprecated="false"  superclass="Rui.ui.grid.LBufferGridView" >
<description>그리드의 데이터를 출력하는 LGridView (트리그리드, 소계, 합계 지원 안함.)</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드의 데이터를 출력하는 LGridView (트리그리드, 소계, 합계 지원 안함.)</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LGridView.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="fitContentHeight" type="boolean" deprecated="false" scope="instance" >
<description>그리드의 row가 출력되는 만큼 자동으로 height가 넓어지는 기능</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="showRow" deprecated="false" scope="instance" >
<description><![CDATA[그리드의 row행을 출력한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[출력할 row행 index]]></description>
</parameter>
</parameters>
</method>
<method name="hideRow" deprecated="false" scope="instance" >
<description><![CDATA[그리드의 row행을 숨긴다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[출력할 row행 index]]></description>
</parameter>
</parameters>
</method>
<method name="isShowRow" deprecated="false" scope="instance" >
<description><![CDATA[그리드의 row행을 출력여부를 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
<return-description><![CDATA[출력 여부]]></return-description>
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[출력할 row행 index]]></description>
</parameter>
</parameters>
</method>
<method name="toggleShowRow" deprecated="false" scope="instance" >
<description><![CDATA[그리드의 row행을 출력되어 있으면 숨기고 숨긴상태면 출력한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[출력할 row행 index]]></description>
</parameter>
</parameters>
</method>
<method name="createFormValues" deprecated="false" scope="instance" >
<description><![CDATA[그리드 내부에 form submit을 위한 hidden input 태그를 생성한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="clearFormValues" deprecated="false" scope="instance" >
<description><![CDATA[그리드 내부에 생성한 form hidden input 태그를 삭제한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LHeaderContextMenu" deprecated="false" >
<description>그리드의 기본 Context menu를 생성하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드의 기본 Context menu를 생성하는 객체</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LBufferGridView.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<events>
<event name="renderMenuRowEvent" deprecated="false">
<description><![CDATA[
renderMenuRow 메소드가 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this 객체]]></description>
</parameter>
<parameter name="column" type="Rui.util.LColumn" deprecated="false" usage="instance">
<description><![CDATA[column 객체]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LSummary" deprecated="false" >
<description>LSummary</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LSummary</description>
<parameters>
<parameter name="oConfigs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Object literal of definitions.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<methods>
<method name="getRenderBody" deprecated="false" scope="instance" >
<description><![CDATA[body html을 생성하여 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="getSummaryCalculatorCellValue" deprecated="false" scope="instance" >
<description><![CDATA[body의 cell의 value를 생성하여 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
<method name="getSummaryRenderCellValue" deprecated="false" scope="instance" >
<description><![CDATA[body의 cell의 value를 생성하여 리턴하는 메소드]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LTableView" deprecated="false"  superclass="Rui.ui.grid.LGridView" >
<description>Table태그를 사용한 rendering하는 grid</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>Table태그를 사용한 rendering하는 grid</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LTableView.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="syncFocusRow" deprecated="false" scope="instance" >
<description><![CDATA[focus된 row에 focusEl 이동하기]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row index]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="required">
<description><![CDATA[column index]]></description>
</parameter>
</parameters>
</method>
<method name="hasRows" deprecated="false" scope="instance" >
<description><![CDATA[Row가 존재하는지 여부 리턴]]></description>
<return-types>
<return-type type="Boolean" />
</return-types>
</method>
<method name="getRows" deprecated="false" scope="instance" >
<description><![CDATA[Row의 Dom Array return]]></description>
<return-types>
<return-type type="Array" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LTotalSummary" deprecated="false"  superclass="Rui.util.LPlugin" >
<description>LTotalSummary 그리드의 합계를 출력하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>LTotalSummary 그리드의 합계를 출력하는 객체</description>
<parameters>
<parameter name="oConfigs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[Object literal of definitions.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="gridView" type="Rui.ui.grid.LGridView" deprecated="false" scope="instance" >
<description>LGridView 객체</description>
</property>
<property name="renderSummaryTime" type="int" deprecated="false" scope="instance" >
<description>토탈 서머리를 몇초간격으로 랜더링할지 시간(밀리세컨드)</description>
</property>
</configs>
<properties>
</properties>
<events>
<event name="renderTotal" deprecated="false">
<description><![CDATA[
renderTotal 기능이 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
</parameters>
</event>
<event name="renderTotalCell" deprecated="false">
<description><![CDATA[
renderTotalCell 기능이 호출되면 수행하는 이벤트
]]></description>
<parameters>
<parameter name="target" type="Object" deprecated="false" usage="instance">
<description><![CDATA[this객체]]></description>
</parameter>
<parameter name="col" type="int" deprecated="false" usage="instance">
<description><![CDATA[col 값]]></description>
</parameter>
<parameter name="value" type="String" deprecated="false" usage="instance">
<description><![CDATA[생성할 결과 html 문자]]></description>
</parameter>
</parameters>
</event>
</events>
<methods>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[객체를 destroy한다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.ui.grid.LTreeGridSelectionModel" deprecated="false"  superclass="Rui.ui.grid.LSelectionModel" >
<description>그리드에서 cell를 선택시 cell의 흐름 제어를 하는 객체</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>그리드에서 cell를 선택시 cell의 흐름 제어를 하는 객체</description>
</constructor>
</constructors>
<methods>
</methods>
</class>
<class type="Rui.ui.grid.LTreeGridView" deprecated="false"  superclass="Rui.ui.grid.LBufferGridView" >
<description>트리 기능을 지원하는 그리드</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>트리 기능을 지원하는 그리드</description>
<parameters>
<parameter name="config" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LTreeGridView.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<configs>
<property name="treeColumnId" type="String" deprecated="false" scope="instance" >
<description>트리그리드의 펼침과 닫힘 이미지를 출력할 컬럼명</description>
</property>
<property name="defaultOpenDepth" type="int" deprecated="false" scope="instance" >
<description>최초에 펼처질 depth를 결정한다.</description>
</property>
<property name="fields" type="Object" deprecated="false" scope="instance" >
<description>트리에서 사용하는 필드 정보를 정의한다.</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="expand" deprecated="false" scope="instance" >
<description><![CDATA[트리 그리드에서 row 위치를 펼친다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치]]></description>
</parameter>
</parameters>
</method>
<method name="collapse" deprecated="false" scope="instance" >
<description><![CDATA[트리 그리드에서 row 위치를 닫는다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치]]></description>
</parameter>
</parameters>
</method>
<method name="isExpand" deprecated="false" scope="instance" >
<description><![CDATA[트리 그리드에서 row 위치가 펼쳐 있으면 true를 그렇지 않으면 false 리턴한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치]]></description>
</parameter>
</parameters>
</method>
<method name="toggle" deprecated="false" scope="instance" >
<description><![CDATA[트리 그리드에서 row 위치가 펼쳐 있으면 닫고 닫쳐 있으면 펼친다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치]]></description>
</parameter>
</parameters>
</method>
<method name="expandDepth" deprecated="false" scope="instance" >
<description><![CDATA[depth값까지 모든 트리정보를 펼친다.]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="depth" type="int" deprecated="false" usage="required">
<description><![CDATA[depth 펼치고자 하는 depth값]]></description>
</parameter>
</parameters>
</method>
<method name="" deprecated="false" scope="instance" >
<description><![CDATA[dom에서 row index return
//         *]]></description>
<return-types>
<return-type type="int" />
<return-description><![CDATA[* @return {int}]]></return-description>
</return-types>
<parameters>
<parameter name="dom" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[dom]]></description>
</parameter>
<parameter name="y" type="int" deprecated="false" usage="required">
<description><![CDATA[pageY]]></description>
</parameter>
</parameters>
</method>
<method name="getParentRow" deprecated="false" scope="instance" >
<description><![CDATA[row에 부모의 row를 리턴한다. 부모가 없으면 -1을 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치값]]></description>
</parameter>
</parameters>
</method>
<method name="getPrevSiblingRow" deprecated="false" scope="instance" >
<description><![CDATA[row에 해당되는 같은 레벨의 이전 row 위치를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치값]]></description>
</parameter>
</parameters>
</method>
<method name="getNextSiblingRow" deprecated="false" scope="instance" >
<description><![CDATA[row에 해당되는 같은 레벨의 다음 row 위치를 리턴한다.]]></description>
<return-types>
<return-type type="int" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치값]]></description>
</parameter>
</parameters>
</method>
<method name="getChildRows" deprecated="false" scope="instance" >
<description><![CDATA[row에 해당되는 자식 레벨의 1 depth 아래의 row 위치들을 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치값]]></description>
</parameter>
</parameters>
</method>
<method name="getAllChildRows" deprecated="false" scope="instance" >
<description><![CDATA[row에 해당되는 자식 레벨의 모든 row 위치들을 리턴한다.]]></description>
<return-types>
<return-type type="Array" />
</return-types>
<parameters>
<parameter name="row" type="int" deprecated="false" usage="required">
<description><![CDATA[row 위치값]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LMoveMonitor" deprecated="false" >
<description>특정 브라우져에서만 작동하는 onmove 이벤트를 타이머로 구현한 클래스</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>특정 브라우져에서만 작동하는 onmove 이벤트를 타이머로 구현한 클래스</description>
<parameters>
<parameter name="oConfig" type="Object" deprecated="false" usage="instance">
<description><![CDATA[The intial LMoveMonitor.]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<methods>
<method name="add" deprecated="false" scope="instance" >
<description><![CDATA[모니터할 dom 객체를 추가하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dom" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[모니터할 dom 객체]]></description>
</parameter>
</parameters>
</method>
<method name="remove" deprecated="false" scope="instance" >
<description><![CDATA[등록된 dom 객체를 삭제하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="dom" type="HTMLElement" deprecated="false" usage="required">
<description><![CDATA[삭제할 dom 객체]]></description>
</parameter>
</parameters>
</method>
</methods>
</class>
<class type="Rui.util.LNodeCollection" deprecated="false"  superclass="Rui.util.LCollection" >
<description>LNodeCollection utility.</description>
<constructors>
<constructor scope="static" deprecated="false">
<description>LNodeCollection utility.</description>
</constructor>
</constructors>
<configs>
<property name="id" type="String" deprecated="false" scope="instance" >
<description>id 아이디</description>
</property>
<property name="parentId" type="String" deprecated="false" scope="instance" >
<description>parentId 아이디</description>
</property>
<property name="rootValue" type="int" deprecated="false" scope="instance" >
<description>root의 값의 비교 기준값(null인지? 0인지? undefined인지?)</description>
</property>
</configs>
<properties>
</properties>
<methods>
<method name="updateParentId" deprecated="false" scope="instance" >
<description><![CDATA[item을 node를 수정하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="oldParentId" type="String" deprecated="false" usage="required">
<description><![CDATA[이전 부모키 값]]></description>
</parameter>
<parameter name="item" type="Object" deprecated="false" usage="required">
<description><![CDATA[입력할 객체]]></description>
</parameter>
</parameters>
</method>
<method name="insert" deprecated="false" scope="instance" >
<description><![CDATA[item을 idx위치에 삽입하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="idx" type="int" deprecated="false" usage="required">
<description><![CDATA[삽입할 위치]]></description>
</parameter>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[키]]></description>
</parameter>
<parameter name="item" type="Object" deprecated="false" usage="required">
<description><![CDATA[입력할 객체]]></description>
</parameter>
</parameters>
</method>
<method name="add" deprecated="false" scope="instance" >
<description><![CDATA[item을 추가하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[키]]></description>
</parameter>
<parameter name="item" type="Object" deprecated="false" usage="required">
<description><![CDATA[입력할 객체]]></description>
</parameter>
</parameters>
</method>
<method name="remove" deprecated="false" scope="instance" >
<description><![CDATA[item을 삭제하는 메소드]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[키]]></description>
</parameter>
</parameters>
</method>
<method name="set" deprecated="false" scope="instance" >
<description><![CDATA[key에 해당하는 item을 변경하는 메소드]]></description>
<return-types>
<return-type type="Object" />
</return-types>
<parameters>
<parameter name="key" type="String" deprecated="false" usage="required">
<description><![CDATA[키]]></description>
</parameter>
<parameter name="item" type="Object" deprecated="false" usage="required">
<description><![CDATA[객체]]></description>
</parameter>
</parameters>
</method>
<method name="clear" deprecated="false" scope="instance" >
<description><![CDATA[모두 초기화 하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
</method>
<method name="nodeSort" deprecated="false" scope="instance" >
<description><![CDATA[func에 해당되는 값으로 같은 자식 레코드끼리 정렬하는 메소드]]></description>
<return-types>
<return-type type="void" />
</return-types>
<parameters>
<parameter name="func" type="Function" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="dir" type="String" deprecated="false" usage="required">
<description><![CDATA[정렬 방향]]></description>
</parameter>
</parameters>
</method>
<method name="nodeQuery" deprecated="false" scope="instance" >
<description><![CDATA[func에 해당되는 값을 LNodeCollection으로 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.util.LCollection" />
</return-types>
<parameters>
<parameter name="func" type="Function" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
<parameter name="scope" type="Object" deprecated="false" usage="required">
<description><![CDATA[Array 배열]]></description>
</parameter>
</parameters>
</method>
<method name="clone" deprecated="false" scope="instance" >
<description><![CDATA[LNodeCollection을 복제하여 리턴하는 메소드]]></description>
<return-types>
<return-type type="Rui.util.LNodeCollection" />
</return-types>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[객체의 toString]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
<class type="Rui.util.LResize" deprecated="false"  superclass="Rui.LElement" >
<description>&amp;lt;p&amp;gt;사이즈 조절 가능한 element를 만든다.&amp;lt;/p&amp;gt;</description>
<constructors>
<constructor scope="instance" deprecated="false">
<description>&amp;lt;p&amp;gt;사이즈 조절 가능한 element를 만든다.&amp;lt;/p&amp;gt;</description>
<parameters>
<parameter name="el" type="String/HTMLElement" deprecated="false" usage="instance">
<description><![CDATA[리사이즈 가능하게 만들 element]]></description>
</parameter>
<parameter name="attrs" type="Object" deprecated="false" usage="instance">
<description><![CDATA[설정 parameter를 포함하는 Object liternal]]></description>
</parameter>
</parameters>
</constructor>
</constructors>
<properties>
</properties>
<events>
<event name="dragEvent" deprecated="false">
<description><![CDATA[
&amp;lt;a href="Rui.dd.LDragDrop.html"&amp;gt;Rui.dd.LDragDrop&amp;lt;/a&amp;gt; dragEvent가 드래그 가능한 설정 옵션에 대해 발생되었을때 발생하는 event
]]></description>
</event>
<event name="startResize" deprecated="false">
<description><![CDATA[
resize 액션이 시작되었을때 발생하는 event
]]></description>
</event>
<event name="endResize" deprecated="false">
<description><![CDATA[
드래그 인스턴스로부터의 mouseUp event가 발생했을때 발생하는 event
]]></description>
</event>
<event name="resize" deprecated="false">
<description><![CDATA[
모든 element 리사이즈에 발생하는 event(proxy 설정 세팅에 사용될때 오직 한번만 발생함)
]]></description>
</event>
<event name="beforeResize" deprecated="false">
<description><![CDATA[
모든 element 리사이즈 이전 및 사이즈 계산 후에 발생하며, 리사이즈가 중단될때 false를 반환하는 event
]]></description>
</event>
<event name="proxyResize" deprecated="false">
<description><![CDATA[
모든 proxy 리사이즈에 발생하는 event(proxy 설정 세팅에 사용될때만 발생함)
]]></description>
</event>
</events>
<methods>
<method name="getResizeById" deprecated="false" scope="static" >
<description><![CDATA[resize object와 연관된 element의 HTML id로 resize object를 가져온다.]]></description>
<return-types>
<return-type type="Object" />
<return-description><![CDATA[The Resize Object]]></return-description>
</return-types>
</method>
<method name="lock" deprecated="false" scope="instance" >
<description><![CDATA[리사이즈 될 수 없도록 리사이즈를 locking 한다.]]></description>
<return-types>
<return-type type="Rui.util.LResize" />
<return-description><![CDATA[href="Rui.util.LResize.html">Rui.util.LResize</a>} 리사이즈 인스턴스]]></return-description>
</return-types>
<parameters>
<parameter name="dd" type="boolean" deprecated="false" usage="required">
<description><![CDATA[드래그 가능하도록 설정되어 있는 경우에도 역시 lock 됨]]></description>
</parameter>
</parameters>
</method>
<method name="unlock" deprecated="false" scope="instance" >
<description><![CDATA[리사이즈 될 수 있도록 unlocking 한다.]]></description>
<return-types>
<return-type type="Rui.util.LResize" />
<return-description><![CDATA[href="Rui.util.LResize.html">Rui.util.LResize</a>} 리사이즈 인스턴스]]></return-description>
</return-types>
<parameters>
<parameter name="dd" type="boolean" deprecated="false" usage="required">
<description><![CDATA[드래그 가능하도록 설정되어 있는 경우에도 역시 unlock 됨]]></description>
</parameter>
</parameters>
</method>
<method name="isLocked" deprecated="false" scope="instance" >
<description><![CDATA[리사이즈 인스턴스의 lock 상태를 체크한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="reset" deprecated="false" scope="instance" >
<description><![CDATA[start 상태가 되도록 element를 리셋한다.]]></description>
<return-types>
<return-type type="Rui.util.LResize" />
<return-description><![CDATA[href="Rui.util.LResize.html">Rui.util.LResize</a>} 리사이즈 인스턴스]]></return-description>
</return-types>
</method>
<method name="getProxyEl." deprecated="false" scope="instance" >
<description><![CDATA[proxy에 대한 HTML 참조를 가져오며, proxy가 아닌 경우 null을 반환한다]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[The proxy element]]></return-description>
</return-types>
</method>
<method name="getWrapEl" deprecated="false" scope="instance" >
<description><![CDATA[wrap element에 대한 HTML 참조를 가져오며, warp되어 있지 않다면, 현재 element를 반환한다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[The wrap element]]></return-description>
</return-types>
</method>
<method name="getStatusEl" deprecated="false" scope="instance" >
<description><![CDATA[status element에 대한 HTML 참조를 가져온다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[The status element]]></return-description>
</return-types>
</method>
<method name="getActiveHandleEl" deprecated="false" scope="instance" >
<description><![CDATA[현재 활성화된 resize handle에 대한 HTML 참조를 가져온다.]]></description>
<return-types>
<return-type type="HTMLElement" />
<return-description><![CDATA[활성화된 handle element]]></return-description>
</return-types>
</method>
<method name="isActive" deprecated="false" scope="instance" >
<description><![CDATA[리사이즈 작업이 현재 element에 활성화 되어 있는지에 따라 true나 false를 반환한다.]]></description>
<return-types>
<return-type type="boolean" />
</return-types>
</method>
<method name="destroy" deprecated="false" scope="instance" >
<description><![CDATA[resize object와 그것의 모든 element와 listner들을 없앤다.]]></description>
</method>
<method name="toString" deprecated="false" scope="instance" >
<description><![CDATA[Resize object를 표한하는 문자열을 반환한다.]]></description>
<return-types>
<return-type type="String" />
</return-types>
</method>
</methods>
</class>
</javascript>
