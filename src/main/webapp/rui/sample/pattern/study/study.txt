1. 검색 영역 콤보 생성
    - 속성
    id: 'centerCode',
    applyTo: 'centerCode',
    displayField: 'name'
    valueField: 'code',
    url: '/rui/sample/pattern/study/data/retrieveCenterList.rui'

    
2. center 데이터셋 선언 (/rui/tools/support/converterToRui.jsp 활용)
    - 속성
    id: 'centerDataSet'
    url: '/rui/sample/pattern/study/data/retrieveCenterList.rui'

3. center 그리드 컬럼 모델 선언
    - 컬럼 모델의 code의 editor를 LTextBox로 선언
    - 컬럼 속성
      중앙 정렬 : code, name, chief
      컬럼 너비 변경 width 150으로 변경 : name, address
    - 그리드 헤더 라벨 이름 적용
      code : '센터코드'
      name : '센터'
      chief : '센터장'
      address : '주소'
      phone: '전화번호'

    그리드 출력 상태 확인

4. center 데이터셋 로딩
    - 속성
    params: var params = Rui.util.LDom.getFormValues('LblockSearch');
    url : '/rui/sample/pattern/study/data/retrieveCenterList.rui'
    크롬에서 서버에 파라미터 전송상태 확인 하는 방법

5. LBind 연결
    - 속성
    groupId: 'LblockDetail01'
    dataSet: centerDataSet
    bindInfo 속성에 ctrlId의 dom id 맞추기

6. region 데이터셋 선언 (/rui/tools/support/converterToRui.jsp 활용)
    - 속성
    id: 'regionDataSet'
    url: '/rui/sample/pattern/study/data/retrieveRegionList.rui'

7. region 그리드 컬럼 모델 선언
    - 컬럼 모델 변경
      code필드 제거 (center 데이터와 연동되므로 출력 필요 없음)
      regionCode 필드의 editor LTextBox로 변경
    - 컬럼 속성
    컬럼 너비 변경 width 200으로 변경 : chief, address
    - 그리드 헤더 라벨 이름 적용
      regionCode: '지역코드'
      name: '지역'
      chief: '사무소장'
      address: '주소'

    그리드 출력 상태 확인

8. region 데이터셋 로딩
    - center 데이터셋의 rowPosChanged 이벤트로 region 데이터셋 로딩
    - 요구사항
      center code 필드값에 대한 조건으로 region 데이터셋 로딩하기
      center 데이터셋의 현재 row가 신규(insert)건이거나 row 위치가 0 보다 작으면 region 데이터셋의 데이터 초기화

        centerDataSet.on('rowPosChanged', function(e) {
            if(e.row >= 0) {
                if(centerDataSet.isRowInserted(e.row)) {
                    regionDataSet.clearData();
                } else {
                    var params = centerDataSet.getAt(e.row).getValues();
                    regionDataSet.load({
                        url: './data/retrieveRegionList.rui',
                        params: params
                    });
                }
            } else {
                regionDataSet.clearData();
            }
        });


9. 버튼 이벤트에 따른 기능 구현

10. 데이터셋 저장
    - 속성
    dataSets: [ centerDataSet, regionDataSet ]
    url: '/rui/sample/pattern/study/data/cudCenterRegion.rui'

11. 유효성 체크  (/rui/tools/support/converterToRui.jsp 활용)
    - center 데이터셋과 region 데이터셋의 유효성 검사
    - LValidatorManager의 validateDataSet 메소드 사용
    
12. 저장 완료 메시지 출력

13. 그리드 및 폼 편집 가능 불가능 설정
    - Rui의 form 객체는 disable() 메소드
    - Dom 객체는 LElement의 disable() 메소드 
    - 그리드는 renderer의 p 속성 사용
    - 동적으로 편집 가능/불가능 변경은 LGridPanel의 setCellConfig 메소드 사용
    
    
14. 더 해볼수 있는 기능

    - 화면이 모두 랜더링 된 후에 자동으로 데이터를 조회하는 기능 추가
    - centerGrid의 centerCode 값은 행 추가시에만 편집이 가능하고, 수정시엔 수정할 수 없도록 편집 가능여부 변경
    - regionGrid에 checkbox mark 기능을 추가하여 한번에 여러개의 데이터를 삭제할 수 있는 기능 추가
    - regionGrid의 데이터를 수정한 경우 centerGrid의 행을 이동할 수 없 도록 제한하는 기능 추가
    - bootstrap 사용으로 전환

