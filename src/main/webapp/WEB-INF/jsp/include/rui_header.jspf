<%@ page language="java" session="false" pageEncoding="utf-8" contentType="text/html; charset=utf-8"%>
<%@ page
  import="devonframe.util.HistorialWatch"
  import="java.util.HashMap"
  import="devonframe.util.NullUtil"
  import="java.util.Map"
  import="java.util.List"
  import="java.util.ArrayList"
  import="com.lghausys.eam.EAMUtil"
  import="com.lghausys.eam.domain.LogVO"
  import="com.lghausys.eam.exception.EAMException"
  import="org.springframework.web.context.WebApplicationContext"
  import="org.springframework.web.context.support.WebApplicationContextUtils"
  import="org.springframework.web.servlet.FrameworkServlet"
  import="devonframe.configuration.ConfigService"
%>
<% //[EAM추가] - 위의 import부분 devonframe.util.NullUtil 부터 ~ com.lghausys.eam.exception.EAMException 까지 %>

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="Tag" uri="http://www.dev-on.com/Tag" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="spring" uri="http://www.springframework.org/tags"%>

<%
    response.setHeader("Pragma", "No-cache");
    response.setDateHeader("Expires", -1);
    response.setHeader("Cache-Control", "no-cache");

    pageContext.setAttribute("nl", "\n");
    pageContext.setAttribute("crlf", "\r\n");
    pageContext.setAttribute("blank", " ");

    String contextPath = request.getContextPath();

    WebApplicationContext wac = WebApplicationContextUtils.getWebApplicationContext(pageContext.getServletContext(), FrameworkServlet.SERVLET_CONTEXT_PREFIX + "DispatcherServlet");
    ConfigService configService = (ConfigService) wac.getBean("configService");

    if ("/".equals(contextPath)) {
        contextPath = "";
    }

    String uploadPath       = contextPath + "/resource/fileupload";
    String imagePath        = contextPath + "/resource/web/images";
    String cssPath          = contextPath + "/resource/web/css";
    String scriptPath       = contextPath + "/resource/web/js";
    String jspPath          = contextPath + "/jsp";
    String ruiPathJs        = contextPath + "/rui/js";
    String ruiPathCss       = contextPath + "/rui/resources";
    String ruiPathPlugins   = contextPath + "/rui/plugins";
    String newImagePath     = contextPath + "/resource/images";
    String namoPath         = contextPath + "/namo";

    //[20240409.siseo]시스템 환경설정 title에 보여주기 추가
    String serverEnv = configService.getString("serverEnv");
    //System.out.println("[serverEnv]"+serverEnv);
    String serverEnvNm = "";
    try {
        serverEnvNm = NullUtil.nvl(serverEnv, "").toUpperCase();
        if ((serverEnvNm.equals("null") || serverEnvNm.equals("") || serverEnvNm.equals("PROD")) && !(serverEnvNm.toUpperCase().indexOf("LOCAL")>-1)) {
            serverEnvNm = "";
        } else {
            serverEnvNm = serverEnv;
        }
    } catch (Exception e) {
        serverEnvNm = ""+e.getMessage();
    }
    String documentTitle = serverEnvNm + "  :::  연구정보통합시스템(IRIS)  :::  ";


    String lghausysPath = configService.getString("lghausysPath");
    String lghausysReportPath = configService.getString("lghausysReportPath");

    HistorialWatch historialWatch = (HistorialWatch)request.getAttribute(iris.web.system.base.Constants.SERVLET_STOPWATCH_KEY);

    if (historialWatch == null) {
        historialWatch = new HistorialWatch();
    }

    historialWatch.tick("Processing Jsp Begin");

    /* 그리드내 수정가능한 셀 색상지정 : 한민호 : 2010-05-19 */
    String edCellColor = "#C8FFB5";

    HttpSession session = null;
    session = request.getSession(false);
    HashMap menuInfo    = null;
    String topMenuNm     = "";
    String supiMenuNm     = "";
    String menuNm         = "";
    String authScnCd     = "";

    if(request.getSession() != null){
        session = request.getSession(false);
        if(session.getAttribute("menuInfoSession") != null) {
            menuInfo = (HashMap)session.getAttribute("menuInfoSession");

            topMenuNm     = menuInfo.get("topMenuNm").toString();
            supiMenuNm     = menuInfo.get("supiMenuNm").toString();
            menuNm         = menuInfo.get("menuNm").toString();
            authScnCd     = menuInfo.get("authScnCd").toString();

        }
    }

    //[EAM추가] - 메뉴 권한 체크 및 시스템 액세스 로그 생성 Start ======================================

    //에러발생 시 리턴되는 URL정의(로그인 후 최초페이지가 Default)
    final String RET_URL = request.getContextPath() + "/index.do";
    try {
        HttpSession sess = request.getSession(false);
        if(sess != null) {
            EAMUtil eamUtil = EAMUtil.getInstance();
            List eamMenuList = new ArrayList();    //EAM 시스템에서 허용된 메뉴URL 리스트
            boolean eamSystemCheck = false;    //EAM시스템 체크 대상 여부 (true : 체크대상o / false : 체크대상x)
            String alertMsg = "";

            //메뉴 ID가 존재하면 메뉴를 클릭 하여 들어온 것으로 처리
            String eamMenuId = "";
            if(!eamUtil.checkNull(request.getAttribute("data"))) {
                Map input = (Map)request.getAttribute("data");
                eamMenuId = eamUtil.nvlObj(input.get("menuId"), "");
            }

            String servletPath = "";
            if(!eamUtil.checkNull(request.getAttribute("javax.servlet.forward.request_uri"))) {    //null이 아니면
                servletPath = ((String)request.getAttribute("javax.servlet.forward.request_uri")).replace(request.getContextPath(), "");
            }

            if("".equals(eamMenuId) && !"/temp".equals(servletPath)) {    //메뉴ID가 존재하지 않는다면 강제 URL입력으로 간주하여 처리

                String queryString = eamUtil.nvl(request.getQueryString());
                String requestPath = (servletPath + (("".equals(queryString)) ? "" : "?"+queryString)).trim();

                if(!"".equals(requestPath)) {
                    List eamMenuAcceptList = null;
                    if(sess.getAttribute("eamMenuAcceptList") != null) {
                        eamMenuAcceptList = (List)sess.getAttribute("eamMenuAcceptList");
                    }

                    //EAM 시스템에서 존재하는 메뉴 URL 인지 체크
                    if(eamMenuAcceptList!=null && eamMenuAcceptList.size() > 0) {
                        for(int i=0; i<eamMenuAcceptList.size(); i++) {
                            String eamMenu = String.valueOf(eamMenuAcceptList.get(i));
                            if("".equals(eamMenu)) continue;
                            if(requestPath.equals(eamMenu)) {
                                eamSystemCheck = true;    //EAM시스템 체크대상o
                            }
                        }
                    }

                    if(eamSystemCheck && !eamUtil.checkNull(sess.getAttribute("irisSession"))) {
                        HashMap lsession = (HashMap)sess.getAttribute("irisSession");
                        String userSabun = eamUtil.nvl((String)lsession.get("_userSabun"), "");

                        Map reqData = new HashMap();
                        reqData.put("SYS_CD", "IRI");                        //시스템 코드
                        reqData.put("EMP_NO", userSabun);                    //사용자 사번
                        reqData.put("BACKDOOR_EMP_NO", "");                    //백도어 통한 접근시에만 입력
                        reqData.put("MENU_ID", "");                            //메뉴ID
                        reqData.put("MENU_PATH", requestPath);                //메뉴URL
                        reqData.put("IP_ADDRESS", eamUtil.nvl(eamUtil.getUserIp(request)));        //사용자IP
                        reqData.put("IP_ADDRESS_SVR", eamUtil.nvl(eamUtil.getServerIp()));        //서버IP

                        boolean errFlag = false;
                        try {
                            List list = eamUtil.eamCall("EAM_LOG", reqData);
                            if(list!=null && list.size()>0) {
                                LogVO logVO = (LogVO)list.get(0);
                                String retCd = logVO.getRetCd();
                                if(!"Y".equals(retCd)) {
                                    throw new EAMException(true, "MSG_ERR_MENU_NOAUTH");
                                }
                            }
                        }catch(EAMException ea) {
                            errFlag = true;
                            alertMsg = ea.getRemoveMessage();
                        }catch(Exception e) {
                            errFlag = true;
                            alertMsg = eamUtil.getDefaultAlertMessage();
                        }

                        java.lang.StringBuffer sb = new java.lang.StringBuffer("");
                        sb.append("<script>");
                        sb.append("alert('" + alertMsg + "');");
                        sb.append("top.location = '"+ RET_URL + "'");    //리턴페이지 처리(프레임 구조)
                        //sb.append("document.location.href='"+ RET_URL + "'");    //리턴페이지 처리(프레임 구조가 아닐 경우)
                        sb.append("</script>");
                        sb.append("</head>");
                        sb.append("</html>");
                        if(errFlag) {
                            out.write(sb.toString());
                            return;
                        }
                    }
                }
            }
        }
    }catch(Exception e) {}
    //[EAM추가] - 메뉴 권한 체크 및 시스템 액세스 로그 생성 End ======================================
%>

<meta http-equiv="X-UA-Compatible" content="IE=edge" />
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

<link rel="stylesheet" type="text/css" href="<%=ruiPathCss%>/rui.css" />
<!-- link rel="stylesheet" type="text/css" href="<%=ruiPathCss%>/ui_ie6.css" /-->
<link rel="stylesheet" type="text/css" href="<%=ruiPathCss%>/rui_skin_new.css" />
<link rel="stylesheet" type="text/css" href="<%=cssPath%>/common.css?ver=20240411" />
<link rel="stylesheet" type="text/css" href="<%=ruiPathPlugins%>/ui/LFrameDialog.css" />
<link rel="stylesheet" type="text/css" href="<%=ruiPathPlugins%>/ui/form/LPopupTextBox.css" />

<script type="text/javascript">
    var contextPath = "<%=contextPath%>";

    <%--// 뒤로가기 방지 [2024.04.04] 뒤로가기 허용
    window.history.forward(1);
     --%>
</script>

<!-- script type="text/javascript" src="<%=scriptPath%>/prototype.js"></script  -->
<script type="text/javascript" src="<%=ruiPathJs%>/rui_base.js"></script>
<script type="text/javascript" src="<%=ruiPathJs%>/rui_core.js"></script>
<script type="text/javascript" src="<%=ruiPathJs%>/rui_ui.js"></script>
<script type="text/javascript" src="<%=ruiPathJs%>/rui_form.js"></script>
<script type="text/javascript" src="<%=ruiPathJs%>/rui_grid.js"></script>
<script type="text/javascript" src="<%=ruiPathCss%>/rui_config.js"></script>
<script type="text/javascript" src="<%=ruiPathCss%>/rui_license.js"></script>
<script type="text/javascript" src="<%=ruiPathPlugins%>/ui/LFrameDialog.js"></script>
<script type="text/javascript" src="<%=ruiPathPlugins%>/ui/form/LPopupTextBox.js"></script>
<script type="text/javascript" src="<%=ruiPathPlugins%>/ui/grid/LGridView.js"></script><%-- excel download --%>
<script type="text/javascript" src="<%=ruiPathPlugins%>/ui/grid/LGridPanelExt.js"></script><%-- excel download --%>
<script type="text/javascript" src="<%=ruiPathPlugins%>/validate/LCustomValidator.js"></script><%-- rui Validator --%>


<script type="text/javascript" src="<%=scriptPath%>/jquery.js"></script>
<script type="text/javascript" src="<%=scriptPath%>/jquery.iframeResizer.min.js"></script>
<script type="text/javascript" src="<%=scriptPath%>/common.js"></script>
<script type="text/javascript" src="<%=scriptPath%>/commonFont.js"></script>

<script type="text/javascript" src="<%=scriptPath%>/nwins_common.js"></script>

<script type="text/javascript" src="<%=scriptPath%>/iris_common.js?ver=20240418"></script>
<script type="text/javascript" src="<%=scriptPath%>/javascript-aes.js"></script>
<script type="text/javascript" src="<%=namoPath%>/js/namo_scripteditor.js"></script>

<script type="text/javascript">
var fontParam = {"맑은 고딕" : "맑은 고딕","돋움" : "돋움","굴림" : "굴림","바탕" : "바탕","궁서" : "궁서","David" : "David","LG스마트체" : "LG스마트체", "LG스마트체2.0" : "LG스마트체2.0","MS PGothic" : "MS PGothic","New MingLiu" : "New MingLiu","Simplified Arabic" : "Simplified Arabic","simsun" : "simsun","Arial" : "Arial","Courier New" : "Courier New","Tahoma" : "Tahoma","Times New Roman" : "Times New Roman","Verdana" : "Verdana" };
    var _callback;
    var agent = navigator.userAgent.toLowerCase();
    var mPageNum='<c:out value="${inputData.pageNum}"/>';
    Rui.onReady(function() {

        /*******************
         * 변수 및 객체 선언
         *******************/
        // 사용자 조회 공통팝업 시작
        var _userSearchApply = function(){
            var frameWindow = this.getFrameWindow();        // Dialog 내부 Content에 접근할 때 사용할 수 있는 Dialog내 IFrame의 window 객체

            var userList = frameWindow.getSelectUser();

            _callback(userList);

            this.submit(true);
        };

        _userSearchDialog = new Rui.ui.LFrameDialog({
            id: '_userSearchDialog',
            title: '사용자 조회',
            width: 550,
            height: 400,
            modal: true,
            visible: false
        });

        var _userSearchDialogMulti = new Rui.ui.LFrameDialog({
            id: '_userSearchDialogMulti',
            title: '사용자 조회',
            width: 650,
            height: 600,
            modal: true,
            visible: false,
            buttons: [
                { text: '적용', handler: _userSearchApply, isDefault: true },
                { text: '닫기', handler: function(){
                    this.cancel();
                } }
            ]
        });

        _userSearchDialog.render(document.body);
        _userSearchDialogMulti.render(document.body);

        openUserSearchDialog = function(f, cnt, userIds, task, width, height) {
            _callback = f;

            if(cnt == 1) {
                if(stringNullChk(width) > 0) _userSearchDialog.setWidth(width);
                if(stringNullChk(height) > 0) _userSearchDialog.setHeight(height);

                _userSearchDialog.setUrl('<c:url value="/system/user/userSearchPopup.do?cnt=1&userIds=&task="/>' + task);
                _userSearchDialog.show();
            } else {
                if(stringNullChk(width) > 0) _userSearchDialogMulti.setWidth(width);
                if(stringNullChk(height) > 0) _userSearchDialogMulti.setHeight(height);

                _userSearchDialogMulti.setUrl('<c:url value="/system/user/userSearchPopup.do?cnt="/>' + cnt + '&userIds=' + userIds + '&task=' + task);
                _userSearchDialogMulti.show();
            }
        };

        openUserSearchNmDialog = function(f, userNm, width, height) {
            _callback = f;
            if(stringNullChk(width) > 0) _userSearchDialogMulti.setWidth(width);
            if(stringNullChk(height) > 0) _userSearchDialogMulti.setHeight(height);
            _userSearchDialog.setUrl('<c:url value="/system/user/userSearchPopup.do?cnt=1&userIds=&task="/>&userNm='+encodeURIComponent(userNm));
            _userSearchDialog.show();
        }

        //사용자 popup Dialog
        openUserSearchDialog2 = function(f, cnt, userIds, task) {
             var params = '?cnt=1&userIds=&task=' + task;
                var loadingUrl = '<c:url value="/system/user/userSearchPopup2.do"/>'+params;

                 var sFeatures = "dialogHeight: 600px; dialogWidth:544px";
                 if ( (navigator.appName == 'Netscape' && navigator.userAgent.search('Trident') != -1) || (agent.indexOf("msie") != -1) ) {
                 window.showModalDialog(loadingUrl, self, sFeatures);
              }else{
                alert("Internet Explorer browser인지 확인해 주세요");
             }
        };


        // 사용자 조회 공통팝업 끝

        // 부서 조회 공통팝업 시작
        _deptSearchDialog = new Rui.ui.LFrameDialog({
            id: '_deptSearchDialog',
            title: '부서 조회',
            width: 450,
            height: 325,
            modal: true,
            visible: false
        });

        _deptSearchDialog.render(document.body);

        openDeptSearchDialog = function(f, task) {
            _callback = f;

            _deptSearchDialog.setUrl('<c:url value="/system/dept/deptSearchPopup.do?task="/>' + task);
            _deptSearchDialog.show();
        };
        // 부서 조회 공통팝업 끝


        // WBS 코드 조회 공통팝업 시작
        _wbsCdSearchDialog = new Rui.ui.LFrameDialog({
            id: '_wbsCdSearchDialog',
            title: 'WBS 코드 조회',
            width: 1050,
            height: 600,
            modal: true,
            visible: false
        });

        _wbsCdSearchDialog.render(document.body);

        openWbsCdSearchDialog = function(f, deptYn) {
            _callback = f;

            _wbsCdSearchDialog.setUrl('<c:url value="/system/etc/wbsCdSearchPopup.do?deptYn="/>' + deptYn);
            _wbsCdSearchDialog.show();
        };
        // WBS 코드 조회 공통팝업 끝


        // 첨부파일 공통팝업 시작
        var _attachFileApply = function(){
            var frameWindow = _attachFileDialog.getFrameWindow();        // Dialog 내부 Content에 접근할 때 사용할 수 있는 Dialog내 IFrame의 window 객체

            var attachFileList = frameWindow.getAttachFileInfoList();

            _callback(attachFileList);

            this.submit(true);
        };

        var _attachFileApply2 = function(){
            var frameWindow = _attachFileDialog.getFrameWindow();        // Dialog 내부 Content에 접근할 때 사용할 수 있는 Dialog내 IFrame의 window 객체

            var attachFileList = frameWindow.getAttachFileInfoList();

              if(attachFileList != ''){
                  _callback(attachFileList);
              }

        };

        _attachFileDialog = new Rui.ui.LFrameDialog({
            id: '_attachFileDialog',
            title: '첨부파일',
            width: 440,
            height: 500,
            modal: true,
            visible: false,
            buttons: [
                { text: '적용', handler: _attachFileApply, isDefault: true },
                { text: '닫기', handler: function(){
                    this.cancel();
                } }
            ]
        });

        _attachFileDialog.on('cancel', function(e) {
            _attachFileApply2();
        });

        _attachFileDialog.render(document.body);

        openAttachFileDialog = function(f, attcFilId, policy, ext, openMode, title) {
            _callback = f;

            if(openMode == "R") {
                _attachFileDialog.setWidth(450);
                _attachFileDialog.setHeight(400);
                _attachFileDialog.setButtons();
            }

            var params = '?attcFilId=' + attcFilId + '&policy=' + policy + '&ext=' + ext + '&openMode=' + openMode;

            if(Rui.isEmpty(title) == false) {
                $('#_attachFileDialog_h').html(title);
            }
            _attachFileDialog.setUrl('<c:url value="/system/attach/attachFilePopup.do"/>' + params);
            _attachFileDialog.show();
        };

        openAttachFileDialog2 = function(f, attcFilId, policy, ext, openMode) {
            _callback = f;

            var params = '?attcFilId=' + attcFilId + '&policy=' + policy + '&ext=' + ext + '&openMode=' + openMode;
               var loadingUrl = '<c:url value="/system/attach/attachFilePopup2.do"/>'+params;

                var sFeatures = "dialogHeight: 500px; dialogWidth:430px";

                if ( (navigator.appName == 'Netscape' && navigator.userAgent.search('Trident') != -1) || (agent.indexOf("msie") != -1) ) {

                window.showModalDialog(loadingUrl, self, sFeatures);
                 }else{
             alert("Internet Explorer browser인지 확인해 주세요");
            }
//                var win =  window.open(loadingUrl ,'win' , 'modal=1,Height=450 , width=400');
//                win.focus();

           };
        openAttachFileDialog3 = function(f, attcFilId, policy, ext, openMode, title) {
            _callback = f;

            if(openMode == "R") {
                _attachFileDialog.setWidth(450);
                _attachFileDialog.setHeight(400);
                _attachFileDialog.setButtons();
            }

            var params = '?attcFilId=' + attcFilId + '&policy=' + policy + '&ext=' + ext + '&openMode=' + openMode;

            if(Rui.isEmpty(title) == false) {
                $('#_attachFileDialog_h').html(title);
            }
            _attachFileDialog.setUrl('<c:url value="/system/attach/attachFilePopup3.do"/>' + params);
            _attachFileDialog.show();
        };
    // 첨부파일 공통팝업 끝


    });

</script>